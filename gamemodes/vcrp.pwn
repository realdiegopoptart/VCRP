/* // TEXTDRAW INFORMATION //
	11 to 22: ID card
	23 to 33: Character customization
	34 to 38: Speedometer
	39: Footer textdraw
	62: House light
	63 to 64: Hunger and thirst (percent)
	65 to 66: Hunger and thirst (model icons)
	67 to 68: Armor
	69: GPS
*/

/*
 * MySQL plugin R39-6
 */

#define SSCANF_NO_NICE_FEATURES

#pragma dynamic 500000

// START INCLUDES //
#include <a_samp>
#include <a_mysql>
#include <foreach>
#include <easyDialog>
#include <eSelection>
#include <progress2>
#include <sscanf2>
#include <streamer>
#include <physics>
#include <izcmd>
#include <strtok>
#include <iplookup>
#include <iafk>
#include <antiadvertising>
#include <crashdetect>
#include <OPVD>
#include <a_http>
#include <profiler>
// END INCLUDES //

native IsValidVehicle(vehicleid);
native WP_Hash(buffer[], len, const str[]);

#include "./modular/variables.pwn"
#include "./modular/macros.pwn"

#include "./modular/map/map.pwn"

#include "./modular/anticheat/ac.pwn"
#include "./modular/anticheat/main.pwn"

#include "./modular/sql/config.pwn"
#include "./modular/account/sql.pwn"
#include "./modular/sql/sql.main.pwn"
#include "./modular/job/fishing.pwn"

#include "./modular/corpse.pwn"
#include "./modular/create/player-textdraws.pwn"

main()
{

}


// SERVER DEFINE START //
#define SERVER_NAME 	 "Vice City Roleplay"
#define SERVER_HOSTNAME	 "[ENG] [0.3-DL] Vice City Roleplay"
#define SERVER_URL 		 "ccrp.ml"
#define SERVER_REVISION  "VCRP v1.0.0"
#define SERVER_LANGUAGE  "English"
// SERVER DEFINE END //



// ANTIDEAMX DEFINES //
AntiDeAMX()
{
    new a[][] =
    {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}

stock ViewBillboards(playerid)
{
	new
	    string[128]; 

	format(string, sizeof(string), "SELECT * FROM `billboards` ORDER BY `bbID` DESC");
	mysql_tquery(g_iHandle, string, "OnViewBillboards", "d", playerid);
	return 1;
}
stock ViewFactions(playerid)
{
	new string[1040];
	for (new i = 0; i != MAX_FACTIONS; i ++)
	{
		if (FactionData[i][factionExists])
		{
			format(string, sizeof(string), "%s%i | %s | %s\n", string, i, FactionData[i][factionName], GetInitials(FactionData[i][factionName]));
		}
	}
	Dialog_Show(playerid, FactionsList, DIALOG_STYLE_LIST, "Factions List", string, "Close", "");
	return 1;
}

stock GetBillboardByID(sqlid)
{
	for (new i = 0; i != MAX_BILLBOARDS; i ++) if (BillBoardData[i][bbExists] && BillBoardData[i][bbID] == sqlid)
	    return i;

	return -1;
}

stock GetInitials(const string[])
{
	new
	    ret[32],
		index = 0;

	for (new i = 0, l = strlen(string); i != l; i ++)
	{
	    if (('A' <= string[i] <= 'Z') && (i == 0 || string[i - 1] == ' '))
			ret[index++] = string[i];
	}
	return ret;
}

stock Float:GetVehicleSpeed(vehicleid)
{
	new
	Float:	speed_x,
	Float:	speed_y,
	Float:	speed_z,
	Float:	temp_speed;

	GetVehicleVelocity(vehicleid, speed_x, speed_y, speed_z);

	temp_speed = floatsqroot( ( (speed_x * speed_x ) + ( speed_y * speed_y ) ) + ( speed_z * speed_z ) ) * 136.666667;

	return temp_speed;
}

stock GetDistance(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
	return floatround(floatsqroot(((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)) + ((z1 - z2) * (z1 - z2))));
}

stock GivePlayerHealth(playerid,health)
{
	new Float:health1;
	GetPlayerHealth(playerid,health1);
	SetPlayerHealth(playerid, health1+health);
	return 1;
}

stock GivePlayerArmour(playerid,armour)
{
	new Float:armour1;
	GetPlayerArmour(playerid,armour1);
	SetPlayerArmour(playerid, armour1+armour);
	return 1;
}

stock Float:DistanceCameraTargetToLocation(Float:fCameraX, Float:fCameraY, Float:fCameraZ, Float:fObjectX, Float:fObjectY, Float:fObjectZ, Float:fVectorX, Float:fVectorY, Float:fVectorZ)
{
	new
		Float:fX,
		Float:fY,
		Float:fZ,
		Float:fDistance;

	fDistance = GetDistance(fCameraX, fCameraY, fCameraZ, fObjectX, fObjectY, fObjectZ);

	fX = fVectorX * fDistance + fCameraX;
	fY = fVectorY * fDistance + fCameraY;
	fZ = fVectorZ * fDistance + fCameraZ;

	return floatsqroot((fX - fObjectX) * (fX - fObjectX) + (fY - fObjectY) * (fY - fObjectY) + (fZ - fObjectZ) * (fZ - fObjectZ));
}

forward OnPlayerRepairTimer(playerid);
public OnPlayerRepairTimer(playerid)
{
    SendClientMessage(playerid, -1, "[Info]: Pay n' Sprays are opened again.");
	PlayerData[playerid][pUnableToRepair] = 0;
    return 1;
}

public OnPlayerVehicleDamage(playerid,vehicleid,Float:Damage)
{
    new Float:health;
    if(Damage > 45.0)
    {
        GetPlayerHealth(playerid, health);
        SetPlayerHealth(playerid, health - 5);
        SendClientMessage(playerid, COLOR_PURPLE, "** Your health has been decreased as you hit something with your vehicle. **");
    }
}

forward BackupUpdate(playerid);
public BackupUpdate(playerid)
{
	new bool:inside = false, Float:x, Float:y, Float:z;
    if (House_Inside(playerid) != -1 || Business_Inside(playerid) != -1 || Entrance_Inside(playerid) != -1)
    {
        inside = true;
        GetPlayerLocationEx(playerid, x, y, z);
    }

	if(inside)
	{
		new
			hid = House_Inside(playerid),
			bid = Business_Inside(playerid),
			eid = Entrance_Inside(playerid);

		new intstring[50];
		if(hid != -1) format(intstring, sizeof(intstring), "%s", HouseData[hid][houseAddress]);
		if(bid != -1) format(intstring, sizeof(intstring), "%s", BusinessData[bid][bizName]);
		if(eid != -1) format(intstring, sizeof(intstring), "%s", EntranceData[eid][entranceName]);

		foreach (new i : Player)
		{
			if (GetFactionType(i) == FACTION_POLICE)
			{
				SetPlayerCheckpoint(i, x, y, z, 2.0);
				SendClientMessageEx(i, COLOR_RADIOCHAT, "[%s] %s %s is still requesting backup at %s. (Red Map Marker).", GetInitials(Faction_GetName(playerid)), Faction_GetRank(playerid), ReturnName(playerid, 0), intstring);
			}
		}
		return 1;
	}

	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionType] == FACTION_POLICE)
	{
		SendFactionMessage(i, COLOR_RADIOCHAT, "[%s] %s %s is still requesting backup at %s.", GetInitials(Faction_GetName(playerid)), Faction_GetRank(playerid), ReturnName(playerid, 0), GetPlayerLocation(playerid));
	}
	return 1;
}

forward OnLightFlash(vehicleid);
public OnLightFlash(vehicleid)
{
    new panels, doors, lights, tires;
	GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

	switch(Flash[vehicleid])
	{
	case 0: UpdateVehicleDamageStatus(vehicleid, panels, doors, 2, tires);

		case 1: UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);

		case 2: UpdateVehicleDamageStatus(vehicleid, panels, doors, 2, tires);

		case 3: UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);

		case 4: UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);

		case 5: UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);
	}
	if(Flash[vehicleid] >=5) Flash[vehicleid] = 0;
	else Flash[vehicleid] ++;
	return 1;
}

forward OnJailAccount(index);
public OnJailAccount(index)
{
	new
		string[128],
		name[24],
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);
	GetPVarString(index, "OnJailAccount", name, 24);
	//GetPVarString(index, "OnJailAccountReason", reason, 64);

	if(cache_affected_rows(g_iHandle)) {
		format(string, sizeof(string), "You have successfully jailed %s's account.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);

	}
	else {
		format(string, sizeof(string), "There was an issue with jailing %s's account.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);
	}

	DeletePVar(index, "OnJailAccount");

	return 1;
}

forward OnBillboardCreated(bizid);
public OnBillboardCreated(bizid)
{
	if (bizid == -1 || !BillBoardData[bizid][bbExists])
	    return 0;

	BillBoardData[bizid][bbID] = cache_insert_id(g_iHandle);
	Billboard_Save(bizid);

	return 1;
}

public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
    if(newstate) ShowPlayerFooter(playerid, "You have turned ~g~ON~w~ the siren sound!");
    else ShowPlayerFooter(playerid, "You have turned ~g~OFF~w~ the siren sound!");

    return 1;
}

forward Billboard_Load();
public Billboard_Load()
{
    new
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_BILLBOARDS)
	{
	    BillBoardData[i][bbExists] = true;
	   	BillBoardData[i][bbID] = cache_get_field_int(i, "bbID");

		cache_get_field_content(i, "bbName", BillBoardData[i][bbName], g_iHandle, 32);
        cache_get_field_content(i, "bbMessage", BillBoardData[i][bbMessage], g_iHandle, 230);

		BillBoardData[i][bbOwner] = cache_get_field_int(i, "bbOwner");
		BillBoardData[i][bbPrice] = cache_get_field_int(i, "bbPrice");
		BillBoardData[i][bbRange] = cache_get_field_int(i, "bbRange");
		BillBoardData[i][bbPos][0] = cache_get_field_float(i, "bbPosX");
		BillBoardData[i][bbPos][1] = cache_get_field_float(i, "bbPosY");
		BillBoardData[i][bbPos][2] = cache_get_field_float(i, "bbPosZ");
		Billboard_Refresh(i);
	}
	return 1;
}

forward OnViewBillboards(extraid, name[]);
public OnViewBillboards(extraid, name[])
{
	new
	    string[1024],
	    desc[128],
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(extraid, "No billboards found!");

	for (new i = 0; i < rows; i ++) {
	    cache_get_field_content(i, "bbName", desc, g_iHandle, sizeof(desc));

	    //format(string, sizeof(string), "%s{FFFFFF}%s ({FFBF00}%i{FFFFFF})\n", string, desc, i);
	    format(string, sizeof(string), "%s{FFFFFF}Billboard ({FFBF00}%i{FFFFFF}) | %s | $%d\n", string, i, desc, BillBoardData[i][bbPrice]);
	}
	format(desc, sizeof(desc), "Los Santos Billboards Agency", name);
	Dialog_Show(extraid, Billboards, DIALOG_STYLE_LIST, desc, string, "Close", "");
	return 1;
}

forward StopChatting(playerid);
public StopChatting(playerid)
{
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

forward DestroyWater(objectid);
public DestroyWater(objectid)
{
	if (IsValidDynamicObject(objectid))
	    DestroyDynamicObject(objectid);

	return 0;
}

forward HornA(playerid);
public HornA(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	PlayerPlaySound(playerid, 1147, X, Y, Z);
}

forward HornB(playerid);
public HornB(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	PlayerPlaySound(playerid, 1147, X, Y+5, Z);
}

forward STime(playerid);
public STime(playerid)
{
	SetPlayerTime(playerid, 00,00);
}

forward PlayerPutBombInVehicle(seconds, playerid, vehicleid, bomb_type, bomb_timer);
public PlayerPutBombInVehicle(seconds, playerid, vehicleid, bomb_type, bomb_timer)
{
	if(!seconds)
	{
		TogglePlayerControllable(playerid, 1);
		new
			Float: 	f_Pos[3];

		GetVehiclePos(vehicleid, f_Pos[0], f_Pos[1], f_Pos[2]);

		if(!IsPlayerInRangeOfPoint(playerid, BOMB_USE_DISTANCE, f_Pos[0], f_Pos[1], f_Pos[2]))
		{
			SendClientMessage(playerid, COLOR_GREY, "ERROR: You are not close enough to this vehicle anymore.");
			return 1;
		}

		g_Bomb_Vehicles[vehicleid][bv_i_ArmedType] = bomb_type;
		g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer] = bomb_timer;
		g_Bomb_Vehicles[vehicleid][bv_i_BombOwner] = playerid;


		if(bomb_type == VEHICLE_BOMB_TYPE_TIMER)
		{
			//SetTimerEx("BombActivated", 1000, 0, "d", vehicleid);
			BombActivated(vehicleid);
		}

		DeletePVar(playerid, "PuttingBomb");

		SendClientMessage(playerid, COLOR_ORANGE, "You have planted and armed the bomb.");

		GameTextForPlayer(playerid, "~r~Bomb armed", 2000, 3);

		TogglePlayerControllable(playerid, 1);

		return 1;
	}

	new
		szString[69];

	format(szString, sizeof(szString), "~g~Arming bomb...~n~~r~%d ~n~ ~y~Type ~r~/bomb put~y~ again to stop", seconds);
	GameTextForPlayer(playerid, szString, 2000, 3);

	SetPVarInt(playerid, "PuttingBomb", SetTimerEx("PlayerPutBombInVehicle", 1000, 0, "ddddd", seconds - 1, playerid, vehicleid, bomb_type, bomb_timer));

	return 1;
}

forward BombActivated(vehicleid);
public BombActivated(vehicleid)
{
	if(g_Bomb_Vehicles[vehicleid][bv_b_BombDisarmed])
	{
		return 1;
	}

	if(!g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer])
	{
		ExplodeVehicleBomb(vehicleid);
		g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer]--;
		SetTimerEx("BombActivated", 400, 0, "d", vehicleid);
		return 1;
	}

	new
		Float:	f_Pos[3];

	GetVehiclePos(vehicleid, f_Pos[0], f_Pos[1], f_Pos[2]);

	if(g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer] < 0)
	{
		CreateExplosion(f_Pos[0], f_Pos[1], f_Pos[2], 4, 3.0); // Extra effects
		CreateExplosion(f_Pos[0], f_Pos[1], f_Pos[2], 5, 3.0); // Extra effects

		if(g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer] == -2)
		{
			CreateExplosion(f_Pos[0], f_Pos[1], f_Pos[2], 1, 4.0); // Small explosion
		}

		if(g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer] < -3)
		{
			return 1;
		}

		g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer]--;
		SetTimerEx("BombActivated", 400, 0, "d", vehicleid);
		return 1;
	}

	g_Bomb_Vehicles[vehicleid][bv_b_BombActivated] = true;

	if(g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer] == 1)
	{
		PlayVehicleBombSound(vehicleid, 17803); // Clicking sound
	}

	if(g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer] == 2)
	{
		PlayVehicleBombSound(vehicleid, 6400); // Digital sound
	}

	g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer]--;

	SetTimerEx("BombActivated", 1000, 0, "d", vehicleid);

	return 1;
}

forward ArmSpeedBomb(vehicleid);
public ArmSpeedBomb(vehicleid)
{
	if(GetVehicleSpeed(vehicleid) < 40.0)
	{
		g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer] = 2;
		BombActivated(vehicleid);
		return 1;
	}

	SetTimerEx("ArmSpeedBomb", 400, 0, "d", vehicleid);

	return 1;
}

forward CheckForBombs(playerid, vehicleid);
public CheckForBombs(playerid, vehicleid)
{
	DeletePVar(playerid, "CheckingForBombs");
	SetPVarInt(playerid, "CheckedCarForBombs", vehicleid);

	new
		Float: f_vPos[3];

	GetVehiclePos(vehicleid, f_vPos[0], f_vPos[1], f_vPos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, BOMB_USE_DISTANCE, f_vPos[0], f_vPos[1], f_vPos[2]))
	{
		SendClientMessage(playerid, COLOR_GREY, "You are not close enough to the vehicle anymore.");
		return 1;
	}

	if(g_Bomb_Vehicles[vehicleid][bv_i_ArmedType])
	{
		SendClientMessage(playerid, COLOR_RED, "You have found an armed bomb inside the vehicle!");
		if(g_Bomb_Vehicles[vehicleid][bv_b_BombActivated])
		{
			SendClientMessage(playerid, COLOR_RED, "WARNING! THE BOMB IS ACTIVE AND ABOUT TO BLOW!");
		}
		SetPVarInt(playerid, "FoundBombInCar", vehicleid);
	}

	else if(g_Bomb_Vehicles[vehicleid][bv_b_BombDisarmed])
	{
		SendClientMessage(playerid, COLOR_ORANGE, "You have found a disarmed bomb.");
	}

	else
	{
		SendClientMessage(playerid, COLOR_ORANGE, "You didn't find any bombs.");
	}

	return 1;
}

forward DisarmBomb(playerid, vehicleid);
public DisarmBomb(playerid, vehicleid)
{
	DeletePVar(playerid, "DisarmingBomb");

	new
		Float: f_vPos[3];

	GetVehiclePos(vehicleid, f_vPos[0], f_vPos[1], f_vPos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, BOMB_USE_DISTANCE, f_vPos[0], f_vPos[1], f_vPos[2]))
	{
		SendClientMessage(playerid, COLOR_GREY, "You are not close enough to the vehicle anymore.");
		return 1;
	}

	ResetBombInfo(vehicleid);

	g_Bomb_Vehicles[vehicleid][bv_b_BombDisarmed] = true;

	SendClientMessage(playerid, COLOR_ORANGE, "You have disarmed the bomb and the bomb has been added to your inventory.");
	Inventory_Add(playerid, "Bomb", 1654);

	return 1;
}

forward flushExplosiveData();
public flushExplosiveData()
{
	for___loop(new i = 0; i < MAX_EXPLOSIVES; i++)
	{
		destroyExplosive(i);
	}
}

forward detonateExplosives(playerid);
public detonateExplosives(playerid)
{
	/*
	    I've added a `count` variable in here for the purpose of not repeating
	    a snippet of code. Say for example you wanted to give the player a wanted level
	    for exploding a bomb, but they place down 10 bombs. That's 10x the wanted level!
	    Instead, you can use the `count` variable to control this.

	    if (count > 1)
	    {
	        // Run this code once
	    }
	*/

	new
		count = 0
	;
	for___loop(new i = 0; i < MAX_EXPLOSIVES; i++)
	{
		if(explosiveData[i][explosiveOwner] == playerid)
		{
			detonateExplosive(playerid, explosiveData[i][explosiveSlot]);
			count++;
		}
	}
}

forward detonateExplosive(playerid, playerSlot);
public detonateExplosive(playerid, playerSlot)
{
	new
		bool:found
	;

	for___loop(new i = 0; i < MAX_EXPLOSIVES; i++)
	{
		if(explosiveData[i][explosiveOwner] == playerid)
		{
			if(explosiveData[i][explosiveSlot] == playerSlot)
			{
				/*
				    Create the explosion at the XYZ provided....
				    This WILL cause player damage.
				*/
				CreateExplosion(explosiveData[i][explosivePosition][0], explosiveData[i][explosivePosition][1], explosiveData[i][explosivePosition][2], 2, 5.0);

				destroyExplosive(i); // destroy this explosive

				found = true;
			}
		}
	}

	if (!found)
	{
	    // No explosives found
	}
}

forward checkPlayerExplosives(playerid);
public checkPlayerExplosives(playerid)
{
	new returnValue = 0;

	for___loop(new i = 0; i < MAX_EXPLOSIVES; i++)
	{
		if(explosiveData[i][explosiveOwner] == playerid)
		{
			returnValue++;
		}
	}

	return returnValue;
}

forward destroyPlayersExplosives(playerid);
public destroyPlayersExplosives(playerid)
{
	for___loop(new i = 0; i < MAX_EXPLOSIVES; i++)
	{
		if(explosiveData[i][explosiveOwner] == playerid)
		{
			destroyExplosive(i);
		}
	}
}

forward findExplosiveSlot();
public findExplosiveSlot()
{
	for___loop(new i = 0; i < MAX_EXPLOSIVES; i++)
	{
		if(explosiveData[i][explosiveOwner] == INVALID_PLAYER_ID)
		{
			return i;
		}
	}

	return INVALID_PLAYER_ID;
}

forward destroyExplosive(explosiveEyeD);
public destroyExplosive(explosiveEyeD)
{
	explosiveData[explosiveEyeD][explosiveOwner] 			= INVALID_PLAYER_ID;
	explosiveData[explosiveEyeD][explosiveSlot]				= INVALID_PLAYER_ID;
	explosiveData[explosiveEyeD][explosiveTime] 			= INVALID_PLAYER_ID;
	explosiveData[explosiveEyeD][explosivePosition][0] 		= 0.0000;
	explosiveData[explosiveEyeD][explosivePosition][1] 		= 0.0000;
	explosiveData[explosiveEyeD][explosivePosition][2]		= 0.0000;
	Delete3DTextLabel(explosiveData[explosiveEyeD][explosiveLabel]);
	DestroyDynamicObject(explosiveData[explosiveEyeD][explosiveObject]);

	return 1;
}

forward DefuseC4(playerid, idOfExplosive);
public DefuseC4(playerid, idOfExplosive)
{
	new
		defuseMessage[128],
		pName[MAX_PLAYER_NAME]
	;

	GetPlayerName(explosiveData[idOfExplosive][explosiveOwner], pName, sizeof(pName));

	if (explosiveData[idOfExplosive][explosiveOwner] != INVALID_PLAYER_ID)
	{
		new explosion = random(3);

		switch(explosion)
		{
			case 0 .. 1:
			{
				format(defuseMessage, sizeof(defuseMessage), "Oh no! You cut the wrong wire and %s's explosive blew up in your face.", pName);
				SendClientMessage(playerid, COLOR_RED, defuseMessage);
				detonateExplosive(explosiveData[idOfExplosive][explosiveOwner], explosiveData[idOfExplosive][explosiveSlot]);
			}

			case 2:
			{
				format(defuseMessage, sizeof(defuseMessage), "You have defused an explosive. It belogs to %s. The bomb has been added to your inventory.", pName);
				SendClientMessage(playerid, COLOR_ORANGE, defuseMessage);
				destroyExplosive(idOfExplosive);
				Inventory_Add(playerid, "Bomb", 1654);
			}
		}
	}

	ClearAnimations(playerid);
}

forward PlaceFire(playerid);
public PlaceFire(playerid)
{
	new
		Float:fx,
		Float:fy,
		Float:fz;

	GetPlayerPos(playerid, fx, fy, fz);

	for(new i = 0; i < sizeof(g_aFireObjects); i ++)
	{
	    if (IsValidDynamicObject(g_aFireObjects[i])) continue;

		g_aFireExtinguished[i] = 0;
		g_aFireObjects[i] = CreateDynamicObjectEx(18691, fx, fy, fz - 3, 0.0, 0.0, 0.0, 300.0, 300.0);
		break;
	}
	return 1;
}


forward RandomFire();
public RandomFire()
{
	for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	{
	    g_aFireExtinguished[i] = 0;

	    if (IsValidDynamicObject(g_aFireObjects[i]))
	        DestroyDynamicObject(g_aFireObjects[i]);
	}
	switch (random(5))
	{
	    case 0:
	    {
			g_aFireObjects[0] = CreateDynamicObject(18691, 1930.4942, -1784.1799, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1930.5037, -1782.1473, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1930.5136, -1779.6364, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1930.5238, -1777.1058, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1930.5346, -1774.5141, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1930.5428, -1772.4306, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1930.5507, -1770.4219, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1930.5588, -1768.3559, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1929.1459, -1767.9173, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1928.8776, -1769.5853, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1928.8422, -1772.0158, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1928.8189, -1773.6047, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1928.8001, -1774.8883, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1928.7772, -1776.4462, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1928.7534, -1778.0637, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1928.7347, -1779.3225, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1928.7145, -1780.7152, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1928.6938, -1782.1208, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1928.6655, -1784.0491, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1935.3200, -1783.8045, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1935.2098, -1781.6428, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1935.0748, -1778.9934, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1934.9506, -1776.5572, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1934.8343, -1774.2791, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1934.7189, -1772.0156, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1934.6302, -1770.2773, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[26] = CreateDynamicObject(18691, 1934.5228, -1768.1666, 10.7728, 0.0, 0.0, 0.0);
		}
		case 1:
		{
			g_aFireObjects[0] = CreateDynamicObject(18691, 1238.8894, -1563.0980, 10.9999, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1241.6730, -1562.6481, 11.0068, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1243.2508, -1561.0845, 10.9444, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1245.5793, -1560.6265, 10.9450, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1247.4980, -1560.4841, 10.9455, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1249.9790, -1560.3701, 10.9539, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1249.5944, -1562.7432, 11.0053, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1247.4562, -1562.7996, 11.0045, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1245.7386, -1563.1572, 10.9990, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1243.7620, -1563.7636, 10.9896, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1242.2908, -1563.0959, 10.9999, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1242.3502, -1564.7818, 10.9740, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1244.8713, -1564.6507, 10.9760, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1246.8665, -1564.5694, 10.9772, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1249.1672, -1563.8638, 10.9881, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1250.8759, -1563.9959, 10.9861, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1252.2437, -1562.3538, 11.0113, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1252.4475, -1561.7529, 13.6369, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1250.9642, -1561.7822, 13.6519, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1248.5258, -1561.3541, 13.8278, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1245.9611, -1561.1191, 13.5507, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1242.7899, -1561.6608, 13.7519, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1250.3793, -1561.5445, 10.9462, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1252.8653, -1561.6358, 10.9468, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1252.9653, -1563.4675, 10.9942, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1252.5823, -1563.9747, 10.9864, 0.0, 0.0, 0.0);
		}
		case 2:
		{
		    g_aFireObjects[0] = CreateDynamicObject(18691, 1786.4844, -1164.2786, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1787.8876, -1164.3374, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1790.0416, -1164.8181, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1791.7430, -1165.1977, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1793.3637, -1165.5594, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1794.8229, -1165.8847, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1796.5830, -1166.2770, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1798.3182, -1166.6638, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1798.2283, -1166.9202, 22.1465, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1797.1246, -1166.2222, 22.5881, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1796.1480, -1165.5697, 22.5401, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1795.4377, -1165.1295, 22.1495, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1794.7139, -1164.6824, 21.4488, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1789.6914, -1164.0892, 22.3047, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1788.5687, -1163.1995, 22.3698, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1788.0295, -1162.8452, 21.9937, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1786.2319, -1163.1064, 21.8608, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1785.3194, -1163.1263, 21.9294, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1791.5643, -1163.1118, 21.3996, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1791.8800, -1164.3983, 22.2759, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1791.8519, -1165.1618, 22.5094, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1788.8287, -1163.4260, 22.0600, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1790.2512, -1164.0129, 21.2942, 0.0, 0.0, 0.0);
		}
		case 3:
		{
		    g_aFireObjects[0] = CreateDynamicObject(18691, 1315.0238, -1368.2282, 10.9438, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1314.0100, -1368.2265, 10.9438, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1312.6562, -1368.2235, 10.9399, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1311.8308, -1367.5294, 10.9296, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1310.9281, -1367.4926, 10.9273, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1309.7708, -1367.4902, 10.9252, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1308.6425, -1367.4877, 10.9232, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1307.3302, -1368.0213, 10.9332, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1306.0062, -1368.3232, 10.9355, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1304.3460, -1368.3197, 10.9354, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1304.4842, -1369.0036, 10.9451, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1305.8629, -1369.4384, 10.9513, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1307.2315, -1369.3804, 10.9512, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1309.0936, -1369.7593, 10.9550, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1310.8515, -1369.5230, 10.9544, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1312.0820, -1369.2214, 10.9522, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1309.4581, -1367.9462, 13.2241, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1307.8933, -1367.5498, 13.5101, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1307.3311, -1369.9162, 13.0364, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1306.5539, -1370.5288, 12.7001, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1310.9852, -1369.3835, 12.2585, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1310.3361, -1370.6992, 12.9585, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1313.2864, -1370.2733, 10.9708, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1313.3056, -1371.2634, 10.9838, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1311.6168, -1370.8870, 10.9735, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1308.9244, -1371.1181, 10.9726, 0.0, 0.0, 0.0);
			g_aFireObjects[26] = CreateDynamicObject(18691, 1306.5335, -1370.7678, 10.9712, 0.0, 0.0, 0.0);
		}
		case 4:
		{
		    g_aFireObjects[0] = CreateDynamicObject(18691, 997.7821, -910.8650, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 998.0914, -911.5863, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 998.2116, -913.0366, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 998.3492, -914.6963, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 998.4992, -916.5079, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 998.6508, -918.3324, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 998.7961, -920.0861, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 998.9600, -922.0629, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 999.1196, -923.9867, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 999.2616, -925.7003, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 999.4187, -927.5945, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 999.5601, -929.3013, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1000.5933, -931.6047, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1002.6428, -931.3463, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1004.6893, -931.3514, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1007.2104, -931.1424, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1009.8325, -930.9251, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1012.1341, -930.7343, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1014.4911, -930.5388, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1014.4734, -932.3157, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1013.0949, -932.3657, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1011.4746, -932.4245, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1009.7496, -932.4875, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1008.1029, -932.5473, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1006.0109, -932.6234, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1003.9039, -932.7000, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[26] = CreateDynamicObject(18691, 1002.0654, -932.7668, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[27] = CreateDynamicObject(18691, 1002.6585, -933.5130, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[28] = CreateDynamicObject(18691, 1004.5731, -933.4433, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[29] = CreateDynamicObject(18691, 1006.4688, -933.3743, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[30] = CreateDynamicObject(18691, 1008.4611, -933.3016, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[31] = CreateDynamicObject(18691, 1010.4176, -933.2304, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[32] = CreateDynamicObject(18691, 1012.0813, -933.1698, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[33] = CreateDynamicObject(18691, 1013.1374, -933.1314, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[34] = CreateDynamicObject(18691, 1015.3114, -933.0523, 39.5696, 0.0, 0.0, 0.0);
		}
	}
	new
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	GetDynamicObjectPos(g_aFireObjects[0], fX, fY, fZ);

	foreach (new i : Player)
	{
	    if (GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_POLICE)
	    {
			Waypoint_Set(i, "Fire Scene", fX, fY, fZ);
	    }
	}
	//CreateExplosion(fX, fY, fZ, 12, 5.0);
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionType] == FACTION_POLICE || FactionData[i][factionType] == FACTION_MEDIC)
	{
		SendFactionMessage(i, COLOR_RADIO, "[Dispatch]: A fire has been spotted at %s (marked on map).", GetLocation(fX, fY, fZ));
	}
	return 1;
}

forward BreakCuffs(playerid, userid);
public BreakCuffs(playerid, userid)
{
	if (PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid) || !Inventory_HasItem(playerid, "Crowbar") || !IsPlayerNearPlayer(playerid, userid, 6.0) || !PlayerData[userid][pCuffed])
	    return 1;

	if (random(2))
	{
	    ShowPlayerFooter(playerid, "You have ~r~failed~w~ to pick the cuffs.");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has failed to pick the cuffs.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[userid][pCuffed] = 0;
	    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

	    ShowPlayerFooter(playerid, "You have ~g~picked~w~ the cuffs.");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has picked the cuffs from %s's wrists.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	return 1;
}

forward SpawnTimer(playerid);
public SpawnTimer(playerid)
{
	if (SQL_IsLogged(playerid))
	{
	    TogglePlayerControllable(playerid, 1);
	}
	return 1;
}

forward RemoveAttachedObject(playerid, slot);
public RemoveAttachedObject(playerid, slot)
{
	if (IsPlayerConnected(playerid) && IsPlayerAttachedObjectSlotUsed(playerid, slot))
	{
	    RemovePlayerAttachedObject(playerid, slot);
	}
	return 1;
}

forward MineTime(playerid);
public MineTime(playerid)
{
	PlayerData[playerid][pMineTime] = 0;
}

forward DestroyBlood(objectid);
public DestroyBlood(objectid)
{
	DestroyDynamicObject(objectid);
}

forward ExpireMarker(playerid);
public ExpireMarker(playerid)
{
	if (!PlayerData[playerid][pMarker])
	    return 0;

    if (GetFactionType(playerid) == FACTION_GANG_DRUGS || (GetFactionType(playerid) != FACTION_GANG_DRUGS && PlayerData[playerid][pOnDuty]))
		SetFactionColor(playerid);

	if (GetFactionType(playerid) == FACTION_GANG_GUNS || (GetFactionType(playerid) != FACTION_GANG_GUNS && PlayerData[playerid][pOnDuty]))
		SetFactionColor(playerid);

	else SetPlayerColor(playerid, DEFAULT_COLOR);
	return 1;
}

forward HidePlayerBox(playerid, PlayerText:boxid);
public HidePlayerBox(playerid, PlayerText:boxid)
{
	if (!IsPlayerConnected(playerid) || !SQL_IsLogged(playerid))
	    return 0;

	PlayerTextDrawHide(playerid, boxid);
	PlayerTextDrawDestroy(playerid, boxid);

	return 1;
}

forward Advertise(playerid);
public Advertise(playerid)
{
	if (!SQL_IsLogged(playerid) || !strlen(PlayerData[playerid][pAdvertise]))
	    return 0;

	new
	    text[128];

	strunpack(text, PlayerData[playerid][pAdvertise]);

	foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
	    SendClientMessageEx(i, 0x00AA00FF, "[Newspaper]: %s (Contact: %d)", text, PlayerData[playerid][pPhone]);
	}

	SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF} Last advertisement was created by: %s [Ph#: %d]", ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
	PlayerData[playerid][pAdvertise][0] = 0;
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	switch(dialogid)
	{
		case 12211:
		{
  			if(!response)return 1;
  			else
	    	{
      			new string[128];
				SendServerMessage(playerid, "Your support ticket has been sent to helpers.");
	        	format(string, sizeof(string), "[Staff]: {FFFFFF}%s is needing some help. Use /assist %d to assist them.", ReturnName(playerid, 0), playerid);
	        	format(string, sizeof(string), "[Staff]: {FFFFFF}An assistance request has been received by %s. Use /assist %d to assist them.", ReturnName(playerid, 0), playerid);
				SendHelperAlert(COLOR_NEWGREEN, string);
				format(string, sizeof(string), "[Staff]: {FFFFFF} %s %s", inputtext), ReturnName(playerid, 0);
				SendHelperAlert(COLOR_NEWGREEN, string);
				AssistanceNeeded[playerid] = 1;
				Assistance_Add(playerid, inputtext);
    		}
		}
		case 12212:
		{
  			if(!response)return 1;
  			else
	    	{
      			new string[128];
	        	format(string, sizeof(string), "[Faction Mod]: %s is requesting their faction's name to be changed to ''%s''.", ReturnName(playerid, 0), playerid, inputtext);
				SendFactionAlert(COLOR_NEWGREEN, string);
    		}
		}
		case 12250:
		{
  			if(!response)return 1;
	    	else
		    {
      			switch(listitem)
       			{
          			case 0:
	            	{
               			if(PlayerData[playerid][pMoney] >= 1000)
                 		{
	                    	PlayerData[playerid][pMoney] -= 1000;
	                    	new id = Inventory_Add(playerid, "Magazine", 2039);

	                    	if (id == -1)
        						return SendErrorMessage(playerid, "You don't have any inventory slots left.");

	                    	SendClientMessage(playerid, COLOR_WHITE, "You have purchased a Magazine from the Black Market for the price of $1000.");
						}
						else return SendErrorMessage(playerid, "You don't have enough money to finish the purchase.");
         			}
         			case 1:
			        {
			            if(PlayerData[playerid][pMoney] >= 20000)
                 		{
				            if (Inventory_Count(playerid, "Knife") >= 3)
				                return SendErrorMessage(playerid, "You have 3 Knives, you can't buy anymore.");

							new id = Inventory_Add(playerid, "Knife", 335);

							if (id == -1)
			    				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

							PlayerData[playerid][pMoney] -= 20000;
							SendClientMessage(playerid, COLOR_WHITE, "You have purchased a Knife from the Black Market for the price of $20000.");
						}
						else return SendErrorMessage(playerid, "You don't have enough money to finish the purchase.");
					}
            		case 2:
		            {
               			if(PlayerData[playerid][pMoney] >= 4000)
                 		{
	                    	PlayerData[playerid][pMoney] -= 4000;
	                    	new id = Inventory_Add(playerid, "Ammo Cartridge", 2358);

							if (id == -1)
        						return SendErrorMessage(playerid, "You don't have any inventory slots left.");

	                    	SendClientMessage(playerid, COLOR_WHITE, "You have purchased an Ammo Cartridge from the Black Market for the price of $4000.");
						}
						else return SendErrorMessage(playerid, "You don't have enough money to finish the purchase.");
            		}
            		case 3:
		            {
               			if(PlayerData[playerid][pMoney] >= 5000)
                 		{
                 		    if (Inventory_Count(playerid, "Armored Vest") >= 3)
		                		return SendErrorMessage(playerid, "You have 3 armored vests, you can't buy anymore.");

                            new id = Inventory_Add(playerid, "Armored Vest", 19142);

							if (id == -1)
        						return SendErrorMessage(playerid, "You don't have any inventory slots left.");

	                    	PlayerData[playerid][pMoney] -= 5000;
	                    	SendClientMessage(playerid, COLOR_WHITE, "You have purchased an Armored Vest from the Black Market for the price of $5000.");
						}
						else return SendErrorMessage(playerid, "You don't have enough money to finish the purchase.");
            		}
            		case 4:
		            {
               			if(PlayerData[playerid][pMoney] >= 14000)
                 		{
	                    	PlayerData[playerid][pMoney] -= 14000;
	                    	SetPlayerArmour(playerid, 100.0);
	                    	SendClientMessage(playerid, COLOR_WHITE, "You have purchased a Heavy Armored Vest from the Black Market for the price of $14000.");
						}
						else return SendErrorMessage(playerid, "You don't have enough money to finish the purchase.");
            		}
            		case 5:
		            {
               			if(PlayerData[playerid][pMoney] >= 60000)
                 		{
	                    	PlayerData[playerid][pMoney] -= 60000;
	                    	new id = Inventory_Add(playerid, "Bomb", 1654);

							if (id == -1)
        						return SendErrorMessage(playerid, "You don't have any inventory slots left.");

	                    	SendClientMessage(playerid, COLOR_WHITE, "You have purchased a Bomb from the Black Market for the price of $60000.");
						}
						else return SendErrorMessage(playerid, "You don't have enough money to finish the purchase.");
            		}
				}
			}
		}
	}
	return 0;
}

forward KickHouse(playerid, id);
public KickHouse(playerid, id)
{
	if (GetFactionType(playerid) != FACTION_POLICE || House_Nearest(playerid) != id)
	    return 0;

	switch (random(6))
	{
	    case 0..2:
	    {
	        ShowPlayerFooter(playerid, "You have ~r~failed~w~ to kick the door down.");
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has failed to kick the door down.", ReturnName(playerid, 0));
		}
		default:
		{
		    HouseData[id][houseLocked] = 0;
		    House_Save(id);

		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has successfully kicked the door down.", ReturnName(playerid, 0));
		    ShowPlayerFooter(playerid, "Press ~y~'F'~w~ to enter the house.");
		}
	}
	return 1;
}

forward KickBusiness(playerid, id);
public KickBusiness(playerid, id)
{
	if (GetFactionType(playerid) != FACTION_POLICE || Business_Nearest(playerid) != id)
	    return 0;

	switch (random(6))
	{
	    case 0..2:
	    {
	        ShowPlayerFooter(playerid, "You have ~r~failed~w~ to kick the door down.");
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has failed to kick the door down.", ReturnName(playerid, 0));
		}
		default:
		{
		    BusinessData[id][bizLocked] = 0;
		    Business_Save(id);

		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has successfully kicked the door down.", ReturnName(playerid, 0));
		    ShowPlayerFooter(playerid, "Press ~y~'F'~w~ to enter the business.");
		}
	}
	return 1;
}

forward UpdateBooth(playerid, id);
public UpdateBooth(playerid, id)
{
	if (PlayerData[playerid][pRangeBooth] != id || !g_BoothUsed[id])
	    return 0;

	if (PlayerData[playerid][pTargets] == 10)
	{
	    PlayerData[playerid][pTargets] = 0;

	    switch (PlayerData[playerid][pTargetLevel]++)
	    {
	        case 0:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 25, 15000);
	            SendServerMessage(playerid, "You have advanced to the next level (1/5).");
	        }
	        case 1:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 28, 15000);
	            SendServerMessage(playerid, "You have advanced to the next level (2/5).");
	        }
	        case 2:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 29, 15000);
	            SendServerMessage(playerid, "You have advanced to the next level (3/5).");
	        }
	        case 3:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 30, 15000);
	            SendServerMessage(playerid, "You have advanced to the next level (4/5).");
	        }
	        case 4:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 27, 15000);
	            SendServerMessage(playerid, "You have advanced to the next level (5/5).");
	        }
	        case 5:
	        {
	            Booth_Leave(playerid);
	            SendServerMessage(playerid, "You have completed the shooting challenge!");
	        }
	    }
	}
	Booth_Refresh(playerid);
	return 1;
}

stock randomEx(minnum = cellmin, maxnum = cellmax) return random(maxnum - minnum + 1) + minnum;

stock PlayerHasTazer(playerid)
{
	return (GetPlayerWeapon(playerid) == 23 && PlayerData[playerid][pTazer]);
}

stock PlayerHasBeanBag(playerid)
{
	return (GetPlayerWeapon(playerid) == 25 && PlayerData[playerid][pBeanBag]);
}

stock SetPlayerToFacePlayer(playerid, targetid)
{
	new
	    Float:x[2],
	    Float:y[2],
	    Float:z[2],
	    Float:angle;

	GetPlayerPos(targetid, x[0], y[0], z[0]);
	GetPlayerPos(playerid, x[1], y[1], z[1]);

	angle = (180.0 - atan2(x[1] - x[0], y[1] - y[0]));
	SetPlayerFacingAngle(playerid, angle + (5.0 * -1));
}

stock DisableWaypoint(playerid)
{
    if (PlayerData[playerid][pWaypoint])
	{
 		PlayerData[playerid][pWaypoint] = 0;

 		DisablePlayerCheckpoint(playerid);
  		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][69]);
	}
	return 1;
}

stock GetAdminSQL(level)
{
	new astring[28];
	if(level == 1)format(astring, sizeof(astring), "Moderator");
	else if(level == 2)format(astring, sizeof(astring), "Trial Administrator");
	else if(level == 3)format(astring, sizeof(astring), "Administrator");
	else if(level == 4)format(astring, sizeof(astring), "Snr. Administrator");
	else if(level == 5)format(astring, sizeof(astring), "Lead Administrator");;
	else if(level == 6)format(astring, sizeof(astring), "Server Manager");
	else if(level == 7)format(astring, sizeof(astring), "Server Leader");
	return astring;
}

stock AdminRankName(playerid)
{
	new astring[28];
	if(PlayerData[playerid][pAdmin] == 1)format(astring, sizeof(astring), "Moderator");
	else if(PlayerData[playerid][pAdmin] == 2)format(astring, sizeof(astring), "Trial Administrator");
	else if(PlayerData[playerid][pAdmin] == 3)format(astring, sizeof(astring), "Administrator");
	else if(PlayerData[playerid][pAdmin] == 4)format(astring, sizeof(astring), "Snr. Administrator");
	else if(PlayerData[playerid][pAdmin] == 5)format(astring, sizeof(astring), "Lead Administrator");
	else if(PlayerData[playerid][pAdmin] == 6)format(astring, sizeof(astring), "Server Manager");
	else if(PlayerData[playerid][pAdmin] == 7)format(astring, sizeof(astring), "Server Leader");
	return astring;
}

stock HelperRankName(playerid)
{
	new astring[28];
	if(PlayerData[playerid][pAdmin] == 1)format(astring, sizeof(astring), "Moderator");
	else if(PlayerData[playerid][pAdmin] == 2)format(astring, sizeof(astring), "Trial Administrator");
	else if(PlayerData[playerid][pAdmin] == 3)format(astring, sizeof(astring), "Administrator");
	else if(PlayerData[playerid][pAdmin] == 4)format(astring, sizeof(astring), "Snr. Administrator");
	else if(PlayerData[playerid][pAdmin] == 5)format(astring, sizeof(astring), "Lead Administrator");
	else if(PlayerData[playerid][pAdmin] == 6)format(astring, sizeof(astring), "Server Manager");
	else if(PlayerData[playerid][pAdmin] == 7)format(astring, sizeof(astring), "Server Leader");

	else if(PlayerData[playerid][pHelper] == 1 && PlayerData[playerid][pAdmin] == 0)format(astring, sizeof(astring), "Helper");
	else if(PlayerData[playerid][pHelper] == 2 && PlayerData[playerid][pAdmin] == 0)format(astring, sizeof(astring), "Senior Helper");
	else if(PlayerData[playerid][pHelper] == 3 && PlayerData[playerid][pAdmin] == 0)format(astring, sizeof(astring), "Lead Helper");
	return astring;
}

stock GetAccent(playerid)
{
	new astring[28];
	if(PlayerData[playerid][pAccent] == 0)format(astring, sizeof(astring), "None");
	else if(PlayerData[playerid][pAccent] == 1)format(astring, sizeof(astring), "American");
	else if(PlayerData[playerid][pAccent] == 2)format(astring, sizeof(astring), "Russian");
	else if(PlayerData[playerid][pAccent] == 3)format(astring, sizeof(astring), "British");
	else if(PlayerData[playerid][pAccent] == 4)format(astring, sizeof(astring), "Italian");
	else if(PlayerData[playerid][pAccent] == 5)format(astring, sizeof(astring), "Indian");
	else if(PlayerData[playerid][pAccent] == 6)format(astring, sizeof(astring), "African");
	else if(PlayerData[playerid][pAccent] == 7)format(astring, sizeof(astring), "Australian");
	else if(PlayerData[playerid][pAccent] == 8)format(astring, sizeof(astring), "Chinese");
	else if(PlayerData[playerid][pAccent] == 9)format(astring, sizeof(astring), "Mexican");
	return astring;
}

stock DonatorRankName(playerid)
{
	 	new astring[28];
		if (PlayerData[playerid][pDonator] == 1)format(astring, sizeof(astring), "Bronze Donator");
		else if (PlayerData[playerid][pDonator] == 2)format(astring, sizeof(astring), "Silver Donator");
		else if (PlayerData[playerid][pDonator] == 3)format(astring, sizeof(astring), "Gold Donator");
		return astring;
}

stock TerminateConnection(playerid)
{
	if (BoomboxData[playerid][boomboxPlaced])
		Boombox_Destroy(playerid);

	if (PlayerData[playerid][pRangeBooth] != -1)
		Booth_Leave(playerid);

	if (PlayerData[playerid][pFirstAid])
	    KillTimer(PlayerData[playerid][pAidTimer]);

	if (PlayerData[playerid][pDrivingTest] || PlayerData[playerid][pBikeTest] || PlayerData[playerid][pTruckTest])
	    DestroyVehicle(PlayerData[playerid][pTestCar]);

	if (PlayerData[playerid][pShowFooter])
	    KillTimer(PlayerData[playerid][pFooterTimer]);

	if (PlayerData[playerid][pTaxiPlayer] != INVALID_PLAYER_ID)
	    LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);

	if (PlayerData[playerid][pDragged])
	    KillTimer(PlayerData[playerid][pDragTimer]);

	if (PlayerData[playerid][pFreeze])
	    KillTimer(PlayerData[playerid][pFreezeTimer]);

	if (PlayerData[playerid][pBackup])
		KillTimer(PlayerData[playerid][pBackupTimer]);

	if (PlayerData[playerid][pUnableToRepair])
		KillTimer(PlayerData[playerid][pRepairTimer]);

	foreach (new i : Player)
	{
	    if (PlayerData[i][pLastShot] == playerid) {
	        PlayerData[i][pLastShot] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pHouseSeller] == playerid) {
		    PlayerData[i][pHouseSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pHouseOffered] = -1;
		}
		if (PlayerData[i][pBusinessSeller] == playerid) {
		    PlayerData[i][pBusinessSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pBusinessOffered] = -1;
		}
		if (PlayerData[i][pCarSeller] == playerid) {
		    PlayerData[i][pCarSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pCarOffered] = -1;
		}
		if (PlayerData[i][pShakeOffer] == playerid) {
		    PlayerData[i][pShakeOffer] = INVALID_PLAYER_ID;
		    PlayerData[i][pShakeType] = 0;
		}
		if (PlayerData[i][pFriskOffer] == playerid) {
		    PlayerData[i][pFriskOffer] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pFoodSeller] == playerid) {
		    PlayerData[i][pFoodSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pFoodType] = 0;
		}
		if (PlayerData[i][pFactionOffer] == playerid) {
		    PlayerData[i][pFactionOffer] = INVALID_PLAYER_ID;
		    PlayerData[i][pFactionOffered] = -1;
		}
		if (PlayerData[i][pLoanOffer] == playerid) {
		    PlayerData[i][pLoanOffer] = INVALID_PLAYER_ID;
		    PlayerData[i][pLoanOffered] = -1;
		}
		if (PlayerData[i][pDraggedBy] == playerid) {
		    KillTimer(PlayerData[i][pDragTimer]);

		    PlayerData[i][pDragged] = 0;
            PlayerData[i][pDraggedBy] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pMDCPlayer] == playerid) {
		    PlayerData[i][pMDCPlayer] = INVALID_PLAYER_ID;
		    PlayerData[i][pTrackTime] = 0;
		}
		if (PlayerData[i][pNewsGuest] == playerid) {
		    PlayerData[i][pNewsGuest] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pGiveItem] == playerid) {
		    PlayerData[i][pGiveItem] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pTakeItems] == playerid) {
		    PlayerData[i][pTakeItems] = INVALID_PLAYER_ID;
		}
	}

	for___loop(new i; i < MAX_VEHICLES; i++)
	{
		if(g_Bomb_Vehicles[i][bv_i_BombOwner] == playerid)
		{
			g_Bomb_Vehicles[i][bv_i_BombOwner] = INVALID_PLAYER_ID;
		}
	}
	SQL_SaveCharacter(playerid);
	ResetNameTag(playerid);
	Report_Clear(playerid);
	ResetStatistics(playerid);
	OnlineOnDatabase(playerid, 0);
	return 1;
}

stock IsTaskCompleted(playerid)
{
	if ((PlayerData[playerid][pTask] > 0) && (PlayerData[playerid][pBankTask] > 0 && PlayerData[playerid][pStoreTask] > 0 && PlayerData[playerid][pTestTask] > 0))
	    return 1;

	return 0;
}

stock IsTaskActive(playerid)
{
	if ((PlayerData[playerid][pTask] > 0) && (!PlayerData[playerid][pBankTask] || !PlayerData[playerid][pStoreTask] || !PlayerData[playerid][pTestTask]))
	    return 1;

	return 0;
}

stock HoldWeapon(playerid, weaponid)
{
	RemovePlayerAttachedObject(playerid, 4);

	PlayerData[playerid][pHoldWeapon] = weaponid;
    PlayerData[playerid][pUsedMagazine] = 0;

	if (weaponid != 0)
	{
		SetPlayerAttachedObject(playerid, 4, GetWeaponModel(weaponid), 6);
  		SetPlayerArmedWeapon(playerid, 0);
	}
	return 1;
}

stock GetWeapon(playerid)
{
	new weaponid = GetPlayerWeapon(playerid);

	if (1 <= weaponid <= 46 && PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]] == weaponid)
 		return weaponid;

	return 0;
}

stock IsBleedableWeapon(weaponid)
{
	switch (weaponid) {
	    case 4, 8, 9, 22..38: return 1;
	}
	return 0;
}

stock CreateBlood(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetTimerEx("DestroyBlood", 1500, false, "d", CreateDynamicObject(18668, x, y, z - 1.5, 0.0, 0.0, 0.0));

	return 1;
}

stock ExplodeVehicleBomb(vehicleid)
{
	SetVehicleHealth(vehicleid, 50.0);

	new
		Float: f_vPos[3];

	GetVehiclePos(vehicleid, f_vPos[0], f_vPos[1], f_vPos[2]);

	CreateExplosion(f_vPos[0], f_vPos[1], f_vPos[2], 4, 5.0); // Extra effects
	CreateExplosion(f_vPos[0], f_vPos[1], f_vPos[2], 5, 5.0); // Extra effects

	CreateExplosion(f_vPos[0], f_vPos[1], f_vPos[2], 6, 10.0); // Big one

	ResetBombInfo(vehicleid);
}

stock PlayVehicleBombSound(vehicleid, sound)
{
	new
		Float:	v_Pos[3];

	GetVehiclePos(vehicleid, v_Pos[0], v_Pos[1], v_Pos[2]);

	for___loop(new i; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerInVehicle(i, vehicleid))
		{
			PlayerPlaySound(i, sound, v_Pos[0], v_Pos[1],v_Pos[2]);
		}
		else
		{
			if(IsPlayerInRangeOfPoint(i, 10.0, v_Pos[0], v_Pos[1], v_Pos[2]))
			{
				PlayerPlaySound(i, sound, v_Pos[0], v_Pos[1],v_Pos[2]);
			}
		}
	}
}

stock CreateRoadblock(Object,Float:x,Float:y,Float:z,Float:Angle)
{
    for___loop(new i = 0; i < sizeof(Roadblocks); i++)
  	{
  	    if(Roadblocks[i][sCreated] == 0)
  	    {
            Roadblocks[i][sCreated] = 1;
            Roadblocks[i][sX] = x;
            Roadblocks[i][sY] = y;
            Roadblocks[i][sZ] = z-0.7;
            Roadblocks[i][sObject] = CreateDynamicObject(Object, x, y, z-0.9, 0, 0, Angle);
	        return 1;
  	    }
  	}
  	return 0;
}

stock PlayerText:ShowPlayerBox(playerid, color)
{
	new
	    PlayerText:textid;

    textid = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "_");
	PlayerTextDrawFont(playerid, textid, 1);
	PlayerTextDrawLetterSize(playerid, textid, 0.500000, 50.000000);
	PlayerTextDrawColor(playerid, textid, -1);
	PlayerTextDrawUseBox(playerid, textid, 1);
	PlayerTextDrawBoxColor(playerid, textid, color);
	PlayerTextDrawTextSize(playerid, textid, 640.000000, 30.000000);
	PlayerTextDrawShow(playerid, textid);

	return textid;
}

stock Graffiti_Refresh(id)
{
	if (id != -1 && GraffitiData[id][graffitiExists])
	{
		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

        GraffitiData[id][graffitiIcon] = CreateDynamicMapIcon(GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 23, 0, -1, -1, -1, 100.0, MAPICON_GLOBAL);
		GraffitiData[id][graffitiObject] = CreateDynamicObject(19482, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 0.0, 0.0, GraffitiData[id][graffitiPos][3]);

		SetDynamicObjectMaterial(GraffitiData[id][graffitiObject], 0, 0, "none", "none", 0);
		SetDynamicObjectMaterialText(GraffitiData[id][graffitiObject], 0, GraffitiData[id][graffitiText], OBJECT_MATERIAL_SIZE_256x128, "Arial", 24, 1, GraffitiData[id][graffitiColor], 0, 0);
	}
	return 1;
}

stock IsSprayingInProgress(id)
{
	foreach (new i : Player)
	{
	    if (PlayerData[i][pGraffiti] == id && IsPlayerInRangeOfPoint(i, 5.0, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2]))
	        return 1;
	}
	return 0;
}

stock Graffiti_Nearest(playerid)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++) if (GraffitiData[i][graffitiExists] && IsPlayerInRangeOfPoint(playerid, 5.0, GraffitiData[i][graffitiPos][0], GraffitiData[i][graffitiPos][1], GraffitiData[i][graffitiPos][2]))
	    return i;

	return -1;
}

stock Graffiti_Delete(id)
{
    if (id != -1 && GraffitiData[id][graffitiExists])
	{
	    new
	        string[64];

		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

		format(string, sizeof(string), "DELETE FROM `graffiti` WHERE `graffitiID` = '%d'", GraffitiData[id][graffitiID]);
		mysql_tquery(g_iHandle, string);

		GraffitiData[id][graffitiExists] = false;
		GraffitiData[id][graffitiText][0] = 0;
		GraffitiData[id][graffitiID] = 0;
	}
	return 1;
}

stock APB_Delete(id)
{
    if (id != -1 && APBData[id][apbExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `apbs` WHERE `dbid` = '%d'", APBData[id][apbID]);
		mysql_tquery(g_iHandle, string);

		APBData[id][apbExists] = false;
		format(APBData[id][apbText], 128, " ");
	}
	return 1;
}

stock Niner_Clear(playerid, id)
{
    if (id != -1 && NinerData[id][ninerExists])
	{
	    new
	        string[128];

		format(string, sizeof(string), "UPDATE `911calls` SET `status` = 1, `clearedby` = '%s' WHERE `cid` = %i", ReturnName(playerid, 0), NinerData[id][ninerID]);
		mysql_tquery(g_iHandle, string);

		NinerData[id][ninerExists] = false;
		NinerData[id][ninerTimer] = 0;
		format(NinerData[id][ninerNotes], 128, " ");
	}
	return 1;
}

stock Niner_Unans(id)
{
    if (id != -1 && NinerData[id][ninerExists])
	{
	    new
	        string[128];

		format(string, sizeof(string), "UPDATE `911calls` SET `status` = 2, `clearedby` = '-AUTO-' WHERE `cid` = %i", NinerData[id][ninerID]);
		mysql_tquery(g_iHandle, string);

		NinerData[id][ninerExists] = false;
		NinerData[id][ninerTimer] = 0;
		format(NinerData[id][ninerNotes], 128, " ");
	}
	return 1;
}

stock APB_Create(playerid, desc[])
{
	new string[500];
	for (new i = 0; i < MAX_APBS; i ++)
	{
	    if (!APBData[i][apbExists])
	    {
			APBData[i][apbExists] = 1;
			APBData[i][apbCreatorID] = PlayerData[playerid][pID];
			format(APBData[i][apbDate], 30, ReturnDate());
			format(APBData[i][apbCreatorName], 40, ReturnName(playerid, 0));
			format(APBData[i][apbText], 129, desc);

			format(string, sizeof(string), "INSERT INTO `apbs` (`creatorid`, `creatorname`, `date`, `fulldesc`) VALUES (%d, '%s', '%s','%s')", PlayerData[playerid][pID], ReturnName(playerid, 0), ReturnDate(), SQL_ReturnEscaped(desc));
			mysql_tquery(g_iHandle, string, "OnAPBCreated", "d", i);

			return i;
		}
	}
	return -1;
}

stock Niner_Create(playerid, type, locgiven[], descgiven[])
{
	new string[500];
	for (new i = 0; i < MAX_911_CALLS; i ++)
	{
	    if (!NinerData[i][ninerExists])
	    {
			NinerData[i][ninerExists] = 1;
			NinerData[i][ninerTimer] = 0;
			NinerData[i][ninerType] = type;
			format(NinerData[i][ninerTime], 30, ReturnDate());
			format(NinerData[i][ninerCaller], 40, ReturnName(playerid, 0));
			NinerData[i][ninerNum] = PlayerData[playerid][pPhone];
			NinerData[i][ninerStatus] = 0;
			format(NinerData[i][ninerGPS], 80, GetPlayerLocation(playerid));
			format(NinerData[i][ninerLocation], 128, locgiven);
			format(NinerData[i][ninerDesc], 128, descgiven);
			format(NinerData[i][ninerNotes], 128, " ");

			format(string, sizeof(string), "INSERT INTO `911calls` (`type`, `time`, `callername`, `callernum`, `status`, `gpsloc`, `locgiven`, `descgiven`) VALUES (%d, '%s', '%s', %d, 0, '%s', '%s', '%s')",
				type,
				ReturnDate(),
				ReturnName(playerid, 0),
				PlayerData[playerid][pPhone],
				GetPlayerLocation(playerid),
				SQL_ReturnEscaped(locgiven),
				SQL_ReturnEscaped(descgiven));

			mysql_tquery(g_iHandle, string, "OnNinerCreated", "d", i);

			return i;
		}
	}
	return -1;
}

stock Graffiti_Save(id)
{
	new
	    query[384];

	format(query, sizeof(query), "UPDATE `graffiti` SET `graffitiX` = '%.4f', `graffitiY` = '%.4f', `graffitiZ` = '%.4f', `graffitiAngle` = '%.4f', `graffitiColor` = '%d', `graffitiText` = '%s' WHERE `graffitiID` = '%d'",
        GraffitiData[id][graffitiPos][0],
        GraffitiData[id][graffitiPos][1],
        GraffitiData[id][graffitiPos][2],
        GraffitiData[id][graffitiPos][3],
		GraffitiData[id][graffitiColor],
		SQL_ReturnEscaped(GraffitiData[id][graffitiText]),
		GraffitiData[id][graffitiID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Graffiti_Create(Float:x, Float:y, Float:z, Float:angle)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++)
	{
	    if (!GraffitiData[i][graffitiExists])
	    {
			GraffitiData[i][graffitiExists] = 1;
			GraffitiData[i][graffitiPos][0] = x;
			GraffitiData[i][graffitiPos][1] = y;
			GraffitiData[i][graffitiPos][2] = z;
			GraffitiData[i][graffitiPos][3] = angle - 90.0;
			GraffitiData[i][graffitiColor] = 0xFFFFFFFF;

			format(GraffitiData[i][graffitiText], 32, "Graffiti");

			Graffiti_Refresh(i);
			mysql_tquery(g_iHandle, "INSERT INTO `graffiti` (`graffitiColor`) VALUES(0)", "OnGraffitiCreated", "d", i);

			return i;
		}
	}
	return -1;
}

stock Speed_Refresh(speedid)
{
	if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "[Camera %d]\n{FFFFFF}Speed Limit: %.0f mph", speedid, SpeedData[speedid][speedLimit]);

		SpeedData[speedid][speedText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2] + 2.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
        SpeedData[speedid][speedObject] = CreateDynamicObject(18880, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2], 0.0, 0.0, SpeedData[speedid][speedPos][3]);
	}
	return 1;
}

stock Speed_Save(speedid)
{
	new
	    query[255];

	format(query, sizeof(query), "UPDATE `speedcameras` SET `speedRange` = '%.4f', `speedLimit` = '%.4f', `speedX` = '%.4f', `speedY` = '%.4f', `speedZ` = '%.4f', `speedAngle` = '%.4f' WHERE `speedID` = '%d'",
	    SpeedData[speedid][speedRange],
	    SpeedData[speedid][speedLimit],
	    SpeedData[speedid][speedPos][0],
	    SpeedData[speedid][speedPos][1],
	    SpeedData[speedid][speedPos][2],
	    SpeedData[speedid][speedPos][3],
	    SpeedData[speedid][speedID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Speed_Nearest(playerid)
{
	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (SpeedData[i][speedExists] && IsPlayerInRangeOfPoint(playerid, SpeedData[i][speedRange], SpeedData[i][speedPos][0], SpeedData[i][speedPos][1], SpeedData[i][speedPos][2]))
	    return i;

	return -1;
}

stock Speed_Delete(speedid)
{
    if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "DELETE FROM `speedcameras` WHERE `speedID` = '%d'", SpeedData[speedid][speedID]);
		mysql_tquery(g_iHandle, string);

		SpeedData[speedid][speedExists] = false;
		SpeedData[speedid][speedLimit] = 0.0;
		SpeedData[speedid][speedRange] = 0.0;
		SpeedData[speedid][speedID] = 0;
	}
	return 1;
}

stock Speed_Create(playerid, Float:limit, Float:range)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (!SpeedData[i][speedExists])
	{
	    SpeedData[i][speedExists] = true;
	    SpeedData[i][speedRange] = range;
        SpeedData[i][speedLimit] = limit;

		SpeedData[i][speedPos][0] = x + (1.5 * floatsin(-angle, degrees));
	    SpeedData[i][speedPos][1] = y + (1.5 * floatcos(-angle, degrees));
	    SpeedData[i][speedPos][2] = z - 1.2;
	    SpeedData[i][speedPos][3] = angle;

	    Speed_Refresh(i);
	    mysql_tquery(g_iHandle, "INSERT INTO `speedcameras` (`speedRange`) VALUES(0.0)", "OnSpeedCreated", "d", i);
	    return i;
	}
	return -1;
}

stock IsPlayerOnPhone(playerid)
{
	if (PlayerData[playerid][pEmergency] > 0 || PlayerData[playerid][pPlaceAd] > 0 || PlayerData[playerid][pDealerCallDrugs] > 0 || PlayerData[playerid][pDealerCallGuns] > 0 || PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
	    return 1;

	return 0;
}

stock FlipVehicle(vehicleid)
{
	new
	    Float:fAngle;

	GetVehicleZAngle(vehicleid, fAngle);

	SetVehicleZAngle(vehicleid, fAngle);
	SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
}

stock StopVehicleRadio(vehicleid)
{
	if ((IsValidVehicle(vehicleid) && IsEngineVehicle(vehicleid)) && CoreVehicles[vehicleid][vehRadio])
	{
	    CoreVehicles[vehicleid][vehRadio] = 0;

	    foreach (new i : Player)
		{
			if (IsPlayerInVehicle(i, vehicleid))
			{
			    StopAudioStreamForPlayer(i);
			    PlayerData[i][pPlayRadio] = 0;
			}
	    }
	}
	return 1;
}

stock SetVehicleRadio(vehicleid, url[])
{
	if (IsValidVehicle(vehicleid) && IsEngineVehicle(vehicleid))
	{
        CoreVehicles[vehicleid][vehRadio] = 1;
        strpack(CoreVehicles[vehicleid][vehURL], url, 128 char);

        foreach (new i : Player)
		{
			if (IsPlayerInVehicle(i, vehicleid))
			{
			    PlayerData[i][pPlayRadio] = 1;

			    StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, url);
            }
        }
	}
	return 1;
}

stock ResetVehicle(vehicleid)
{
	if (1 <= vehicleid <= MAX_VEHICLES)
	{
	    if (CoreVehicles[vehicleid][vehSirenOn] && IsValidDynamicObject(CoreVehicles[vehicleid][vehSirenObject]))
	        DestroyDynamicObject(CoreVehicles[vehicleid][vehSirenObject]);

	    CoreVehicles[vehicleid][vehFuel] = 100;
		CoreVehicles[vehicleid][vehWindowsDown] = false;
		CoreVehicles[vehicleid][vehTemporary] = 0;
  		CoreVehicles[vehicleid][vehLoads] = 0;
		CoreVehicles[vehicleid][vehLoadType] = 0;
		CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
		CoreVehicles[vehicleid][vehTrash] = 0;
		CoreVehicles[vehicleid][vehRepairing] = 0;
		CoreVehicles[vehicleid][vehSirenOn] = 0;
		CoreVehicles[vehicleid][vehRadio] = 0;
		CoreVehicles[vehicleid][vehELM] = 0;
		CoreVehicles[vehicleid][vehHasCorpse] = 0;

		KillTimer(FlashTime[vehicleid]);
	}
	return 1;
}

stock RespawnVehicle(vehicleid)
{
	new id = Car_GetID(vehicleid);

	if (id != -1)
	{
		Delete3DTextLabel(vehicle3Dtext[vehicleid]);
		vehiclecallsign[vehicleid] = 0;
		GetVehicleHealth(vehicleid, CarData[id][carHP]);
		GetVehicleDamageStatus(vehicleid, CarData[id][carPanelsDmg], CarData[id][carDoorsDmg], CarData[id][carLightsDmg], CarData[id][carTiresDmg]);
	    Car_Spawn(id);
	}
	else SetVehicleToRespawn(vehicleid);

	ResetVehicle(vehicleid);
	return 1;
}

stock GetWeaponCount(playerid)
{
	new
		count,
	    weapon,
	    ammo;

	for (new i = 0; i < 12; i ++)
	{
	    GetPlayerWeaponData(playerid, i, weapon, ammo);

	    if (weapon > 0 && ammo > 0) count++;
	}
	return count;
}

stock Boombox_Place(playerid)
{
	new
	    Float:angle;

	GetPlayerFacingAngle(playerid, angle);

	strpack(BoomboxData[playerid][boomboxURL], "", 128 char);
	GetPlayerPos(playerid, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]);

	BoomboxData[playerid][boomboxPlaced] = true;
	BoomboxData[playerid][boomboxInterior] = GetPlayerInterior(playerid);
	BoomboxData[playerid][boomboxWorld] = GetPlayerVirtualWorld(playerid);

    BoomboxData[playerid][boomboxObject] = CreateDynamicObject(2226, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.9, 0.0, 0.0, angle, BoomboxData[playerid][boomboxWorld], BoomboxData[playerid][boomboxInterior]);
    BoomboxData[playerid][boomboxText3D] = CreateDynamic3DTextLabel("[Boombox]\n{FFFFFF}/boombox to use this boombox.", COLOR_DEPARTMENT, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.7, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, BoomboxData[playerid][boomboxWorld], BoomboxData[playerid][boomboxInterior]);

	return 1;
}

stock Boombox_Nearest(playerid)
{
	foreach (new i : Player) if (BoomboxData[i][boomboxPlaced] && GetPlayerInterior(playerid) == BoomboxData[i][boomboxInterior] && GetPlayerVirtualWorld(playerid) == BoomboxData[i][boomboxWorld] && IsPlayerInRangeOfPoint(playerid, 30.0, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
     	return i;
	}
	return INVALID_PLAYER_ID;
}

stock Boombox_SetURL(playerid, url[])
{
	if (BoomboxData[playerid][boomboxPlaced])
	{
	    strpack(BoomboxData[playerid][boomboxURL], url, 128 char);

	    foreach (new i : Player) if (PlayerData[i][pBoombox] == playerid) {
	        StopAudioStreamForPlayer(i);
	        PlayAudioStreamForPlayer(i, url, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2], 30.0, 1);
		}
	}
	return 1;
}

stock Boombox_Destroy(playerid)
{
	if (BoomboxData[playerid][boomboxPlaced])
	{
		if (IsValidDynamicObject(BoomboxData[playerid][boomboxObject]))
		    DestroyDynamicObject(BoomboxData[playerid][boomboxObject]);

		if (IsValidDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]))
		    DestroyDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]);

		foreach (new i : Player) if (PlayerData[i][pBoombox] == playerid) {
		    StopAudioStreamForPlayer(i);
		}
        BoomboxData[playerid][boomboxPlaced] = false;
        BoomboxData[playerid][boomboxInterior] = 0;
        BoomboxData[playerid][boomboxWorld] = 0;
	}
	return 1;
}

stock Taxi_ShowCalls(playerid)
{
    static
	    string[2048];

	string[0] = 0;

	foreach (new i : Player) if (PlayerData[i][pTaxiCalled]) {
	    format(string, sizeof(string), "%s%d: %s (%s)\n", string, i, ReturnName(i, 0), GetPlayerLocation(i));
	}
	if (!strlen(string)) {
	    SendErrorMessage(playerid, "There are no taxi calls to accept.");
	}
	else Dialog_Show(playerid, AcceptTaxi, DIALOG_STYLE_LIST, "Taxi Calls", string, "Accept", "Cancel");
	return 1;
}

stock Mechanic_ShowCalls(playerid)
{
    static
	    string[2048];

	string[0] = 0;

	foreach (new i : Player) if (PlayerData[i][pMechanicCalled]) {
	    format(string, sizeof(string), "%s%d: %s (%s)\n", string, i, ReturnName(i, 0), GetPlayerLocation(i));
	}
	if (!strlen(string)) {
	    SendErrorMessage(playerid, "There are no mechanic calls to accept.");
	}
	else Dialog_Show(playerid, AcceptMechanic, DIALOG_STYLE_LIST, "Mechanic Calls", string, "Accept", "Cancel");
	return 1;
}

stock IsShipmentAccepted(businessid)
{
	foreach (new i : Player) if (PlayerData[i][pJob] == JOB_COURIER && PlayerData[i][pShipment] == businessid) {
	    return 1;
	}
	return 0;
}

stock CancelShipment(playerid)
{
    PlayerData[playerid][pShipment] = -1;

    if (PlayerData[playerid][pDeliverShipment])
    {
		PlayerData[playerid][pDeliverShipment] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}

stock ShowShipments(playerid)
{
    static
	    string[2048],
		type[40];

	string[0] = 0;

	for (new i = 0; i < MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizShipment] && !IsShipmentAccepted(i))
	{
	    switch (BusinessData[i][bizType]) {
	        case 1: type = "Retail Supplies";
	        case 2: type = "Ammunition";
	        case 3: type = "Clothing";
	        case 4: type = "Food Supplies";
			case 6: type = "Retail Supplies";
			case 7: type = "Furniture";
   			case 8: type = "Retail Supplies";
			case 9: type = "Retail Supplies";
			case 10: type = "Fishing Supplies";
		}
	    format(string, sizeof(string), "%s%d: %s (%s)\n", string, i, BusinessData[i][bizName], type);
	}
	if (!strlen(string)) {
	    SendErrorMessage(playerid, "There are no shipments to accept.");
	}
	else Dialog_Show(playerid, AcceptShipment, DIALOG_STYLE_LIST, "Shipments", string, "Accept", "Cancel");
	return 1;
}

stock GetWheelName(componentid)
{
	new
		name[12];

	enum g_eWheelData {
	    g_eWheelModel,
	    g_eWheelName[12 char]
	};

	new const g_aWheelData[][g_eWheelData] = {
	    {1025, !"Offroad"},
	    {1073, !"Shadow"},
	    {1074, !"Mega"},
	    {1075, !"Rimshine"},
	    {1076, !"Wires"},
	    {1077, !"Classic"},
	    {1078, !"Twist"},
	    {1079, !"Cutter"},
	    {1080, !"Switch"},
	    {1081, !"Grove"},
	    {1082, !"Import"},
	    {1083, !"Dollar"},
	    {1084, !"Trance"},
	    {1085, !"Atomic"},
	    {1096, !"Ahab"},
	    {1097, !"Virtual"},
	    {1098, !"Access"}
	};
	for (new i = 0; i < sizeof(g_aWheelData); i ++) if (g_aWheelData[i][g_eWheelModel] == componentid) {
	    strunpack(name, g_aWheelData[i][g_eWheelName]);

	    return name;
	}
	strunpack(name, !"Unknown");
	return name;
}

stock SetVehicleColor(vehicleid, color1, color2)
{
    new id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carColor1] = color1;
	    CarData[id][carColor2] = color2;
	    Car_Save(id);
	}
	return ChangeVehicleColor(vehicleid, color1, color2);
}

stock SetVehiclePaintjob(vehicleid, paintjobid)
{
    new id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carPaintjob] = paintjobid;
	    Car_Save(id);
	}
	return ChangeVehiclePaintjob(vehicleid, paintjobid);
}

stock RemoveComponent(vehicleid, componentid)
{
	if (!IsValidVehicle(vehicleid) || (componentid < 1000 || componentid > 1193))
	    return 0;

	new
		id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carMods][GetVehicleComponentType(componentid)] = 0;
	    Car_Save(id);
	}
	return RemoveVehicleComponent(vehicleid, componentid);
}

stock AddComponent(vehicleid, componentid)
{
	if (!IsValidVehicle(vehicleid) || (componentid < 1000 || componentid > 1193))
	    return 0;

	new
		id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carMods][GetVehicleComponentType(componentid)] = componentid;
	    Car_Save(id);
	}
	return AddVehicleComponent(vehicleid, componentid);
}

stock ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
{
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);

	PlayerData[playerid][pLoopAnim] = true;
	ShowPlayerFooter(playerid, "Press ~y~SPRINT~w~ to stop the animation.");

	return 1;
}

stock AnimationCheck(playerid)
{
	return (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !PlayerData[playerid][pKilled] && !PlayerData[playerid][pFreeze] && !PlayerData[playerid][pStunned] && !PlayerData[playerid][pFirstAid] && !PlayerData[playerid][pCrafting] && PlayerData[playerid][pGraffiti] == -1);
}

stock PreloadAnimations(playerid)
{
	for (new i = 0; i < sizeof(g_aPreloadLibs); i ++) {
	    ApplyAnimation(playerid, g_aPreloadLibs[i], "null", 4.0, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

stock Vendor_Create(playerid, type)
{
	for (new i = 0; i != MAX_VENDORS; i ++) if (!VendorData[i][vendorExists])
	{
	    VendorData[i][vendorExists] = true;
	    VendorData[i][vendorType] = type;

	    GetPlayerPos(playerid, VendorData[i][vendorPos][0], VendorData[i][vendorPos][1], VendorData[i][vendorPos][2]);
	    GetPlayerFacingAngle(playerid, VendorData[i][vendorPos][3]);

	    VendorData[i][vendorPos][0] = VendorData[i][vendorPos][0] + (1.5 * floatsin(-VendorData[i][vendorPos][3], degrees));
	    VendorData[i][vendorPos][1] = VendorData[i][vendorPos][1] + (1.5 * floatcos(-VendorData[i][vendorPos][3], degrees));

		VendorData[i][vendorInterior] = GetPlayerInterior(playerid);
		VendorData[i][vendorWorld] = GetPlayerVirtualWorld(playerid);

		Vendor_Refresh(i);
		mysql_tquery(g_iHandle, "INSERT INTO `vendors` (`vendorType`) VALUES(0)", "OnVendorCreated", "d", i);
		return i;
	}
	return -1;
}

stock Vendor_Delete(vendorid)
{
	if (vendorid != -1 && VendorData[vendorid][vendorExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `vendors` WHERE `vendorID` = '%d'", VendorData[vendorid][vendorID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(VendorData[vendorid][vendorText3D]))
	        DestroyDynamic3DTextLabel(VendorData[vendorid][vendorText3D]);

		if (IsValidDynamicObject(VendorData[vendorid][vendorObject]))
		    DestroyDynamicObject(VendorData[vendorid][vendorObject]);

	    VendorData[vendorid][vendorExists] = false;
	    VendorData[vendorid][vendorType] = 0;
	    VendorData[vendorid][vendorID] = 0;
	}
	return 1;
}

Vendor_Nearest(playerid)
{
    for (new i = 0; i != MAX_VENDORS; i ++) if (VendorData[i][vendorExists] && IsPlayerInRangeOfPoint(playerid, 2.0, VendorData[i][vendorPos][0], VendorData[i][vendorPos][1], VendorData[i][vendorPos][2]))
	{
		if (GetPlayerInterior(playerid) == VendorData[i][vendorInterior] && GetPlayerVirtualWorld(playerid) == VendorData[i][vendorWorld])
			return i;
	}
	return -1;
}

stock Vendor_Refresh(vendorid)
{
	if (vendorid != -1 && VendorData[vendorid][vendorExists])
	{
	    if (IsValidDynamic3DTextLabel(VendorData[vendorid][vendorText3D]))
	        DestroyDynamic3DTextLabel(VendorData[vendorid][vendorText3D]);

		if (IsValidDynamicObject(VendorData[vendorid][vendorObject]))
		    DestroyDynamicObject(VendorData[vendorid][vendorObject]);

		new
			string[64];

		format(string, sizeof(string), "[Vendor %d]\n{FFFFFF}Press 'F' to use this vendor.", vendorid);
		VendorData[vendorid][vendorText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, VendorData[vendorid][vendorPos][0], VendorData[vendorid][vendorPos][1], VendorData[vendorid][vendorPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, VendorData[vendorid][vendorWorld], VendorData[vendorid][vendorInterior]);

		switch (VendorData[vendorid][vendorType]) {
		    case 1: VendorData[vendorid][vendorObject] = CreateDynamicObject(1340, VendorData[vendorid][vendorPos][0], VendorData[vendorid][vendorPos][1], VendorData[vendorid][vendorPos][2], 0.0, 0.0, VendorData[vendorid][vendorPos][3] - 90.0, VendorData[vendorid][vendorWorld], VendorData[vendorid][vendorInterior]);
		    case 2: VendorData[vendorid][vendorObject] = CreateDynamicObject(1209, VendorData[vendorid][vendorPos][0], VendorData[vendorid][vendorPos][1], VendorData[vendorid][vendorPos][2] - 1.0, 0.0, 0.0, VendorData[vendorid][vendorPos][3], VendorData[vendorid][vendorWorld], VendorData[vendorid][vendorInterior]);
		}
	}
	return 1;
}

stock Vendor_Save(vendorid)
{
	new
	    query[300];

	format(query, sizeof(query), "UPDATE `vendors` SET `vendorType` = '%d', `vendorX` = '%.4f', `vendorY` = '%.4f', `vendorZ` = '%.4f', `vendorA` = '%.4f', `vendorInterior` = '%d', `vendorWorld` = '%d' WHERE `vendorID` = '%d'",
        VendorData[vendorid][vendorType],
        VendorData[vendorid][vendorPos][0],
        VendorData[vendorid][vendorPos][1],
        VendorData[vendorid][vendorPos][2],
        VendorData[vendorid][vendorPos][3],
        VendorData[vendorid][vendorInterior],
        VendorData[vendorid][vendorWorld],
        VendorData[vendorid][vendorID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Garbage_Create(playerid, type)
{
	for (new i = 0; i != MAX_GARBAGE_BINS; i ++) if (!GarbageData[i][garbageExists])
	{
	    switch (type) {
	        case 1: GarbageData[i][garbageModel] = 1236;
	        case 2: GarbageData[i][garbageModel] = 1300;
	    }
	    GarbageData[i][garbageExists] = true;
	    GarbageData[i][garbageCapacity] = 0;

	    GetPlayerPos(playerid, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]);
	    GetPlayerFacingAngle(playerid, GarbageData[i][garbagePos][3]);

		switch (type) {
		    case 1: {
		    	GarbageData[i][garbagePos][0] = GarbageData[i][garbagePos][0] + (1.8 * floatsin(-GarbageData[i][garbagePos][3], degrees));
			    GarbageData[i][garbagePos][1] = GarbageData[i][garbagePos][1] + (1.8 * floatcos(-GarbageData[i][garbagePos][3], degrees));
			}
			case 2: {
		    	GarbageData[i][garbagePos][0] = GarbageData[i][garbagePos][0] + (1.0 * floatsin(-GarbageData[i][garbagePos][3], degrees));
			    GarbageData[i][garbagePos][1] = GarbageData[i][garbagePos][1] + (1.0 * floatcos(-GarbageData[i][garbagePos][3], degrees));
			}
		}
		GarbageData[i][garbageInterior] = GetPlayerInterior(playerid);
		GarbageData[i][garbageWorld] = GetPlayerVirtualWorld(playerid);

		Garbage_Refresh(i);
		mysql_tquery(g_iHandle, "INSERT INTO `garbage` (`garbageCapacity`) VALUES(0)", "OnGarbageCreated", "d", i);
		return i;
	}
	return -1;
}

stock Garbage_Delete(garbageid)
{
	if (garbageid != -1 && GarbageData[garbageid][garbageExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `garbage` WHERE `garbageID` = '%d'", GarbageData[garbageid][garbageID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]))
	        DestroyDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]);

		if (IsValidDynamicObject(GarbageData[garbageid][garbageObject]))
		    DestroyDynamicObject(GarbageData[garbageid][garbageObject]);

	    GarbageData[garbageid][garbageExists] = false;
	    GarbageData[garbageid][garbageCapacity] = 0;
	    GarbageData[garbageid][garbageID] = 0;
	}
	return 1;
}

Garbage_Nearest(playerid)
{
    for (new i = 0; i != MAX_GARBAGE_BINS; i ++) if (GarbageData[i][garbageExists] && IsPlayerInRangeOfPoint(playerid, 3.0, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]))
	{
		if (GetPlayerInterior(playerid) == GarbageData[i][garbageInterior] && GetPlayerVirtualWorld(playerid) == GarbageData[i][garbageWorld])
			return i;
	}
	return -1;
}

stock Garbage_Refresh(garbageid)
{
	if (garbageid != -1 && GarbageData[garbageid][garbageExists])
	{
	    if (IsValidDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]))
	        DestroyDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]);

		if (IsValidDynamicObject(GarbageData[garbageid][garbageObject]))
		    DestroyDynamicObject(GarbageData[garbageid][garbageObject]);

		new
			string[64];

		format(string, sizeof(string), "[Garbage %d]\n{FFFFFF}Trash Capacity: %d/20", garbageid, GarbageData[garbageid][garbageCapacity]);

		GarbageData[garbageid][garbageText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, GarbageData[garbageid][garbagePos][0], GarbageData[garbageid][garbagePos][1], GarbageData[garbageid][garbagePos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GarbageData[garbageid][garbageWorld], GarbageData[garbageid][garbageInterior]);
		GarbageData[garbageid][garbageObject] = CreateDynamicObject(GarbageData[garbageid][garbageModel], GarbageData[garbageid][garbagePos][0], GarbageData[garbageid][garbagePos][1], (GarbageData[garbageid][garbageModel] == 1236) ? (GarbageData[garbageid][garbagePos][2] - 0.4) : (GarbageData[garbageid][garbagePos][2] - 0.6), 0.0, 0.0, GarbageData[garbageid][garbagePos][3], GarbageData[garbageid][garbageWorld], GarbageData[garbageid][garbageInterior]);
	}
	return 1;
}

stock Garbage_Save(garbageid)
{
	new
	    query[300];

	format(query, sizeof(query), "UPDATE `garbage` SET `garbageModel` = '%d', `garbageCapacity` = '%d', `garbageX` = '%.4f', `garbageY` = '%.4f', `garbageZ` = '%.4f', `garbageA` = '%.4f', `garbageInterior` = '%d', `garbageWorld` = '%d' WHERE `garbageID` = '%d'",
        GarbageData[garbageid][garbageModel],
        GarbageData[garbageid][garbageCapacity],
        GarbageData[garbageid][garbagePos][0],
        GarbageData[garbageid][garbagePos][1],
        GarbageData[garbageid][garbagePos][2],
        GarbageData[garbageid][garbagePos][3],
        GarbageData[garbageid][garbageInterior],
        GarbageData[garbageid][garbageWorld],
        GarbageData[garbageid][garbageID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Booth_GetPlayer(id)
{
	foreach (new i : Player) if (PlayerData[i][pRangeBooth] == id) {
	    return i;
	}
	return INVALID_PLAYER_ID;
}

stock Booth_Leave(playerid)
{
	if (PlayerData[playerid][pRangeBooth] != -1)
	{
	    if (IsValidObject(g_BoothObject[PlayerData[playerid][pRangeBooth]])) {
	        DestroyObject(g_BoothObject[PlayerData[playerid][pRangeBooth]]);

	        g_BoothObject[PlayerData[playerid][pRangeBooth]] = -1;
	    }
    	ResetPlayerWeapons(playerid);
   		SetWeapons(playerid);

		g_BoothUsed[PlayerData[playerid][pRangeBooth]] = false;
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][81]);

		PlayerData[playerid][pRangeBooth] = -1;
  		PlayerData[playerid][pTargets] = 0;
  		PlayerData[playerid][pTargetLevel] = 0;
	}
	return 1;
}

stock Booth_Refresh(playerid)
{
	new id = PlayerData[playerid][pRangeBooth];

	if (id == -1)
	    return 0;

	if (IsValidObject(g_BoothObject[id])) {
	    DestroyObject(g_BoothObject[id]);
	}
	g_BoothObject[id] = CreateObject(1583, arrBoothPositions[id][0] - 15.0, arrBoothPositions[id][1] + 1.5, arrBoothPositions[id][2], 0.0, 0.0, 90.0);

	return MoveObject(g_BoothObject[id], arrBoothPositions[id][0] - 1.0, arrBoothPositions[id][1] + 1.5, arrBoothPositions[id][2], (!PlayerData[playerid][pTargetLevel]) ? (2.0) : (2.0 + (PlayerData[playerid][pTargetLevel] * 1.2)));
}

stock UpdateWeapons(playerid)
{
	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i])
    {
		if ((i == 2 && PlayerData[playerid][pTazer]) || (i == 3 && PlayerData[playerid][pBeanBag]))
		    continue;

        GetPlayerWeaponData(playerid, i, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);

        if (PlayerData[playerid][pGuns][i] != 0 && !PlayerData[playerid][pAmmo][i]) {
            PlayerData[playerid][pGuns][i] = 0;
		}
	}
	return 1;
}

stock ATM_Delete(atmid)
{
	if (atmid != -1 && ATMData[atmid][atmExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `atm` WHERE `atmID` = '%d'", ATMData[atmid][atmID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamicObject(ATMData[atmid][atmObject]))
	        DestroyDynamicObject(ATMData[atmid][atmObject]);

	    if (IsValidDynamic3DTextLabel(ATMData[atmid][atmText3D]))
	        DestroyDynamic3DTextLabel(ATMData[atmid][atmText3D]);

	    ATMData[atmid][atmExists] = false;
	    ATMData[atmid][atmID] = 0;
	}
	return 1;
}

ATM_Nearest(playerid)
{
    for (new i = 0; i != MAX_ATM_MACHINES; i ++) if (ATMData[i][atmExists] && IsPlayerInRangeOfPoint(playerid, 2.5, ATMData[i][atmPos][0], ATMData[i][atmPos][1], ATMData[i][atmPos][2]))
	{
		if (GetPlayerInterior(playerid) == ATMData[i][atmInterior] && GetPlayerVirtualWorld(playerid) == ATMData[i][atmWorld])
			return i;
	}
	return -1;
}

stock ATM_Create(playerid)
{
    new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_ATM_MACHINES; i ++) if (!ATMData[i][atmExists])
		{
		    ATMData[i][atmExists] = true;

		    x += 1.0 * floatsin(-angle, degrees);
			y += 1.0 * floatcos(-angle, degrees);

            ATMData[i][atmPos][0] = x;
            ATMData[i][atmPos][1] = y;
            ATMData[i][atmPos][2] = z;
            ATMData[i][atmPos][3] = angle;

            ATMData[i][atmInterior] = GetPlayerInterior(playerid);
            ATMData[i][atmWorld] = GetPlayerVirtualWorld(playerid);

			ATM_Refresh(i);
			mysql_tquery(g_iHandle, "INSERT INTO `atm` (`atmInterior`) VALUES(0)", "OnATMCreated", "d", i);

			return i;
		}
	}
	return -1;
}

stock ATM_Refresh(atmid)
{
	if (atmid != -1 && ATMData[atmid][atmExists])
	{
	    if (IsValidDynamicObject(ATMData[atmid][atmObject]))
	        DestroyDynamicObject(ATMData[atmid][atmObject]);

	    if (IsValidDynamic3DTextLabel(ATMData[atmid][atmText3D]))
	        DestroyDynamic3DTextLabel(ATMData[atmid][atmText3D]);

		new
	        string[64];

		format(string, sizeof(string), "[ATM %d]\n{FFFFFF}/atm to use this machine.", atmid);

		ATMData[atmid][atmObject] = CreateDynamicObject(2942, ATMData[atmid][atmPos][0], ATMData[atmid][atmPos][1], ATMData[atmid][atmPos][2], 0.0, 0.0, ATMData[atmid][atmPos][3], ATMData[atmid][atmWorld], ATMData[atmid][atmInterior]);
        ATMData[atmid][atmText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, ATMData[atmid][atmPos][0], ATMData[atmid][atmPos][1], ATMData[atmid][atmPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, ATMData[atmid][atmWorld], ATMData[atmid][atmInterior]);

		return 1;
	}
	return 0;
}

stock ATM_Save(atmid)
{
	new
	    query[200];

	format(query, sizeof(query), "UPDATE `atm` SET `atmX` = '%.4f', `atmY` = '%.4f', `atmZ` = '%.4f', `atmA` = '%.4f', `atmInterior` = '%d', `atmWorld` = '%d' WHERE `atmID` = '%d'",
	    ATMData[atmid][atmPos][0],
	    ATMData[atmid][atmPos][1],
	    ATMData[atmid][atmPos][2],
	    ATMData[atmid][atmPos][3],
	    ATMData[atmid][atmInterior],
	    ATMData[atmid][atmWorld],
	    ATMData[atmid][atmID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock IsVehicleImpounded(vehicleid)
{
    new id = Car_GetID(vehicleid);

	if (id != -1 && CarData[id][carImpounded] != -1 && CarData[id][carImpoundPrice] > 0)
	    return 1;

	return 0;
}

stock Impound_Delete(impoundid)
{
    if (impoundid != -1 && ImpoundData[impoundid][impoundExists])
	{
	    new
	        query[64];

		format(query, sizeof(query), "DELETE FROM `impoundlots` WHERE `impoundID` = '%d'", ImpoundData[impoundid][impoundID]);
		mysql_tquery(g_iHandle, query);

        if (IsValidDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]))
		    DestroyDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]);

	    if (IsValidDynamicPickup(ImpoundData[impoundid][impoundPickup]))
		    DestroyDynamicPickup(ImpoundData[impoundid][impoundPickup]);

		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists] && CarData[i][carImpounded] == ImpoundData[impoundid][impoundID]) {
		    CarData[i][carImpounded] = 0;
		    CarData[i][carImpoundPrice] = 0;
		    Car_Save(i);
		}
        ImpoundData[impoundid][impoundExists] = false;
        ImpoundData[impoundid][impoundID] = 0;
	}
	return 1;
}

stock GetImpoundByID(sqlid)
{
	for (new i = 0; i < MAX_IMPOUND_LOTS; i ++) if (ImpoundData[i][impoundExists] && ImpoundData[i][impoundID] == sqlid) {
	    return i;
	}
	return -1;
}

stock Impound_Nearest(playerid)
{
	for (new i = 0; i < MAX_IMPOUND_LOTS; i ++) if (ImpoundData[i][impoundExists] && IsPlayerInRangeOfPoint(playerid, 50.0, ImpoundData[i][impoundLot][0], ImpoundData[i][impoundLot][1], ImpoundData[i][impoundLot][2])) {
	    return i;
	}
	return -1;
}

stock Impound_Create(Float:x, Float:y, Float:z)
{
	for (new i = 0; i != MAX_IMPOUND_LOTS; i ++) if (!ImpoundData[i][impoundExists])
	{
	    ImpoundData[i][impoundExists] = true;
	    ImpoundData[i][impoundLot][0] = x;
	    ImpoundData[i][impoundLot][1] = y;
	    ImpoundData[i][impoundLot][2] = z;
	    ImpoundData[i][impoundRelease][0] = 0.0;
	    ImpoundData[i][impoundRelease][1] = 0.0;
	    ImpoundData[i][impoundRelease][2] = 0.0;

		mysql_tquery(g_iHandle, "INSERT INTO `impoundlots` (`impoundLotX`) VALUES('0.0')", "OnImpoundCreated", "d", i);
		Impound_Refresh(i);

		return i;
	}
	return -1;
}

stock Impound_Refresh(impoundid)
{
	if (impoundid != -1 && ImpoundData[impoundid][impoundExists])
	{
	    new
	        string[64];

		if (IsValidDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]))
		    DestroyDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]);

	    if (IsValidDynamicPickup(ImpoundData[impoundid][impoundPickup]))
		    DestroyDynamicPickup(ImpoundData[impoundid][impoundPickup]);

		format(string, sizeof(string), "[Impound %d]\n{FFFFFF}/impound to impound a vehicle.", impoundid);
        ImpoundData[impoundid][impoundText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, ImpoundData[impoundid][impoundLot][0], ImpoundData[impoundid][impoundLot][1], ImpoundData[impoundid][impoundLot][2], 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
        ImpoundData[impoundid][impoundPickup] = CreateDynamicPickup(1239, 23, ImpoundData[impoundid][impoundLot][0], ImpoundData[impoundid][impoundLot][1], ImpoundData[impoundid][impoundLot][2]);
	}
	return 1;
}

stock Impound_Save(impoundid)
{
	new
		query[300];

	format(query, sizeof(query), "UPDATE `impoundlots` SET `impoundLotX` = '%.4f', `impoundLotY` = '%.4f', `impoundLotZ` = '%.4f', `impoundReleaseX` = '%.4f', `impoundReleaseY` = '%.4f', `impoundReleaseZ` = '%.4f', `impoundReleaseA` = '%.4f' WHERE `impoundID` = '%d'",
        ImpoundData[impoundid][impoundLot][0],
        ImpoundData[impoundid][impoundLot][1],
        ImpoundData[impoundid][impoundLot][2],
        ImpoundData[impoundid][impoundRelease][0],
        ImpoundData[impoundid][impoundRelease][1],
        ImpoundData[impoundid][impoundRelease][2],
        ImpoundData[impoundid][impoundRelease][3],
        ImpoundData[impoundid][impoundID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Backpack_Items(playerid, id)
{
 	if (id != -1 && BackpackData[id][backpackExists])
 	{
 	    new
	        string[MAX_BACKPACK_CAPACITY * 32],
			count = 0;

	    for (new i = 0; i < MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id)
	    {
	        if (BackpackItems[i][bItemQuantity] == 1)
	            format(string, sizeof(string), "%s%s\n", string, BackpackItems[i][bItemName]);

			else format(string, sizeof(string), "%s%s (%d)\n", string, BackpackItems[i][bItemName], BackpackItems[i][bItemQuantity]);

			BackpackListed[playerid][count++] = i;
		}
		strcat(string, "Take Backpack");

		PlayerData[playerid][pBackpackLoot] = id;
		Dialog_Show(playerid, BackpackLoot, DIALOG_STYLE_LIST, "Backpack", string, "Select", "Cancel");
	}
	return 1;
}

stock Backpack_Open(playerid)
{
	new id = GetPlayerBackpack(playerid);

	if (id != -1)
	{
	    new
	        string[MAX_BACKPACK_CAPACITY * 32],
			count = 0;

		string = "Add Item\n";

	    for (new i = 0; i < MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id)
	    {
	        if (BackpackItems[i][bItemQuantity] == 1)
	            format(string, sizeof(string), "%s%s\n", string, BackpackItems[i][bItemName]);

			else format(string, sizeof(string), "%s%s (%d)\n", string, BackpackItems[i][bItemName], BackpackItems[i][bItemQuantity]);

			BackpackListed[playerid][count++] = i;
		}
		Dialog_Show(playerid, Backpack, DIALOG_STYLE_LIST, "My Backpack", string, "Select", "Cancel");
	}
	return 1;
}

stock Backpack_GetItems(id)
{
	new count;

	for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id) {
	    count++;
	}
	return count;
}

stock Backpack_GetFreeID()
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (!BackpackData[i][backpackExists]) {
	    return i;
	}
	return -1;
}

stock Backpack_Refresh(id)
{
	if (id != -1 && BackpackData[id][backpackExists])
	{
	    if (IsValidDynamicObject(BackpackData[id][backpackObject]))
		    DestroyDynamicObject(BackpackData[id][backpackObject]);

		if (IsValidDynamic3DTextLabel(BackpackData[id][backpackText3D]))
		    DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);

		if (!BackpackData[id][backpackPlayer]) {
	        BackpackData[id][backpackObject] = CreateDynamicObject(3026, BackpackData[id][backpackPos][0], BackpackData[id][backpackPos][1], BackpackData[id][backpackPos][2] - 0.8, -90.0, 0.0, 0.0, BackpackData[id][backpackWorld], BackpackData[id][backpackInterior]);
    	   	BackpackData[id][backpackText3D] = CreateDynamic3DTextLabel("[Backpack]\n{FFFFFF}Press 'N' to view the items.", COLOR_DEPARTMENT, BackpackData[id][backpackPos][0], BackpackData[id][backpackPos][1], BackpackData[id][backpackPos][2] - 0.8, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, BackpackData[id][backpackWorld], BackpackData[id][backpackInterior]);
		}
	}
	return 1;
}

stock Backpack_GetItemID(id, name[])
{
	for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id && !strcmp(BackpackItems[i][bItemName], name, true)) {
	    return i;
	}
	return -1;
}

stock Backpack_GetFreeItem()
{
	for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if (!BackpackItems[i][bItemExists]) {
	    return i;
	}
	return -1;
}

stock Backpack_HasItem(id, name[])
{
	if (id != -1 && BackpackData[id][backpackExists])
		return Backpack_GetItemID(id, name) != -1;

	return 0;
}

stock Backpack_Count(id, name[])
{
	new itemid;

	if (id != -1 && BackpackData[id][backpackExists])
	{
		itemid = Backpack_GetItemID(id, name);

		if (itemid != -1)
		    return BackpackItems[itemid][bItemQuantity];
	}
	return 0;
}

stock Backpack_Add(id, name[], model, quantity = 1)
{
	new
	    query[128];

	if (id != -1 && BackpackData[id][backpackExists])
	{
	    new itemid = Backpack_GetItemID(id, name);

	    if (itemid != -1)
		{
	        format(query, sizeof(query), "UPDATE `backpackitems` SET `itemQuantity` = `itemQuantity` + %d WHERE `itemID` = '%d'", quantity, BackpackItems[itemid][bItemID]);
	        mysql_tquery(g_iHandle, query);

			return BackpackItems[itemid][bItemQuantity] += quantity;
		}
		else if ((itemid = Backpack_GetFreeItem()) != -1)
		{
		    format(BackpackItems[itemid][bItemName], 32, name);

		    BackpackItems[itemid][bItemBackpack] = id;
		    BackpackItems[itemid][bItemExists] = true;
		    BackpackItems[itemid][bItemModel] = model;
		    BackpackItems[itemid][bItemQuantity] = quantity;

	        format(query, sizeof(query), "INSERT INTO `backpackitems` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", BackpackData[id][backpackID], name, model, quantity);
	        mysql_tquery(g_iHandle, query, "OnBackpackAdd", "dd", id, itemid);

	        return 1;
		}
	}
	return 0;
}

stock Backpack_Remove(id, name[], quantity = 1)
{
	new
	    query[128];

	if (id != -1 && BackpackData[id][backpackExists])
	{
	    new itemid = Backpack_GetItemID(id, name);

	    if (itemid != -1)
		{
			if (BackpackItems[itemid][bItemQuantity] > 0)
			{
				BackpackItems[itemid][bItemQuantity] -= quantity;
			}
			if (BackpackItems[itemid][bItemQuantity] < 1)
			{
		        format(query, sizeof(query), "DELETE FROM `backpackitems` WHERE `itemID` = '%d'", BackpackItems[itemid][bItemID]);
		        mysql_tquery(g_iHandle, query);

			    BackpackItems[itemid][bItemBackpack] = -1;
			    BackpackItems[itemid][bItemExists] = false;
			    BackpackItems[itemid][bItemModel] = 0;
		    	BackpackItems[itemid][bItemQuantity] = 0;
		    }
			else
			{
                format(query, sizeof(query), "UPDATE `backpackitems` SET `itemQuantity` = `itemQuantity` - %d WHERE `itemID` = '%d'", quantity, BackpackItems[itemid][bItemID]);
		        mysql_tquery(g_iHandle, query);
			}
		    return 1;
		}
	}
	return 0;
}

stock GetHouseBackpack(houseid)
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackHouse] == HouseData[houseid][houseID]) {
	    return i;
	}
	return -1;
}

stock GetVehicleBackpack(carid)
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackVehicle] == CarData[carid][carID]) {
	    return i;
	}
	return -1;
}

stock GetPlayerBackpack(playerid)
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackPlayer] == PlayerData[playerid][pID]) {
	    return i;
	}
	return -1;
}

stock Backpack_Create(playerid)
{
	new id = Backpack_GetFreeID();

	if (id != -1)
	{
		BackpackData[id][backpackExists] = true;
		BackpackData[id][backpackPlayer] = PlayerData[playerid][pID];
		BackpackData[id][backpackHouse] = 0;
		BackpackData[id][backpackVehicle] = 0;
		BackpackData[id][backpackPos][0] = 0.0;
		BackpackData[id][backpackPos][1] = 0.0;
		BackpackData[id][backpackPos][2] = 0.0;

		mysql_tquery(g_iHandle, "INSERT INTO `backpacks` (`backpackInterior`) VALUES(0)", "OnBackpackCreated", "d", id);
		return id;
	}
	return -1;
}

stock Backpack_Delete(id)
{
	if (id != -1 && BackpackData[id][backpackExists])
	{
	    new
	        str[64];

		format(str, sizeof(str), "DELETE FROM `backpacks` WHERE `backpackID` = '%d'", BackpackData[id][backpackID]);
		mysql_tquery(g_iHandle, str);

		if (IsValidDynamicObject(BackpackData[id][backpackObject]))
		    DestroyDynamicObject(BackpackData[id][backpackObject]);

		if (IsValidDynamic3DTextLabel(BackpackData[id][backpackText3D]))
		    DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);

        BackpackData[id][backpackExists] = false;
        BackpackData[id][backpackID] = 0;
        BackpackData[id][backpackPlayer] = 0;
        BackpackData[id][backpackHouse] = 0;
        BackpackData[id][backpackVehicle] = 0;
	}
	return 1;
}

stock Backpack_Save(id)
{
	new
	    query[256];

    format(query, sizeof(query), "UPDATE `backpacks` SET `backpackPlayer` = '%d', `backpackHouse` = '%d', `backpackVehicle` = '%d', `backpackX` = '%.4f', `backpackY` = '%.4f', `backpackZ` = '%.4f', `backpackInterior` = '%d', `backpackWorld` = '%d' WHERE `backpackID` = '%d'",
        BackpackData[id][backpackPlayer],
        BackpackData[id][backpackHouse],
        BackpackData[id][backpackVehicle],
        BackpackData[id][backpackPos][0],
        BackpackData[id][backpackPos][1],
        BackpackData[id][backpackPos][2],
        BackpackData[id][backpackInterior],
        BackpackData[id][backpackWorld],
        BackpackData[id][backpackID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock ShowLoginTD(playerid)
{
	for (new i = 84; i < 91; i ++) {
	    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
	}
	return 1;
}

stock HideLoginTD(playerid)
{
	for (new i = 84; i < 91; i ++) {
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	}
	return 1;
}

stock IsValidObjectModel(modelid)
{
	if (modelid < 0 || modelid > 20000)
	    return 0;

    switch (modelid)
	{
		case 18632..18645, 18646..18658, 18659..18667, 18668..19299, 19301..19515, 18631, 331, 333..339, 318..321, 325, 326, 341..344, 346..353, 355..370, 372:
			return 1;
	}
    new const g_arrModelData[] =
	{
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128,
        -515899393, -134217729, -1, -1, 33554431, -1, -1, -1, -14337, -1, -33,
      	127, 0, 0, 0, 0, 0, -8388608, -1, -1, -1, -16385, -1, -1, -1, -1, -1,
       -1, -1, -33, -1, -771751937, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, 33554431, -25, -1, -1, -1, -1, -1, -1,
       -1073676289, -2147483648, 34079999, 2113536, -4825600, -5, -1, -3145729,
       -1, -16777217, -63, -1, -1, -1, -1, -201326593, -1, -1, -1, -1, -1,
       -257, -1, 1073741823, -133122, -1, -1, -65, -1, -1, -1, -1, -1, -1,
       -2146435073, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1073741823, -64, -1,
       -1, -1, -1, -2635777, 134086663, 0, -64, -1, -1, -1, -1, -1, -1, -1,
       -536870927, -131069, -1, -1, -1, -1, -1, -1, -1, -1, -16384, -1,
       -33554433, -1, -1, -1, -1, -1, -1610612737, 524285, -128, -1,
       2080309247, -1, -1, -1114113, -1, -1, -1, 66977343, -524288, -1, -1, -1,
       -1, -2031617, -1, 114687, -256, -1, -4097, -1, -4097, -1, -1,
       1010827263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32768, -1, -1, -1, -1, -1,
       2147483647, -33554434, -1, -1, -49153, -1148191169, 2147483647,
       -100781080, -262145, -57, 134217727, -8388608, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1048577, -1, -449, -1017, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1835009, -2049, -1, -1, -1, -1, -1, -1,
       -8193, -1, -536870913, -1, -1, -1, -1, -1, -87041, -1, -1, -1, -1, -1,
       -1, -209860, -1023, -8388609, -2096897, -1, -1048577, -1, -1, -1, -1,
       -1, -1, -897, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1610612737,
       -3073, -28673, -1, -1, -1, -1537, -1, -1, -13, -1, -1, -1, -1, -1985,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1056964609, -1, -1, -1,
       -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -236716037, -1, -1, -1, -1, -1, -1, -1, -536870913, 3, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -2097153, -2109441, -1, 201326591, -4194304, -1, -1,
       -241, -1, -1, -1, -1, -1, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, -32768, -1, -1, -1, -2, -671096835, -1, -8388609, -66323585, -13,
       -1793, -32257, -247809, -1, -1, -513, 16252911, 0, 0, 0, -131072,
       33554383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8356095, 0, 0, 0, 0, 0,
       0, -256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -268435449, -1, -1, -2049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       92274627, -65536, -2097153, -268435457, 591191935, 1, 0, -16777216, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
	};
 	return ((modelid >= 0) && ((modelid / 32) < sizeof(g_arrModelData)) && (g_arrModelData[modelid / 32] & (1 << (modelid % 32))));
}

forward CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ);
public CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	new id = -1;

	if (GateData[gateid][gateExists] && GateData[gateid][gateOpened])
 	{
	 	MoveDynamicObject(GateData[gateid][gateObject], fX, fY, fZ, speed, fRotX, fRotY, fRotZ);

	 	if ((id = GetGateByID(linkid)) != -1)
            MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], speed, GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);

		GateData[id][gateOpened] = 0;
		return 1;
	}
	return 0;
}

stock Gate_Operate(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
	    new id = -1;

		if (!GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = true;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gateMove][0], GateData[gateid][gateMove][1], GateData[gateid][gateMove][2], GateData[gateid][gateSpeed], GateData[gateid][gateMove][3], GateData[gateid][gateMove][4], GateData[gateid][gateMove][5]);

            if (GateData[gateid][gateTime] > 0) {
				GateData[gateid][gateTimer] = SetTimerEx("CloseGate", GateData[gateid][gateTime], false, "ddfffffff", gateid, GateData[gateid][gateLinkID], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);
			}
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = true;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gateMove][0], GateData[id][gateMove][1], GateData[id][gateMove][2], GateData[id][gateSpeed], GateData[id][gateMove][3], GateData[id][gateMove][4], GateData[id][gateMove][5]);
			}
		}
		else if (GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = false;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);

            if (GateData[gateid][gateTime] > 0) {
				KillTimer(GateData[gateid][gateTimer]);
		    }
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = false;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gateSpeed], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);
			}
		}
	}
	return 1;
}

stock Gate_Create(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_GATES; i ++) if (!GateData[i][gateExists])
		{
		    GateData[i][gateExists] = true;
			GateData[i][gateModel] = 980;
			GateData[i][gateSpeed] = 3.0;
			GateData[i][gateRadius] = 5.0;
			GateData[i][gateOpened] = 0;
			GateData[i][gateTime] = 0;

			GateData[i][gatePos][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gatePos][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gatePos][2] = z;
			GateData[i][gatePos][3] = 0.0;
			GateData[i][gatePos][4] = 0.0;
			GateData[i][gatePos][5] = angle;

			GateData[i][gateMove][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gateMove][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gateMove][2] = z - 10.0;
			GateData[i][gateMove][3] = -1000.0;
			GateData[i][gateMove][4] = -1000.0;
			GateData[i][gateMove][5] = -1000.0;

            GateData[i][gateInterior] = GetPlayerInterior(playerid);
            GateData[i][gateWorld] = GetPlayerVirtualWorld(playerid);

            GateData[i][gateLinkID] = -1;
            GateData[i][gateFaction] = -1;

            GateData[i][gatePass][0] = '\0';
            GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);

			mysql_tquery(g_iHandle, "INSERT INTO `gates` (`gateModel`) VALUES(980)", "OnGateCreated", "d", i);
			return i;
		}
	}
	return -1;
}

stock Gate_Delete(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
		new
		    query[64];

		format(query, sizeof(query), "DELETE FROM `gates` WHERE `gateID` = '%d'", GateData[gateid][gateID]);
		mysql_tquery(g_iHandle, query);

		if (IsValidDynamicObject(GateData[gateid][gateObject]))
		    DestroyDynamicObject(GateData[gateid][gateObject]);

		for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateLinkID] == GateData[gateid][gateID]) {
		    GateData[i][gateLinkID] = -1;
		    Gate_Save(i);
		}
		if (GateData[gateid][gateOpened] && GateData[gateid][gateTime] > 0) {
		    KillTimer(GateData[gateid][gateTimer]);
		}
	    GateData[gateid][gateExists] = false;
	    GateData[gateid][gateID] = 0;
	    GateData[gateid][gateOpened] = 0;
	}
	return 1;
}

stock Gate_Save(gateid)
{
	new
	    query[768];

	format(query, sizeof(query), "UPDATE `gates` SET `gateModel` = '%d', `gateSpeed` = '%.4f', `gateRadius` = '%.4f', `gateTime` = '%d', `gateX` = '%.4f', `gateY` = '%.4f', `gateZ` = '%.4f', `gateRX` = '%.4f', `gateRY` = '%.4f', `gateRZ` = '%.4f', `gateInterior` = '%d', `gateWorld` = '%d', `gateMoveX` = '%.4f', `gateMoveY` = '%.4f', `gateMoveZ` = '%.4f', `gateMoveRX` = '%.4f', `gateMoveRY` = '%.4f', `gateMoveRZ` = '%.4f', `gateLinkID` = '%d', `gateFaction` = '%d', `gatePass` = '%s' WHERE `gateID` = '%d'",
	    GateData[gateid][gateModel],
	    GateData[gateid][gateSpeed],
	    GateData[gateid][gateRadius],
	    GateData[gateid][gateTime],
	    GateData[gateid][gatePos][0],
	    GateData[gateid][gatePos][1],
	    GateData[gateid][gatePos][2],
	    GateData[gateid][gatePos][3],
	    GateData[gateid][gatePos][4],
	    GateData[gateid][gatePos][5],
	    GateData[gateid][gateInterior],
	    GateData[gateid][gateWorld],
	    GateData[gateid][gateMove][0],
	    GateData[gateid][gateMove][1],
	    GateData[gateid][gateMove][2],
	    GateData[gateid][gateMove][3],
	    GateData[gateid][gateMove][4],
	    GateData[gateid][gateMove][5],
	    GateData[gateid][gateLinkID],
	    GateData[gateid][gateFaction],
	    SQL_ReturnEscaped(GateData[gateid][gatePass]),
	    GateData[gateid][gateID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock ChangeName(playerid, name[], bool:logging = true)
{
	new
	    id = PlayerData[playerid][pCharacter] - 1,
		query[160],
		oldname[24];

	GetPlayerName(playerid, oldname, sizeof(oldname));

	if (logging)
	{
	    format(query, sizeof(query), "INSERT INTO `namechanges` (`OldName`, `NewName`, `Date`) VALUES('%s', '%s', '%s')", oldname, name, ReturnDate());
		mysql_tquery(g_iHandle, query);
	}
    format(PlayerCharacters[playerid][id], MAX_PLAYER_NAME + 1, name);
	SetPlayerName(playerid, name);

	format(query, sizeof(query), "UPDATE `characters` SET `chara` = '%s' WHERE `chara` = '%s'", name, oldname);
	mysql_tquery(g_iHandle, query);

	return 1;
}

stock Tax_Percent(price)
{
	return floatround((float(price) / 100) * 10);
}

stock Tax_AddMoney(amount)
{
	g_TaxVault = g_TaxVault + amount;

	//Server_Save();

	return 0;
}

stock Tax_AddPercent(price)
{
	new money = (price - Tax_Percent(price));

	g_TaxVault = g_TaxVault + money;

	//Server_Save();
	return 1;
}

stock file_parse_int(File:handle, const field[])
{
	new
	    str[16];

	return (file_parse(handle, field, str), strval(str));
}

stock file_parse(File:handle, const field[], dest[], size = sizeof(dest))
{
	if (!handle)
	    return 0;

	new
	    str[128],
		pos = strlen(field);

	fseek(handle, 0, seek_start);

	while (fread(handle, str)) if (strfind(str, field, true) == 0 && (str[pos] == '=' || str[pos] == ' '))
	{
	    strmid(dest, str, (str[pos] == '=') ? (pos + 1) : (pos + 3), strlen(str), size);

		if ((pos = strfind(dest, "\r")) != -1)
			dest[pos] = '\0';
   		else if ((pos = strfind(dest, "\n")) != -1)
     		dest[pos] = '\0';

		return 1;
	}
	return 0;
}

cache_get_field_int(row, const field_name[])
{
	new
	    str[12];

	cache_get_field_content(row, field_name, str, g_iHandle, sizeof(str));
	return strval(str);
}

Ticket_Add(suspectid, price, reason[])
{
	new
	    string[160];

	for (new i = 0; i != MAX_PLAYER_TICKETS; i ++) if (!TicketData[suspectid][i][ticketExists])
	{
	    TicketData[suspectid][i][ticketExists] = true;
	    TicketData[suspectid][i][ticketFee] = price;

	    format(TicketData[suspectid][i][ticketDate], 36, ReturnDate());
	    format(TicketData[suspectid][i][ticketReason], 64, reason);

		format(string, sizeof(string), "INSERT INTO `tickets` (`ID`, `ticketFee`, `ticketDate`, `ticketReason`) VALUES('%d', '%d', '%s', '%s')", PlayerData[suspectid][pID], price, TicketData[suspectid][i][ticketDate], SQL_ReturnEscaped(reason));
		mysql_tquery(g_iHandle, string, "OnTicketCreated", "dd", suspectid, i);

		return i;
	}
	return -1;
}

Ticket_Remove(playerid, ticketid)
{
	if (ticketid != -1 && TicketData[playerid][ticketid][ticketExists])
	{
	    new
	        string[90];

		format(string, sizeof(string), "DELETE FROM `tickets` WHERE `ID` = '%d' AND `ticketID` = '%d'", PlayerData[playerid][pID], TicketData[playerid][ticketid][ticketID]);
		mysql_tquery(g_iHandle, string);

	    TicketData[playerid][ticketid][ticketExists] = false;
	    TicketData[playerid][ticketid][ticketID] = 0;
	    TicketData[playerid][ticketid][ticketFee] = 0;
	}
	return 1;
}

Waypoint_Set(playerid, name[], Float:x, Float:y, Float:z)
{
    format(PlayerData[playerid][pLocation], 32, name);

    PlayerData[playerid][pWaypoint] = 1;
   	PlayerData[playerid][pWaypointPos][0] = x;
    PlayerData[playerid][pWaypointPos][1] = y;
   	PlayerData[playerid][pWaypointPos][2] = z;

	SetPlayerCheckpoint(playerid, x, y, z, 3.0);
	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][69]);

	return 1;
}

Location_Add(playerid, name[], Float:x, Float:y, Float:z)
{
	new
	    query[192];

	for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (!LocationData[playerid][i][locationExists])
	{
	    LocationData[playerid][i][locationExists] = true;
	    format(LocationData[playerid][i][locationName], 32, name);

	    LocationData[playerid][i][locationPos][0] = x;
	    LocationData[playerid][i][locationPos][1] = y;
	    LocationData[playerid][i][locationPos][2] = z;

		format(query, sizeof(query), "INSERT INTO `gps` (`ID`, `locationName`, `locationX`, `locationY`, `locationZ`) VALUES('%d', '%s', '%.4f', '%.4f', '%.4f')", PlayerData[playerid][pID], SQL_ReturnEscaped(name), x, y, z);
		mysql_tquery(g_iHandle, query, "OnLocationCreated", "dd", playerid, i);

		return i;
	}
	return -1;
}

Location_GetID(playerid, name[])
{
    for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (LocationData[playerid][i][locationExists] && !strcmp(LocationData[playerid][i][locationName], name, true)) {
        return i;
	}
	return -1;
}

Location_Delete(playerid, name[])
{
	new
		query[96];

    for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (LocationData[playerid][i][locationExists] && !strcmp(LocationData[playerid][i][locationName], name))
	{
	    LocationData[playerid][i][locationExists] = false;

	    LocationData[playerid][i][locationPos][0] = 0.0;
	    LocationData[playerid][i][locationPos][1] = 0.0;
	    LocationData[playerid][i][locationPos][2] = 0.0;

	    format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d' AND `locationID` = '%d'", PlayerData[playerid][pID], LocationData[playerid][i][locationID]);
	    mysql_tquery(g_iHandle, query);
		return 1;
	}
	return 0;
}

stock SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, time = 2000)
{
	if (PlayerData[playerid][pFreeze])
	{
	    KillTimer(PlayerData[playerid][pFreezeTimer]);

	    PlayerData[playerid][pFreeze] = 0;
	    TogglePlayerControllable(playerid, 1);
	}
	SetPlayerPos(playerid, x, y, z + 0.5);
	TogglePlayerControllable(playerid, 0);

	PlayerData[playerid][pFreeze] = 1;
	PlayerData[playerid][pFreezeTimer] = SetTimerEx("SetPlayerToUnfreeze", time, false, "dfff", playerid, x, y, z);
	return 1;
}

forward SetPlayerToUnfreeze(playerid, Float:x, Float:y, Float:z);
public SetPlayerToUnfreeze(playerid, Float:x, Float:y, Float:z)
{
	if (!IsPlayerInRangeOfPoint(playerid, 15.0, x, y, z))
	    return 0;

	PlayerData[playerid][pFreeze] = 0;

	SetPlayerPos(playerid, x, y, z);
	TogglePlayerControllable(playerid, 1);
	return 1;
}

forward RefillUpdate(playerid, vehicleid);
public RefillUpdate(playerid, vehicleid)
{
	if (!PlayerData[playerid][pFuelCan] || GetNearestVehicle(playerid) != vehicleid)
	    return 0;

	CoreVehicles[vehicleid][vehFuel] = (CoreVehicles[vehicleid][vehFuel] + 15 >= 100) ? (100) : (CoreVehicles[vehicleid][vehFuel] + 15);

	PlayerData[playerid][pFuelCan] = 0;
	SendServerMessage(playerid, "You have filled up your vehicle with a can of fuel.");
	return 1;
}

stock EquipWeapon(playerid, weapon[])
{
	if (PlayerData[playerid][pPlayingHours] < 2)
	    return SendErrorMessage(playerid, "You must play at least 2 hours first.");

	if (IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "You must exit the vehicle first.");

	if (!strcmp(weapon, "Colt 45", true))
	{
	    if (!Inventory_HasItem(playerid, "Colt 45"))
	        return SendErrorMessage(playerid, "You don't have this weapon.");

	    if (PlayerHasWeapon(playerid, 22))
	        return SendErrorMessage(playerid, "You already have this weapon.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "You're already holding a weapon (press 'N' to put it away).");

		HoldWeapon(playerid, 22);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out an empty Colt 45 and holds it.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Press 'N' to put the gun away. You must attach a magazine to use it.");
	}
	else if (!strcmp(weapon, "Glock-17", true))
	{
	    if (!Inventory_HasItem(playerid, "Glock-17"))
	        return SendErrorMessage(playerid, "You don't have this weapon.");

	    if (PlayerHasWeapon(playerid, 24))
	        return SendErrorMessage(playerid, "You already have this weapon.");

	    if (PlayerHasWeapon(playerid, 24))
	        return SendErrorMessage(playerid, "You already have this weapon.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "You're already holding a weapon (press 'N' to put it away).");

		HoldWeapon(playerid, 24);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out an empty Glock-17 and holds it.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Press 'N' to put the gun away. You must attach a magazine to use it.");
	}
	else if (!strcmp(weapon, "Shotgun", true))
	{
	    if (!Inventory_HasItem(playerid, "Shotgun"))
	        return SendErrorMessage(playerid, "You don't have this weapon.");

	    if (PlayerHasWeapon(playerid, 25))
	        return SendErrorMessage(playerid, "You already have this weapon.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "You're already holding a weapon (press 'N' to put it away).");

		HoldWeapon(playerid, 25);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out an empty Shotgun and holds it.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Press 'N' to put the gun away. You must attach a magazine to use it.");
	}
	else if (!strcmp(weapon, "Micro SMG", true))
	{
	    if (!Inventory_HasItem(playerid, "Micro SMG"))
	        return SendErrorMessage(playerid, "You don't have this weapon.");

	    if (PlayerHasWeapon(playerid, 28))
	        return SendErrorMessage(playerid, "You already have this weapon.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "You're already holding a weapon (press 'N' to put it away).");

		HoldWeapon(playerid, 28);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out an empty Micro SMG and holds it.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Press 'N' to put the gun away. You must attach a magazine to use it.");
	}
	else if (!strcmp(weapon, "Tec-9", true))
	{
	    if (!Inventory_HasItem(playerid, "Tec-9"))
	        return SendErrorMessage(playerid, "You don't have this weapon.");

	    if (PlayerHasWeapon(playerid, 32))
	        return SendErrorMessage(playerid, "You already have this weapon.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "You're already holding a weapon (press 'N' to put it away).");

		HoldWeapon(playerid, 32);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out an empty Tec-9 and holds it.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Press 'N' to put the gun away. You must attach a magazine to use it.");
	}
	else if (!strcmp(weapon, "MP5", true))
	{
	    if (!Inventory_HasItem(playerid, "MP5"))
	        return SendErrorMessage(playerid, "You don't have this weapon.");

	    if (PlayerHasWeapon(playerid, 29))
	        return SendErrorMessage(playerid, "You already have this weapon.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "You're already holding a weapon (press 'N' to put it away).");

		HoldWeapon(playerid, 29);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out an empty MP5 and holds it.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Press 'N' to put the gun away. You must attach a magazine to use it.");
	}
	else if (!strcmp(weapon, "AK-47", true))
	{
	    if (!Inventory_HasItem(playerid, "AK-47"))
	        return SendErrorMessage(playerid, "You don't have this weapon.");

	    if (PlayerHasWeapon(playerid, 30))
	        return SendErrorMessage(playerid, "You already have this weapon.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "You're already holding a weapon (press 'N' to put it away).");

		HoldWeapon(playerid, 30);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out an empty AK-47 and holds it.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Press 'N' to put the gun away. You must attach a magazine to use it.");
	}
	else if (!strcmp(weapon, "M4", true))
	{
	    if (!Inventory_HasItem(playerid, "M4"))
	        return SendErrorMessage(playerid, "You don't have this weapon.");

	    if (PlayerHasWeapon(playerid, 31))
	        return SendErrorMessage(playerid, "You already have this weapon.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "You're already holding a weapon (press 'N' to put it away).");

		HoldWeapon(playerid, 31);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out an empty M4 and holds it.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Press 'N' to put the gun away. You must attach a magazine to use it.");
	}
	else if (!strcmp(weapon, "Rifle", true))
	{
	    if (!Inventory_HasItem(playerid, "Rifle"))
	        return SendErrorMessage(playerid, "You don't have this weapon.");

	    if (PlayerHasWeapon(playerid, 33))
	        return SendErrorMessage(playerid, "You already have this weapon.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "You're already holding a weapon (press 'N' to put it away).");

		HoldWeapon(playerid, 33);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out an empty Rifle and holds it.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Press 'N' to put the gun away. You must attach a magazine to use it.");
	}
	else if (!strcmp(weapon, "Sniper", true))
	{
	    if (!Inventory_HasItem(playerid, "Sniper"))
	        return SendErrorMessage(playerid, "You don't have this weapon.");

	    if (PlayerHasWeapon(playerid, 34))
	        return SendErrorMessage(playerid, "You already have this weapon.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "You're already holding a weapon (press 'N' to put it away).");

		HoldWeapon(playerid, 34);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out an empty Sniper and holds it.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Press 'N' to put the gun away. You must attach a magazine to use it.");
	}
	else if (!strcmp(weapon, "Golf Club", true))
	{
	    if (!Inventory_HasItem(playerid, "Golf Club"))
	        return SendErrorMessage(playerid, "You don't have this weapon.");

	    if (PlayerHasWeapon(playerid, 2))
	        return SendErrorMessage(playerid, "You already have this weapon.");

	    GiveWeaponToPlayer(playerid, 2, 1);

	    Inventory_Remove(playerid, "Golf Club");
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has equipped a Golf Club from their inventory.", ReturnName(playerid, 0));
	}
	else if (!strcmp(weapon, "Knife", true))
	{
	    if (!Inventory_HasItem(playerid, "Knife"))
	        return SendErrorMessage(playerid, "You don't have this weapon.");

	    if (PlayerHasWeapon(playerid, 4))
	        return SendErrorMessage(playerid, "You already have this weapon.");

	    GiveWeaponToPlayer(playerid, 4, 1);

	    Inventory_Remove(playerid, "Knife");
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has equipped a Knife from their inventory.", ReturnName(playerid, 0));
	}
	else if (!strcmp(weapon, "Shovel", true))
	{
	    if (!Inventory_HasItem(playerid, "Shovel"))
	        return SendErrorMessage(playerid, "You don't have this weapon.");

	    if (PlayerHasWeapon(playerid, 6))
	        return SendErrorMessage(playerid, "You already have this weapon.");

	    GiveWeaponToPlayer(playerid, 6, 1);

	    Inventory_Remove(playerid, "Shovel");
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has equipped a Shovel from their inventory.", ReturnName(playerid, 0));
	}
    else if (!strcmp(weapon, "Katana", true))
	{
	    if (!Inventory_HasItem(playerid, "Katana"))
	        return SendErrorMessage(playerid, "You don't have this weapon.");

	    if (PlayerHasWeapon(playerid, 8))
	        return SendErrorMessage(playerid, "You already have this weapon.");

	    GiveWeaponToPlayer(playerid, 8, 1);

	    Inventory_Remove(playerid, "Katana");
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has equipped a Katana from their inventory.", ReturnName(playerid, 0));
	}
	return 1;
}

stock SetPlayerInPrison(playerid)
{
	new idx = random(sizeof(g_arrPrisonSpawns));

	SetPlayerPosEx(playerid, g_arrPrisonSpawns[idx][0], g_arrPrisonSpawns[idx][1], g_arrPrisonSpawns[idx][2] + 0.3);
	SetPlayerFacingAngle(playerid, g_arrPrisonSpawns[idx][3]);

	SetPlayerInterior(playerid, 5);
	SetPlayerVirtualWorld(playerid, PRISON_WORLD);

	ShowHungerTextdraw(playerid, 0);
	SetCameraBehindPlayer(playerid);
}

stock MDCVehicleSearch(playerid, plate[])
{
	new query[128];
	format(query, sizeof(query), "SELECT * FROM `cars` WHERE `carPlate` = '%s'", plate);
	mysql_tquery(g_iHandle, query, "OnCarOwnerMDC", "ds", playerid, plate);
	return 1;
}

CMD:relog(playerid, params[])
{
	DestroyObject(Stretcher[playerid]);
    TerminateConnection(playerid);
	SendNearbyMessage(playerid, 30.0, COLOR_GREY, "[SERVER] %s has logged out. (used /relog)", ReturnName(playerid, 0));
	SetPlayerName(playerid, PlayerData[playerid][pUsername]);

    ResetVariables(playerid);
	ResetStatistics(playerid);

    for (new i = 0; i < 100; i ++)
 	{
	    SendClientMessage(playerid, -1, "");
	}

    ResetPlayerWeapons(playerid);
	SetPlayerArmedWeapon(playerid, 0);
	pFishing[playerid] = 0;
	FishWeight[playerid] = 0;

    if (g_ServerRestart)
    {
	    TextDrawShowForPlayer(playerid, gServerTextdraws[3]);
	}
	for (new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
    {
	    RemovePlayerAttachedObject(playerid, i);
	}

    CancelSelectTextDraw(playerid);

	PlayerData[playerid][pAccount] = 1;
	TogglePlayerSpectating(playerid, 1);

	SetPlayerColor(playerid, DEFAULT_COLOR);
	SetPlayerArmour(playerid, 0.0);
	SetTimerEx("AccountCheck", 800, false, "d", playerid); // 400 ms
	return 1;
}



CMD:carid(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");
	static
		vehid;

	if(sscanf(params, "i", vehid)) return SendClientMessage(playerid, -1, "Usage error /carid <vehid>");
	vehid = Car_GetID(vehid);
	SendClientMessageEx(playerid, -1, "carID (DB):%d (vehid:%d) | ownerpid:%d | carfac:%d | carjob:%d | carHP:%f | realID: %d", CarData[vehid][carID], vehid, CarData[vehid][carOwner], CarData[vehid][carFaction], CarData[vehid][carJob], CarData[vehid][carHP], CarData[vehid][carVehicle]);
	return 1;
}

stock MDCPersonSearch(playerid, name[])
{
	new
	    string[128];

	format(string, sizeof(string), "SELECT * FROM `characters` WHERE `chara` = '%s'", SQL_ReturnEscaped(name));
	mysql_tquery(g_iHandle, string, "OnViewInfo", "ds", playerid, name);
	return 1;
}

stock ViewCharges(playerid, name[])
{
	new
	    string[128];

	format(string, sizeof(string), "SELECT * FROM `warrants` WHERE `Suspect` = '%s' ORDER BY `ID` DESC", SQL_ReturnEscaped(name));
	mysql_tquery(g_iHandle, string, "OnViewCharges", "ds", playerid, name);
	return 1;
}

stock AddWarrant(targetid, playerid, const description[])
{
	new
	    string[255];

	format(string, sizeof(string), "INSERT INTO `warrants` (`Suspect`, `Username`, `Date`, `Description`) VALUES('%s', '%s', '%s', '%s')", ReturnName(targetid), ReturnName(playerid), ReturnDate(), SQL_ReturnEscaped(description));
	mysql_tquery(g_iHandle, string);
}

stock GetPlayerLocationEx(playerid, &Float:fX, &Float:fY, &Float:fZ)
{
	new
	    id = -1;

    if ((id = House_Inside(playerid)) != -1)
	{
		fX = HouseData[id][housePos][0];
		fY = HouseData[id][housePos][1];
		fZ = HouseData[id][housePos][2];
	}
	else if ((id = Business_Inside(playerid)) != -1)
	{
		fX = BusinessData[id][bizPos][0];
		fY = BusinessData[id][bizPos][1];
		fZ = BusinessData[id][bizPos][2];
	}
	else if ((id = Entrance_Inside(playerid)) != -1)
	{
		fX = EntranceData[id][entrancePos][0];
		fY = EntranceData[id][entrancePos][1];
		fZ = EntranceData[id][entrancePos][2];
	}
	else GetPlayerPos(playerid, fX, fY, fZ);
	return 1;
}

stock GetPlayerLocation(playerid)
{
	new
	    Float:fX,
	    Float:fY,
		Float:fZ,
		string[32],
		id = -1;

	if ((id = House_Inside(playerid)) != -1)
	{
		fX = HouseData[id][housePos][0];
		fY = HouseData[id][housePos][1];
		fZ = HouseData[id][housePos][2];
	}
	else if ((id = Business_Inside(playerid)) != -1)
	{
		fX = BusinessData[id][bizPos][0];
		fY = BusinessData[id][bizPos][1];
		fZ = BusinessData[id][bizPos][2];
	}
	else if ((id = Entrance_Inside(playerid)) != -1)
	{
		fX = EntranceData[id][entrancePos][0];
		fY = EntranceData[id][entrancePos][1];
		fZ = EntranceData[id][entrancePos][2];
	}
	else GetPlayerPos(playerid, fX, fY, fZ);

	format(string, 32, GetLocation(fX, fY, fZ));
	return string;
}

stock GetLocation(Float:fX, Float:fY, Float:fZ)
{
    enum e_ZoneData
	{
     	e_ZoneName[32 char],
     	Float:e_ZoneArea[6]
	};
	new const g_arrZoneData[][e_ZoneData] =
	{
		{!"The Big Ear", 	              {-410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00}},
		{!"Aldea Malvada",                {-1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00}},
		{!"Angel Pine",                   {-2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00}},
		{!"Arco del Oeste",               {-901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00}},
		{!"Avispa Country Club",          {-2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00}},
		{!"Avispa Country Club",          {-2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10}},
		{!"Avispa Country Club",          {-2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10}},
		{!"Avispa Country Club",          {-2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70}},
		{!"Back o Beyond",                {-1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00}},
		{!"Battery Point",                {-2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00}},
		{!"Marina Bayside",                      {-2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00}},
		{!"Marina Bayside",               {-2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00}},
		{!"Beacon Hill",                  {-399.60, -1075.50, -1.40, -319.00, -977.50, 198.50}},
		{!"Blackfield",                   {964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90}},
		{!"Blackfield",                   {964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90}},
		{!"Blackfield Chapel",            {1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90}},
		{!"Blackfield Chapel",            {1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90}},
		{!"Blackfield Intersection",      {1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90}},
		{!"Blackfield Intersection",      {1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90}},
		{!"Blackfield Intersection",      {1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90}},
		{!"Blackfield Intersection",      {1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90}},
		{!"Blueberry",                    {104.50, -220.10, 2.30, 349.60, 152.20, 200.00}},
		{!"Blueberry",                    {19.60, -404.10, 3.80, 349.60, -220.10, 200.00}},
		{!"Blueberry Acres",              {-319.60, -220.10, 0.00, 104.50, 293.30, 200.00}},
		{!"Caligula's Palace",            {2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90}},
		{!"Caligula's Palace",            {2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90}},
		{!"Calton Heights",               {-2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00}},
		{!"Chinatown",                    {-2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00}},
		{!"City Hall",                    {-2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00}},
		{!"Come-A-Lot",                   {2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90}},
		{!"Commerce",                     {1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90}},
		{!"Commerce",                     {1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90}},
		{!"Commerce",                     {1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90}},
		{!"Commerce",                     {1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90}},
		{!"Commerce",                     {1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90}},
		{!"Commerce",                     {1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90}},
		{!"Conference Center",            {1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90}},
		{!"Conference Center",            {1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90}},
		{!"Cranberry Station",            {-2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00}},
		{!"Creek",                        {2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90}},
		{!"Dillimore",                    {580.70, -674.80, -9.50, 861.00, -404.70, 200.00}},
		{!"Doherty",                      {-2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00}},
		{!"Doherty",                      {-2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00}},
		{!"Downtown",                     {-1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00}},
		{!"Downtown",                     {-1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00}},
		{!"Downtown",                     {-1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00}},
		{!"Downtown",                     {-1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00}},
		{!"Downtown",                     {-2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00}},
		{!"Downtown",                     {-1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00}},
		{!"Downtown Los Santos",          {1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90}},
		{!"Downtown Los Santos",          {1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90}},
		{!"Downtown Los Santos",          {1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90}},
		{!"Downtown Los Santos",          {1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90}},
		{!"Downtown Los Santos",          {1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90}},
		{!"East Beach",                   {2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90}},
		{!"East Beach",                   {2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90}},
		{!"East Beach",                   {2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90}},
		{!"East Beach",                   {2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90}},
		{!"East Los Santos",              {2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90}},
		{!"East Los Santos",              {2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90}},
		{!"East Los Santos",              {2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90}},
		{!"East Los Santos",              {2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90}},
		{!"East Los Santos",              {2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90}},
		{!"Easter Basin",                 {-1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00}},
		{!"Easter Basin",                 {-1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -50.00, -4.50, -947.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40}},
		{!"Easter Bay Chemicals",         {-1132.80, -768.00, 0.00, -956.40, -578.10, 200.00}},
		{!"Easter Bay Chemicals",         {-1132.80, -787.30, 0.00, -956.40, -768.00, 200.00}},
		{!"El Castillo del Diablo",       {-464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00}},
		{!"El Corona",                    {1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90}},
		{!"El Corona",                    {1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90}},
		{!"El Quebrados",                 {-1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00}},
		{!"Esplanade East",               {-1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00}},
		{!"Esplanade East",               {-1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00}},
		{!"Esplanade East",               {-1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30}},
		{!"Esplanade North",              {-2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00}},
		{!"Esplanade North",              {-1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00}},
		{!"Esplanade North",              {-1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00}},
		{!"Fallen Tree",                  {-792.20, -698.50, -5.30, -452.40, -380.00, 200.00}},
		{!"Fallow Bridge",                {434.30, 366.50, 0.00, 603.00, 555.60, 200.00}},
		{!"Fern Ridge",                   {508.10, -139.20, 0.00, 1306.60, 119.50, 200.00}},
		{!"Financial",                    {-1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00}},
		{!"Fisher's Lagoon",              {1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00}},
		{!"Flint Intersection",           {-187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90}},
		{!"Flint Range",                  {-594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00}},
		{!"Fort Carson",                  {-376.20, 826.30, -3.00, 123.70, 1220.40, 200.00}},
		{!"Foster Valley",                {-2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00}},
		{!"Foster Valley",                {-2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00}},
		{!"Frederick Bridge",             {2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00}},
		{!"Gant Bridge",                  {-2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00}},
		{!"Gant Bridge",                  {-2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00}},
		{!"Ganton",                       {2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90}},
		{!"Ganton",                       {2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90}},
		{!"Garcia",                       {-2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00}},
		{!"Garcia",                       {-2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00}},
		{!"Garver Bridge",                {-1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90}},
		{!"Garver Bridge",                {-1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90}},
		{!"Garver Bridge",                {-1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30}},
		{!"Glen Park",                    {1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90}},
		{!"Glen Park",                    {1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90}},
		{!"Glen Park",                    {1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90}},
		{!"Green Palms",                  {176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00}},
		{!"Greenglass College",           {964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90}},
		{!"Greenglass College",           {964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90}},
		{!"Hampton Barns",                {603.00, 264.30, 0.00, 761.90, 366.50, 200.00}},
		{!"Hankypanky Point",             {2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00}},
		{!"Harry Gold Parkway",           {1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90}},
		{!"Hashbury",                     {-2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00}},
		{!"Hilltop Farm",                 {967.30, -450.30, -3.00, 1176.70, -217.90, 200.00}},
		{!"Hunter Quarry",                {337.20, 710.80, -115.20, 860.50, 1031.70, 203.70}},
		{!"Idlewood",                     {1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90}},
		{!"Idlewood",                     {2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90}},
		{!"Idlewood",                     {1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90}},
		{!"Jefferson",                    {1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90}},
		{!"Jefferson",                    {2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90}},
		{!"Jefferson",                    {2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90}},
		{!"Jefferson",                    {2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90}},
		{!"Jefferson",                    {2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90}},
		{!"Jefferson",                    {2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90}},
		{!"Julius Thruway East",          {2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90}},
		{!"Julius Thruway East",          {2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90}},
		{!"Julius Thruway East",          {2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90}},
		{!"Julius Thruway East",          {2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90}},
		{!"Julius Thruway North",         {2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90}},
		{!"Julius Thruway North",         {2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90}},
		{!"Julius Thruway North",         {2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90}},
		{!"Julius Thruway North",         {1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90}},
		{!"Julius Thruway North",         {1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90}},
		{!"Julius Thruway North",         {1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90}},
		{!"Julius Thruway North",         {1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90}},
		{!"Julius Thruway North",         {1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90}},
		{!"Julius Thruway South",         {1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90}},
		{!"Julius Thruway South",         {2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90}},
		{!"Julius Thruway West",          {1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90}},
		{!"Julius Thruway West",          {1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90}},
		{!"Juniper Hill",                 {-2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00}},
		{!"Juniper Hollow",               {-2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00}},
		{!"K.A.C.C. Military Fuels",      {2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90}},
		{!"Kincaid Bridge",               {-1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90}},
		{!"Kincaid Bridge",               {-1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90}},
		{!"Kincaid Bridge",               {-1087.90, 855.30, -89.00, -961.90, 986.20, 110.90}},
		{!"King's",                       {-2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00}},
		{!"King's",                       {-2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00}},
		{!"King's",                       {-2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00}},
		{!"LVA Freight Depot",            {1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90}},
		{!"LVA Freight Depot",            {1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90}},
		{!"LVA Freight Depot",            {1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90}},
		{!"Las Barrancas",                {-926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00}},
		{!"Las Brujas",                   {-365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00}},
		{!"Las Colinas",                  {1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90}},
		{!"Las Colinas",                  {2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90}},
		{!"Las Colinas",                  {2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90}},
		{!"Las Colinas",                  {2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90}},
		{!"Las Colinas",                  {2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90}},
		{!"Las Payasadas",                {-354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00}},
		{!"Las Venturas Airport",         {1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90}},
		{!"Las Venturas Airport",         {1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50}},
		{!"Last Dime Motel",              {1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90}},
		{!"Leafy Hollow",                 {-1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00}},
		{!"Liberty City",                 {-1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00}},
		{!"Lil' Probe Inn",               {-90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00}},
		{!"Linden Side",                  {2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90}},
		{!"Linden Station",               {2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90}},
		{!"Linden Station",               {2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40}},
		{!"Little Mexico",                {1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90}},
		{!"Little Mexico",                {1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90}},
		{!"Los Flores",                   {2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90}},
		{!"Los Flores",                   {2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90}},
		{!"Los Santos International",     {1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90}},
		{!"Los Santos International",     {1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90}},
		{!"Los Santos International",     {1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90}},
		{!"Los Santos International",     {2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90}},
		{!"Marina",                       {647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90}},
		{!"Marina",                       {647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90}},
		{!"Marina",                       {807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90}},
		{!"Market",                       {787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90}},
		{!"Market",                       {952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90}},
		{!"Market",                       {1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90}},
		{!"Market",                       {926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90}},
		{!"Market Station",               {787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80}},
		{!"Martin Bridge",                {-222.10, 293.30, 0.00, -122.10, 476.40, 200.00}},
		{!"Missionary Hill",              {-2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00}},
		{!"Montgomery",                   {1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00}},
		{!"Montgomery",                   {1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00}},
		{!"Montgomery Intersection",      {1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00}},
		{!"Montgomery Intersection",      {1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00}},
		{!"Mulholland",                   {1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90}},
		{!"Mulholland",                   {1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90}},
		{!"Mulholland",                   {1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90}},
		{!"Mulholland",                   {1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90}},
		{!"Mulholland",                   {1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90}},
		{!"Mulholland",                   {1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90}},
		{!"Mulholland",                   {768.60, -954.60, -89.00, 952.60, -860.60, 110.90}},
		{!"Mulholland",                   {687.80, -860.60, -89.00, 911.80, -768.00, 110.90}},
		{!"Mulholland",                   {737.50, -768.00, -89.00, 1142.20, -674.80, 110.90}},
		{!"Mulholland",                   {1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90}},
		{!"Mulholland",                   {952.60, -937.10, -89.00, 1096.40, -860.60, 110.90}},
		{!"Mulholland",                   {911.80, -860.60, -89.00, 1096.40, -768.00, 110.90}},
		{!"Mulholland",                   {861.00, -674.80, -89.00, 1156.50, -600.80, 110.90}},
		{!"Mulholland Intersection",      {1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90}},
		{!"North Rock",                   {2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00}},
		{!"Ocean Docks",                  {2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90}},
		{!"Ocean Docks",                  {2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90}},
		{!"Ocean Docks",                  {2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90}},
		{!"Ocean Flats",                  {-2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00}},
		{!"Octane Springs",               {338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00}},
		{!"Old Venturas Strip",           {2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90}},
		{!"Palisades",                    {-2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00}},
		{!"Palomino Creek",               {2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00}},
		{!"Paradiso",                     {-2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00}},
		{!"Pershing Square",              {1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90}},
		{!"Pilgrim",                      {2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90}},
		{!"Pilgrim",                      {2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90}},
		{!"Pilson Intersection",          {1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90}},
		{!"Pirates in Men's Pants",       {1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90}},
		{!"Playa del Seville",            {2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90}},
		{!"Prickle Pine",                 {1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90}},
		{!"Prickle Pine",                 {1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90}},
		{!"Queens",                       {-2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00}},
		{!"Queens",                       {-2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00}},
		{!"Queens",                       {-2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00}},
		{!"Randolph Industrial Estate",   {1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90}},
		{!"Redsands East",                {1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90}},
		{!"Redsands East",                {1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90}},
		{!"Redsands East",                {1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90}},
		{!"Redsands West",                {1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90}},
		{!"Redsands West",                {1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90}},
		{!"Redsands West",                {1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90}},
		{!"Redsands West",                {1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90}},
		{!"Regular Tom",                  {-405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00}},
		{!"Richman",                      {647.50, -1118.20, -89.00, 787.40, -954.60, 110.90}},
		{!"Richman",                      {647.50, -954.60, -89.00, 768.60, -860.60, 110.90}},
		{!"Richman",                      {225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90}},
		{!"Richman",                      {225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90}},
		{!"Richman",                      {321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90}},
		{!"Richman",                      {321.30, -1044.00, -89.00, 647.50, -860.60, 110.90}},
		{!"Richman",                      {321.30, -860.60, -89.00, 687.80, -768.00, 110.90}},
		{!"Richman",                      {321.30, -768.00, -89.00, 700.70, -674.80, 110.90}},
		{!"Robada Intersection",          {-1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90}},
		{!"Roca Escalante",               {2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90}},
		{!"Roca Escalante",               {2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90}},
		{!"Rockshore East",               {2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90}},
		{!"Rockshore West",               {1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90}},
		{!"Rockshore West",               {2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90}},
		{!"Rodeo",                        {72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90}},
		{!"Rodeo",                        {72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90}},
		{!"Rodeo",                        {225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90}},
		{!"Rodeo",                        {225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90}},
		{!"Rodeo",                        {334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90}},
		{!"Rodeo",                        {312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90}},
		{!"Rodeo",                        {422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90}},
		{!"Rodeo",                        {558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90}},
		{!"Rodeo",                        {466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90}},
		{!"Rodeo",                        {422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90}},
		{!"Rodeo",                        {466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90}},
		{!"Rodeo",                        {334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90}},
		{!"Royal Casino",                 {2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90}},
		{!"San Andreas Sound",            {2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00}},
		{!"Santa Flora",                  {-2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00}},
		{!"Santa Maria Beach",            {342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90}},
		{!"Santa Maria Beach",            {72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90}},
		{!"Shady Cabin",                  {-1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00}},
		{!"Shady Creeks",                 {-1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00}},
		{!"Shady Creeks",                 {-2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00}},
		{!"Sobell Rail Yards",            {2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90}},
		{!"Spinybed",                     {2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90}},
		{!"Starfish Casino",              {2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90}},
		{!"Starfish Casino",              {2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90}},
		{!"Starfish Casino",              {2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90}},
		{!"Temple",                       {1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90}},
		{!"Temple",                       {1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90}},
		{!"Temple",                       {1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90}},
		{!"Temple",                       {952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90}},
		{!"Temple",                       {1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90}},
		{!"Temple",                       {1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90}},
		{!"The Camel's Toe",              {2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90}},
		{!"The Clown's Pocket",           {2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90}},
		{!"The Emerald Isle",             {2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90}},
		{!"The Farm",                     {-1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90}},
		{!"The Four Dragons Casino",      {1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90}},
		{!"The High Roller",              {1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90}},
		{!"The Mako Span",                {1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00}},
		{!"The Panopticon",               {-947.90, -304.30, -1.10, -319.60, 327.00, 200.00}},
		{!"The Pink Swan",                {1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90}},
		{!"The Sherman Dam",              {-968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00}},
		{!"The Strip",                    {2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90}},
		{!"The Strip",                    {2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90}},
		{!"The Strip",                    {2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90}},
		{!"The Strip",                    {2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90}},
		{!"The Visage",                   {1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90}},
		{!"The Visage",                   {1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90}},
		{!"Unity Station",                {1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50}},
		{!"Valle Ocultado",               {-936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00}},
		{!"Verdant Bluffs",               {930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90}},
		{!"Verdant Bluffs",               {1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90}},
		{!"Verdant Bluffs",               {1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90}},
		{!"Verdant Meadows",              {37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00}},
		{!"Verona Beach",                 {647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90}},
		{!"Verona Beach",                 {1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90}},
		{!"Verona Beach",                 {1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90}},
		{!"Vinewood",                     {787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90}},
		{!"Vinewood",                     {787.40, -1130.80, -89.00, 952.60, -954.60, 110.90}},
		{!"Vinewood",                     {647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90}},
		{!"Vinewood",                     {647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90}},
		{!"Whitewood Estates",            {883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90}},
		{!"Whitewood Estates",            {1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90}},
		{!"Willowfield",                  {1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90}},
		{!"Willowfield",                  {2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90}},
		{!"Willowfield",                  {2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90}},
		{!"Willowfield",                  {2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90}},
		{!"Willowfield",                  {2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90}},
		{!"Yellow Bell Station",          {1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00}},
		{!"Los Santos",                   {44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00}},
		{!"Las Venturas",                 {869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00}},
		{!"Bone County",                  {-480.50, 596.30, -242.90, 869.40, 2993.80, 900.00}},
		{!"Tierra Robada",                {-2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00}},
		{!"Tierra Robada",                {-1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00}},
		{!"San Fierro",                   {-2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00}},
		{!"Red County",                   {-1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00}},
		{!"Flint County",                 {-1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00}},
		{!"Whetstone",                    {-2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}}
	};
	new
	    name[32] = "Vice City";

	for (new i = 0; i != sizeof(g_arrZoneData); i ++) if ((fX >= g_arrZoneData[i][e_ZoneArea][0] && fX <= g_arrZoneData[i][e_ZoneArea][3]) && (fY >= g_arrZoneData[i][e_ZoneArea][1] && fY <= g_arrZoneData[i][e_ZoneArea][4]) && (fZ >= g_arrZoneData[i][e_ZoneArea][2] && fZ <= g_arrZoneData[i][e_ZoneArea][5])) {
		strunpack(name, g_arrZoneData[i][e_ZoneName]);

		break;
	}
	return name;
}

stock Float:GetPlayerDistanceFromPlayer(playerid, targetid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);
	return GetPlayerDistanceFromPoint(playerid, x, y, z);
}

/*CREATE TABLE `detectors` (
	`detectorID` INT(12) AUTO_INCREMENT,
	`detectorX` FLOAT DEFAULT 0.0,
	`detectorY` FLOAT DEFAULT 0.0,
	`detectorZ` FLOAT DEFAULT 0.0,
	`detectorAngle` FLOAT DEFAULT 0.0,
	`detectorInterior` INT(12) DEFAULT 0,
	`detectorWorld` INT(12) DEFAULT 0,
	PRIMARY KEY(`detectorID`)
);*/

stock Detector_Delete(id)
{
    if (id != -1 && MetalDetectors[id][detectorExists])
	{
	    new
	        query[64];

	    DestroyDynamicObject(MetalDetectors[id][detectorObject][0]);
	    DestroyDynamicObject(MetalDetectors[id][detectorObject][1]);

		format(query, sizeof(query), "DELETE FROM `detectors` WHERE `detectorID` = '%d'", MetalDetectors[id][detectorID]);
		mysql_tquery(g_iHandle, query);

		MetalDetectors[id][detectorID] = 0;
		MetalDetectors[id][detectorExists] = 0;
	}
	return 1;
}

stock Detector_Refresh(id)
{
	if (id != -1 && MetalDetectors[id][detectorExists])
	{
	    MetalDetectors[id][detectorObject][0] = CreateDynamicObject(2412, MetalDetectors[id][detectorPos][0], MetalDetectors[id][detectorPos][1], MetalDetectors[id][detectorPos][2] - 0.9, 0.0, 0.0, MetalDetectors[id][detectorPos][3], MetalDetectors[id][detectorWorld], MetalDetectors[id][detectorInterior]);
		MetalDetectors[id][detectorObject][1] = CreateDynamicObject(2412, MetalDetectors[id][detectorPos][0] + (1.0 * floatsin(-(MetalDetectors[id][detectorPos][3] - 90), degrees)), MetalDetectors[id][detectorPos][1] + (1.0 * floatcos(-(MetalDetectors[id][detectorPos][3] - 90), degrees)), MetalDetectors[id][detectorPos][2] - 0.9, 0.0, 0.0, MetalDetectors[id][detectorPos][3], MetalDetectors[id][detectorWorld], MetalDetectors[id][detectorInterior]);
		MetalDetectors[id][dynamicArea] = CreateDynamicSphere(MetalDetectors[id][detectorPos][0], MetalDetectors[id][detectorPos][1], MetalDetectors[id][detectorPos][2], 1.0, MetalDetectors[id][detectorWorld], MetalDetectors[id][detectorInterior]);
	}
	return 1;
}

stock Detector_Nearest(playerid)
{
    for (new i = 0; i < MAX_METAL_DETECTORS; i ++) if (MetalDetectors[i][detectorExists])
	{
	    if (IsPlayerInRangeOfPoint(playerid, 1.0, MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2]) && GetPlayerInterior(playerid) == MetalDetectors[i][detectorInterior] && GetPlayerVirtualWorld(playerid) == MetalDetectors[i][detectorWorld])
	        return i;
	}
	return -1;
}

stock HasMetalItem(playerid)
{
	new
	    weapon,
	    ammo;

	for (new i = 0; i < 13; i ++) {
	    GetPlayerWeaponData(playerid, i, weapon, ammo);

		if (ammo > 0) {
			switch (weapon) {
			    case 1, 2, 4, 6, 8, 9, 15, 22..38: return 1;
			}
		}
	}
	if(Inventory_HasItem(playerid, "Colt 45")) return 1;
	if(Inventory_HasItem(playerid, "Glock-17")) return 1;
	if(Inventory_HasItem(playerid, "Micro SMG")) return 1;
	if(Inventory_HasItem(playerid, "Tec-9")) return 1;
	if(Inventory_HasItem(playerid, "MP5")) return 1;
	if(Inventory_HasItem(playerid, "Shotgun")) return 1;
	if(Inventory_HasItem(playerid, "AK-47")) return 1;
	if(Inventory_HasItem(playerid, "M4")) return 1;
	if(Inventory_HasItem(playerid, "Rifle")) return 1;
	if(Inventory_HasItem(playerid, "Sniper")) return 1;
	if(Inventory_HasItem(playerid, "Golf Club")) return 1;
	if(Inventory_HasItem(playerid, "Camera")) return 1;
	if(Inventory_HasItem(playerid, "Knife")) return 1;
	if(Inventory_HasItem(playerid, "Pocket Knife")) return 1;
	if(Inventory_HasItem(playerid, "Shovel")) return 1;
	if(Inventory_HasItem(playerid, "Katana")) return 1;
	if(Inventory_HasItem(playerid, "Magazine")) return 1;
	if(Inventory_HasItem(playerid, "GPS System")) return 1;
	if(Inventory_HasItem(playerid, "Spray Can")) return 1;
	if(Inventory_HasItem(playerid, "Crowbar")) return 1;
	if(Inventory_HasItem(playerid, "Boombox")) return 1;
	if(Inventory_HasItem(playerid, "First Aid")) return 1;
	if(Inventory_HasItem(playerid, "Repair Kit")) return 1;
	if(Inventory_HasItem(playerid, "NOS Canister")) return 1;
	if(Inventory_HasItem(playerid, "Ammo Cartridge")) return 1;
	if(Inventory_HasItem(playerid, "Armored Vest")) return 1;
	if(Inventory_HasItem(playerid, "Portable Radio")) return 1;
	if(Inventory_HasItem(playerid, "Lighter")) return 1;
	if(Inventory_HasItem(playerid, "Screwdriver")) return 1;
	if(Inventory_HasItem(playerid, "Bomb")) return 1;

	return 0;
}


stock PlayerPlaySoundEx(playerid, sound)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);

	foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 20.0, x, y, z)) {
	    PlayerPlaySound(i, sound, x, y, z);
	}
	return 1;
}

stock GetNearestPlayerInView(playerid, Float:distance = 2.0)
{
	new
	    Float:fAngle,
		Float:fPosX,
		Float:fPosY,
		Float:fPosZ;

	GetPlayerFacingAngle(playerid, fAngle);
	GetPlayerPos(playerid, fPosX, fPosY, fPosZ);

	fPosX += distance * floatsin(-fAngle, degrees);
	fPosY += distance * floatcos(-fAngle, degrees);

	foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 2.0, fPosX, fPosY, fPosZ)) {
	    return i;
	}
	return INVALID_PLAYER_ID;
}

stock CancelCall(playerid)
{
    if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
 		PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = INVALID_PLAYER_ID;
   		PlayerData[PlayerData[playerid][pCallLine]][pIncomingCall] = 0;

		PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
		PlayerData[playerid][pIncomingCall] = 0;
	}
	return 1;
}

stock PlayReloadAnimation(playerid, weaponid)
{
	switch (weaponid)
	{
	    case 22: ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.0, 0, 0, 0, 0, 0);
		case 23: ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.0, 0, 0, 0, 0, 0);
		case 24: ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 0);
		case 25, 27: ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0);
		case 26: ApplyAnimation(playerid, "COLT45", "sawnoff_reload", 4.0, 0, 0, 0, 0, 0);
		case 29..31, 33, 34: ApplyAnimation(playerid, "RIFLE", "rifle_load", 4.0, 0, 0, 0, 0, 0);
		case 28, 32: ApplyAnimation(playerid, "TEC", "tec_reload", 4.0, 0, 0, 0, 0, 0);
	}
	return 1;
}

stock LeaveTaxi(playerid, driverid)
{
	if (driverid != INVALID_PLAYER_ID && IsPlayerConnected(driverid))
	{
	    GiveMoney(playerid, -PlayerData[playerid][pTaxiFee]);
   		GiveMoney(driverid, PlayerData[playerid][pTaxiFee]);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid $%d to the taxi driver.", ReturnName(playerid, 0), PlayerData[playerid][pTaxiFee]);

	    PlayerData[playerid][pTaxiFee] = 0;
	    PlayerData[playerid][pTaxiTime] = 0;
	    PlayerData[playerid][pTaxiPlayer] = INVALID_PLAYER_ID;
	}
	return 1;
}

stock IsFurnitureItem(item[])
{
    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (!strcmp(g_aFurnitureData[i][e_FurnitureName], item)) {
        return 1;
	}
	return 0;
}

stock GetFurnitureNameByModel(model)
{
	new
	    name[32];

	for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (g_aFurnitureData[i][e_FurnitureModel] == model) {
		strcat(name, g_aFurnitureData[i][e_FurnitureName]);

		break;
	}
	return name;
}

stock PlayerHasWeapon(playerid, weaponid)
{
	new
	    weapon,
	    ammo;

	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i] == weaponid) {
	    GetPlayerWeaponData(playerid, i, weapon, ammo);

	    if (weapon == weaponid && ammo > 0) return 1;
	}
	return 0;
}

stock IsPumpOccupied(pumpid)
{
	foreach (new i : Player) if (PlayerData[i][pRefill] != INVALID_VEHICLE_ID) {
	    if (PlayerData[i][pGasPump] == pumpid) return 1;
	}
	return 0;
}

stock IsWheelModel(modelid)
{
    switch (modelid) {
		case 1025, 1073..1085, 1096..1098: return 1;
	}
    return 0;
}

stock IsNOSCompatible(modelid)
{
	switch (modelid) {
	    case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449: return 0;
	}
    return 1;
}

stock IsLegalComponent(modelid, componentid)
{
    if (IsWheelModel(componentid) || (1086 <= componentid <= 1087) || (componentid >= 1008 && componentid <= 1010))
	{
	    if (!IsNOSCompatible(modelid))
			return 1;
    }
	else
	{
	    for (new i = 0; i < sizeof(g_aLegalMods); i ++)
	    {
	        if (g_aLegalMods[i][0] != modelid)
				continue;

			else for (new l = 1; l < 22; l ++) if (g_aLegalMods[i][l] == componentid) {
			    return 1;
			}
		}
	}
	return 0;
}

ShowHungerTextdraw(playerid, enable)
{
	if (!enable) {
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][65]);
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][66]);

		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][63]);
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][64]);
	}
	else if (PlayerData[playerid][pHUD] && PlayerData[playerid][pJailTime] < 1) {
	    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][65]);
		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][66]);

		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][63]);
		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][64]);
	}
	return 1;
}

SendPlayerToPlayer(playerid, targetid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	if (IsPlayerInAnyVehicle(playerid))
	{
	    SetVehiclePos(GetPlayerVehicleID(playerid), x, y + 2, z);
		LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(targetid));
	}
	else
		SetPlayerPos(playerid, x + 1, y, z);

	SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

	PlayerData[playerid][pHouse] = PlayerData[targetid][pHouse];
	PlayerData[playerid][pBusiness] = PlayerData[targetid][pBusiness];
	PlayerData[playerid][pEntrance] = PlayerData[targetid][pEntrance];
	PlayerData[playerid][pHospitalInt]  = PlayerData[targetid][pHospitalInt];
}

StopRefilling(playerid)
{
    PlayerData[playerid][pGasPump] = -1;
    PlayerData[playerid][pGasStation] = -1;
   	PlayerData[playerid][pRefill] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pRefillPrice] = 0;
}

SetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i] > 0 && PlayerData[playerid][pAmmo][i] > 0) {
	    GivePlayerWeapon(playerid, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);
	}
	return 1;
}

SetAccessories(playerid)
{
    for (new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) {
	    RemovePlayerAttachedObject(playerid, i);
	}
	if (PlayerData[playerid][pToggleGlasses]) RemovePlayerAttachedObject(playerid, 0);
	else if (PlayerData[playerid][pGlasses] != 0) SetPlayerAttachedObject(playerid, 0, PlayerData[playerid][pGlasses], 2, AccessoryData[playerid][0][0], AccessoryData[playerid][0][1], AccessoryData[playerid][0][2], AccessoryData[playerid][0][3], AccessoryData[playerid][0][4], AccessoryData[playerid][0][5], AccessoryData[playerid][0][6], AccessoryData[playerid][0][7], AccessoryData[playerid][0][8]);

	if (PlayerData[playerid][pToggleHat]) RemovePlayerAttachedObject(playerid, 1);
	else if (PlayerData[playerid][pHat] != 0) SetPlayerAttachedObject(playerid, 1, PlayerData[playerid][pHat], 2, AccessoryData[playerid][1][0], AccessoryData[playerid][1][1], AccessoryData[playerid][1][2], AccessoryData[playerid][1][3], AccessoryData[playerid][1][4], AccessoryData[playerid][1][5], AccessoryData[playerid][1][6], AccessoryData[playerid][1][7], AccessoryData[playerid][1][8]);

    if (PlayerData[playerid][pToggleBandana]) RemovePlayerAttachedObject(playerid, 2);
	else if (PlayerData[playerid][pBandana] != 0) SetPlayerAttachedObject(playerid, 2, PlayerData[playerid][pBandana], 2, AccessoryData[playerid][2][0], AccessoryData[playerid][2][1], AccessoryData[playerid][2][2], AccessoryData[playerid][2][3], AccessoryData[playerid][2][4], AccessoryData[playerid][2][5], AccessoryData[playerid][2][6], AccessoryData[playerid][2][7], AccessoryData[playerid][2][8]);

	if (Inventory_HasItem(playerid, "Backpack")) SetPlayerAttachedObject(playerid, 5, 3026, 1, -0.134207, -0.093048, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	else RemovePlayerAttachedObject(playerid, 5);

    if (AccessoryInfo[playerid][5][0] == 0) RemovePlayerAttachedObject(playerid, 5);
	else if (AccessoryInfo[playerid][5][0] != 0) SetPlayerAttachedObject(playerid, 5, AccessoryInfo[playerid][5][0], AccessoryInfo[playerid][5][1], AccessoryData[playerid][5][0], AccessoryData[playerid][5][1], AccessoryData[playerid][5][2], AccessoryData[playerid][5][3], AccessoryData[playerid][5][4], AccessoryData[playerid][5][5], AccessoryData[playerid][5][6], AccessoryData[playerid][5][7], AccessoryData[playerid][5][8]);

    if (AccessoryInfo[playerid][9][0] == 0) RemovePlayerAttachedObject(playerid, 9);
	else if (AccessoryInfo[playerid][9][0] != 0) SetPlayerAttachedObject(playerid, 9, AccessoryInfo[playerid][9][0], AccessoryInfo[playerid][9][1], AccessoryData[playerid][9][0], AccessoryData[playerid][9][1], AccessoryData[playerid][9][2], AccessoryData[playerid][9][3], AccessoryData[playerid][9][4], AccessoryData[playerid][9][5], AccessoryData[playerid][9][6], AccessoryData[playerid][9][7], AccessoryData[playerid][9][8]);
}

SQL_LoadCharacter(playerid, characterid)
{
	if (characterid < 1 || characterid > 3)
		return 0;

	new
		query[160];

	format(query, sizeof(query), "UPDATE `characters` SET `LastLogin` = '%d' WHERE `Username` = '%s' AND `chara` = '%s'", gettime(), PlayerData[playerid][pUsername], PlayerCharacters[playerid][characterid - 1]);
	mysql_tquery(g_iHandle, query);

	format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Username` = '%s' AND `chara` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][characterid - 1]);
	mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_LOAD_CHARACTER);

	return 1;
}

ShowCharacterMenu(playerid)
{
	/*
	new str[32];

	if (PlayerData[playerid][pCharacter] != 0)
	{
	    PlayerData[playerid][pCharacter] = 0;

		for (new i = 0; i < 8; i ++) {
  			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		for (new i = 71; i < 81; i ++) {
  			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		}
	}
	for (new i = 0; i < 8; i ++)
	{
	    if (i < 3) {
	        format(str, sizeof(str), "%s", (!PlayerCharacters[playerid][i][0]) ? ("Empty Slot") : (PlayerCharacters[playerid][i]));
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][i + 5], str);
	    }
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
	}

	SelectTextDraw(playerid, -1);
	*/

	new string[132];
    format(string, sizeof(string), "%s\n%s\n%s", (!PlayerCharacters[playerid][0][0]) ? ("Empty Slot") : (PlayerCharacters[playerid][0]), (!PlayerCharacters[playerid][1][0]) ? ("Empty Slot") : (PlayerCharacters[playerid][1]), (!PlayerCharacters[playerid][2][0]) ? ("Empty Slot") : (PlayerCharacters[playerid][2]));
	Dialog_Show(playerid, LoginIntoChar, DIALOG_STYLE_LIST, "Select Character", string, "Select", "");
	return 1;
}

GetClosestGarbage(playerid)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_GARBAGE_BINS; i ++) if (GarbageData[i][garbageExists] && GarbageData[i][garbageCapacity] > 0 && GetPlayerInterior(playerid) == GarbageData[i][garbageInterior] && GetPlayerVirtualWorld(playerid) == GarbageData[i][garbageWorld])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestBusiness(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizType] == type && GetPlayerInterior(playerid) == BusinessData[i][bizExterior] && GetPlayerVirtualWorld(playerid) == BusinessData[i][bizExteriorVW])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestEntrance(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceType] == type && GetPlayerInterior(playerid) == EntranceData[i][entranceExterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceExteriorVW])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestJobPoint(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && JobData[i][jobType] == type && GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, JobData[i][jobPoint][0], JobData[i][jobPoint][1], JobData[i][jobPoint][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestJob(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && JobData[i][jobType] == type && GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, JobData[i][jobPos][0], JobData[i][jobPos][1], JobData[i][jobPos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestHospital(playerid)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < sizeof(arrHospitalSpawns); i ++)
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

IsWeaponModel(model) {
    new const g_aWeaponModels[] = {
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
		325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
		353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
		367, 368, 368, 371
    };
    for (new i = 0; i < sizeof(g_aWeaponModels); i ++) if (g_aWeaponModels[i] == model) {
        return 1;
	}
	return 0;
}

GetWeaponModel(weaponid) {
    new const g_aWeaponModels[] = {
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
		325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
		353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
		367, 368, 368, 371
    };
    if (1 <= weaponid <= 46)
        return g_aWeaponModels[weaponid];

	return 0;
}

DropPlayerItem(playerid, itemid, quantity = 1)
{
	if (itemid == -1 || !InventoryData[playerid][itemid][invExists])
	    return 0;

    new
		Float:x,
  		Float:y,
    	Float:z,
		Float:angle,
		string[32];

	strunpack(string, InventoryData[playerid][itemid][invItem]);

	if (InventoryData[playerid][itemid][invQuantity] < 2)
	{
		if (!strcmp(string, "Colt 45") && PlayerData[playerid][pHoldWeapon] == 22)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Glock-17") && PlayerData[playerid][pHoldWeapon] == 24)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Shotgun") && PlayerData[playerid][pHoldWeapon] == 25)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Micro SMG") && PlayerData[playerid][pHoldWeapon] == 28)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "MP5") && PlayerData[playerid][pHoldWeapon] == 29)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Tec-9") && PlayerData[playerid][pHoldWeapon] == 32)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "AK-47") && PlayerData[playerid][pHoldWeapon] == 30)
			HoldWeapon(playerid, 0);

        else if (!strcmp(string, "M4") && PlayerData[playerid][pHoldWeapon] == 31)
			HoldWeapon(playerid, 0);

	 	else if (!strcmp(string, "Rifle") && PlayerData[playerid][pHoldWeapon] == 33)
		 	HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Sniper") && PlayerData[playerid][pHoldWeapon] == 34)
			HoldWeapon(playerid, 0);
	}
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);


	DropItem(string, ReturnName(playerid, 0), InventoryData[playerid][itemid][invModel], quantity, x, y, z - 0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
 	Inventory_Remove(playerid, string, quantity);

	ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0, 1);
 	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has dropped a \"%s\".", ReturnName(playerid, 0), string);

	return 1;
}

DropItem(item[], player[], model, quantity, Float:x, Float:y, Float:z, interior, world, weaponid = 0, ammo = 0)
{
	new
	    query[300];

	for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if (!DroppedItems[i][droppedModel])
	{
	    format(DroppedItems[i][droppedItem], 32, item);
	    format(DroppedItems[i][droppedPlayer], 24, player);

		DroppedItems[i][droppedModel] = model;
		DroppedItems[i][droppedQuantity] = quantity;
		DroppedItems[i][droppedWeapon] = weaponid;
  		DroppedItems[i][droppedAmmo] = ammo;
		DroppedItems[i][droppedPos][0] = x;
		DroppedItems[i][droppedPos][1] = y;
		DroppedItems[i][droppedPos][2] = z;

		DroppedItems[i][droppedInt] = interior;
		DroppedItems[i][droppedWorld] = world;

		if (IsWeaponModel(model)) {
			DroppedItems[i][droppedObject] = CreateDynamicObject(model, x, y, z, 93.7, 120.0, 120.0, world, interior);
		} else {
			DroppedItems[i][droppedObject] = CreateDynamicObject(model, x, y, z, 0.0, 0.0, 0.0, world, interior);
		}
 		DroppedItems[i][droppedText3D] = CreateDynamic3DTextLabel(item, COLOR_CYAN, x, y, z, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, world, interior);

		if (strcmp(item, "Demo Soda") != 0)
		{
	 		format(query, sizeof(query), "INSERT INTO `dropped` (`itemName`, `itemPlayer`, `itemModel`, `itemQuantity`, `itemWeapon`, `itemAmmo`, `itemX`, `itemY`, `itemZ`, `itemInt`, `itemWorld`) VALUES('%s', '%s', '%d', '%d', '%d', '%d', '%.4f', '%.4f', '%.4f', '%d', '%d')", item, player, model, quantity, weaponid, ammo, x, y, z, interior, world);
			mysql_tquery(g_iHandle, query, "OnDroppedItem", "d", i);
		}
		return i;
	}
	return -1;
}

Item_Nearest(playerid)
{
    for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if (DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2]))
	{
	    if (GetPlayerInterior(playerid) == DroppedItems[i][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[i][droppedWorld])
	        return i;
	}
	return -1;
}

Item_SetQuantity(itemid, amount)
{
	new
	    string[64];

	if (itemid != -1 && DroppedItems[itemid][droppedModel])
	{
	    DroppedItems[itemid][droppedQuantity] = amount;

	    format(string, sizeof(string), "UPDATE `dropped` SET `itemQuantity` = %d WHERE `ID` = '%d'", amount, DroppedItems[itemid][droppedID]);
		mysql_tquery(g_iHandle, string);
	}
	return 1;
}

Item_Delete(itemid)
{
    static
	    query[64];

    if (itemid != -1 && DroppedItems[itemid][droppedModel])
	{
        DroppedItems[itemid][droppedModel] = 0;
		DroppedItems[itemid][droppedQuantity] = 0;
	    DroppedItems[itemid][droppedPos][0] = 0.0;
	    DroppedItems[itemid][droppedPos][1] = 0.0;
	    DroppedItems[itemid][droppedPos][2] = 0.0;
	    DroppedItems[itemid][droppedInt] = 0;
	    DroppedItems[itemid][droppedWorld] = 0;

	    DestroyDynamicObject(DroppedItems[itemid][droppedObject]);
	    DestroyDynamic3DTextLabel(DroppedItems[itemid][droppedText3D]);

	    format(query, sizeof(query), "DELETE FROM `dropped` WHERE `ID` = '%d'", DroppedItems[itemid][droppedID]);
	    mysql_tquery(g_iHandle, query);
	}
	return 1;
}

PickupItem(playerid, itemid)
{
	if (itemid != -1 && DroppedItems[itemid][droppedModel])
	{
	    new id = Inventory_Add(playerid, DroppedItems[itemid][droppedItem], DroppedItems[itemid][droppedModel], DroppedItems[itemid][droppedQuantity]);

	    if (id == -1)
	        return SendErrorMessage(playerid, "You don't have any inventory slots left.");

	    Item_Delete(itemid);
	}
	return 1;
}

stock SetFactionMarker(playerid, type, color)
{
    foreach (new i : Player) if (GetFactionType(i) == type) {
    	SetPlayerMarkerForPlayer(i, playerid, color);
	}
	PlayerData[playerid][pMarker] = 1;
	SetTimerEx("ExpireMarker", 300000, false, "d", playerid);
	return 1;
}

Faction_GetName(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		name[32] = "None";

 	if (factionid == -1)
	    return name;

	format(name, 64, FactionData[factionid][factionName]);
	return name;
}

Faction_GetRank(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		rank[32] = "None";

 	if (factionid == -1)
	    return rank;

	format(rank, 32, FactionRanks[factionid][PlayerData[playerid][pFactionRank] - 1]);
	return rank;
}

Player_Warn1(playerid)
{
	new warn1[32] = "None";

	format(warn1, 32, PlayerData[playerid][pWarn1]);
	return warn1;
}

Player_Warn2(playerid)
{
	new warn2[32] = "None";

	format(warn2, 32, PlayerData[playerid][pWarn2]);
	return warn2;
}

Faction_GetDivision(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		division[32] = "None";

 	if (factionid == -1)
	    return division;

	format(division, 32, FactionDivisions[factionid][PlayerData[playerid][pFactionDivision] - 1]);
	return division;
}

Arrest_Delete(arrestid)
{
	if (arrestid != -1 && ArrestData[arrestid][arrestExists])
	{
	    static
	        string[64];

        if (IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
		    DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

		if (IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
		    DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

		format(string, sizeof(string), "DELETE FROM `arrestpoints` WHERE `arrestID` = '%d'", ArrestData[arrestid][arrestID]);
		mysql_tquery(g_iHandle, string);

		ArrestData[arrestid][arrestExists] = false;
		ArrestData[arrestid][arrestID] = 0;
	}
	return 1;
}

Arrest_Create(Float:x, Float:y, Float:z, interior, world)
{
	for (new i = 0; i < MAX_ARREST_POINTS; i ++) if (!ArrestData[i][arrestExists])
	{
	    ArrestData[i][arrestExists] = true;
	    ArrestData[i][arrestPos][0] = x;
	    ArrestData[i][arrestPos][1] = y;
	    ArrestData[i][arrestPos][2] = z;
	    ArrestData[i][arrestInterior] = interior;
	    ArrestData[i][arrestWorld] = world;

	    mysql_tquery(g_iHandle, "INSERT INTO `arrestpoints` (`arrestInterior`) VALUES(0)", "OnArrestCreated", "d", i);
		Arrest_Refresh(i);
		return i;
	}
	return -1;
}

Arrest_Save(arrestid)
{
	static
	    query[220];

	format(query, sizeof(query), "UPDATE `arrestpoints` SET `arrestX` = '%.4f', `arrestY` = '%.4f', `arrestZ` = '%.4f', `arrestInterior` = '%d', `arrestWorld` = '%d' WHERE `arrestID` = '%d'",
	    ArrestData[arrestid][arrestPos][0],
	    ArrestData[arrestid][arrestPos][1],
	    ArrestData[arrestid][arrestPos][2],
	    ArrestData[arrestid][arrestInterior],
	    ArrestData[arrestid][arrestWorld],
	    ArrestData[arrestid][arrestID]
	);
	return mysql_tquery(g_iHandle, query);
}

Arrest_Refresh(arrestid)
{
	if (arrestid != -1 && ArrestData[arrestid][arrestExists])
	{
	    static
	        string[64];

		if (IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
		    DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

		if (IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
		    DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

		format(string, sizeof(string), "[Arrest]\n{FFFFFF}/jail to jail the suspect.");

		ArrestData[arrestid][arrestPickup] = CreateDynamicPickup(1247, 23, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
  		ArrestData[arrestid][arrestText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], 10.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 1, ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
	}
	return 1;
}

Rack_Save(rackid)
{
	static
	    query[512];

	format(query, sizeof(query), "UPDATE `gunracks` SET `rackHouse` = '%d', `rackX` = '%.4f', `rackY` = '%.4f', `rackZ` = '%.4f', `rackA` = '%.4f', `rackInterior` = '%d', `rackWorld` = '%d', `rackWeapon1` = '%d', `rackWeapon2` = '%d', `rackWeapon3` = '%d', `rackWeapon4` = '%d', `rackAmmo1` = '%d', `rackAmmo2` = '%d', `rackAmmo3` = '%d', `rackAmmo4` = '%d' WHERE `rackID` = '%d'",
	    RackData[rackid][rackHouse],
	    RackData[rackid][rackPos][0],
	    RackData[rackid][rackPos][1],
	    RackData[rackid][rackPos][2],
	    RackData[rackid][rackPos][3],
	    RackData[rackid][rackInterior],
	    RackData[rackid][rackWorld],
	    RackData[rackid][rackWeapons][0],
	    RackData[rackid][rackWeapons][1],
	    RackData[rackid][rackWeapons][2],
	    RackData[rackid][rackWeapons][3],
	    RackData[rackid][rackAmmo][0],
	    RackData[rackid][rackAmmo][1],
	    RackData[rackid][rackAmmo][2],
	    RackData[rackid][rackAmmo][3],
	    RackData[rackid][rackID]
	);
	return mysql_tquery(g_iHandle, query);
}

Rack_Nearest(playerid)
{
	for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (RackData[i][rackExists] && IsPlayerInRangeOfPoint(playerid, 3.0, RackData[i][rackPos][0], RackData[i][rackPos][1], RackData[i][rackPos][2]))
	{
		if (GetPlayerInterior(playerid) == RackData[i][rackInterior] && GetPlayerVirtualWorld(playerid) == RackData[i][rackWorld])
		    return i;
	}
	return -1;
}

Rack_Count(houseid)
{
	new count;

	for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (RackData[i][rackExists] && RackData[i][rackHouse] == HouseData[houseid][houseID]) {
	    count++;
	}
	return count;
}

Rack_ShowGuns(playerid, rackid)
{
	if (rackid != -1 && RackData[rackid][rackExists])
	{
	    new
	        string[128];

		for (new i = 0; i < 4; i ++)
		{
		    if (!RackData[rackid][rackWeapons][i])
		        format(string, sizeof(string), "%s%d: Empty Slot\n", string, i + 1);

			else format(string, sizeof(string), "%s%d: %s - %d bullets\n", string, i + 1, ReturnWeaponName(RackData[rackid][rackWeapons][i]), RackData[rackid][rackAmmo][i]);
		}
		Dialog_Show(playerid, RackWeapons, DIALOG_STYLE_LIST, "Weapon Rack", string, "Select", "Cancel");
	}
	return 1;
}

Rack_Delete(rackid)
{
    if (rackid != -1 && RackData[rackid][rackExists])
	{
	    static
	        string[64];

	    format(string, sizeof(string), "DELETE FROM `gunracks` WHERE `rackID` = '%d'", RackData[rackid][rackID]);
	    mysql_tquery(g_iHandle, string);

        for (new i = 0; i < 5; i ++) if (IsValidDynamicObject(RackData[rackid][rackObjects][i])) {
			DestroyDynamicObject(RackData[rackid][rackObjects][i]);
		}
		if (IsValidDynamic3DTextLabel(RackData[rackid][rackText3D])) {
		    DestroyDynamic3DTextLabel(RackData[rackid][rackText3D]);
		}
		RackData[rackid][rackExists] = false;
		RackData[rackid][rackID] = 0;
		RackData[rackid][rackHouse] = 0;
	}
	return 1;
}

Rack_Create(playerid, houseid)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (!RackData[i][rackExists])
		{
		    x += 1.5 * floatsin(-angle, degrees);
		    y += 1.5 * floatcos(-angle, degrees);

		    RackData[i][rackExists] = true;
		    RackData[i][rackHouse] = (houseid == -1) ? (-1) : (HouseData[houseid][houseID]);

		    RackData[i][rackPos][0] = x;
		    RackData[i][rackPos][1] = y;
		    RackData[i][rackPos][2] = z;
		    RackData[i][rackPos][3] = angle;
		    RackData[i][rackInterior] = GetPlayerInterior(playerid);
		    RackData[i][rackWorld] = GetPlayerVirtualWorld(playerid);

		    Rack_Refresh(i);
		    mysql_tquery(g_iHandle, "INSERT INTO `gunracks` (`rackHouse`) VALUES(0)", "OnRackCreated", "d", i);

		    return i;
		}
	}
	return -1;
}

Rack_RefreshGuns(rackid)
{
    if (rackid != -1 && RackData[rackid][rackExists])
	{
    	new
			Float:x,
	        Float:y,
			Float:z;

		z = RackData[rackid][rackPos][2] + 2.19;

		for (new i = 0; i < 4; i ++) if (IsValidDynamicObject(RackData[rackid][rackObjects][i])) {
		    DestroyDynamicObject(RackData[rackid][rackObjects][i]);

			RackData[rackid][rackObjects][i] = INVALID_OBJECT_ID;
		}
		for (new i = 0; i < 4; i ++)
		{
		    if (RackData[rackid][rackWeapons][i])
			{
				x = RackData[rackid][rackPos][0] - (0.2 * floatsin(-RackData[rackid][rackPos][3], degrees) + (0.45 * floatsin(-RackData[rackid][rackPos][3] - 90, degrees)));
				y = RackData[rackid][rackPos][1] - (0.2 * floatcos(-RackData[rackid][rackPos][3], degrees) + (0.45 * floatcos(-RackData[rackid][rackPos][3] - 90, degrees)));

		        RackData[rackid][rackObjects][i] = CreateDynamicObject(GetWeaponModel(RackData[rackid][rackWeapons][i]), x, y, z, 94.7, 93.7, (22 <= RackData[rackid][rackWeapons][i] <= 38) ? (RackData[rackid][rackPos][3] + 90.0) : (RackData[rackid][rackPos][3]), RackData[rackid][rackWorld], RackData[rackid][rackInterior]);
			}
			else
			{
			    RackData[rackid][rackObjects][i] = INVALID_OBJECT_ID;
			}
			z = z - 0.69;
		}
	}
	return 1;
}

Rack_Refresh(rackid)
{
	if (rackid != -1 && RackData[rackid][rackExists])
	{
	    static
	        str[64];

		if (IsValidDynamicObject(RackData[rackid][rackObjects][4])) {
		    DestroyDynamicObject(RackData[rackid][rackObjects][4]);
		}
		if (IsValidDynamic3DTextLabel(RackData[rackid][rackText3D])) {
		    DestroyDynamic3DTextLabel(RackData[rackid][rackText3D]);
		}
		format(str, sizeof(str), "[Rack %d]\n{FFFFFF}/gunrack to use this rack.", rackid);
		RackData[rackid][rackText3D] = CreateDynamic3DTextLabel(str, COLOR_DEPARTMENT, RackData[rackid][rackPos][0], RackData[rackid][rackPos][1], RackData[rackid][rackPos][2] + 1.2, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, RackData[rackid][rackWorld], RackData[rackid][rackInterior]);

		Rack_RefreshGuns(rackid);
        RackData[rackid][rackObjects][4] = CreateDynamicObject(2475, RackData[rackid][rackPos][0], RackData[rackid][rackPos][1], RackData[rackid][rackPos][2], 0.0, 0.0, RackData[rackid][rackPos][3], RackData[rackid][rackWorld], RackData[rackid][rackInterior]);
	}
	return 1;
}

forward Detector_Load();
public Detector_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_METAL_DETECTORS)
	{
    	MetalDetectors[i][detectorExists] = 1;
	    MetalDetectors[i][detectorID] = cache_get_field_int(i, "detectorID");
	    MetalDetectors[i][detectorPos][0] = cache_get_field_float(i, "detectorX");
	    MetalDetectors[i][detectorPos][1] = cache_get_field_float(i, "detectorY");
	    MetalDetectors[i][detectorPos][2] = cache_get_field_float(i, "detectorZ");
	    MetalDetectors[i][detectorPos][3] = cache_get_field_float(i, "detectorAngle");
	    MetalDetectors[i][detectorInterior] = cache_get_field_int(i, "detectorInterior");
	    MetalDetectors[i][detectorWorld] = cache_get_field_int(i, "detectorWorld");

		Detector_Refresh(i);
	}
	return 1;
}

forward Graffiti_Load();
public Graffiti_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_GRAFFITI_POINTS)
	{
	    cache_get_field_content(i, "graffitiText", GraffitiData[i][graffitiText], g_iHandle, 64);

    	GraffitiData[i][graffitiExists] = 1;
	    GraffitiData[i][graffitiID] = cache_get_field_int(i, "graffitiID");
	    GraffitiData[i][graffitiPos][0] = cache_get_field_float(i, "graffitiX");
	    GraffitiData[i][graffitiPos][1] = cache_get_field_float(i, "graffitiY");
	    GraffitiData[i][graffitiPos][2] = cache_get_field_float(i, "graffitiZ");
	    GraffitiData[i][graffitiPos][3] = cache_get_field_float(i, "graffitiAngle");
	    GraffitiData[i][graffitiColor] = cache_get_field_int(i, "graffitiColor");

		Graffiti_Refresh(i);
	}
	return 1;
}

forward Niners_Load();
public Niners_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_911_CALLS)
	{
    	NinerData[i][ninerExists] = 1;
	    NinerData[i][ninerID] = cache_get_field_int(i, "cid");
	    NinerData[i][ninerType] = cache_get_field_int(i, "type");
		cache_get_field_content(i, "time", NinerData[i][ninerTime], g_iHandle, 30);
	    cache_get_field_content(i, "callername", NinerData[i][ninerCaller], g_iHandle, 40);
	    NinerData[i][ninerNum] = cache_get_field_int(i, "callernum");
		NinerData[i][ninerStatus] = cache_get_field_int(i, "status");
		cache_get_field_content(i, "gpsloc", NinerData[i][ninerGPS], g_iHandle, 80);
		cache_get_field_content(i, "locgiven", NinerData[i][ninerLocation], g_iHandle, 128);
		cache_get_field_content(i, "descgiven", NinerData[i][ninerDesc], g_iHandle, 128);
		cache_get_field_content(i, "copnotes", NinerData[i][ninerNotes], g_iHandle, 128);
	}
	return 1;
}

forward Apbs_Load();
public Apbs_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_APBS)
	{
    	APBData[i][apbExists] = 1;
	    APBData[i][apbID] = cache_get_field_int(i, "dbid");
	    APBData[i][apbCreatorID] = cache_get_field_int(i, "creatorid");
		cache_get_field_content(i, "date", APBData[i][apbDate], g_iHandle, 30);
	    cache_get_field_content(i, "creatorname", APBData[i][apbCreatorName], g_iHandle, 40);
	    cache_get_field_content(i, "fulldesc", APBData[i][apbText], g_iHandle, 129);
	}
	return 1;
}

forward Speed_Load();
public Speed_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_SPEED_CAMERAS)
	{
	    SpeedData[i][speedExists] = true;
	    SpeedData[i][speedID] = cache_get_field_int(i, "speedID");
	    SpeedData[i][speedRange] = cache_get_field_float(i, "speedRange");
	    SpeedData[i][speedLimit] = cache_get_field_float(i, "speedLimit");
	    SpeedData[i][speedPos][0] = cache_get_field_float(i, "speedX");
	    SpeedData[i][speedPos][1] = cache_get_field_float(i, "speedY");
	    SpeedData[i][speedPos][2] = cache_get_field_float(i, "speedZ");
	    SpeedData[i][speedPos][3] = cache_get_field_float(i, "speedAngle");

	    Speed_Refresh(i);
	}
	return 1;
}

forward Rack_Load();
public Rack_Load()
{
    static
	    rows,
	    fields,
		str[24];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_WEAPON_RACKS)
	{
	    RackData[i][rackExists] = true;
	    RackData[i][rackID] = cache_get_field_int(i, "rackID");
	    RackData[i][rackHouse] = cache_get_field_int(i, "rackHouse");
     	RackData[i][rackPos][0] = cache_get_field_float(i, "rackX");
        RackData[i][rackPos][1] = cache_get_field_float(i, "rackY");
        RackData[i][rackPos][2] = cache_get_field_float(i, "rackZ");
        RackData[i][rackPos][3] = cache_get_field_float(i, "rackA");
        RackData[i][rackInterior] = cache_get_field_int(i, "rackInterior");
		RackData[i][rackWorld] = cache_get_field_int(i, "rackWorld");

		for (new j = 0; j < 4; j ++) {
		    format(str, 24, "rackWeapon%d", j + 1);
		    RackData[i][rackWeapons][j] = cache_get_field_int(i, str);

            format(str, 24, "rackAmmo%d", j + 1);
		    RackData[i][rackAmmo][j] = cache_get_field_int(i, str);
		}
		Rack_Refresh(i);
	}
	return 1;
}

forward Vendor_Load();
public Vendor_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_VENDORS)
	{
	    VendorData[i][vendorExists] = true;
	    VendorData[i][vendorID] = cache_get_field_int(i, "vendorID");
	    VendorData[i][vendorType] = cache_get_field_int(i, "vendorType");
	    VendorData[i][vendorPos][0] = cache_get_field_float(i, "vendorX");
        VendorData[i][vendorPos][1] = cache_get_field_float(i, "vendorY");
        VendorData[i][vendorPos][2] = cache_get_field_float(i, "vendorZ");
        VendorData[i][vendorPos][3] = cache_get_field_float(i, "vendorA");
        VendorData[i][vendorInterior] = cache_get_field_int(i, "vendorInterior");
		VendorData[i][vendorWorld] = cache_get_field_int(i, "vendorWorld");

		Vendor_Refresh(i);
	}
	return 1;
}

forward Garbage_Load();
public Garbage_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_GARBAGE_BINS)
	{
	    GarbageData[i][garbageExists] = true;
	    GarbageData[i][garbageID] = cache_get_field_int(i, "garbageID");
	    GarbageData[i][garbageModel] = cache_get_field_int(i, "garbageModel");
	    GarbageData[i][garbageCapacity] = cache_get_field_int(i, "garbageCapacity");
	    GarbageData[i][garbagePos][0] = cache_get_field_float(i, "garbageX");
        GarbageData[i][garbagePos][1] = cache_get_field_float(i, "garbageY");
        GarbageData[i][garbagePos][2] = cache_get_field_float(i, "garbageZ");
        GarbageData[i][garbagePos][3] = cache_get_field_float(i, "garbageA");
        GarbageData[i][garbageInterior] = cache_get_field_int(i, "garbageInterior");
		GarbageData[i][garbageWorld] = cache_get_field_int(i, "garbageWorld");

		Garbage_Refresh(i);
	}
	return 1;
}

forward ATM_Load();
public ATM_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_ATM_MACHINES)
	{
	    ATMData[i][atmExists] = true;
	    ATMData[i][atmID] = cache_get_field_int(i, "atmID");
	    ATMData[i][atmPos][0] = cache_get_field_float(i, "atmX");
        ATMData[i][atmPos][1] = cache_get_field_float(i, "atmY");
        ATMData[i][atmPos][2] = cache_get_field_float(i, "atmZ");
        ATMData[i][atmPos][3] = cache_get_field_float(i, "atmA");
        ATMData[i][atmInterior] = cache_get_field_int(i, "atmInterior");
		ATMData[i][atmWorld] = cache_get_field_int(i, "atmWorld");

		ATM_Refresh(i);
	}
	return 1;
}

forward Impound_Load();
public Impound_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_IMPOUND_LOTS)
	{
	    ImpoundData[i][impoundExists] = true;
	    ImpoundData[i][impoundID] = cache_get_field_int(i, "impoundID");
	    ImpoundData[i][impoundLot][0] = cache_get_field_float(i, "impoundLotX");
        ImpoundData[i][impoundLot][1] = cache_get_field_float(i, "impoundLotY");
        ImpoundData[i][impoundLot][2] = cache_get_field_float(i, "impoundLotZ");
        ImpoundData[i][impoundRelease][0] = cache_get_field_float(i, "impoundReleaseX");
        ImpoundData[i][impoundRelease][1] = cache_get_field_float(i, "impoundReleaseY");
        ImpoundData[i][impoundRelease][2] = cache_get_field_float(i, "impoundReleaseZ");
        ImpoundData[i][impoundRelease][3] = cache_get_field_float(i, "impoundReleaseA");

		Impound_Refresh(i);
	}
	return 1;
}

forward Backpack_Load();
public Backpack_Load()
{
    static
	    rows,
	    fields,
		str[64];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_BACKPACKS)
	{
	    BackpackData[i][backpackExists] = true;
	    BackpackData[i][backpackID] = cache_get_field_int(i, "backpackID");
	    BackpackData[i][backpackPlayer] = cache_get_field_int(i, "backpackPlayer");
	    BackpackData[i][backpackHouse] = cache_get_field_int(i, "backpackHouse");
	    BackpackData[i][backpackVehicle] = cache_get_field_int(i, "backpackVehicle");
	    BackpackData[i][backpackPos][0] = cache_get_field_float(i, "backpackX");
	    BackpackData[i][backpackPos][1] = cache_get_field_float(i, "backpackY");
	    BackpackData[i][backpackPos][2] = cache_get_field_float(i, "backpackZ");
	    BackpackData[i][backpackInterior] = cache_get_field_int(i, "backpackInterior");
	    BackpackData[i][backpackWorld] = cache_get_field_int(i, "backpackWorld");

	    if (!BackpackData[i][backpackPlayer]) {
	        Backpack_Refresh(i);
		}
	}
	for (new i = 0; i < MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists]) {
		format(str, sizeof(str), "SELECT * FROM `backpackitems` WHERE `ID` = '%d'", BackpackData[i][backpackID]);

		mysql_tquery(g_iHandle, str, "OnLoadBackpack", "d", i);
	}
	return 1;
}

forward Gate_Load();
public Gate_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_GATES)
	{
	    GateData[i][gateExists] = true;
	    GateData[i][gateOpened] = false;

	    GateData[i][gateID] = cache_get_field_int(i, "gateID");
	    GateData[i][gateModel] = cache_get_field_int(i, "gateModel");
	    GateData[i][gateSpeed] = cache_get_field_float(i, "gateSpeed");
	    GateData[i][gateRadius] = cache_get_field_float(i, "gateRadius");
	    GateData[i][gateTime] = cache_get_field_int(i, "gateTime");
	    GateData[i][gateInterior] = cache_get_field_int(i, "gateInterior");
	    GateData[i][gateWorld] = cache_get_field_int(i, "gateWorld");

	    GateData[i][gatePos][0] = cache_get_field_float(i, "gateX");
	    GateData[i][gatePos][1] = cache_get_field_float(i, "gateY");
	    GateData[i][gatePos][2] = cache_get_field_float(i, "gateZ");
	    GateData[i][gatePos][3] = cache_get_field_float(i, "gateRX");
	    GateData[i][gatePos][4] = cache_get_field_float(i, "gateRY");
	    GateData[i][gatePos][5] = cache_get_field_float(i, "gateRZ");

        GateData[i][gateMove][0] = cache_get_field_float(i, "gateMoveX");
	    GateData[i][gateMove][1] = cache_get_field_float(i, "gateMoveY");
	    GateData[i][gateMove][2] = cache_get_field_float(i, "gateMoveZ");
	    GateData[i][gateMove][3] = cache_get_field_float(i, "gateMoveRX");
	    GateData[i][gateMove][4] = cache_get_field_float(i, "gateMoveRY");
	    GateData[i][gateMove][5] = cache_get_field_float(i, "gateMoveRZ");

        GateData[i][gateLinkID] = cache_get_field_int(i, "gateLinkID");
	    GateData[i][gateFaction] = cache_get_field_int(i, "gateFaction");

	    cache_get_field_content(i, "gatePass", GateData[i][gatePass], g_iHandle, 32);

	    GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);
	}
	return 1;
}

forward Arrest_Load();
public Arrest_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_ARREST_POINTS)
	{
	    ArrestData[i][arrestExists] = true;

	    ArrestData[i][arrestID] = cache_get_field_int(i, "arrestID");
	    ArrestData[i][arrestPos][0] = cache_get_field_float(i, "arrestX");
	    ArrestData[i][arrestPos][1] = cache_get_field_float(i, "arrestY");
	    ArrestData[i][arrestPos][2] = cache_get_field_float(i, "arrestZ");
	    ArrestData[i][arrestInterior] = cache_get_field_int(i, "arrestInterior");
	    ArrestData[i][arrestWorld] = cache_get_field_int(i, "arrestWorld");

	    Arrest_Refresh(i);
	}
	return 1;
}

forward Faction_Load();
public Faction_Load()
{
	static
	    rows,
	    fields,
		str[32];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_FACTIONS)
	{
	    FactionData[i][factionExists] = true;
	    FactionData[i][factionID] = cache_get_field_int(i, "factionID");

	    cache_get_field_content(i, "factionName", FactionData[i][factionName], g_iHandle, 64);

	    FactionData[i][factionColor] = cache_get_field_int(i, "factionColor");
	    FactionData[i][factionType] = cache_get_field_int(i, "factionType");
	    FactionData[i][factionRanks] = cache_get_field_int(i, "factionRanks");
	    FactionData[i][factionDivisions] = cache_get_field_int(i, "factionDivisions");
	    FactionData[i][factionLockerPos][0] = cache_get_field_float(i, "factionLockerX");
	    FactionData[i][factionLockerPos][1] = cache_get_field_float(i, "factionLockerY");
	    FactionData[i][factionLockerPos][2] = cache_get_field_float(i, "factionLockerZ");
	    FactionData[i][factionLockerInt] = cache_get_field_int(i, "factionLockerInt");
	    FactionData[i][factionLockerWorld] = cache_get_field_int(i, "factionLockerWorld");

		//Spawning
		FactionData[i][SpawnX] = cache_get_field_float(i, "SpawnX");
	 	FactionData[i][SpawnY] = cache_get_field_float(i, "SpawnY");
   		FactionData[i][SpawnZ] = cache_get_field_float(i, "SpawnZ");
		FactionData[i][SpawnInterior] = cache_get_field_int(i, "SpawnInterior");
  		FactionData[i][SpawnVW] = cache_get_field_int(i, "SpawnVW");

	    for (new j = 0; j < 18; j ++) {
	        format(str, sizeof(str), "factionSkin%d", j + 1);

	        FactionData[i][factionSkins][j] = cache_get_field_int(i, str);
		}
        for (new j = 0; j < 10; j ++) {
	        format(str, sizeof(str), "factionWeapon%d", j + 1);

	        FactionData[i][factionWeapons][j] = cache_get_field_int(i, str);

	        format(str, sizeof(str), "factionAmmo%d", j + 1);

			FactionData[i][factionAmmo][j] = cache_get_field_int(i, str);
		}
		for (new j = 0; j < 15; j ++) {
		    format(str, sizeof(str), "factionRank%d", j + 1);

		    cache_get_field_content(i, str, FactionRanks[i][j], g_iHandle, 32);
		}
		for (new j = 0; j < 5; j ++) {
		    format(str, sizeof(str), "factionDivision%d", j + 1);

 		    cache_get_field_content(i, str, FactionDivisions[i][j], g_iHandle, 32);
		}
		Faction_Refresh(i);
	}
	return 1;
}

forward Plant_Load();
public Plant_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DRUG_PLANTS)
	{
	    PlantData[i][plantExists] = true;
	    PlantData[i][plantID] = cache_get_field_int(i, "plantID");
	    PlantData[i][plantType] = cache_get_field_int(i, "plantType");
	    PlantData[i][plantDrugs] = cache_get_field_int(i, "plantDrugs");
	    PlantData[i][plantPos][0] = cache_get_field_float(i, "plantX");
	    PlantData[i][plantPos][1] = cache_get_field_float(i, "plantY");
	    PlantData[i][plantPos][2] = cache_get_field_float(i, "plantZ");
	    PlantData[i][plantPos][3] = cache_get_field_float(i, "plantA");
	    PlantData[i][plantInterior] = cache_get_field_int(i, "plantInterior");
	    PlantData[i][plantWorld] = cache_get_field_int(i, "plantWorld");

		Plant_Refresh(i);
	}
	return 1;
}

forward Crate_Load();
public Crate_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_CRATES)
	{
	    CrateData[i][crateExists] = true;
	    CrateData[i][crateID] = cache_get_field_int(i, "crateID");
	    CrateData[i][crateType] = cache_get_field_int(i, "crateType");
	    CrateData[i][cratePos][0] = cache_get_field_float(i, "crateX");
	    CrateData[i][cratePos][1] = cache_get_field_float(i, "crateY");
	    CrateData[i][cratePos][2] = cache_get_field_float(i, "crateZ");
	    CrateData[i][cratePos][3] = cache_get_field_float(i, "crateA");
	    CrateData[i][crateInterior] = cache_get_field_int(i, "crateInterior");
	    CrateData[i][crateWorld] = cache_get_field_int(i, "crateWorld");
		CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;

		Crate_Refresh(i);
	}
	return 1;
}

forward Job_Load();
public Job_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

    for (new i = 0; i < rows; i ++) if (i < MAX_DYNAMIC_JOBS)
	{
	    JobData[i][jobExists] = true;
	    JobData[i][jobID] = cache_get_field_int(i, "jobID");
	    JobData[i][jobType] = cache_get_field_int(i, "jobType");
	    JobData[i][jobPos][0] = cache_get_field_float(i, "jobPosX");
	    JobData[i][jobPos][1] = cache_get_field_float(i, "jobPosY");
	    JobData[i][jobPos][2] = cache_get_field_float(i, "jobPosZ");
	    JobData[i][jobInterior] = cache_get_field_int(i, "jobInterior");
	    JobData[i][jobWorld] = cache_get_field_int(i, "jobWorld");
        JobData[i][jobPoint][0] = cache_get_field_float(i, "jobPointX");
	    JobData[i][jobPoint][1] = cache_get_field_float(i, "jobPointY");
	    JobData[i][jobPoint][2] = cache_get_field_float(i, "jobPointZ");
	    JobData[i][jobDeliver][0] = cache_get_field_float(i, "jobDeliverX");
	    JobData[i][jobDeliver][1] = cache_get_field_float(i, "jobDeliverY");
	    JobData[i][jobDeliver][2] = cache_get_field_float(i, "jobDeliverZ");
	    JobData[i][jobPointInt] = cache_get_field_int(i, "jobPointInt");
	    JobData[i][jobPointWorld] = cache_get_field_int(i, "jobPointWorld");

 	    Job_Refresh(i);
	}
	return 1;
}

forward Entrance_Load();
public Entrance_Load()
{
    static
	    rows,
	    fields;

    cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_ENTRANCES)
	{
	    EntranceData[i][entranceExists] = true;
    	EntranceData[i][entranceID] = cache_get_field_int(i, "entranceID");

		cache_get_field_content(i, "entranceName", EntranceData[i][entranceName], g_iHandle, 32);
		cache_get_field_content(i, "entrancePass", EntranceData[i][entrancePass], g_iHandle, 32);

	    EntranceData[i][entranceIcon] = cache_get_field_int(i, "entranceIcon");
	    EntranceData[i][entranceLocked] = cache_get_field_int(i, "entranceLocked");
	    EntranceData[i][entrancePos][0] = cache_get_field_float(i, "entrancePosX");
	    EntranceData[i][entrancePos][1] = cache_get_field_float(i, "entrancePosY");
	    EntranceData[i][entrancePos][2] = cache_get_field_float(i, "entrancePosZ");
	    EntranceData[i][entrancePos][3] = cache_get_field_float(i, "entrancePosA");
	    EntranceData[i][entranceInt][0] = cache_get_field_float(i, "entranceIntX");
	    EntranceData[i][entranceInt][1] = cache_get_field_float(i, "entranceIntY");
	    EntranceData[i][entranceInt][2] = cache_get_field_float(i, "entranceIntZ");
	    EntranceData[i][entranceInt][3] = cache_get_field_float(i, "entranceIntA");
	    EntranceData[i][entranceInterior] = cache_get_field_int(i, "entranceInterior");
	    EntranceData[i][entranceExterior] = cache_get_field_int(i, "entranceExterior");
	    EntranceData[i][entranceExteriorVW] = cache_get_field_int(i, "entranceExteriorVW");
	    EntranceData[i][entranceType] = cache_get_field_int(i, "entranceType");
	    EntranceData[i][entranceCustom] = cache_get_field_int(i, "entranceCustom");
	    EntranceData[i][entranceWorld] = cache_get_field_int(i, "entranceWorld");

		if (EntranceData[i][entranceType] == 3)
		    CreateForklifts(i);

	    Entrance_Refresh(i);
	}
	return 1;
}

forward Dropped_Load();
public Dropped_Load()
{
	static
	    rows,
	    fields;

    cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DROPPED_ITEMS)
	{
	    DroppedItems[i][droppedID] = cache_get_field_int(i, "ID");

		cache_get_field_content(i, "itemName", DroppedItems[i][droppedItem], g_iHandle, 32);
		cache_get_field_content(i, "itemPlayer", DroppedItems[i][droppedPlayer], g_iHandle, 24);

		DroppedItems[i][droppedModel] = cache_get_field_int(i, "itemModel");
		DroppedItems[i][droppedQuantity] = cache_get_field_int(i, "itemQuantity");
		DroppedItems[i][droppedWeapon] = cache_get_field_int(i, "itemWeapon");
		DroppedItems[i][droppedAmmo] = cache_get_field_int(i, "itemAmmo");
		DroppedItems[i][droppedPos][0] = cache_get_field_float(i, "itemX");
		DroppedItems[i][droppedPos][1] = cache_get_field_float(i, "itemY");
		DroppedItems[i][droppedPos][2] = cache_get_field_float(i, "itemZ");
		DroppedItems[i][droppedInt] = cache_get_field_int(i, "itemInt");
		DroppedItems[i][droppedWorld] = cache_get_field_int(i, "itemWorld");

		if (IsWeaponModel(DroppedItems[i][droppedModel])) {
    	   	DroppedItems[i][droppedObject] = CreateDynamicObject(DroppedItems[i][droppedModel], DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 93.7, 120.0, 120.0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
		} else {
			DroppedItems[i][droppedObject] = CreateDynamicObject(DroppedItems[i][droppedModel], DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 0.0, 0.0, 0.0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
		}
		DroppedItems[i][droppedText3D] = CreateDynamic3DTextLabel(DroppedItems[i][droppedItem], COLOR_CYAN, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
	}
	return 1;
}

forward Business_Load();
public Business_Load()
{
    static
	    rows,
	    fields,
		str[64];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_BUSINESSES)
	{
	    BusinessData[i][bizExists] = true;
	    BusinessData[i][bizID] = cache_get_field_int(i, "bizID");

		cache_get_field_content(i, "bizName", BusinessData[i][bizName], g_iHandle, 32);
        cache_get_field_content(i, "bizMessage", BusinessData[i][bizMessage], g_iHandle, 128);

		BusinessData[i][bizOwner] = cache_get_field_int(i, "bizOwner");
		BusinessData[i][bizType] = cache_get_field_int(i, "bizType");
		BusinessData[i][bizPrice] = cache_get_field_int(i, "bizPrice");
		BusinessData[i][bizPos][0] = cache_get_field_float(i, "bizPosX");
		BusinessData[i][bizPos][1] = cache_get_field_float(i, "bizPosY");
		BusinessData[i][bizPos][2] = cache_get_field_float(i, "bizPosZ");
		BusinessData[i][bizPos][3] = cache_get_field_float(i, "bizPosA");
		BusinessData[i][bizInt][0] = cache_get_field_float(i, "bizIntX");
		BusinessData[i][bizInt][1] = cache_get_field_float(i, "bizIntY");
		BusinessData[i][bizInt][2] = cache_get_field_float(i, "bizIntZ");
		BusinessData[i][bizInt][3] = cache_get_field_float(i, "bizIntA");
		BusinessData[i][bizSpawn][0] = cache_get_field_float(i, "bizSpawnX");
		BusinessData[i][bizSpawn][1] = cache_get_field_float(i, "bizSpawnY");
		BusinessData[i][bizSpawn][2] = cache_get_field_float(i, "bizSpawnZ");
		BusinessData[i][bizSpawn][3] = cache_get_field_float(i, "bizSpawnA");
		BusinessData[i][bizDeliver][0] = cache_get_field_float(i, "bizDeliverX");
		BusinessData[i][bizDeliver][1] = cache_get_field_float(i, "bizDeliverY");
		BusinessData[i][bizDeliver][2] = cache_get_field_float(i, "bizDeliverZ");
		BusinessData[i][bizShipment] = cache_get_field_int(i, "bizShipment");
		BusinessData[i][bizInterior] = cache_get_field_int(i, "bizInterior");
		BusinessData[i][bizExterior] = cache_get_field_int(i, "bizExterior");
		BusinessData[i][bizExteriorVW] = cache_get_field_int(i, "bizExteriorVW");
		BusinessData[i][bizLocked] = cache_get_field_int(i, "bizLocked");
		BusinessData[i][bizVault] = cache_get_field_int(i, "bizVault");
		BusinessData[i][bizProducts] = cache_get_field_int(i, "bizProducts");

		for (new j = 0; j < 20; j ++)
		{
			format(str, 32, "bizPrice%d", j + 1);
			BusinessData[i][bizPrices][j] = cache_get_field_int(i, str);
		}
		Business_Refresh(i);
	}
	for (new i = 0; i < MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists])
	{
		if (BusinessData[i][bizType] == 5) {
			format(str, sizeof(str), "SELECT * FROM `dealervehicles` WHERE `ID` = '%d'", BusinessData[i][bizID]);

			mysql_tquery(g_iHandle, str, "Business_LoadCars", "d", i);
		}
		else if (BusinessData[i][bizType] == 6) {
			format(str, sizeof(str), "SELECT * FROM `pumps` WHERE `ID` = '%d'", BusinessData[i][bizID]);

			mysql_tquery(g_iHandle, str, "Pump_Load", "d", i);
		}
	}
	return 1;
}

forward House_Load();
public House_Load()
{
	static
	    rows,
	    fields,
		str[128];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_HOUSES)
	{
		HouseData[i][houseExists] = true;
		HouseData[i][houseLights] = false;

		HouseData[i][houseID] = cache_get_field_int(i, "houseID");
		HouseData[i][houseOwner] = cache_get_field_int(i, "houseOwner");
		HouseData[i][housePrice] = cache_get_field_int(i, "housePrice");

		cache_get_field_content(i, "houseAddress", HouseData[i][houseAddress], g_iHandle, 32);

		HouseData[i][housePos][0] = cache_get_field_float(i, "housePosX");
		HouseData[i][housePos][1] = cache_get_field_float(i, "housePosY");
		HouseData[i][housePos][2] = cache_get_field_float(i, "housePosZ");
		HouseData[i][housePos][3] = cache_get_field_float(i, "housePosA");
		HouseData[i][houseInt][0] = cache_get_field_float(i, "houseIntX");
		HouseData[i][houseInt][1] = cache_get_field_float(i, "houseIntY");
		HouseData[i][houseInt][2] = cache_get_field_float(i, "houseIntZ");
		HouseData[i][houseInt][3] = cache_get_field_float(i, "houseIntA");
		HouseData[i][houseInterior] = cache_get_field_int(i, "houseInterior");
		HouseData[i][houseExterior] = cache_get_field_int(i, "houseExterior");
		HouseData[i][houseExteriorVW] = cache_get_field_int(i, "houseExteriorVW");
        HouseData[i][houseLocked] = cache_get_field_int(i, "houseLocked");
        HouseData[i][houseMoney] = cache_get_field_int(i, "houseMoney");

        for (new j = 0; j < 10; j ++)
		{
            format(str, 24, "houseWeapon%d", j + 1);
            HouseData[i][houseWeapons][j] = cache_get_field_int(i, str);

            format(str, 24, "houseAmmo%d", j + 1);
            HouseData[i][houseAmmo][j] = cache_get_field_int(i, str);
		}
		House_Refresh(i);
	}
	for (new i = 0; i < MAX_HOUSES; i ++) if (HouseData[i][houseExists]) {
		format(str, sizeof(str), "SELECT * FROM `housestorage` WHERE `ID` = '%d'", HouseData[i][houseID]);

		mysql_tquery(g_iHandle, str, "OnLoadStorage", "d", i);

		format(str, sizeof(str), "SELECT * FROM `furniture` WHERE `ID` = '%d'", HouseData[i][houseID]);

		mysql_tquery(g_iHandle, str, "OnLoadFurniture", "d", i);
	}
	return 1;
}

stock Car_GetRealID(carid)
{
	if (carid == -1 || !CarData[carid][carExists] || CarData[carid][carVehicle] == INVALID_VEHICLE_ID)
	    return INVALID_VEHICLE_ID;

	return CarData[carid][carVehicle];
}

stock Car_GetID(vehicleid)
{
	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists] && CarData[i][carVehicle] == vehicleid) {
	    return i;
	}
	return -1;
}

stock Car_Spawn(carid)
{
	if (carid != -1 && CarData[carid][carExists])
	{
		if (IsValidVehicle(CarData[carid][carVehicle]))
		    DestroyVehicle(CarData[carid][carVehicle]);

		if (CarData[carid][carColor1] == -1)
		    CarData[carid][carColor1] = random(127);

		if (CarData[carid][carColor2] == -1)
		    CarData[carid][carColor2] = random(127);

		CarData[carid][carVehicle] = CreateVehicle(CarData[carid][carModel], CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2], CarData[carid][carPos][3], CarData[carid][carColor1], CarData[carid][carColor2], (CarData[carid][carOwner] != 0) ? (-1) : (1200000), CarData[carid][carSiren]);
        if (CarData[carid][carVehicle] != INVALID_VEHICLE_ID)
        {
            if (CarData[carid][carPaintjob] != -1)
            {
                ChangeVehiclePaintjob(CarData[carid][carVehicle], CarData[carid][carPaintjob]);
			}
			if (CarData[carid][carLocked])
			{
			    new
					engine, lights, alarm, doors, bonnet, boot, objective;

				GetVehicleParamsEx(CarData[carid][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
			    SetVehicleParamsEx(CarData[carid][carVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
			}
			for (new i = 0; i < 14; i ++)
			{
			    if (CarData[carid][carMods][i]) AddVehicleComponent(CarData[carid][carVehicle], CarData[carid][carMods][i]);
			}
			if (CarData[carid][carHP] > 1.0 && CarData[carid][carOwner] != 0)
			{
				SetVehicleHealth(CarData[carid][carVehicle], CarData[carid][carHP]);
				UpdateVehicleDamageStatus(CarData[carid][carVehicle], CarData[carid][carPanelsDmg], CarData[carid][carDoorsDmg], CarData[carid][carLightsDmg], CarData[carid][carTiresDmg]);
			}
			SetVehicleNumberPlate(CarData[carid][carVehicle], CarData[carid][carPlate]);
   			ResetVehicle(CarData[carid][carVehicle]);
			return 1;
		}
	}
	return 0;
}

forward Car_Load();
public Car_Load()
{
	static
	    rows,
	    fields,
		str[128];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DYNAMIC_CARS)
	{
	    CarData[i][carExists] = true;
	    CarData[i][carID] = cache_get_field_int(i, "carID");
		CarData[i][carModel] = cache_get_field_int(i, "carModel");
	    CarData[i][carOwner] = cache_get_field_int(i, "carOwner");
	    CarData[i][carPos][0] = cache_get_field_float(i, "carPosX");
	    CarData[i][carPos][1] = cache_get_field_float(i, "carPosY");
	    CarData[i][carPos][2] = cache_get_field_float(i, "carPosZ");
	    CarData[i][carPos][3] = cache_get_field_float(i, "carPosR");
		CarData[i][carHP] = cache_get_field_float(i, "carHP");
		CarData[i][carPanelsDmg] = cache_get_field_int(i, "carPanels");
		CarData[i][carDoorsDmg] = cache_get_field_int(i, "carDoors");
		CarData[i][carLightsDmg] = cache_get_field_int(i, "carLights");
		CarData[i][carTiresDmg] = cache_get_field_int(i, "carTires");
	    CarData[i][carColor1] = cache_get_field_int(i, "carColor1");
	    CarData[i][carColor2] = cache_get_field_int(i, "carColor2");
	    CarData[i][carPaintjob] = cache_get_field_int(i, "carPaintjob");
	    CarData[i][carLocked] = cache_get_field_int(i, "carLocked");
	    CarData[i][carImpounded] = cache_get_field_int(i, "carImpounded");
	    CarData[i][carImpoundPrice] = cache_get_field_int(i, "carImpoundPrice");
        CarData[i][carFaction] = cache_get_field_int(i, "carFaction");
        CarData[i][carJob] = cache_get_field_int(i, "carJob");
        CarData[i][carSiren] = cache_get_field_int(i, "carSiren");
		CarData[i][carRadio] = cache_get_field_int(i, "carRadio");
		cache_get_field_content(i, "carPlate", CarData[i][carPlate], g_iHandle, 15);

		for (new j = 0; j < 14; j ++)
		{
		    if (j < 5)
		    {
		        format(str, sizeof(str), "carWeapon%d", j + 1);
		        CarData[i][carWeapons][j] = cache_get_field_int(i, str);

		        format(str, sizeof(str), "carAmmo%d", j + 1);
		        CarData[i][carAmmo][j] = cache_get_field_int(i, str);
	        }
	        format(str, sizeof(str), "carMod%d", j + 1);
	        CarData[i][carMods][j] = cache_get_field_int(i, str);
	    }
		if(isnull(CarData[i][carPlate]) == true)
		{
			GenPlate(CarData[i][carPlate], 7);
			Car_Save(i);
		}
	    Car_Spawn(i);
	}
	for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists]) {
		format(str, sizeof(str), "SELECT * FROM `carstorage` WHERE `ID` = '%d'", CarData[i][carID]);

		mysql_tquery(g_iHandle, str, "OnLoadCarStorage", "d", i);
	}
	return 1;
}

stock IsVehicleSeatUsed(vehicleid, seat)
{
	foreach (new i : Player) if (IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seat) {
	    return 1;
	}
	return 0;
}

stock RemoveFromVehicle(playerid)
{
	if (IsPlayerInAnyVehicle(playerid))
	{
		static
		    Float:fX,
	    	Float:fY,
	    	Float:fZ;

		GetPlayerPos(playerid, fX, fY, fZ);
		SetPlayerPos(playerid, fX, fY, fZ + 1.5);
	}
	return 1;
}

stock GetAvailableSeat(vehicleid, start = 1)
{
	new seats = GetVehicleMaxSeats(vehicleid);

	for (new i = start; i < seats; i ++) if (!IsVehicleSeatUsed(vehicleid, i)) {
	    return i;
	}
	return -1;
}

stock GetVehicleFromBehind(vehicleid)
{
	static
	    Float:fCoords[7];

	GetVehiclePos(vehicleid, fCoords[0], fCoords[1], fCoords[2]);
	GetVehicleZAngle(vehicleid, fCoords[3]);

	for (new i = 1; i != MAX_VEHICLES; i ++) if (i != vehicleid && GetVehiclePos(i, fCoords[4], fCoords[5], fCoords[6]))
	{
		if (floatabs(fCoords[0] - fCoords[4]) < 6 && floatabs(fCoords[1] - fCoords[5]) < 6 && floatabs(fCoords[2] - fCoords[6]) < 6)
			return i;
	}
	return INVALID_VEHICLE_ID;
}

stock GetVehicleBoot(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y =0.0, z = 0.0), 0;

	static
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] - (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] - (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

stock GetVehicleHood(vehicleid, &Float:x, &Float:y, &Float:z)
{
    if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	static
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] + (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] + (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

forward HarvestPlant(playerid, plantid);
public HarvestPlant(playerid, plantid)
{
	PlayerData[playerid][pHarvesting] = 0;

	if (Plant_Nearest(playerid) != plantid || GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK || !PlantData[plantid][plantExists])
	    return 0;

	switch (PlantData[plantid][plantType])
	{
	    case 1:
	    {
	        new id = Inventory_Add(playerid, "Marijuana", 1578, PlantData[plantid][plantDrugs]);

	        if (id == -1)
	            return SendErrorMessage(playerid, "You don't have any room in your inventory.");

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has harvested %d grams of marijuana.", ReturnName(playerid, 0), PlantData[plantid][plantDrugs]);
		}
		case 2:
	    {
	        new id = Inventory_Add(playerid, "Cocaine", 1575, PlantData[plantid][plantDrugs]);

	        if (id == -1)
	            return SendErrorMessage(playerid, "You don't have any room in your inventory.");

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has harvested %d grams of cocaine.", ReturnName(playerid, 0), PlantData[plantid][plantDrugs]);
		}
        case 3:
	    {
	        new id = Inventory_Add(playerid, "Heroin", 1577, PlantData[plantid][plantDrugs]);

	        if (id == -1)
	            return SendErrorMessage(playerid, "You don't have any room in your inventory.");

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has harvested %d grams of heroin.", ReturnName(playerid, 0), PlantData[plantid][plantDrugs]);
		}
	}
	Plant_Delete(plantid);
	return 1;
}

forward OpenCrate(playerid, crateid);
public OpenCrate(playerid, crateid)
{
	if (Crate_Nearest(playerid) != crateid || !CrateData[crateid][crateExists] || !IsPlayerSpawned(playerid) || !PlayerData[playerid][pOpeningCrate])
	    return 0;

    PlayerData[playerid][pOpeningCrate] = 0;

	ClearAnimations(playerid);
    TogglePlayerControllable(playerid, 1);

	if (Inventory_Items(playerid) >= MAX_INVENTORY - 4)
	    return SendErrorMessage(playerid, "You don't have any room in your inventory for 4 drug packages.");

	Inventory_Add(playerid, "Cocaine Seeds", 1575, 20);
	Inventory_Add(playerid, "Marijuana Seeds", 1578, 20);
	Inventory_Add(playerid, "Heroin Opium Seeds", 1577, 10);
	Inventory_Add(playerid, "Steroids", 1241, 5);

	Crate_Delete(crateid);
	SendServerMessage(playerid, "You have found an assortment of steroids and drug seeds (added to inventory).");
	return 1;
}

forward CraftParts(playerid, crateid);
public CraftParts(playerid, crateid)
{
	if (PlayerData[playerid][pCarryCrate] != crateid || !CrateData[crateid][crateExists] || !IsPlayerSpawned(playerid) || !PlayerData[playerid][pCrafting])
	    return 0;

    PlayerData[playerid][pCrafting] = 0;
	PlayerData[playerid][pCarryCrate] = -1;

    TogglePlayerControllable(playerid, 1);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

    RemovePlayerAttachedObject(playerid, 4);
	switch (CrateData[crateid][crateType])
	{
	    case 1:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 2)
	            return SendErrorMessage(playerid, "You don't have any room in your inventory for 2 melee weapons.");

			Inventory_Add(playerid, "Knife", 335);
			Inventory_Add(playerid, "Katana", 339);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "You have crafted 2 melee weapons (added to inventory).");
		}
	    case 2:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 2)
	            return SendErrorMessage(playerid, "You don't have any room in your inventory for 2 pistols.");

			Inventory_Add(playerid, "Colt 45", 346);
			Inventory_Add(playerid, "Glock-17", 348);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "You have crafted 2 pistols from pistol parts (added to inventory).");
		}
		case 3:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 3)
	            return SendErrorMessage(playerid, "You don't have any room in your inventory for 3 SMG's.");

			Inventory_Add(playerid, "Micro SMG", 352);
			Inventory_Add(playerid, "Tec-9", 372);
			Inventory_Add(playerid, "MP5", 353);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "You have crafted 3 SMGs from SMG parts (added to inventory).");
		}
		case 4:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 1)
	            return SendErrorMessage(playerid, "You don't have any room in your inventory for 1 shotgun.");

			Inventory_Add(playerid, "Shotgun", 349);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "You have crafted a shotgun from Shotgun parts (added to inventory).");
		}
		case 5:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 2)
	            return SendErrorMessage(playerid, "You don't have any room in your inventory for 2 Rifles.");

			Inventory_Add(playerid, "AK-47", 355);
			Inventory_Add(playerid, "Rifle", 357);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "You have crafted 2 rifles from Rifle parts (added to inventory).");
		}
	}
	return 1;
}

forward FirstAidUpdate(playerid);
public FirstAidUpdate(playerid)
{
	static
	    Float:health;

	GetPlayerHealth(playerid, health);

    if (!IsPlayerInAnyVehicle(playerid) && GetPlayerAnimationIndex(playerid) != 1508)
    	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);

	if (health >= 95.0)
	{
	    SetPlayerHealth(playerid, 99.00);
	    SendServerMessage(playerid, "Your first aid kit has been used up.");

		if (!IsPlayerInAnyVehicle(playerid)) {
	        PlayerData[playerid][pLoopAnim] = true;
			ShowPlayerFooter(playerid, "Press ~y~SPRINT~w~ to stop the animation.");
		}
        PlayerData[playerid][pBleeding] = 0;
		PlayerData[playerid][pBleedTime] = 0;

		PlayerData[playerid][pFirstAid] = false;
		KillTimer(PlayerData[playerid][pAidTimer]);
	}
	else {
	    SetPlayerHealth(playerid, floatadd(health, 4.0));
	}
	return 1;
}

forward RepairCar(playerid, vehicleid);
public RepairCar(playerid, vehicleid)
{
	if (PlayerData[playerid][pJob] != JOB_MECHANIC || !IsPlayerNearHood(playerid, vehicleid)) {
		return 0;
	}

	new panels, doors, lights, tires;
	GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

	SetVehicleHealth(vehicleid, 1000.0);
	GameTextForPlayer(playerid, " ", 1, 3);

	UpdateVehicleDamageStatus(vehicleid, panels, doors, 0, 0);

	PlayerData[playerid][pRepairTime] = gettime() + 60;
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has successfully repaired the vehicle.", ReturnName(playerid, 0));

	return 1;
}

forward Business_LoadCars(bizid);
public Business_LoadCars(bizid)
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) {
		DealershipCars[bizid][i][vehID] = cache_get_field_int(i, "vehID");
		DealershipCars[bizid][i][vehModel] = cache_get_field_int(i, "vehModel");
		DealershipCars[bizid][i][vehPrice] = cache_get_field_int(i, "vehPrice");
	}
	return 1;
}

forward OnLoadFurniture(houseid);
public OnLoadFurniture(houseid)
{
	static
	    rows,
	    fields,
		id = -1;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) if ((id = Furniture_GetFreeID()) != -1) {
	    FurnitureData[id][furnitureExists] = true;
	    FurnitureData[id][furnitureHouse] = houseid;

	    cache_get_field_content(i, "furnitureName", FurnitureData[id][furnitureName], g_iHandle, 32);

	    FurnitureData[id][furnitureID] = cache_get_field_int(i, "furnitureID");
	    FurnitureData[id][furnitureModel] = cache_get_field_int(i, "furnitureModel");
	    FurnitureData[id][furniturePos][0] = cache_get_field_float(i, "furnitureX");
	    FurnitureData[id][furniturePos][1] = cache_get_field_float(i, "furnitureY");
	    FurnitureData[id][furniturePos][2] = cache_get_field_float(i, "furnitureZ");
	    FurnitureData[id][furnitureRot][0] = cache_get_field_float(i, "furnitureRX");
	    FurnitureData[id][furnitureRot][1] = cache_get_field_float(i, "furnitureRY");
	    FurnitureData[id][furnitureRot][2] = cache_get_field_float(i, "furnitureRZ");

	    Furniture_Refresh(id);
	}
	return 1;
}

Furniture_GetCount(houseid)
{
	new count;

	for (new i = 0; i < MAX_FURNITURE; i ++) if (FurnitureData[i][furnitureExists] && FurnitureData[i][furnitureHouse] == houseid) {
	    count++;
	}
	return count;
}

Furniture_GetFreeID()
{
	for (new i = 0; i != MAX_FURNITURE; i ++) if (!FurnitureData[i][furnitureExists]) {
	    return i;
	}
	return -1;
}

Furniture_Refresh(furnitureid)
{
	if (furnitureid != -1 && FurnitureData[furnitureid][furnitureExists])
	{
	    if (IsValidDynamicObject(FurnitureData[furnitureid][furnitureObject]))
	        DestroyDynamicObject(FurnitureData[furnitureid][furnitureObject]);

	    FurnitureData[furnitureid][furnitureObject] = CreateDynamicObject(
			FurnitureData[furnitureid][furnitureModel],
			FurnitureData[furnitureid][furniturePos][0],
			FurnitureData[furnitureid][furniturePos][1],
			FurnitureData[furnitureid][furniturePos][2],
			FurnitureData[furnitureid][furnitureRot][0],
			FurnitureData[furnitureid][furnitureRot][1],
			FurnitureData[furnitureid][furnitureRot][2],
			HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID] + 5000,
			HouseData[FurnitureData[furnitureid][furnitureHouse]][houseInterior]
		);
	}
	return 1;
}

Furniture_Save(furnitureid)
{
	static
	    string[300];

	format(string, sizeof(string), "UPDATE `furniture` SET `furnitureModel` = '%d', `furnitureName` = '%s', `furnitureX` = '%.4f', `furnitureY` = '%.4f', `furnitureZ` = '%.4f', `furnitureRX` = '%.4f', `furnitureRY` = '%.4f', `furnitureRZ` = '%.4f' WHERE `ID` = '%d' AND `furnitureID` = '%d'",
	    FurnitureData[furnitureid][furnitureModel],
	    FurnitureData[furnitureid][furnitureName],
	    FurnitureData[furnitureid][furniturePos][0],
	    FurnitureData[furnitureid][furniturePos][1],
	    FurnitureData[furnitureid][furniturePos][2],
	    FurnitureData[furnitureid][furnitureRot][0],
	    FurnitureData[furnitureid][furnitureRot][1],
	    FurnitureData[furnitureid][furnitureRot][2],
	    HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID],
	    FurnitureData[furnitureid][furnitureID]
	);
	return mysql_tquery(g_iHandle, string);
}

Furniture_Add(houseid, name[], modelid, Float:x, Float:y, Float:z, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0)
{
	static
	    string[64],
		id = -1;

 	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	if ((id = Furniture_GetFreeID()) != -1)
	{
	    FurnitureData[id][furnitureExists] = true;
	    format(FurnitureData[id][furnitureName], 32, name);

        FurnitureData[id][furnitureHouse] = houseid;
	    FurnitureData[id][furnitureModel] = modelid;
	    FurnitureData[id][furniturePos][0] = x;
	    FurnitureData[id][furniturePos][1] = y;
	    FurnitureData[id][furniturePos][2] = z;
	    FurnitureData[id][furnitureRot][0] = rx;
	    FurnitureData[id][furnitureRot][1] = ry;
	    FurnitureData[id][furnitureRot][2] = rz;

	    Furniture_Refresh(id);

		format(string, sizeof(string), "INSERT INTO `furniture` (`ID`) VALUES(%d)", HouseData[houseid][houseID]);
		mysql_tquery(g_iHandle, string, "OnFurnitureCreated", "d", id);

		return id;
	}
	return -1;
}

Furniture_Delete(furnitureid)
{
	static
	    string[72];

	if (furnitureid != -1 && FurnitureData[furnitureid][furnitureExists])
	{
	    format(string, sizeof(string), "DELETE FROM `furniture` WHERE `ID` = '%d' AND `furnitureID` = '%d'", HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID], FurnitureData[furnitureid][furnitureID]);
		mysql_tquery(g_iHandle, string);

		FurnitureData[furnitureid][furnitureExists] = false;
		FurnitureData[furnitureid][furnitureModel] = 0;

		DestroyDynamicObject(FurnitureData[furnitureid][furnitureObject]);
	}
	return 1;
}

forward OnLoadCarStorage(carid);
public OnLoadCarStorage(carid)
{
	static
	    rows,
	    fields,
		str[32];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) {
		CarStorage[carid][i][cItemExists] = true;
		CarStorage[carid][i][cItemID] = cache_get_field_int(i, "itemID");
		CarStorage[carid][i][cItemModel] = cache_get_field_int(i, "itemModel");
		CarStorage[carid][i][cItemQuantity] = cache_get_field_int(i, "itemQuantity");

		cache_get_field_content(i, "itemName", str, g_iHandle, sizeof(str));
		strpack(CarStorage[carid][i][cItemName], str, 32 char);
	}
	return 1;
}

forward OnLoadStorage(houseid);
public OnLoadStorage(houseid)
{
	static
	    rows,
	    fields,
		str[32];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) {
		HouseStorage[houseid][i][hItemExists] = true;
		HouseStorage[houseid][i][hItemID] = cache_get_field_int(i, "itemID");
		HouseStorage[houseid][i][hItemModel] = cache_get_field_int(i, "itemModel");
		HouseStorage[houseid][i][hItemQuantity] = cache_get_field_int(i, "itemQuantity");

		cache_get_field_content(i, "itemName", str, g_iHandle, sizeof(str));
		strpack(HouseStorage[houseid][i][hItemName], str, 32 char);
	}
	return 1;
}

forward OnLoadBackpack(id);
public OnLoadBackpack(id)
{
	static
	    rows,
	    fields,
		itemid = -1;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) if ((itemid = Backpack_GetFreeItem()) != -1) {
		BackpackItems[itemid][bItemExists] = true;
		BackpackItems[itemid][bItemBackpack] = id;
		BackpackItems[itemid][bItemID] = cache_get_field_int(i, "itemID");
		BackpackItems[itemid][bItemModel] = cache_get_field_int(i, "itemModel");
		BackpackItems[itemid][bItemQuantity] = cache_get_field_int(i, "itemQuantity");

		cache_get_field_content(i, "itemName", BackpackItems[itemid][bItemName], g_iHandle, 32);
	}
	return 1;
}

House_Save(houseid)
{
	static
	    query[1536];

	format(query, sizeof(query), "UPDATE `houses` SET `houseOwner` = '%d', `housePrice` = '%d', `houseAddress` = '%s', `housePosX` = '%.4f', `housePosY` = '%.4f', `housePosZ` = '%.4f', `housePosA` = '%.4f', `houseIntX` = '%.4f', `houseIntY` = '%.4f', `houseIntZ` = '%.4f', `houseIntA` = '%.4f', `houseInterior` = '%d', `houseExterior` = '%d', `houseExteriorVW` = '%d'",
	    HouseData[houseid][houseOwner],
	    HouseData[houseid][housePrice],
	    SQL_ReturnEscaped(HouseData[houseid][houseAddress]),
	    HouseData[houseid][housePos][0],
	    HouseData[houseid][housePos][1],
	    HouseData[houseid][housePos][2],
	    HouseData[houseid][housePos][3],
	    HouseData[houseid][houseInt][0],
	    HouseData[houseid][houseInt][1],
	    HouseData[houseid][houseInt][2],
	    HouseData[houseid][houseInt][3],
        HouseData[houseid][houseInterior],
        HouseData[houseid][houseExterior],
        HouseData[houseid][houseExteriorVW]
	);
	for (new i = 0; i < 10; i ++) {
		format(query, sizeof(query), "%s, `houseWeapon%d` = '%d', `houseAmmo%d` = '%d'", query, i + 1, HouseData[houseid][houseWeapons][i], i + 1, HouseData[houseid][houseAmmo][i]);
	}
	format(query, sizeof(query), "%s, `houseLocked` = '%d', `houseMoney` = '%d' WHERE `houseID` = '%d'",
	    query,
	    HouseData[houseid][houseLocked],
	    HouseData[houseid][houseMoney],
        HouseData[houseid][houseID]
	);
	return mysql_tquery(g_iHandle, query);
}

/*House_GetCount(playerid)
{
	new count = 0;

    for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && House_IsOwner(playerid, i)) {
	    count++;
	}
	return count;
}*/

House_Inside(playerid)
{
	if (PlayerData[playerid][pHouse] != -1)
	{
	    for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && HouseData[i][houseID] == PlayerData[playerid][pHouse] && GetPlayerInterior(playerid) == HouseData[i][houseInterior] && GetPlayerVirtualWorld(playerid) > 0) {
	        return i;
		}
	}
	return -1;
}

Gate_Nearest(playerid)
{
    for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && IsPlayerInRangeOfPoint(playerid, GateData[i][gateRadius], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]))
	{
		if (GetPlayerInterior(playerid) == GateData[i][gateInterior] && GetPlayerVirtualWorld(playerid) == GateData[i][gateWorld])
			return i;
	}
	return -1;
}

Arrest_Nearest(playerid)
{
    for (new i = 0; i != MAX_ARREST_POINTS; i ++) if (ArrestData[i][arrestExists] && IsPlayerInRangeOfPoint(playerid, 10.0, ArrestData[i][arrestPos][0], ArrestData[i][arrestPos][1], ArrestData[i][arrestPos][2]))
	{
		if (GetPlayerInterior(playerid) == ArrestData[i][arrestInterior] && GetPlayerVirtualWorld(playerid) == ArrestData[i][arrestWorld])
			return i;
	}
	return -1;
}

Pump_Nearest(playerid)
{
    for (new i = 0; i != MAX_GAS_PUMPS; i ++) if (PumpData[i][pumpExists] && IsPlayerInRangeOfPoint(playerid, 4.0, PumpData[i][pumpPos][0], PumpData[i][pumpPos][1], PumpData[i][pumpPos][2]) && PumpData[i][pumpExists]) {
	    return i;
	}
	return -1;
}

Plant_Nearest(playerid)
{
    for (new i = 0; i != MAX_DRUG_PLANTS; i ++) if (PlantData[i][plantExists] && IsPlayerInRangeOfPoint(playerid, 4.0, PlantData[i][plantPos][0], PlantData[i][plantPos][1], PlantData[i][plantPos][2]))
	{
		if (GetPlayerInterior(playerid) == PlantData[i][plantInterior] && GetPlayerVirtualWorld(playerid) == PlantData[i][plantWorld])
			return i;
	}
	return -1;
}

Crate_Highest(crateid)
{
	new
		Float:height = -1.0,
		id = -1;

    for (new i = 0; i != MAX_CRATES; i ++) if (i != id && CrateData[i][crateExists] && CrateData[i][crateVehicle] == INVALID_VEHICLE_ID && CrateData[i][cratePos][0] == CrateData[crateid][cratePos][0] && CrateData[i][cratePos][1] == CrateData[crateid][cratePos][1] && CrateData[i][cratePos][2] > CrateData[crateid][cratePos][2] && !IsCrateInUse(crateid))
	{
	    if (CrateData[i][cratePos][2] > height)
	    {
	        height = CrateData[i][cratePos][2];
	        id = i;
		}
	}
	return id;
}

Crate_Nearest(playerid, Float:radius = 2.5)
{
	if (PlayerData[playerid][pCarryCrate] != -1 && CrateData[PlayerData[playerid][pCarryCrate]][crateExists])
	    return PlayerData[playerid][pCarryCrate];

    for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && IsPlayerInRangeOfPoint(playerid, radius, CrateData[i][cratePos][0], CrateData[i][cratePos][1], CrateData[i][cratePos][2]))
	{
		if (GetPlayerInterior(playerid) == CrateData[i][crateInterior] && GetPlayerVirtualWorld(playerid) == CrateData[i][crateWorld])
			return i;
	}
	return -1;
}

House_Nearest(playerid)
{
    for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && IsPlayerInRangeOfPoint(playerid, 2.5, HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]))
	{
		if (GetPlayerInterior(playerid) == HouseData[i][houseExterior] && GetPlayerVirtualWorld(playerid) == HouseData[i][houseExteriorVW])
			return i;
	}
	return -1;
}

House_Refresh(houseid)
{
	if (houseid != -1 && HouseData[houseid][houseExists])
	{
		if (IsValidDynamic3DTextLabel(HouseData[houseid][houseText3D]))
		    DestroyDynamic3DTextLabel(HouseData[houseid][houseText3D]);

		if (IsValidDynamicPickup(HouseData[houseid][housePickup]))
		    DestroyDynamicPickup(HouseData[houseid][housePickup]);

		//if (IsValidDynamicMapIcon(HouseData[houseid][houseMapIcon]))
		    //DestroyDynamicMapIcon(HouseData[houseid][houseMapIcon]);

		static
		    string[128];

		if (!HouseData[houseid][houseOwner]) {
			HouseData[houseid][housePickup] = CreateDynamicPickup(1273, 23, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
			format(string, sizeof(string), "[%s]\n%s", FormatNumber(HouseData[houseid][housePrice]), HouseData[houseid][houseAddress]);
            HouseData[houseid][houseText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
		}
		else {
			HouseData[houseid][housePickup] = CreateDynamicPickup(19522, 23, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
			format(string, sizeof(string), "%s", HouseData[houseid][houseAddress]);
			HouseData[houseid][houseText3D] = CreateDynamic3DTextLabel(string, COLOR_WHITE, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
		}
		//HouseData[houseid][houseMapIcon] = CreateDynamicMapIcon(HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], (HouseData[houseid][houseOwner] != 0) ? (32) : (31), 0, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
	}
	return 1;
}

Car_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++)
	{
		if (CarData[i][carExists] && CarData[i][carOwner] == PlayerData[playerid][pID])
   		{
   		    count++;
		}
	}
	return count;
}

House_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_HOUSES; i ++)
	{
		if (HouseData[i][houseExists] && House_IsOwner(playerid, i))
   		{
   		    count++;
		}
	}
	return count;
}

Business_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_BUSINESSES; i ++)
	{
		if (BusinessData[i][bizExists] && Business_IsOwner(playerid, i))
   		{
   		    count++;
		}
	}
	return count;
}

Car_IsOwner(playerid, carid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

    if ((CarData[carid][carExists] && CarData[carid][carOwner] != 0) && CarData[carid][carOwner] == PlayerData[playerid][pID])
		return 1;

	return 0;
}

Car_WeaponStorage(playerid, carid)
{
    if (!CarData[carid][carExists] || CarData[carid][carLocked])
	    return 0;

    static
	    string[164];

	string[0] = 0;

	for (new i = 0; i < 5; i ++)
	{
	    if (22 <= CarData[carid][carWeapons][i] <= 38)
	        format(string, sizeof(string), "%s%s - Ammo: %d\n", string, ReturnWeaponName(CarData[carid][carWeapons][i]), CarData[carid][carAmmo][i]);

		else
		    format(string, sizeof(string), "%s%s\n", string, (CarData[carid][carWeapons][i]) ? (ReturnWeaponName(CarData[carid][carWeapons][i])) : ("Empty Slot"));
	}
	Dialog_Show(playerid, Trunk, DIALOG_STYLE_LIST, "Car Trunk", string, "Select", "Cancel");
	return 1;
}

Car_ShowTrunk(playerid, carid)
{
	static
	    string[MAX_CAR_STORAGE * 32],
		name[32];

	string[0] = 0;

	for (new i = 0; i != MAX_CAR_STORAGE; i ++)
	{
	    if (!CarStorage[carid][i][cItemExists])
	        format(string, sizeof(string), "%sEmpty Slot\n", string);

		else {
			strunpack(name, CarStorage[carid][i][cItemName]);

			if (CarStorage[carid][i][cItemQuantity] == 1) {
                format(string, sizeof(string), "%s%s\n", string, name);
			}
			else format(string, sizeof(string), "%s%s (%d)\n", string, name, CarStorage[carid][i][cItemQuantity]);
		}
	}
	strcat(string, "Weapon Storage");

	PlayerData[playerid][pStorageSelect] = 0;
	Dialog_Show(playerid, CarStorage, DIALOG_STYLE_LIST, "Car Storage", string, "Select", "Cancel");
	return 1;
}

stock IsNearFactionLocker(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1)
	    return 0;

	if (IsPlayerInRangeOfPoint(playerid, 3.0, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2]) && GetPlayerInterior(playerid) == FactionData[factionid][factionLockerInt] && GetPlayerVirtualWorld(playerid) == FactionData[factionid][factionLockerWorld])
	    return 1;

	return 0;
}

stock GetFactionByID(sqlid)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists] && FactionData[i][factionID] == sqlid)
	    return i;

	return -1;
}

SetFaction(playerid, id)
{
	if (id != -1 && FactionData[id][factionExists])
	{
		PlayerData[playerid][pFaction] = id;
		PlayerData[playerid][pFactionID] = FactionData[id][factionID];
	}
	return 1;
}

SetFactionColor(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid != -1)
		return SetPlayerColor(playerid, RemoveAlpha(FactionData[factionid][factionColor]));

	return 0;
}

Faction_Update(factionid)
{
	if (factionid != -1 || FactionData[factionid][factionExists])
	{
	    foreach (new i : Player) if (PlayerData[i][pFaction] == factionid)
		{
 			if (GetFactionType(i) == FACTION_GANG_DRUGS || (GetFactionType(i) != FACTION_GANG_DRUGS && PlayerData[i][pOnDuty]))
			 	SetFactionColor(i);

			if (GetFactionType(i) == FACTION_GANG_GUNS || (GetFactionType(i) != FACTION_GANG_GUNS && PlayerData[i][pOnDuty]))
			 	SetFactionColor(i);
		}
	}
	return 1;
}

Faction_Refresh(factionid)
{
	if (factionid != -1 && FactionData[factionid][factionExists])
	{
	    if (FactionData[factionid][factionLockerPos][0] != 0.0 && FactionData[factionid][factionLockerPos][1] != 0.0 && FactionData[factionid][factionLockerPos][2] != 0.0)
	    {
		    static
		        string[128];

			if (IsValidDynamicPickup(FactionData[factionid][factionPickup]))
			    DestroyDynamicPickup(FactionData[factionid][factionPickup]);

			if (IsValidDynamic3DTextLabel(FactionData[factionid][factionText3D]))
			    DestroyDynamic3DTextLabel(FactionData[factionid][factionText3D]);

			FactionData[factionid][factionPickup] = CreateDynamicPickup(1239, 23, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2], FactionData[factionid][factionLockerWorld], FactionData[factionid][factionLockerInt]);

			format(string, sizeof(string), "[Locker %d]\n{FFFFFF}/locker to access the locker.", factionid);
	  		FactionData[factionid][factionText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 1, FactionData[factionid][factionLockerWorld], FactionData[factionid][factionLockerInt]);
		}
	}
	return 1;
}

Faction_Save(factionid)
{
	static
	    query[2048];

	format(query, sizeof(query), "UPDATE `factions` SET `factionID` = '%d', `factionName` = '%s', `factionColor` = '%d', `factionType` = '%d', `factionRanks` = '%d', `factionDivisions` = '%d', `factionLockerX` = '%.4f', `factionLockerY` = '%.4f', `factionLockerZ` = '%.4f', `factionLockerInt` = '%d', `factionLockerWorld` = '%d', `SpawnX` = '%f', `SpawnY` = '%f', `SpawnZ` = '%f', `SpawnInterior` = '%d', `SpawnVW` = '%d'",
		factionid,
		SQL_ReturnEscaped(FactionData[factionid][factionName]),
		FactionData[factionid][factionColor],
		FactionData[factionid][factionType],
		FactionData[factionid][factionRanks],
		FactionData[factionid][factionDivisions],
		FactionData[factionid][factionLockerPos][0],
		FactionData[factionid][factionLockerPos][1],
		FactionData[factionid][factionLockerPos][2],
		FactionData[factionid][factionLockerInt],
		FactionData[factionid][factionLockerWorld],

		FactionData[factionid][SpawnX],
		FactionData[factionid][SpawnY],
		FactionData[factionid][SpawnZ],
		FactionData[factionid][SpawnInterior],
		FactionData[factionid][SpawnVW]
	);
	for (new i = 0; i < 18; i ++)
	{
	    if (i < 10)
			format(query, sizeof(query), "%s, `factionSkin%d` = '%d', `factionWeapon%d` = '%d', `factionAmmo%d` = '%d'", query, i + 1, FactionData[factionid][factionSkins][i], i + 1, FactionData[factionid][factionWeapons][i], i + 1, FactionData[factionid][factionAmmo][i]);

		else
			format(query, sizeof(query), "%s, `factionSkin%d` = '%d'", query, i + 1, FactionData[factionid][factionSkins][i]);
	}
	format(query, sizeof(query), "%s WHERE `factionID` = '%d'",
		query,
		FactionData[factionid][factionID]
	);
	mysql_tquery(g_iHandle, query);
	FactionData[factionid][factionID] = factionid;
	return 1;
}

stock Faction_SaveRanks(factionid)
{
	static
	    query[768];

	format(query, sizeof(query), "UPDATE `factions` SET `factionRank1` = '%s', `factionRank2` = '%s', `factionRank3` = '%s', `factionRank4` = '%s', `factionRank5` = '%s', `factionRank6` = '%s', `factionRank7` = '%s', `factionRank8` = '%s', `factionRank9` = '%s', `factionRank10` = '%s', `factionRank11` = '%s', `factionRank12` = '%s', `factionRank13` = '%s', `factionRank14` = '%s', `factionRank15` = '%s' WHERE `factionID` = '%d'",
	    FactionRanks[factionid][0],
	    FactionRanks[factionid][1],
	    FactionRanks[factionid][2],
	    FactionRanks[factionid][3],
	    FactionRanks[factionid][4],
	    FactionRanks[factionid][5],
	    FactionRanks[factionid][6],
	    FactionRanks[factionid][7],
	    FactionRanks[factionid][8],
	    FactionRanks[factionid][9],
	    FactionRanks[factionid][10],
	    FactionRanks[factionid][11],
	    FactionRanks[factionid][12],
	    FactionRanks[factionid][13],
	    FactionRanks[factionid][14],
	    FactionData[factionid][factionID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Faction_SaveDivisions(factionid)
{
	static
	    query[768];

	format(query, sizeof(query), "UPDATE `factions` SET `factionDivision1` = '%s', `factionDivision2` = '%s', `factionDivision3` = '%s', `factionDivision4` = '%s', `factionDivision5` = '%s' WHERE `factionID` = '%d'",
	    FactionDivisions[factionid][0],
	    FactionDivisions[factionid][1],
	    FactionDivisions[factionid][2],
	    FactionDivisions[factionid][3],
	    FactionDivisions[factionid][4],
	    FactionData[factionid][factionID]
	);
	return mysql_tquery(g_iHandle, query);
}

Faction_Delete(factionid)
{
	if (factionid != -1 && FactionData[factionid][factionExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `factions` WHERE `factionID` = '%d'", FactionData[factionid][factionID]);
		mysql_tquery(g_iHandle, string);

		format(string, sizeof(string), "UPDATE `characters` SET `Faction` = '-1' WHERE `Faction` = '%d'", FactionData[factionid][factionID]);
		mysql_tquery(g_iHandle, string);

		foreach (new i : Player)
		{
			if (PlayerData[i][pFaction] == factionid) {
		    	PlayerData[i][pFaction] = -1;
		    	PlayerData[i][pFactionID] = -1;
		    	PlayerData[i][pFactionRank] = -1;
		    	PlayerData[i][pFactionDivision] = -1;
			}
			if (PlayerData[i][pFactionEdit] == factionid) {
			    PlayerData[i][pFactionEdit] = -1;
			}
		}
		if (IsValidDynamicPickup(FactionData[factionid][factionPickup]))
  			DestroyDynamicPickup(FactionData[factionid][factionPickup]);

		if (IsValidDynamic3DTextLabel(FactionData[factionid][factionText3D]))
  			DestroyDynamic3DTextLabel(FactionData[factionid][factionText3D]);

	    FactionData[factionid][factionExists] = false;
	    FactionData[factionid][factionType] = 0;
	    FactionData[factionid][factionID] = 0;
	}
	return 1;
}

stock GetFactionType(playerid)
{
	if (PlayerData[playerid][pFaction] == -1)
	    return 0;

	return (FactionData[PlayerData[playerid][pFaction]][factionType]);
}

Faction_Leader_Manage(playerid)
{
	new factionid = PlayerData[playerid][pFaction];
    if(factionid != -1 && FactionData[factionid][factionExists])
	{
		Dialog_Show(playerid, ManageFaction, DIALOG_STYLE_LIST, FactionData[factionid][factionName], "Edit Ranks\nEdit Divisions\nRespawn all vehicles", "Edit", "Cancel");
	}
	return 1;
}

Faction_ShowRanks(playerid, factionid)
{
    if (factionid != -1 && FactionData[factionid][factionExists])
	{
		static
		    string[640];

		string[0] = 0;

		for (new i = 0; i < FactionData[factionid][factionRanks]; i ++)
		    format(string, sizeof(string), "%sRank %d: %s\n", string, i + 1, FactionRanks[factionid][i]);

		PlayerData[playerid][pFactionEdit] = factionid;
		Dialog_Show(playerid, EditRanks, DIALOG_STYLE_LIST, FactionData[factionid][factionName], string, "Change", "Cancel");
	}
	return 1;
}

Faction_ShowDivisions(playerid, factionid)
{
    if (factionid != -1 && FactionData[factionid][factionExists])
	{
		static
		    string[640];

		string[0] = 0;

		for (new i = 0; i < FactionData[factionid][factionDivisions]; i ++)
		    format(string, sizeof(string), "%sDivision %d: %s\n", string, i + 1, FactionDivisions[factionid][i]);

		PlayerData[playerid][pFactionEdit] = factionid;
		Dialog_Show(playerid, EditDivisions, DIALOG_STYLE_LIST, FactionData[factionid][factionName], string, "Change", "Cancel");
	}
	return 1;
}



Faction_Create(name[], type)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (!FactionData[i][factionExists])
	{
	    format(FactionData[i][factionName], 64, name);

        FactionData[i][factionExists] = true;
        FactionData[i][factionColor] = 0xFFFFFF00;
        FactionData[i][factionType] = type;
        FactionData[i][factionRanks] = 5;
        FactionData[i][factionDivisions] = 5;

        FactionData[i][factionLockerPos][0] = 0.0;
        FactionData[i][factionLockerPos][1] = 0.0;
        FactionData[i][factionLockerPos][2] = 0.0;
        FactionData[i][factionLockerInt] = 0;
        FactionData[i][factionLockerWorld] = 0;

        for (new j = 0; j < 18; j ++) {
            FactionData[i][factionSkins][j] = 0;
        }
        for (new j = 0; j < 10; j ++) {
            FactionData[i][factionWeapons][j] = 0;
            FactionData[i][factionAmmo][j] = 0;
	    }
	    for (new j = 0; j < 15; j ++) {
			format(FactionRanks[i][j], 32, "Rank %d", j + 1);
	    }
	    for (new j = 0; j < 5; j ++) {
			format(FactionDivisions[i][j], 32, "Division %d", j + 1);
	    }

	    mysql_tquery(g_iHandle, "INSERT INTO `factions` (`factionType`) VALUES(0)", "OnFactionCreated", "d", i);
	    return i;
	}
	return -1;
}

Plant_Delete(plantid)
{
	if (plantid != -1 && PlantData[plantid][plantExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `plants` WHERE `plantID` = '%d'", PlantData[plantid][plantID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(PlantData[plantid][plantText3D]))
		    DestroyDynamic3DTextLabel(PlantData[plantid][plantText3D]);

		if (IsValidDynamicObject(PlantData[plantid][plantObject]))
		    DestroyDynamicObject(PlantData[plantid][plantObject]);

	    PlantData[plantid][plantExists] = false;
		PlantData[plantid][plantID] = 0;
	    PlantData[plantid][plantDrugs] = 0;
	}
	return 1;
}

Plant_Create(playerid, type)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
	    for (new i = 0; i != MAX_DRUG_PLANTS; i ++) if (!PlantData[i][plantExists])
	    {
	        PlantData[i][plantExists] = true;
	        PlantData[i][plantType] = type;
	        PlantData[i][plantDrugs] = 0;

	        PlantData[i][plantPos][0] = x;
	        PlantData[i][plantPos][1] = y;
	        PlantData[i][plantPos][2] = z;
	        PlantData[i][plantPos][3] = angle;
	        PlantData[i][plantInterior] = GetPlayerInterior(playerid);
	        PlantData[i][plantWorld] = GetPlayerVirtualWorld(playerid);

	        mysql_tquery(g_iHandle, "INSERT INTO `plants` (`plantType`) VALUES(0)", "OnPlantCreated", "d", i);
	        Plant_Refresh(i);
	        return i;
		}
	}
	return -1;
}

Plant_MaxGrams(type)
{
	new grams;

	switch (type)
	{
	    case 1: grams = 40; // Marijuana plant
	    case 2: grams = 30; // Cocaine plant
		case 3: grams = 25; // Heroin plant
		default: grams = 0;
	}
	return grams;
}

Plant_Save(plantid)
{
	static
	    query[256];

	format(query, sizeof(query), "UPDATE `plants` SET `plantType` = '%d', `plantDrugs` = '%d', `plantX` = '%.4f', `plantY` = '%.4f', `plantZ` = '%.4f', `plantA` = '%.4f', `plantInterior` = '%d', `plantWorld` = '%d' WHERE `plantID` = '%d'",
        PlantData[plantid][plantType],
        PlantData[plantid][plantDrugs],
        PlantData[plantid][plantPos][0],
        PlantData[plantid][plantPos][1],
        PlantData[plantid][plantPos][2],
        PlantData[plantid][plantPos][3],
        PlantData[plantid][plantInterior],
        PlantData[plantid][plantWorld],
        PlantData[plantid][plantID]
	);
	return mysql_tquery(g_iHandle, query);
}

Plant_GetType(type)
{
	static
	    str[16];

    switch (type) {
    	case 1: str = "Marijuana";
    	case 2: str = "Cocaine";
	    case 3: str = "Heroin";
	}
	return str;
}

Plant_Refresh(plantid)
{
	if (plantid != -1 && PlantData[plantid][plantExists])
	{
	    static
	        string[128];

		if (IsValidDynamicObject(PlantData[plantid][plantObject]))
		    DestroyDynamicObject(PlantData[plantid][plantObject]);

		if (IsValidDynamic3DTextLabel(PlantData[plantid][plantText3D]))
		    DestroyDynamic3DTextLabel(PlantData[plantid][plantText3D]);

		PlantData[plantid][plantObject] = CreateDynamicObject(3409, PlantData[plantid][plantPos][0], PlantData[plantid][plantPos][1], PlantData[plantid][plantPos][2] - 1.80, 0.0, 0.0, PlantData[plantid][plantPos][3], PlantData[plantid][plantWorld], PlantData[plantid][plantInterior]);

		format(string, sizeof(string), "[Plant %d]\n{FFFFFF}%s - %d/%d Grams", plantid, Plant_GetType(PlantData[plantid][plantType]), PlantData[plantid][plantDrugs], Plant_MaxGrams(PlantData[plantid][plantType]));
  		PlantData[plantid][plantText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, PlantData[plantid][plantPos][0], PlantData[plantid][plantPos][1], PlantData[plantid][plantPos][2], 10.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 1, PlantData[plantid][plantWorld], PlantData[plantid][plantInterior]);
	}
	return 1;
}

Crate_Refresh(crateid)
{
	if (crateid != -1 && CrateData[crateid][crateExists])
	{
	    static
	        string[128];

		if (IsValidDynamicObject(CrateData[crateid][crateObject]))
		    DestroyDynamicObject(CrateData[crateid][crateObject]);

		if (IsValidDynamic3DTextLabel(CrateData[crateid][crateText3D]))
		    DestroyDynamic3DTextLabel(CrateData[crateid][crateText3D]);

		CrateData[crateid][crateObject] = CreateDynamicObject(964, CrateData[crateid][cratePos][0], CrateData[crateid][cratePos][1], CrateData[crateid][cratePos][2], 0.0, 0.0, CrateData[crateid][cratePos][3], CrateData[crateid][crateWorld], CrateData[crateid][crateInterior]);

		if (CrateData[crateid][crateType] != 6) {
			format(string, sizeof(string), "[Crate %d]\n{FFFFFF}%s Parts (press 'F' to pickup)", crateid, Crate_GetType(CrateData[crateid][crateType]));
		}
		else {
		    format(string, sizeof(string), "[Crate %d]\n{FFFFFF}Drug Seeds (press 'F' to pickup)", crateid);
		}
  		CrateData[crateid][crateText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, CrateData[crateid][cratePos][0], CrateData[crateid][cratePos][1], CrateData[crateid][cratePos][2] + 0.5, 10.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 1, CrateData[crateid][crateWorld], CrateData[crateid][crateInterior]);
	}
	return 1;
}

Crate_Delete(crateid)
{
	if (crateid != -1 && CrateData[crateid][crateExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `crates` WHERE `crateID` = '%d'", CrateData[crateid][crateID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(CrateData[crateid][crateText3D]))
		    DestroyDynamic3DTextLabel(CrateData[crateid][crateText3D]);

		if (IsValidDynamicObject(CrateData[crateid][crateObject]))
		    DestroyDynamicObject(CrateData[crateid][crateObject]);

		foreach (new i : Player) if (PlayerData[i][pCarryCrate] == crateid) {
		    PlayerData[i][pCarryCrate] = -1;

		    RemovePlayerAttachedObject(i, 4);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
		}
	    CrateData[crateid][crateExists] = false;
	    CrateData[crateid][crateID] = 0;
	    CrateData[crateid][crateVehicle] = INVALID_VEHICLE_ID;
	}
	return 1;
}

Crate_Drop(playerid, Float:radius = 0.0)
{
    static
		Float:x,
		Float:y,
		Float:z,
		Float:angle,
		id = -1;

	if ((id = PlayerData[playerid][pCarryCrate]) != -1 && CrateData[id][crateExists])
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		if (radius != 0.0) {
		    x += radius * floatsin(-angle, degrees);
		    y += radius * floatcos(-angle, degrees);
		}
		CrateData[id][cratePos][0] = x;
		CrateData[id][cratePos][1] = y;
		CrateData[id][cratePos][2] = z - 0.9;
		CrateData[id][cratePos][3] = angle;
		CrateData[id][crateInterior] = GetPlayerInterior(playerid);
		CrateData[id][crateWorld] = GetPlayerVirtualWorld(playerid);

		Crate_Refresh(id);
		Crate_Save(id);
	}
	PlayerData[playerid][pCarryCrate] = -1;
	RemovePlayerAttachedObject(playerid, 4);
	return 1;
}

Crate_Save(crateid)
{
	static
	    query[255];

	format(query, sizeof(query), "UPDATE `crates` SET `crateType` = '%d', `crateX` = '%.4f', `crateY` = '%.4f', `crateZ` = '%.4f', `crateA` = '%.4f', `crateInterior` = '%d', `crateWorld` = '%d' WHERE `crateID` = '%d'",
	    CrateData[crateid][crateType],
	    CrateData[crateid][cratePos][0],
	    CrateData[crateid][cratePos][1],
	    CrateData[crateid][cratePos][2],
	    CrateData[crateid][cratePos][3],
	    CrateData[crateid][crateInterior],
	    CrateData[crateid][crateWorld],
	    CrateData[crateid][crateID]
	);
	return mysql_tquery(g_iHandle, query);
}

Crate_GetType(type)
{
	static
	    str[24];

	switch (type) {
	    case 1: str = "Melee";
	    case 2: str = "Pistol";
	    case 3: str = "SMG";
	    case 4: str = "Shotgun";
	    case 5: str = "Rifle";
	    case 6: str = "Drug Seeds";
	    default: str = "None";
	}
	return str;
}

Crate_Create(playerid, type)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
	    for (new i = 0; i != MAX_CRATES; i ++) if (!CrateData[i][crateExists])
	    {
         	if (Crate_Nearest(playerid, 2.5) != -1) {
			 	z = floatsub(z, 0.1);
	        }
            CrateData[i][crateExists] = true;
            CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;
            CrateData[i][crateType] = type;

			CrateData[i][cratePos][0] = x;
   			CrateData[i][cratePos][1] = y;
            CrateData[i][cratePos][2] = z - 0.9;
            CrateData[i][cratePos][3] = angle;

            CrateData[i][crateInterior] = GetPlayerInterior(playerid);
            CrateData[i][crateWorld] = GetPlayerVirtualWorld(playerid);

            mysql_tquery(g_iHandle, "INSERT INTO `crates` (`crateInterior`) VALUES(0)", "OnCrateCreated", "d", i);
            Crate_Refresh(i);
            return i;
		}
	}
	return -1;
}

Crate_Default_Create(type)
{

	for (new i = 0; i != MAX_CRATES; i ++) if (!CrateData[i][crateExists])
	{
		CrateData[i][crateExists] = true;
		CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;
		CrateData[i][crateType] = type;

		//crate loc: 1276.4827, 288.2883, 19.5614
		CrateData[i][cratePos][0] = 1276.4827;
		CrateData[i][cratePos][1] = 288.2883;
		CrateData[i][cratePos][2] = 19.5614 - 0.9;
		CrateData[i][cratePos][3] = 0;

		CrateData[i][crateInterior] = 0;
		CrateData[i][crateWorld] = 0;

		mysql_tquery(g_iHandle, "INSERT INTO `crates` (`crateInterior`) VALUES(0)", "OnCrateCreated", "d", i);
		Crate_Refresh(i);
		return i;
	}
	return -1;
}

Job_Save(jobid)
{
	static
	    query[512];

	format(query, sizeof(query), "UPDATE `jobs` SET `jobType` = '%d', `jobPosX` = '%.4f', `jobPosY` = '%.4f', `jobPosZ` = '%.4f', `jobInterior` = '%d', `jobWorld` = '%d', `jobPointX` = '%.4f', `jobPointY` = '%.4f', `jobPointZ` = '%.4f', `jobDeliverX` = '%.4f', `jobDeliverY` = '%.4f', `jobDeliverZ` = '%.4f', `jobPointInt` = '%d', `jobPointWorld` = '%d' WHERE `jobID` = '%d'",
	    JobData[jobid][jobType],
	    JobData[jobid][jobPos][0],
	    JobData[jobid][jobPos][1],
	    JobData[jobid][jobPos][2],
	    JobData[jobid][jobInterior],
	    JobData[jobid][jobWorld],
	    JobData[jobid][jobPoint][0],
	    JobData[jobid][jobPoint][1],
	    JobData[jobid][jobPoint][2],
	    JobData[jobid][jobDeliver][0],
	    JobData[jobid][jobDeliver][1],
	    JobData[jobid][jobDeliver][2],
	    JobData[jobid][jobPointInt],
	    JobData[jobid][jobPointWorld],
	    JobData[jobid][jobID]
	);
	return mysql_tquery(g_iHandle, query);
}

Job_GetName(type)
{
	static
	    str[24];

	switch (type)
	{
	    case 0: str = "None";
	    case 1: str = "Courier";
		case 2: str = "Mechanic";
		case 3: str = "Taxi Driver";
		case 4: str = "Cargo Unloader";
		case 5: str = "Miner";
		case 6: str = "Food Vendor";
		case 7: str = "Garbage Man";
		case 8: str = "Package Sorter";
		case 9: str = "Weapon Smuggler";
		case 10: str = "Fisherman";
	}
	return str;
}

Billboard_Save(bbid)
{
	static query[2048];
	format(query, sizeof(query), "UPDATE `billboards` SET `bbName` = '%s', `bbMessage` = '%s', `bbOwner` = '%d', `bbPrice` = '%d', `bbRange` = '%d', `bbPosX` = '%.4f', `bbPosY` = '%.4f', `bbPosZ` = '%.4f' WHERE `bbID` = '%d'",
  	SQL_ReturnEscaped(BillBoardData[bbid][bbName]),
  	SQL_ReturnEscaped(BillBoardData[bbid][bbMessage]),
  	BillBoardData[bbid][bbOwner],
 	BillBoardData[bbid][bbPrice],
  	BillBoardData[bbid][bbRange],
  	BillBoardData[bbid][bbPos][0],
  	BillBoardData[bbid][bbPos][1],
  	BillBoardData[bbid][bbPos][2],
  	BillBoardData[bbid][bbID]
 	);
 	return mysql_tquery(g_iHandle, query);
}

Billboard_Refresh(bizid)
{
	if (bizid != -1 && BillBoardData[bizid][bbExists])
	{
		if (IsValidDynamic3DTextLabel(BillBoardData[bizid][bbText3D]))
		    DestroyDynamic3DTextLabel(BillBoardData[bizid][bbText3D]);

		static
		    string[614];

		if (!BillBoardData[bizid][bbOwner]) {
			format(string, sizeof(string), "[%i] - [%s]\n%s", bizid, FormatNumber(BillBoardData[bizid][bbPrice]), BillBoardData[bizid][bbName]);
            BillBoardData[bizid][bbText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, BillBoardData[bizid][bbPos][0], BillBoardData[bizid][bbPos][1], BillBoardData[bizid][bbPos][2], BillBoardData[bizid][bbRange], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
		}
		else if (BillBoardData[bizid][bbOwner]) {
			format(string, sizeof(string), "[%i]\n%s\n%s", bizid, BillBoardData[bizid][bbName], BillBoardData[bizid][bbMessage]);
            BillBoardData[bizid][bbText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, BillBoardData[bizid][bbPos][0], BillBoardData[bizid][bbPos][1], BillBoardData[bizid][bbPos][2], BillBoardData[bizid][bbRange], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
		}
	}
	return 1;
}

Billboard_Create(playerid, price)
{
	static
	    Float:x,
	    Float:y,
	    Float:z;

	if (GetPlayerPos(playerid, x, y, z))
	{
		for (new i = 0; i != MAX_BILLBOARDS; i ++)
		{
	    	if (!BillBoardData[i][bbExists])
		    {
    	        BillBoardData[i][bbExists] = true;
        	    BillBoardData[i][bbOwner] = 0;
            	BillBoardData[i][bbPrice] = price;
            	BillBoardData[i][bbRange] = 10;

				format(BillBoardData[i][bbName], 32, "Unnamed Billboard");

    	        BillBoardData[i][bbPos][0] = x;
    	        BillBoardData[i][bbPos][1] = y;
    	        BillBoardData[i][bbPos][2] = z;

				Billboard_Refresh(i);
				mysql_tquery(g_iHandle, "INSERT INTO `billboards` (`bbOwner`) VALUES(0)", "OnBillboardCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

Billboard_Delete(bizid)
{
	if (bizid != -1 && BillBoardData[bizid][bbExists])
	{
	    new
	        string[82];

		format(string, sizeof(string), "DELETE FROM `billboards` WHERE `bbID` = '%d'", BillBoardData[bizid][bbID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(BillBoardData[bizid][bbText3D]))
		    DestroyDynamic3DTextLabel(BillBoardData[bizid][bbText3D]);

	    BillBoardData[bizid][bbExists] = false;
	    BillBoardData[bizid][bbOwner] = 0;
	    BillBoardData[bizid][bbID] = 0;
	}
	return 1;
}

Job_Refresh(jobid)
{
	if (jobid != -1 && JobData[jobid][jobExists])
	{
	    for (new i = 0; i < 3; i ++) {
			if (IsValidDynamic3DTextLabel(JobData[jobid][jobText3D][i]))
		    	DestroyDynamic3DTextLabel(JobData[jobid][jobText3D][i]);

			if (IsValidDynamicPickup(JobData[jobid][jobPickups][i]))
		    	DestroyDynamicPickup(JobData[jobid][jobPickups][i]);
		}
		static
		    string[90];

		format(string, sizeof(string), "[%s]\n{FFFFFF}Duty Point", Job_GetName(JobData[jobid][jobType]));

		if (JobData[jobid][jobType] == 1) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Courier]\n{FFFFFF}Type /loadcrate to get crates.", COLOR_DEPARTMENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1210, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
		}
		else if (JobData[jobid][jobType] == 5) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Mining]\n{FFFFFF}Type /mine to begin mining.", COLOR_DEPARTMENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);

			JobData[jobid][jobText3D][2] = CreateDynamic3DTextLabel("[Mining]\n{FFFFFF}Deliver your mining rocks at this spot.", COLOR_DEPARTMENT, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2], 15.0);
			JobData[jobid][jobPickups][2] = CreateDynamicPickup(1239, 23, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]);
		}
		else if (JobData[jobid][jobType] == 7) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Garbage Dump]\n{FFFFFF}Type /dumpgarbage to dump your trash.", COLOR_DEPARTMENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1264, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
		}
		else if (JobData[jobid][jobType] == 8) {
			JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Package Sorting]\n{FFFFFF}Type /sorting to begin sorting packages.", COLOR_DEPARTMENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);

			JobData[jobid][jobText3D][2] = CreateDynamic3DTextLabel("[Package Sorting]\n{FFFFFF}Deliver your packages here for sorting.", COLOR_DEPARTMENT, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2], 15.0);
			JobData[jobid][jobPickups][2] = CreateDynamicPickup(1239, 23, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]);
		}
        else if (JobData[jobid][jobType] == 9) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Weapon Parts]\n{FFFFFF}Type /craftparts to craft a weapon crate.", COLOR_DEPARTMENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
		}
		else if (JobData[jobid][jobType] == 10) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Fising Pier]\n{FFFFFF}Type /fishing to begin catching fishes.", COLOR_DEPARTMENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
		}
		JobData[jobid][jobText3D][0] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, JobData[jobid][jobPos][0], JobData[jobid][jobPos][1], JobData[jobid][jobPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobWorld], JobData[jobid][jobInterior]);
        JobData[jobid][jobPickups][0] = CreateDynamicPickup(1275, 23, JobData[jobid][jobPos][0], JobData[jobid][jobPos][1], JobData[jobid][jobPos][2], JobData[jobid][jobWorld], JobData[jobid][jobInterior]);
	}
	return 1;
}

Job_Delete(jobid)
{
	if (jobid != -1 && JobData[jobid][jobExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `jobs` WHERE `jobID` = '%d'", JobData[jobid][jobID]);
		mysql_tquery(g_iHandle, string);

        for (new i = 0; i < 3; i ++) {
			if (IsValidDynamic3DTextLabel(JobData[jobid][jobText3D][i]))
		    	DestroyDynamic3DTextLabel(JobData[jobid][jobText3D][i]);

			if (IsValidDynamicPickup(JobData[jobid][jobPickups][i]))
		    	DestroyDynamicPickup(JobData[jobid][jobPickups][i]);
		}
		JobData[jobid][jobExists] = false;
	    JobData[jobid][jobType] = 0;
	    JobData[jobid][jobID] = 0;
	}
	return 1;
}

Job_Create(playerid, type)
{
	static
	    Float:x,
	    Float:y,
	    Float:z;

	if (GetPlayerPos(playerid, x, y, z))
	{
		for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++)
		{
	    	if (!JobData[i][jobExists])
	    	{
	        	JobData[i][jobExists] = true;
	        	JobData[i][jobType] = type;

				JobData[i][jobPos][0] = x;
	        	JobData[i][jobPos][1] = y;
	        	JobData[i][jobPos][2] = z;
	        	JobData[i][jobPoint][0] = 0.0;
	        	JobData[i][jobPoint][1] = 0.0;
	        	JobData[i][jobPoint][2] = 0.0;
	        	JobData[i][jobDeliver][0] = 0.0;
	        	JobData[i][jobDeliver][1] = 0.0;
	        	JobData[i][jobDeliver][2] = 0.0;

	        	JobData[i][jobInterior] = GetPlayerInterior(playerid);
	        	JobData[i][jobWorld] = GetPlayerVirtualWorld(playerid);

                JobData[i][jobPointInt] = 0;
                JobData[i][jobPointWorld] = 0;

	        	Job_Refresh(i);
	        	mysql_tquery(g_iHandle, "INSERT INTO `jobs` (`jobInterior`) VALUES(0)", "OnJobCreated", "d", i);

	        	return i;
	        }
	    }
	}
	return -1;
}

Car_Create(ownerid, modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, type = 0, type2 = 0, addsiren = 0)
{
    for (new i = 0; i != MAX_DYNAMIC_CARS; i ++)
	{
		if (!CarData[i][carExists])
   		{
   		    if (color1 == -1)
   		        color1 = random(127);

			if (color2 == -1)
			    color2 = random(127);

   		    CarData[i][carExists] = true;
            CarData[i][carModel] = modelid;
            CarData[i][carOwner] = ownerid;

            CarData[i][carPos][0] = x;
            CarData[i][carPos][1] = y;
            CarData[i][carPos][2] = z;
            CarData[i][carPos][3] = angle;

            CarData[i][carColor1] = color1;
            CarData[i][carColor2] = color2;
            CarData[i][carPaintjob] = -1;
            CarData[i][carLocked] = false;
            CarData[i][carImpounded] = -1;
            CarData[i][carImpoundPrice] = 0;
            CarData[i][carFaction] = type;
            CarData[i][carJob] = type2;
			CarData[i][carRadio] = 1;

            CarData[i][carSiren] = addsiren;

            for (new j = 0; j < 14; j ++)
			{
                if (j < 5)
				{
                    CarData[i][carWeapons][j] = 0;
                    CarData[i][carAmmo][j] = 0;
                }
                CarData[i][carMods][j] = 0;
            }
            CarData[i][carVehicle] = CreateVehicle(modelid, x, y, z, angle, color1, color2, -1, 0);

            if (CarData[i][carVehicle] != INVALID_VEHICLE_ID) {
                ResetVehicle(CarData[i][carVehicle]);
            }

			GenPlate(CarData[i][carPlate], 7);
			SetVehicleNumberPlate(CarData[i][carVehicle], CarData[i][carPlate]);

            Car_Save(CarData[i][carVehicle]);
            mysql_tquery(g_iHandle, "INSERT INTO `cars` (`carModel`) VALUES(0)", "OnCarCreated", "d", i);
            return i;
		}
	}
	return -1;
}

Car_Delete(carid)
{
    if (carid != -1 && CarData[carid][carExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `cars` WHERE `carID` = '%d'", CarData[carid][carID]);
		mysql_tquery(g_iHandle, string);

		if (IsValidVehicle(CarData[carid][carVehicle]))
			DestroyVehicle(CarData[carid][carVehicle]);

		for (new i = 0; i < MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackVehicle] == CarData[carid][carID]) {
		    Backpack_Delete(i);
		}
		Car_RemoveAllItems(carid);

        CarData[carid][carExists] = false;
	    CarData[carid][carID] = 0;
	    CarData[carid][carOwner] = 0;
	    CarData[carid][carVehicle] = 0;
		CarData[carid][carSiren] = -1;
	}
	return 1;
}

Car_Save(carid)
{
	static
	    query[1200];

	if (CarData[carid][carVehicle] != INVALID_VEHICLE_ID)
	{
		GetVehicleHealth(CarData[carid][carVehicle], CarData[carid][carHP]);
	    for (new i = 0; i < 14; i ++) {
			CarData[carid][carMods][i] = GetVehicleComponentInSlot(CarData[carid][carVehicle], i);
	    }
	}
	format(query, sizeof(query), "UPDATE `cars` SET `carModel` = '%d', `carOwner` = '%d', `carPosX` = '%.4f', `carPosY` = '%.4f', `carPosZ` = '%.4f', `carPosR` = '%.4f', `carHP` = '%.2f', `carPanels` = '%d', `carDoors` = '%d', `carLights` = '%d', `carTires` = '%d', `carColor1` = '%d', `carColor2` = '%d', `carPaintjob` = '%d', `carLocked` = '%d'",
        CarData[carid][carModel],
        CarData[carid][carOwner],
        CarData[carid][carPos][0],
        CarData[carid][carPos][1],
        CarData[carid][carPos][2],
        CarData[carid][carPos][3],
		CarData[carid][carHP],
		CarData[carid][carPanelsDmg],
		CarData[carid][carDoorsDmg],
		CarData[carid][carLightsDmg],
		CarData[carid][carTiresDmg],
        CarData[carid][carColor1],
        CarData[carid][carColor2],
        CarData[carid][carPaintjob],
        CarData[carid][carLocked]
	);
	format(query, sizeof(query), "%s, `carMod1` = '%d', `carMod2` = '%d', `carMod3` = '%d', `carMod4` = '%d', `carMod5` = '%d', `carMod6` = '%d', `carMod7` = '%d', `carMod8` = '%d', `carMod9` = '%d', `carMod10` = '%d', `carMod11` = '%d', `carMod12` = '%d', `carMod13` = '%d', `carMod14` = '%d', `carPlate` = '%s', `carRadio` = '%d'",
		query,
		CarData[carid][carMods][0],
		CarData[carid][carMods][1],
		CarData[carid][carMods][2],
		CarData[carid][carMods][3],
		CarData[carid][carMods][4],
		CarData[carid][carMods][5],
		CarData[carid][carMods][6],
		CarData[carid][carMods][7],
		CarData[carid][carMods][8],
		CarData[carid][carMods][9],
		CarData[carid][carMods][10],
		CarData[carid][carMods][11],
		CarData[carid][carMods][12],
		CarData[carid][carMods][13],
		CarData[carid][carPlate],
		CarData[carid][carRadio]
	);
	format(query, sizeof(query), "%s, `carImpounded` = '%d', `carImpoundPrice` = '%d', `carFaction` = '%d' , `carJob` = '%d' , `carSiren` = '%d', `carWeapon1` = '%d', `carWeapon2` = '%d', `carWeapon3` = '%d', `carWeapon4` = '%d', `carWeapon5` = '%d', `carAmmo1` = '%d', `carAmmo2` = '%d', `carAmmo3` = '%d', `carAmmo4` = '%d', `carAmmo5` = '%d' WHERE `carID` = '%d'",
		query,
		CarData[carid][carImpounded],
		CarData[carid][carImpoundPrice],
		CarData[carid][carFaction],
		CarData[carid][carJob],
		CarData[carid][carSiren],
		CarData[carid][carWeapons][0],
		CarData[carid][carWeapons][1],
		CarData[carid][carWeapons][2],
		CarData[carid][carWeapons][3],
		CarData[carid][carWeapons][4],
		CarData[carid][carAmmo][0],
		CarData[carid][carAmmo][1],
		CarData[carid][carAmmo][2],
		CarData[carid][carAmmo][3],
		CarData[carid][carAmmo][4],
		CarData[carid][carID]
	);
	return mysql_tquery(g_iHandle, query);
}

Entrance_Delete(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `entrances` WHERE `entranceID` = '%d'", EntranceData[entranceid][entranceID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
		    DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

		if (IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
		    DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

		if (IsValidDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]))
		    DestroyDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]);

		if (EntranceData[entranceid][entranceType] == 3)
		    DestroyForklifts(entranceid);

	    EntranceData[entranceid][entranceExists] = false;
	    EntranceData[entranceid][entranceID] = 0;
	}
	return 1;
}

Entrance_Save(entranceid)
{
	static
	    query[1024];

	format(query, sizeof(query), "UPDATE `entrances` SET `entranceName` = '%s', `entrancePass` = '%s', `entranceIcon` = '%d', `entranceLocked` = '%d', `entrancePosX` = '%.4f', `entrancePosY` = '%.4f', `entrancePosZ` = '%.4f', `entrancePosA` = '%.4f', `entranceIntX` = '%.4f', `entranceIntY` = '%.4f', `entranceIntZ` = '%.4f', `entranceIntA` = '%.4f', `entranceInterior` = '%d', `entranceExterior` = '%d', `entranceExteriorVW` = '%d', `entranceType` = '%d'",
	    SQL_ReturnEscaped(EntranceData[entranceid][entranceName]),
	    SQL_ReturnEscaped(EntranceData[entranceid][entrancePass]),
	    EntranceData[entranceid][entranceIcon],
	    EntranceData[entranceid][entranceLocked],
	    EntranceData[entranceid][entrancePos][0],
	    EntranceData[entranceid][entrancePos][1],
	    EntranceData[entranceid][entrancePos][2],
	    EntranceData[entranceid][entrancePos][3],
	    EntranceData[entranceid][entranceInt][0],
	    EntranceData[entranceid][entranceInt][1],
	    EntranceData[entranceid][entranceInt][2],
	    EntranceData[entranceid][entranceInt][3],
	    EntranceData[entranceid][entranceInterior],
	    EntranceData[entranceid][entranceExterior],
	    EntranceData[entranceid][entranceExteriorVW],
	    EntranceData[entranceid][entranceType]
	);
	format(query, sizeof(query), "%s, `entranceCustom` = '%d', `entranceWorld` = '%d' WHERE `entranceID` = '%d'",
	    query,
	    EntranceData[entranceid][entranceCustom],
	    EntranceData[entranceid][entranceWorld],
	    EntranceData[entranceid][entranceID]
	);
	return mysql_tquery(g_iHandle, query);
}

IsPlayerNearMine(playerid)
{
	new
	    id = -1;

	if ((id = Job_NearestPoint(playerid, 10.0)) != -1 && JobData[id][jobType] == 5)
		return 1;

	return 0;
}

IsPlayerNearArrest(playerid)
{
	new
	    id = Arrest_Nearest(playerid);

	return (id != -1);
}

IsPlayerInCityHall(playerid)
{
	new
		id = -1;

	if ((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 4)
	    return 1;

	return 0;
}

IsPlayerInWarehouse(playerid)
{
	new
		id = -1;

	if ((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 3)
	    return 1;

	return 0;
}

IsPlayerInBank(playerid)
{
	new
		id = -1;

	if ((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 2)
	    return 1;

	return 0;
}

Entrance_Inside(playerid)
{
	if (PlayerData[playerid][pEntrance] != -1)
	{
	    for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceID] == PlayerData[playerid][pEntrance] && GetPlayerInterior(playerid) == EntranceData[i][entranceInterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceWorld])
	        return i;
	}
	return -1;
}

Entrance_GetLink(playerid)
{
	if (GetPlayerVirtualWorld(playerid) > 0)
	{
	    for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceID] == GetPlayerVirtualWorld(playerid) - 7000)
			return EntranceData[i][entranceID];
	}
	return -1;
}

Entrance_Nearest(playerid)
{
    for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]))
	{
		if (GetPlayerInterior(playerid) == EntranceData[i][entranceExterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceExteriorVW])
			return i;
	}
	return -1;
}

Job_NearestPoint(playerid, Float:radius = 5.0)
{
    for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && IsPlayerInRangeOfPoint(playerid, radius, JobData[i][jobPoint][0], JobData[i][jobPoint][1], JobData[i][jobPoint][2])) {
		return i;
	}
	return -1;
}

Job_Nearest(playerid)
{
    for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && IsPlayerInRangeOfPoint(playerid, 2.5, JobData[i][jobPos][0], JobData[i][jobPos][1], JobData[i][jobPos][2]))
	{
		if (GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
			return i;
	}
	return -1;
}

Entrance_Refresh(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
		if (IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
		    DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

		if (IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
		    DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

		if (IsValidDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]))
		    DestroyDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]);

		EntranceData[entranceid][entranceText3D] = CreateDynamic3DTextLabel(EntranceData[entranceid][entranceName], COLOR_DEPARTMENT, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);
        EntranceData[entranceid][entrancePickup] = CreateDynamicPickup(1318, 23, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);

		if (EntranceData[entranceid][entranceIcon] != 0)
			EntranceData[entranceid][entranceMapIcon] = CreateDynamicMapIcon(EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceIcon], 0, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);
	}
	return 1;
}

DestroyForklifts(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
		for (new i = 0; i < 7; i ++) if (IsValidVehicle(EntranceData[entranceid][entranceForklift][i])) {
			DestroyVehicle(EntranceData[entranceid][entranceForklift][i]);

        	EntranceData[entranceid][entranceForklift][i] = INVALID_VEHICLE_ID;
        }
        return 1;
	}
	return 0;
}

CreateForklifts(entranceid)
{
    if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
        EntranceData[entranceid][entranceForklift][0] = CreateVehicle(530,1300.6760,5.8440,1000.7919,180.2377,114,1,-1); // forklift 1
		EntranceData[entranceid][entranceForklift][1] = CreateVehicle(530,1303.4263,5.8919,1000.7883,181.4835,119,1,-1); // forklift 2
		EntranceData[entranceid][entranceForklift][2] = CreateVehicle(530,1305.7365,5.7953,1000.7904,179.7971,122,1,-1); // forklift 3
		EntranceData[entranceid][entranceForklift][3] = CreateVehicle(530,1308.2925,-8.6468,1000.7963,89.4510,4,1,-1); // forklift 4
		EntranceData[entranceid][entranceForklift][4] = CreateVehicle(530,1308.2974,-10.9627,1000.7974,91.8611,13,1,-1); // forklift 5
		EntranceData[entranceid][entranceForklift][5] = CreateVehicle(530,1308.3057,-13.6396,1000.7997,90.6285,110,1,-1); // forklift 6
		EntranceData[entranceid][entranceForklift][6] = CreateVehicle(530,1308.2751,-16.5108,1000.7980,90.2175,111,1,-1); // forklift 7

		for (new i = 0; i < 7; i ++) if (IsValidVehicle(EntranceData[entranceid][entranceForklift][i])) {
			SetVehicleVirtualWorld(EntranceData[entranceid][entranceForklift][i], EntranceData[entranceid][entranceWorld]);
			LinkVehicleToInterior(EntranceData[entranceid][entranceForklift][i], 18);

			CoreVehicles[EntranceData[entranceid][entranceForklift][i]][vehFuel] = 100;
			CoreVehicles[EntranceData[entranceid][entranceForklift][i]][vehLoadType] = 0;
		}
	}
	return 1;
}

Entrance_Create(playerid, name[])
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

    if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_HOUSES; i ++)
		{
	    	if (!EntranceData[i][entranceExists])
		    {
    	        EntranceData[i][entranceExists] = true;
        	    EntranceData[i][entranceIcon] = 0;
        	    EntranceData[i][entranceType] = 0;
        	    EntranceData[i][entranceCustom] = 0;
        	    EntranceData[i][entranceLocked] = 0;

				format(EntranceData[i][entranceName], 32, name);
				EntranceData[i][entrancePass][0] = 0;

    	        EntranceData[i][entrancePos][0] = x;
    	        EntranceData[i][entrancePos][1] = y;
    	        EntranceData[i][entrancePos][2] = z;
    	        EntranceData[i][entrancePos][3] = angle;

                EntranceData[i][entranceInt][0] = x;
                EntranceData[i][entranceInt][1] = y;
                EntranceData[i][entranceInt][2] = z + 10000;
                EntranceData[i][entranceInt][3] = 0.0000;

				EntranceData[i][entranceInterior] = 0;
				EntranceData[i][entranceExterior] = GetPlayerInterior(playerid);
				EntranceData[i][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);

				Entrance_Refresh(i);
				mysql_tquery(g_iHandle, "INSERT INTO `entrances` (`entranceType`) VALUES(0)", "OnEntranceCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

Business_RemoveVehicle(bizid, modelid)
{
	static
	    query[128];

    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++) if (DealershipCars[bizid][i][vehModel] == modelid)
	{
	    DealershipCars[bizid][i][vehModel] = 0;
	    DealershipCars[bizid][i][vehPrice] = 0;

	    format(query, sizeof(query), "DELETE FROM `dealervehicles` WHERE `ID` = '%d' AND `vehID` = '%d'", BusinessData[bizid][bizID], DealershipCars[bizid][i][vehID]);
		mysql_tquery(g_iHandle, query);

		return 1;
	}
	return 0;
}

Business_AddVehicle(bizid, modelid, price)
{
	static
	    query[128];

	for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++) if (!DealershipCars[bizid][i][vehModel])
	{
	    DealershipCars[bizid][i][vehModel] = modelid;
	    DealershipCars[bizid][i][vehPrice] = price;

	    format(query, sizeof(query), "INSERT INTO `dealervehicles` (`ID`, `vehModel`, `vehPrice`) VALUES('%d', '%d', '%d')", BusinessData[bizid][bizID], modelid, price);
	    mysql_tquery(g_iHandle, query, "OnDealerCarCreated", "dd", bizid, i);

	    return 1;
	}
	return 0;
}

Business_CarMenu(playerid, bizid)
{
 	static
	    cars[MAX_DEALERSHIP_CARS];

    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
	{
		if (!DealershipCars[bizid][i][vehModel])
			cars[i] = 19300;

		else
		    cars[i] = DealershipCars[bizid][i][vehModel];
	}
	ShowModelSelectionMenu(playerid, "Purchase Car", MODEL_SELECTION_BUY_CAR, cars, sizeof(cars), -16.0, 0.0, -55.0, 0.9, 1);
	return 1;
}

Business_EditCars(playerid, bizid)
{
	static
	    cars[MAX_DEALERSHIP_CARS];

    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
	{
		if (!DealershipCars[bizid][i][vehModel])
			cars[i] = 19300;

		else
		    cars[i] = DealershipCars[bizid][i][vehModel];
	}
	ShowModelSelectionMenu(playerid, "Dealership Cars", MODEL_SELECTION_DEALER, cars, sizeof(cars), -16.0, 0.0, -55.0, 0.9, 1);
	return 1;
}

forward Pump_Load(bizid);
public Pump_Load(bizid)
{
	static
	    rows,
	    fields,
		id = -1;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if ((id = Pump_GetFreeID()) != -1)
	{
	    PumpData[id][pumpExists] = true;
	    PumpData[id][pumpBusiness] = bizid;
	    PumpData[id][pumpID] = cache_get_field_int(i, "pumpID");
	    PumpData[id][pumpPos][0] = cache_get_field_float(i, "pumpPosX");
	    PumpData[id][pumpPos][1] = cache_get_field_float(i, "pumpPosY");
	    PumpData[id][pumpPos][2] = cache_get_field_float(i, "pumpPosZ");
	    PumpData[id][pumpPos][3] = cache_get_field_float(i, "pumpPosA");
	    PumpData[id][pumpFuel] = cache_get_field_int(i, "pumpFuel");

	    PumpData[id][pumpObject] = CreateDynamicObject(1676, PumpData[id][pumpPos][0], PumpData[id][pumpPos][1], PumpData[id][pumpPos][2], 0.0, 0.0, PumpData[id][pumpPos][3]);
	    Pump_Refresh(id);
	}
	return 1;
}

Pump_GetFreeID()
{
	for (new i = 0; i < MAX_GAS_PUMPS; i ++) if (!PumpData[i][pumpExists]) {
	    return i;
	}
	return -1;
}

Pump_Delete(pumpid)
{
	if (pumpid != -1 && PumpData[pumpid][pumpExists])
	{
	    new
	        string[90];

		format(string, sizeof(string), "DELETE FROM `pumps` WHERE `ID` = '%d' AND `pumpID` = '%d'", BusinessData[PumpData[pumpid][pumpBusiness]][bizID], PumpData[pumpid][pumpID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(PumpData[pumpid][pumpText3D]))
		    DestroyDynamic3DTextLabel(PumpData[pumpid][pumpText3D]);

		if (IsValidDynamicObject(PumpData[pumpid][pumpObject]))
		    DestroyDynamicObject(PumpData[pumpid][pumpObject]);

		foreach (new i : Player) if (PlayerData[i][pGasPump] == pumpid) {
		    StopRefilling(i);
		}
	    PumpData[pumpid][pumpExists] = false;
	    PumpData[pumpid][pumpFuel] = 0;
	}
	return 1;
}

Pump_Create(playerid, bizid)
{
    static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle,
		string[64],
		id = -1;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		if ((id = Pump_GetFreeID()) != -1)
  		{
	        x += 5.0 * floatsin(-angle, degrees);
	        y += 5.0 * floatcos(-angle, degrees);

			PumpData[id][pumpExists] = true;
			PumpData[id][pumpBusiness] = bizid;
			PumpData[id][pumpPos][0] = x;
			PumpData[id][pumpPos][1] = y;
			PumpData[id][pumpPos][2] = z;
			PumpData[id][pumpPos][3] = angle;
            PumpData[id][pumpFuel] = 2000;
			PumpData[id][pumpObject] = CreateDynamicObject(1676, x, y, z, 0.0, 0.0, angle);

			format(string, sizeof(string), "INSERT INTO `pumps` (`ID`) VALUES(%d)", BusinessData[bizid][bizID]);
			mysql_tquery(g_iHandle, string, "OnPumpCreated", "d", id);
			return id;
		}
	}
	return -1;
}

Pump_Refresh(pumpid)
{
	if (pumpid != -1 && PumpData[pumpid][pumpExists])
	{
	    static
	        string[128];

		format(string, sizeof(string), "[Gas Pump: %d]\n{FFFFFF}Fuel Left: %d liters", pumpid, PumpData[pumpid][pumpFuel]);

        if (IsValidDynamic3DTextLabel(PumpData[pumpid][pumpText3D]))
            DestroyDynamic3DTextLabel(PumpData[pumpid][pumpText3D]);

		if (IsValidDynamicObject(PumpData[pumpid][pumpObject]))
		    DestroyDynamicObject(PumpData[pumpid][pumpObject]);

		PumpData[pumpid][pumpText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
        PumpData[pumpid][pumpObject] = CreateDynamicObject(1676, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 0.0, 0.0, PumpData[pumpid][pumpPos][3]);
	}
	return 1;
}

Pump_Save(pumpid)
{
	static
	    query[256];

	format(query, sizeof(query), "UPDATE `pumps` SET `pumpPosX` = '%.4f', `pumpPosY` = '%.4f', `pumpPosZ` = '%.4f', `pumpPosA` = '%.4f', `pumpFuel` = '%d' WHERE `ID` = '%d' AND `pumpID` = '%d'",
	    PumpData[pumpid][pumpPos][0],
	    PumpData[pumpid][pumpPos][1],
	    PumpData[pumpid][pumpPos][2],
		PumpData[pumpid][pumpPos][3],
	    PumpData[pumpid][pumpFuel],
	    BusinessData[PumpData[pumpid][pumpBusiness]][bizID],
	    PumpData[pumpid][pumpID]
	);
	return mysql_tquery(g_iHandle, query);
}

House_Create(playerid, address[], price)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_HOUSES; i ++)
		{
	    	if (!HouseData[i][houseExists])
		    {
    	        HouseData[i][houseExists] = true;
        	    HouseData[i][houseOwner] = 0;
            	HouseData[i][housePrice] = price;
            	HouseData[i][houseMoney] = 0;

				format(HouseData[i][houseAddress], 32, address);

    	        HouseData[i][housePos][0] = x;
    	        HouseData[i][housePos][1] = y;
    	        HouseData[i][housePos][2] = z;
    	        HouseData[i][housePos][3] = angle;

                HouseData[i][houseInt][0] = 2269.8772;
                HouseData[i][houseInt][1] = -1210.3240;
                HouseData[i][houseInt][2] = 1047.5625;
                HouseData[i][houseInt][3] = 90.0000;

				HouseData[i][houseInterior] = 10;
				HouseData[i][houseExterior] = GetPlayerInterior(playerid);
				HouseData[i][houseExteriorVW] = GetPlayerVirtualWorld(playerid);

				HouseData[i][houseLights] = false;
				HouseData[i][houseLocked] = true;

				House_Refresh(i);
				mysql_tquery(g_iHandle, "INSERT INTO `houses` (`houseOwner`) VALUES(0)", "OnHouseCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

House_RemoveFurniture(houseid)
{
	if (HouseData[houseid][houseExists])
	{
	    static
	        string[64];

	    for (new i = 0; i != MAX_FURNITURE; i ++) if (FurnitureData[i][furnitureExists] && FurnitureData[i][furnitureHouse] == houseid) {
	        FurnitureData[i][furnitureExists] = false;
	        FurnitureData[i][furnitureModel] = 0;
            FurnitureData[i][furnitureHouse] = -1;

	        DestroyDynamicObject(FurnitureData[i][furnitureObject]);
		}
		format(string, sizeof(string), "DELETE FROM `furniture` WHERE `ID` = '%d'", HouseData[houseid][houseID]);
		mysql_tquery(g_iHandle, string);
	}
	return 1;
}

House_Delete(houseid)
{
	if (houseid != -1 && HouseData[houseid][houseExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `houses` WHERE `houseID` = '%d'", HouseData[houseid][houseID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(HouseData[houseid][houseText3D]))
		    DestroyDynamic3DTextLabel(HouseData[houseid][houseText3D]);

		if (IsValidDynamicPickup(HouseData[houseid][housePickup]))
		    DestroyDynamicPickup(HouseData[houseid][housePickup]);

		if (IsValidDynamicMapIcon(HouseData[houseid][houseMapIcon]))
		    DestroyDynamicMapIcon(HouseData[houseid][houseMapIcon]);

        for (new i = 0; i < MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackHouse] == HouseData[houseid][houseID]) {
		    Backpack_Delete(i);
		}
		House_RemoveFurniture(houseid);
		House_RemoveAllItems(houseid);

	    HouseData[houseid][houseExists] = false;
	    HouseData[houseid][houseOwner] = 0;
	    HouseData[houseid][houseID] = 0;
	}
	return 1;
}

House_IsOwner(playerid, houseid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

    if ((HouseData[houseid][houseExists] && HouseData[houseid][houseOwner] != 0) && HouseData[houseid][houseOwner] == PlayerData[playerid][pID])
		return 1;

	return 0;
}

Business_ProductMenu(playerid, bizid)
{
	if (bizid == -1 || !BusinessData[bizid][bizExists])
	    return 0;

	static
	    string[512];

	switch (BusinessData[bizid][bizType])
	{
	    case 1, 6:
	    {
			format(string, sizeof(string), "Mobile Phone - %s\nGPS System - %s\nSpray Paint - %s\nBackpack - %s\nWater Bottle - %s\nSoda Bottle - %s\nLottery Ticket - %s\nPortable Radio - %s\nCan of Fuel - %s\nCrowbar - %s\nBoombox - %s\nMask - %s\nFirst Aid Kit - %s\nRepair Kit - %s\nNOS Canister - %s\nBaseball Bat - %s\nFrozen Pizza - %s\nFrozen Burger - %s\nCigar - %s\nPainkiller - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6]),
				FormatNumber(BusinessData[bizid][bizPrices][7]),
				FormatNumber(BusinessData[bizid][bizPrices][8]),
				FormatNumber(BusinessData[bizid][bizPrices][9]),
				FormatNumber(BusinessData[bizid][bizPrices][10]),
				FormatNumber(BusinessData[bizid][bizPrices][11]),
				FormatNumber(BusinessData[bizid][bizPrices][12]),
				FormatNumber(BusinessData[bizid][bizPrices][13]),
				FormatNumber(BusinessData[bizid][bizPrices][14]),
				FormatNumber(BusinessData[bizid][bizPrices][15]),
				FormatNumber(BusinessData[bizid][bizPrices][16]),
				FormatNumber(BusinessData[bizid][bizPrices][17]),
				FormatNumber(BusinessData[bizid][bizPrices][18]),
				FormatNumber(BusinessData[bizid][bizPrices][19])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
		}
		case 2:
	    {
			format(string, sizeof(string), "Magazine - %s\nAmmo Cartridge - %s\nArmored Vest - %s\nGlock-17 - %s\nRemington 870 - %s\nM14 Rifle - %s\nColt 45 - %s\nMP5 - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6]),
				FormatNumber(BusinessData[bizid][bizPrices][7])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
		}
		case 3:
	    {
			format(string, sizeof(string), "Clothes - %s\nGlasses - %s\nHats - %s\nBandana - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
		}
		case 4:
	    {
			format(string, sizeof(string), "Water - %s\nSoda - %s\nFrench Fries - %s\nCheeseburger - %s\nChicken Burger - %s\nChicken Nuggets - %s\nSalad - %s",
    			FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
		}
		case 7:
	    {
	        string[0] = 0;

	        for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++) {
	            format(string, sizeof(string), "%s%s - %s\n", string, g_aFurnitureTypes[i], FormatNumber(BusinessData[bizid][bizPrices][i]));
			}
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
		}
		case 8:
	    {
			format(string, sizeof(string), "Screwdriver - %s\nParachute - %s\nBrass Knuckles - %s\nGolf Club - %s\nNightstick - %s\nPocket Knife - %s\nShovel - %s\nPool Cue - %s\nCamera - %s\nSpray Can - %s\nBaseball Bat - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]), //Screwdriver
				FormatNumber(BusinessData[bizid][bizPrices][1]), //Parachute
				FormatNumber(BusinessData[bizid][bizPrices][2]), //Brass Knuckles
				FormatNumber(BusinessData[bizid][bizPrices][3]), //Golf Club
				FormatNumber(BusinessData[bizid][bizPrices][4]), //Nightstick
				FormatNumber(BusinessData[bizid][bizPrices][5]), //Pocket Knife
				FormatNumber(BusinessData[bizid][bizPrices][6]), //Shovel
				FormatNumber(BusinessData[bizid][bizPrices][7]), //Pool Cue
                FormatNumber(BusinessData[bizid][bizPrices][8]), //camera
                FormatNumber(BusinessData[bizid][bizPrices][9]), //Spray Can
                FormatNumber(BusinessData[bizid][bizPrices][10]) //Baseball Bat

			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
		}
		case 9:
	    {
			format(string, sizeof(string), "Sale Documents - %s\nPen - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
		}
		case 10:
	    {
			format(string, sizeof(string), "Bait - %s\nFishing Rod - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
		}
	}
	return 1;
}

Business_PurchaseMenu(playerid, bizid)
{
	if (bizid == -1 || !BusinessData[bizid][bizExists])
	    return 0;

	static
	    string[512];

	switch (BusinessData[bizid][bizType])
	{
	    case 1, 6:
	    {
			format(string, sizeof(string), "Mobile Phone - %s\nGPS System - %s\nSpray Paint - %s\nBackpack - %s\nWater Bottle - %s\nSoda Bottle - %s\nLottery Ticket - %s\nPortable Radio - %s\nCan of Fuel - %s\nCrowbar - %s\nBoombox - %s\nMask - %s\nFirst Aid Kit - %s\nRepair Kit - %s\nNOS Canister - %s\nBaseball Bat - %s\nFrozen Pizza - %s\nFrozen Burger - %s\nLighter - %s\nCigar - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6]),
				FormatNumber(BusinessData[bizid][bizPrices][7]),
				FormatNumber(BusinessData[bizid][bizPrices][8]),
				FormatNumber(BusinessData[bizid][bizPrices][9]),
				FormatNumber(BusinessData[bizid][bizPrices][10]),
				FormatNumber(BusinessData[bizid][bizPrices][11]),
				FormatNumber(BusinessData[bizid][bizPrices][12]),
				FormatNumber(BusinessData[bizid][bizPrices][13]),
				FormatNumber(BusinessData[bizid][bizPrices][14]),
				FormatNumber(BusinessData[bizid][bizPrices][15]),
				FormatNumber(BusinessData[bizid][bizPrices][16]),
				FormatNumber(BusinessData[bizid][bizPrices][17]),
				FormatNumber(BusinessData[bizid][bizPrices][18]),
				FormatNumber(BusinessData[bizid][bizPrices][19]),
				FormatNumber(BusinessData[bizid][bizPrices][20])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
		}
		case 2:
	    {
			format(string, sizeof(string), "Magazine - %s\nAmmo Cartridge - %s\nArmored Vest - %s\nGlock-17 - %s\nRemington 870 - %s\nM14 Rifle - %s\nColt 45 - %s", // \nMP5 - %s
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6])
				//FormatNumber(BusinessData[bizid][bizPrices][7])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
		}
		case 3:
	    {
			format(string, sizeof(string), "Clothes - %s\nGlasses - %s\nHats - %s\nBandana - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
		}
		case 4:
		{
            format(string, sizeof(string), "Water - %s\nSoda - %s\nFrench Fries - %s\nCheeseburger - %s\nChicken Burger - %s\nChicken Nuggets - %s\nSalad - %s",
    			FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
		}
		case 7:
	    {
	        string[0] = 0;

	        for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++) {
	            format(string, sizeof(string), "%s%s - %s\n", string, g_aFurnitureTypes[i], FormatNumber(BusinessData[bizid][bizPrices][i]));
			}
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
		}
		case 8:
	    {
			format(string, sizeof(string), "Screwdriver - %s\nParachute - %s\nBrass Knuckles - %s\nGolf Club - %s\nNightstick - %s\nPocket Knife - %s\nShovel - %s\nPool Cue - %s\nCamera - %s\nSpray Can - %s\nBaseball Bat - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]), //Screwdriver
				FormatNumber(BusinessData[bizid][bizPrices][1]), //Parachute
				FormatNumber(BusinessData[bizid][bizPrices][2]), //Brass Knuckles
				FormatNumber(BusinessData[bizid][bizPrices][3]), //Golf Club
				FormatNumber(BusinessData[bizid][bizPrices][4]), //Nightstick
				FormatNumber(BusinessData[bizid][bizPrices][5]), //Pocket Knife
				FormatNumber(BusinessData[bizid][bizPrices][6]), //Shovel
				FormatNumber(BusinessData[bizid][bizPrices][7]), //Pool Cue
                FormatNumber(BusinessData[bizid][bizPrices][8]), //camera
                FormatNumber(BusinessData[bizid][bizPrices][9]), //Spray Can
                FormatNumber(BusinessData[bizid][bizPrices][10]) //Bat
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
		}
		case 9:
	    {
			format(string, sizeof(string), "Sale Documents - %s\nPen - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
		}
		case 10:
	    {
			format(string, sizeof(string), "Bait - %s\nFishing Rod - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
		}
	}
	return 1;
}

Business_Save(bizid)
{
	static
	    query[2048];

	format(query, sizeof(query), "UPDATE `businesses` SET `bizName` = '%s', `bizMessage` = '%s', `bizOwner` = '%d', `bizType` = '%d', `bizPrice` = '%d', `bizPosX` = '%.4f', `bizPosY` = '%.4f', `bizPosZ` = '%.4f', `bizPosA` = '%.4f', `bizIntX` = '%.4f', `bizIntY` = '%.4f', `bizIntZ` = '%.4f', `bizIntA` = '%.4f', `bizInterior` = '%d', `bizExterior` = '%d', `bizExteriorVW` = '%d', `bizLocked` = '%d', `bizVault` = '%d', `bizProducts` = '%d'",
		SQL_ReturnEscaped(BusinessData[bizid][bizName]),
		SQL_ReturnEscaped(BusinessData[bizid][bizMessage]),
		BusinessData[bizid][bizOwner],
		BusinessData[bizid][bizType],
		BusinessData[bizid][bizPrice],
		BusinessData[bizid][bizPos][0],
		BusinessData[bizid][bizPos][1],
		BusinessData[bizid][bizPos][2],
		BusinessData[bizid][bizPos][3],
		BusinessData[bizid][bizInt][0],
		BusinessData[bizid][bizInt][1],
		BusinessData[bizid][bizInt][2],
		BusinessData[bizid][bizInt][3],
		BusinessData[bizid][bizInterior],
		BusinessData[bizid][bizExterior],
		BusinessData[bizid][bizExteriorVW],
		BusinessData[bizid][bizLocked],
		BusinessData[bizid][bizVault],
		BusinessData[bizid][bizProducts]
	);
	for (new i = 0; i < 20; i ++) {
		format(query, sizeof(query), "%s, `bizPrice%d` = '%d'", query, i + 1, BusinessData[bizid][bizPrices][i]);
	}
	format(query, sizeof(query), "%s, `bizSpawnX` = '%.4f', `bizSpawnY` = '%.4f', `bizSpawnZ` = '%.4f', `bizSpawnA` = '%.4f', `bizDeliverX` = '%.4f', `bizDeliverY` = '%.4f', `bizDeliverZ` = '%.4f', `bizShipment` = '%d' WHERE `bizID` = '%d'",
		query,
		BusinessData[bizid][bizSpawn][0],
		BusinessData[bizid][bizSpawn][1],
		BusinessData[bizid][bizSpawn][2],
		BusinessData[bizid][bizSpawn][3],
		BusinessData[bizid][bizDeliver][0],
		BusinessData[bizid][bizDeliver][1],
		BusinessData[bizid][bizDeliver][2],
		BusinessData[bizid][bizShipment],
		BusinessData[bizid][bizID]
	);
	return mysql_tquery(g_iHandle, query);
}

Business_Inside(playerid)
{
	if (PlayerData[playerid][pBusiness] != -1)
	{
	    for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizID] == PlayerData[playerid][pBusiness] && GetPlayerInterior(playerid) == BusinessData[i][bizInterior] && GetPlayerVirtualWorld(playerid) > 0) {
	        return i;
		}
	}
	return -1;
}

Car_Inside(playerid)
{
	new carid;

	if (IsPlayerInAnyVehicle(playerid) && (carid = Car_GetID(GetPlayerVehicleID(playerid))) != -1)
	    return carid;

	return -1;
}

Car_Nearest(playerid)
{
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists]) {
		GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

		if (IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ)) {
		    return i;
		}
	}
	return -1;
}

Business_NearestDeliver(playerid)
{
    for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && IsPlayerInRangeOfPoint(playerid, 5.0, BusinessData[i][bizDeliver][0], BusinessData[i][bizDeliver][1], BusinessData[i][bizDeliver][2])) {
        return i;
	}
	return -1;
}

Business_Nearest(playerid, Float:radius = 2.5)
{
    for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && IsPlayerInRangeOfPoint(playerid, radius, BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]))
	{
		if (GetPlayerInterior(playerid) == BusinessData[i][bizExterior] && GetPlayerVirtualWorld(playerid) == BusinessData[i][bizExteriorVW])
			return i;
	}
	return -1;
}

Business_Refresh(bizid)
{
	if (bizid != -1 && BusinessData[bizid][bizExists])
	{
		if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizText3D]))
		    DestroyDynamic3DTextLabel(BusinessData[bizid][bizText3D]);

		if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]))
		    DestroyDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]);

		if (IsValidDynamicPickup(BusinessData[bizid][bizPickup]))
		    DestroyDynamicPickup(BusinessData[bizid][bizPickup]);

        if (IsValidDynamicPickup(BusinessData[bizid][bizDeliverPickup]))
		    DestroyDynamicPickup(BusinessData[bizid][bizDeliverPickup]);

		static
		    string[128],
			pickup;

		if (!BusinessData[bizid][bizOwner]) {
			format(string, sizeof(string), "[For Sale]{FFFFFF}\n[%s]\n%s", FormatNumber(BusinessData[bizid][bizPrice]), BusinessData[bizid][bizName]);
            BusinessData[bizid][bizText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		else
		{
			if (BusinessData[bizid][bizLocked]) {
			    format(string, sizeof(string), "[Locked]\n{FFFFFF}%s", BusinessData[bizid][bizName]);
			}
			else {
			    format(string, sizeof(string), "%s", BusinessData[bizid][bizName]);
			}
			BusinessData[bizid][bizText3D] = CreateDynamic3DTextLabel(string, (BusinessData[bizid][bizLocked]) ? (COLOR_DEPARTMENT) : (COLOR_WHITE), BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		switch (BusinessData[bizid][bizType]) {
		    case 1: pickup = 1274;
		    case 2: pickup = 1274;
		    case 3: pickup = 1274;
		    case 4: pickup = 1274;
		    case 5: pickup = 1274;
		    case 6: pickup = 1274;
		    case 7: pickup = 1274;
		    case 8: pickup = 1274;
		}
		if (BusinessData[bizid][bizType] == 6) {
        	BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2] + 0.3, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		else if (BusinessData[bizid][bizType] == 7) {
		    BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2] - 0.6, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		else {
            BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		if (BusinessData[bizid][bizDeliver][0] != 0.0 && BusinessData[bizid][bizDeliver][0] != 0.0 && BusinessData[bizid][bizDeliver][0] != 0.0)
		{
		    format(string, sizeof(string), "[%s]\n\nDelivery Point", BusinessData[bizid][bizName]);

		    BusinessData[bizid][bizPickup] = CreateDynamicPickup(1239, 23, BusinessData[bizid][bizDeliver][0], BusinessData[bizid][bizDeliver][1], BusinessData[bizid][bizDeliver][2]);
		    BusinessData[bizid][bizDeliverText3D] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, BusinessData[bizid][bizDeliver][0], BusinessData[bizid][bizDeliver][1], BusinessData[bizid][bizDeliver][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
		}
	}
	return 1;
}

Business_Create(playerid, type, price)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_HOUSES; i ++)
		{
	    	if (!BusinessData[i][bizExists])
		    {
    	        BusinessData[i][bizExists] = true;
        	    BusinessData[i][bizOwner] = 0;
            	BusinessData[i][bizPrice] = price;
            	BusinessData[i][bizType] = type;

				format(BusinessData[i][bizName], 32, "Unnamed Business");

    	        BusinessData[i][bizPos][0] = x;
    	        BusinessData[i][bizPos][1] = y;
    	        BusinessData[i][bizPos][2] = z;
    	        BusinessData[i][bizPos][3] = angle;

    	        BusinessData[i][bizSpawn][0] = x;
    	        BusinessData[i][bizSpawn][1] = y;
    	        BusinessData[i][bizSpawn][2] = z;
    	        BusinessData[i][bizSpawn][3] = angle;

    	        BusinessData[i][bizDeliver][0] = 0.0;
    	        BusinessData[i][bizDeliver][1] = 0.0;
    	        BusinessData[i][bizDeliver][2] = 0.0;

				if (type == 1) {
                	BusinessData[i][bizInt][0] = -27.3074;
                	BusinessData[i][bizInt][1] = -30.8741;
                	BusinessData[i][bizInt][2] = 1003.5573;
                	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 4;

					BusinessData[i][bizPrices][0] = 600; //phone
		            BusinessData[i][bizPrices][1] = 300; //gps
		            BusinessData[i][bizPrices][2] = 75; //spray
		            BusinessData[i][bizPrices][3] = 100; //backpack
		            BusinessData[i][bizPrices][4] = 10; // water
		            BusinessData[i][bizPrices][5] = 12; //soda
		            BusinessData[i][bizPrices][6] = 15; //lotto
		            BusinessData[i][bizPrices][7] = 150; //port radio
		            BusinessData[i][bizPrices][8] = 100; // fuelcan
		            BusinessData[i][bizPrices][9] = 200; //crowbar
		            BusinessData[i][bizPrices][10] = 500; //booombox
		            BusinessData[i][bizPrices][11] = 200; //mask
		            BusinessData[i][bizPrices][12] = 160; //first aid
                    BusinessData[i][bizPrices][13] = 900; // repair
                    BusinessData[i][bizPrices][14] = 1000; //nos
		            BusinessData[i][bizPrices][15] = 150; //baseball bat
		            BusinessData[i][bizPrices][16] = 17; //frozen pizza
		            BusinessData[i][bizPrices][17] = 5; //frozen burger
					BusinessData[i][bizPrices][18] = 12; //lighter
					BusinessData[i][bizPrices][19] = 40; //cigar
				}
				else if (type == 2) {
                	BusinessData[i][bizInt][0] = 316.3963;
                	BusinessData[i][bizInt][1] = -169.8375;
                	BusinessData[i][bizInt][2] = 999.6010;
                	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 6;

                    BusinessData[i][bizPrices][0] = 900;
					BusinessData[i][bizPrices][1] = 3000;
		            BusinessData[i][bizPrices][2] = 3500;
		            BusinessData[i][bizPrices][3] = 14500;
		            BusinessData[i][bizPrices][4] = 20000;
		            BusinessData[i][bizPrices][5] = 26000;
					BusinessData[i][bizPrices][6] = 13500;
				}
				else if (type == 3) {
                	BusinessData[i][bizInt][0] = 161.4801;
                	BusinessData[i][bizInt][1] = -96.5368;
                	BusinessData[i][bizInt][2] = 1001.8047;
                	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 18;

					BusinessData[i][bizPrices][0] = 200;
		            BusinessData[i][bizPrices][1] = 300;
		            BusinessData[i][bizPrices][2] = 30;
		            BusinessData[i][bizPrices][3] = 40;
				}
				else if (type == 4) {
                	BusinessData[i][bizInt][0] = 363.3402;
                	BusinessData[i][bizInt][1] = -74.6679;
                	BusinessData[i][bizInt][2] = 1001.5078;
                	BusinessData[i][bizInt][3] = 315.0000;
					BusinessData[i][bizInterior] = 10;

					BusinessData[i][bizPrices][0] = 10;
		            BusinessData[i][bizPrices][1] = 12;
		            BusinessData[i][bizPrices][2] = 20;
		            BusinessData[i][bizPrices][3] = 30;
		            BusinessData[i][bizPrices][4] = 32;
		            BusinessData[i][bizPrices][5] = 20;
		            BusinessData[i][bizPrices][6] = 25;
				}
				else if (type == 5) {
				    BusinessData[i][bizInt][0] = 1494.5612;
	            	BusinessData[i][bizInt][1] = 1304.2061;
	            	BusinessData[i][bizInt][2] = 1093.2891;
	            	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 3;
				}
				else if (type == 6) {
                	BusinessData[i][bizInt][0] = -27.3383;
                	BusinessData[i][bizInt][1] = -57.6909;
                	BusinessData[i][bizInt][2] = 1003.5469;
                	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 6;

					BusinessData[i][bizPrices][0] = 600; //phone
		            BusinessData[i][bizPrices][1] = 300; //gps
		            BusinessData[i][bizPrices][2] = 75; //spray
		            BusinessData[i][bizPrices][3] = 100; //backpack
		            BusinessData[i][bizPrices][4] = 10; // water
		            BusinessData[i][bizPrices][5] = 12; //soda
		            BusinessData[i][bizPrices][6] = 15; //lotto
		            BusinessData[i][bizPrices][7] = 150; //port radio
		            BusinessData[i][bizPrices][8] = 100; // fuelcan
		            BusinessData[i][bizPrices][9] = 200; //crowbar
		            BusinessData[i][bizPrices][10] = 500; //booombox
		            BusinessData[i][bizPrices][11] = 200; //mask
		            BusinessData[i][bizPrices][12] = 160; //first aid
                    BusinessData[i][bizPrices][13] = 900; // repair
                    BusinessData[i][bizPrices][14] = 1000; //nos
		            BusinessData[i][bizPrices][15] = 150; //baseball bat
		            BusinessData[i][bizPrices][16] = 17; //frozen pizza
		            BusinessData[i][bizPrices][17] = 5; //frozen burger
					BusinessData[i][bizPrices][18] = 12; //lighter
					BusinessData[i][bizPrices][19] = 40; //cigar
				}
				else if (type == 7) {
					BusinessData[i][bizInt][0] = -2240.4954;
   					BusinessData[i][bizInt][1] = 128.3774;
			   		BusinessData[i][bizInt][2] = 1035.4210;
      				BusinessData[i][bizInt][3] = 270.0000;
					BusinessData[i][bizInterior] = 6;

					BusinessData[i][bizPrices][0] = 100;
		            BusinessData[i][bizPrices][1] = 350;
		            BusinessData[i][bizPrices][2] = 150;
		            BusinessData[i][bizPrices][3] = 900;
		            BusinessData[i][bizPrices][4] = 120;
		            BusinessData[i][bizPrices][5] = 1200;
		            BusinessData[i][bizPrices][6] = 4000;
		            BusinessData[i][bizPrices][7] = 3000;
		            BusinessData[i][bizPrices][8] = 1000;
		            BusinessData[i][bizPrices][9] = 10;
		            BusinessData[i][bizPrices][10] = 140;
		            BusinessData[i][bizPrices][11] = 190;
		            BusinessData[i][bizPrices][12] = 150;
                    BusinessData[i][bizPrices][13] = 60;
                    BusinessData[i][bizPrices][14] = 50;
		            BusinessData[i][bizPrices][15] = 5;
		            BusinessData[i][bizPrices][16] = 10;
		            BusinessData[i][bizPrices][17] = 5;
				}
				else if (type == 8) {
					BusinessData[i][bizInt][0] = -2240.468505;
   					BusinessData[i][bizInt][1] = 137.060440;
			   		BusinessData[i][bizInt][2] = 1035.414062;
      				BusinessData[i][bizInt][3] = 500.0000;
					BusinessData[i][bizInterior] = 6;

					BusinessData[i][bizPrices][0] = 75;
		            BusinessData[i][bizPrices][1] = 115;
		            BusinessData[i][bizPrices][2] = 55;
		            BusinessData[i][bizPrices][3] = 95;
		            BusinessData[i][bizPrices][4] = 350;
		            BusinessData[i][bizPrices][5] = 800;
		            BusinessData[i][bizPrices][6] = 120;
		            BusinessData[i][bizPrices][7] = 100;
		            BusinessData[i][bizPrices][8] = 300;
		            BusinessData[i][bizPrices][9] = 200;
		            BusinessData[i][bizPrices][10] = 140;
		            BusinessData[i][bizPrices][11] = 190;
		            BusinessData[i][bizPrices][12] = 150;
                    BusinessData[i][bizPrices][13] = 60;
                    BusinessData[i][bizPrices][14] = 50;
		            BusinessData[i][bizPrices][15] = 5;
		            BusinessData[i][bizPrices][16] = 10;
		            BusinessData[i][bizPrices][17] = 5;
				}
				else if (type == 9) {
					BusinessData[i][bizInt][0] = -107.2430;
					BusinessData[i][bizInt][1] = 2021.8199;
  					BusinessData[i][bizInt][2] = 901.0859;
  					BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 3;

					BusinessData[i][bizPrices][0] = 200;
		            BusinessData[i][bizPrices][1] = 15;
		            /*BusinessData[i][bizPrices][2] = 15;
		            BusinessData[i][bizPrices][3] = 95;
		            BusinessData[i][bizPrices][4] = 3;
		            BusinessData[i][bizPrices][5] = 2;
		            BusinessData[i][bizPrices][6] = 10;
		            BusinessData[i][bizPrices][7] = 100;
		            BusinessData[i][bizPrices][8] = 20;
		            BusinessData[i][bizPrices][9] = 10;
		            BusinessData[i][bizPrices][10] = 140;
		            BusinessData[i][bizPrices][11] = 190;
		            BusinessData[i][bizPrices][12] = 150;
                    BusinessData[i][bizPrices][13] = 60;
                    BusinessData[i][bizPrices][14] = 50;
		            BusinessData[i][bizPrices][15] = 5;
		            BusinessData[i][bizPrices][16] = 10;
		            BusinessData[i][bizPrices][17] = 5;*/
				}
				else if (type == 10) {
		            BusinessData[i][bizInt][0] = -27.312299;
					BusinessData[i][bizInt][1] = -29.277599;
  					BusinessData[i][bizInt][2] = 1003.557250;
  					BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 4;

					BusinessData[i][bizPrices][0] = 25;
		            BusinessData[i][bizPrices][1] = 400;
				}
				BusinessData[i][bizExterior] = GetPlayerInterior(playerid);
				BusinessData[i][bizExteriorVW] = GetPlayerVirtualWorld(playerid);

				BusinessData[i][bizLocked] = true;
				BusinessData[i][bizVault] = 0;
				BusinessData[i][bizProducts] = 100;
				BusinessData[i][bizShipment] = 0;

				Business_Refresh(i);
				mysql_tquery(g_iHandle, "INSERT INTO `businesses` (`bizOwner`) VALUES(0)", "OnBusinessCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

stock ResetBizPrices(bizid)
{
	new type = BusinessData[bizid][bizType];
	if (type == 1) {
		BusinessData[bizid][bizPrices][0] = 600; //phone
		BusinessData[bizid][bizPrices][1] = 300; //gps
		BusinessData[bizid][bizPrices][2] = 75; //spray
		BusinessData[bizid][bizPrices][3] = 100; //backpack
		BusinessData[bizid][bizPrices][4] = 10; // water
		BusinessData[bizid][bizPrices][5] = 12; //soda
		BusinessData[bizid][bizPrices][6] = 15; //lotto
		BusinessData[bizid][bizPrices][7] = 150; //port radio
		BusinessData[bizid][bizPrices][8] = 100; // fuelcan
		BusinessData[bizid][bizPrices][9] = 200; //crowbar
		BusinessData[bizid][bizPrices][10] = 500; //booombox
		BusinessData[bizid][bizPrices][11] = 200; //mask
		BusinessData[bizid][bizPrices][12] = 160; //first aid
		BusinessData[bizid][bizPrices][13] = 900; // repair
		BusinessData[bizid][bizPrices][14] = 1000; //nos
		BusinessData[bizid][bizPrices][15] = 150; //baseball bat
		BusinessData[bizid][bizPrices][16] = 17; //frozen pizza
		BusinessData[bizid][bizPrices][17] = 5; //frozen burger
		BusinessData[bizid][bizPrices][18] = 12; //lighter
		BusinessData[bizid][bizPrices][19] = 40; //cigar
	}
	else if (type == 2) {
		BusinessData[bizid][bizPrices][0] = 900;
		BusinessData[bizid][bizPrices][1] = 3000;
		BusinessData[bizid][bizPrices][2] = 3500;
		BusinessData[bizid][bizPrices][3] = 14500;
		BusinessData[bizid][bizPrices][4] = 20000;
		BusinessData[bizid][bizPrices][5] = 26000;
		BusinessData[bizid][bizPrices][6] = 13500;
	}
	else if (type == 3) {
		BusinessData[bizid][bizPrices][0] = 200;
		BusinessData[bizid][bizPrices][1] = 300;
		BusinessData[bizid][bizPrices][2] = 30;
		BusinessData[bizid][bizPrices][3] = 40;
	}
	else if (type == 4) {
		BusinessData[bizid][bizPrices][0] = 10;
		BusinessData[bizid][bizPrices][1] = 12;
		BusinessData[bizid][bizPrices][2] = 20;
		BusinessData[bizid][bizPrices][3] = 30;
		BusinessData[bizid][bizPrices][4] = 32;
		BusinessData[bizid][bizPrices][5] = 20;
		BusinessData[bizid][bizPrices][6] = 25;
	}
	else if (type == 5) {

	}
	else if (type == 6) {
		BusinessData[bizid][bizPrices][0] = 600; //phone
		BusinessData[bizid][bizPrices][1] = 300; //gps
		BusinessData[bizid][bizPrices][2] = 75; //spray
		BusinessData[bizid][bizPrices][3] = 100; //backpack
		BusinessData[bizid][bizPrices][4] = 10; // water
		BusinessData[bizid][bizPrices][5] = 12; //soda
		BusinessData[bizid][bizPrices][6] = 15; //lotto
		BusinessData[bizid][bizPrices][7] = 150; //port radio
		BusinessData[bizid][bizPrices][8] = 100; // fuelcan
		BusinessData[bizid][bizPrices][9] = 200; //crowbar
		BusinessData[bizid][bizPrices][10] = 500; //booombox
		BusinessData[bizid][bizPrices][11] = 200; //mask
		BusinessData[bizid][bizPrices][12] = 160; //first aid
		BusinessData[bizid][bizPrices][13] = 900; // repair
		BusinessData[bizid][bizPrices][14] = 1000; //nos
		BusinessData[bizid][bizPrices][15] = 150; //baseball bat
		BusinessData[bizid][bizPrices][16] = 17; //frozen pizza
		BusinessData[bizid][bizPrices][17] = 5; //frozen burger
		BusinessData[bizid][bizPrices][18] = 12; //lighter
		BusinessData[bizid][bizPrices][19] = 40; //cigar
	}
	else if (type == 7) {
		BusinessData[bizid][bizPrices][0] = 100;
		BusinessData[bizid][bizPrices][1] = 350;
		BusinessData[bizid][bizPrices][2] = 150;
		BusinessData[bizid][bizPrices][3] = 900;
		BusinessData[bizid][bizPrices][4] = 120;
		BusinessData[bizid][bizPrices][5] = 1200;
		BusinessData[bizid][bizPrices][6] = 4000;
		BusinessData[bizid][bizPrices][7] = 3000;
		BusinessData[bizid][bizPrices][8] = 1000;
		BusinessData[bizid][bizPrices][9] = 10;
		BusinessData[bizid][bizPrices][10] = 140;
		BusinessData[bizid][bizPrices][11] = 190;
		BusinessData[bizid][bizPrices][12] = 150;
		BusinessData[bizid][bizPrices][13] = 60;
		BusinessData[bizid][bizPrices][14] = 50;
		BusinessData[bizid][bizPrices][15] = 5;
		BusinessData[bizid][bizPrices][16] = 10;
		BusinessData[bizid][bizPrices][17] = 5;
	}
	else if (type == 8) {
		BusinessData[bizid][bizPrices][0] = 75;
		BusinessData[bizid][bizPrices][1] = 115;
		BusinessData[bizid][bizPrices][2] = 55;
		BusinessData[bizid][bizPrices][3] = 95;
		BusinessData[bizid][bizPrices][4] = 350;
		BusinessData[bizid][bizPrices][5] = 800;
		BusinessData[bizid][bizPrices][6] = 120;
		BusinessData[bizid][bizPrices][7] = 100;
		BusinessData[bizid][bizPrices][8] = 300;
		BusinessData[bizid][bizPrices][9] = 200;
		BusinessData[bizid][bizPrices][10] = 140;
		BusinessData[bizid][bizPrices][11] = 190;
		BusinessData[bizid][bizPrices][12] = 150;
		BusinessData[bizid][bizPrices][13] = 60;
		BusinessData[bizid][bizPrices][14] = 50;
		BusinessData[bizid][bizPrices][15] = 5;
		BusinessData[bizid][bizPrices][16] = 10;
		BusinessData[bizid][bizPrices][17] = 5;
	}
	else if (type == 9) {
		BusinessData[bizid][bizPrices][0] = 200;
		BusinessData[bizid][bizPrices][1] = 15;
		/*BusinessData[bizid][bizPrices][2] = 15;
		BusinessData[bizid][bizPrices][3] = 95;
		BusinessData[bizid][bizPrices][4] = 3;
		BusinessData[bizid][bizPrices][5] = 2;
		BusinessData[bizid][bizPrices][6] = 10;
		BusinessData[bizid][bizPrices][7] = 100;
		BusinessData[bizid][bizPrices][8] = 20;
		BusinessData[bizid][bizPrices][9] = 10;
		BusinessData[bizid][bizPrices][10] = 140;
		BusinessData[bizid][bizPrices][11] = 190;
		BusinessData[bizid][bizPrices][12] = 150;
		BusinessData[bizid][bizPrices][13] = 60;
		BusinessData[bizid][bizPrices][14] = 50;
		BusinessData[bizid][bizPrices][15] = 5;
		BusinessData[bizid][bizPrices][16] = 10;
		BusinessData[bizid][bizPrices][17] = 5;*/
	}
	else if (type == 10) {
		BusinessData[bizid][bizPrices][0] = 25;
		BusinessData[bizid][bizPrices][1] = 400;
	}
}

stock Business_RemoveCars(bizid)
{
	if (BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 5)
	{
	    static
	        string[32];

		for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
		{
  			DealershipCars[bizid][i][vehModel] = 0;
    		DealershipCars[bizid][i][vehPrice] = 0;
		}
		format(string, sizeof(string), "DELETE FROM `dealervehicles` WHERE `ID` = '%d'", BusinessData[bizid][bizID]);
		mysql_tquery(g_iHandle, string);
	}
	return 1;
}

GenPlate(string[ ], size)
{
    static const Data[ ] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";//add more characters if they want to include in string
    new i;
    for___loop(i = 0 ; i < size; ++i)
        string[ i ] = Data[ random( sizeof Data ) ];
}

stock Business_RemovePumps(bizid)
{
	if (BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 6)
	{
	    static
	        string[32];

	    foreach (new i : Player) if (PlayerData[i][pRefill] != INVALID_VEHICLE_ID && PlayerData[i][pGasStation] == bizid)
	    {
	        StopRefilling(i);
	    }
		for (new i = 0; i != MAX_GAS_PUMPS; i ++) if (PumpData[i][pumpExists] && PumpData[i][pumpBusiness] == bizid)
		{
  			DestroyDynamicObject(PumpData[i][pumpObject]);
			DestroyDynamic3DTextLabel(PumpData[i][pumpText3D]);

		    PumpData[i][pumpExists] = 0;
		    PumpData[i][pumpFuel] = 0;
		}
		format(string, sizeof(string), "DELETE FROM `pumps` WHERE `ID` = '%d'", BusinessData[bizid][bizID]);
		mysql_tquery(g_iHandle, string);
	}
	return 1;
}

Business_Delete(bizid)
{
	if (bizid != -1 && BusinessData[bizid][bizExists])
	{
	    new
	        string[82];

		format(string, sizeof(string), "DELETE FROM `businesses` WHERE `bizID` = '%d'", BusinessData[bizid][bizID]);
		mysql_tquery(g_iHandle, string);

		foreach (new i : Player) if (PlayerData[i][pShipment] == bizid) {
			PlayerData[i][pShipment] = -1;
			PlayerData[i][pDeliverShipment] = 0;

			DisablePlayerCheckpoint(i);
		}
        if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizText3D]))
		    DestroyDynamic3DTextLabel(BusinessData[bizid][bizText3D]);

		if (IsValidDynamicPickup(BusinessData[bizid][bizPickup]))
		    DestroyDynamicPickup(BusinessData[bizid][bizPickup]);

        DestroyDynamic3DTextLabel(BusinessData[bizid][bizText3D]);
		DestroyDynamicPickup(BusinessData[bizid][bizPickup]);

		Business_RemovePumps(bizid);
		Business_RemoveCars(bizid);

	    BusinessData[bizid][bizExists] = false;
	    BusinessData[bizid][bizOwner] = 0;
	    BusinessData[bizid][bizID] = 0;
	}
	return 1;
}

Business_IsOwner(playerid, bizid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

	if (BusinessData[bizid][bizExists] && BusinessData[bizid][bizOwner] == 99999999 && PlayerData[playerid][pAdmin] > 0)
		return 1;

    if ((BusinessData[bizid][bizExists] && BusinessData[bizid][bizOwner] != 0) && BusinessData[bizid][bizOwner] == PlayerData[playerid][pID])
		return 1;

	return 0;
}

forward OpenInventory(playerid);
public OpenInventory(playerid)
{
    if (!IsPlayerConnected(playerid) || !PlayerData[playerid][pCharacter])
	    return 0;

	static
	    items[MAX_INVENTORY],
		amounts[MAX_INVENTORY];

    for (new i = 0; i < PlayerData[playerid][pCapacity]; i ++)
	{
 		if (InventoryData[playerid][i][invExists]) {
   			items[i] = InventoryData[playerid][i][invModel];
   			amounts[i] = InventoryData[playerid][i][invQuantity];
		}
		else {
		    items[i] = -1;
		    amounts[i] = -1;
		}
	}
	PlayerData[playerid][pStorageSelect] = 0;
	return ShowModelSelectionMenu(playerid, "Inventory", MODEL_SELECTION_INVENTORY, items, sizeof(items), 0.0, 0.0, 0.0, 1.0, -1, true, amounts);
}

forward SelectTD(playerid);
public SelectTD(playerid)
{
	if (!IsPlayerConnected(playerid))
	    return 0;

	return SelectTextDraw(playerid, -1);
}

ReturnDate()
{
	static
	    date[36];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	format(date, sizeof(date), "%02d/%02d/%d, %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
	return date;
}

ReturnVehicleHealth(vehicleid)
{
	if (!IsValidVehicle(vehicleid))
	    return 0;

	static
	    Float:amount;

	GetVehicleHealth(vehicleid, amount);
	return floatround(amount, floatround_round);
}

ReturnArmour(playerid)
{
	static
	    Float:amount;

	GetPlayerArmour(playerid, amount);
	return floatround(amount, floatround_round);
}

ReturnHealth(playerid)
{
	static
	    Float:amount;

	GetPlayerHealth(playerid, amount);
	return floatround(amount, floatround_round);
}

ReturnName(playerid, mode=1)
{
	static
	    name[MAX_PLAYER_NAME + 1];

	GetPlayerName(playerid, name, sizeof(name));

	if (mode == 0 || mode == 2) {
	    for (new i = 0, len = strlen(name); i < len; i ++) {
	        if (name[i] == '_') name[i] = ' ';
		}
	}
	if(mode == 2)
	{
		if (PlayerData[playerid][pMaskOn])
			format(name, sizeof(name), "Mask_%d", PlayerData[playerid][pMaskID]);
	}
	return name;
}

ReturnIP(playerid)
{
	static
	    ip[16];

	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

ShowStatsForPlayer(playerid, targetid)
{
	SendClientMessageEx(playerid, -1, "%i | debug | /stats is to be added", targetid);
	return 1;
}

/*ShowStats(playerid, targetid)
{
    new string[128];
	format(string, sizeof(string),"Account Information for [Account name: %s | Character Name: %s | Phone#: %d]", PlayerData[playerid][pUsername], ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string),"[Account] Admin level: %s | Donator level: %s", AdminRankName(playerid), DonatorRankName(playerid));
 	SendClientMessage(playerid, COLOR_ORANGE, string);
 	format(string, sizeof(string),"[Character] Sex: %s | Birthdate: %s | Origin: %s | Playing hours: %d | Job: %s", (PlayerData[targetid][pGender] == 2) ? ("Female") : ("Male"), PlayerData[targetid][pBirthdate], PlayerData[targetid][pOrigin], PlayerData[targetid][pPlayingHours], Job_GetName(PlayerData[targetid][pJob]));
 	SendClientMessage(playerid, COLOR_ORANGE, string);
 	format(string, sizeof(string),"[Economy] Cash: %s | Bank: %s | Savings: %s", FormatNumber(PlayerData[playerid][pMoney]), FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
 	SendClientMessage(playerid, COLOR_ORANGE, string);
 	format(string, sizeof(string),"[Faction] Faction: %s | Faction Rank: %s | Faction Division: %s", Faction_GetName(playerid), Faction_GetRank(playerid), Faction_GetDivision(playerid));
 	SendClientMessage(playerid, COLOR_ORANGE, string);
 	return 1;
}*/
Blacklist_Add(ip[], username[], banner[], reason[])
{
	static
	    string[256];

	format(string, sizeof(string), "INSERT INTO `blacklist` (`IP`, `Username`, `BannedBy`, `Reason`, `Date`) VALUES('%s', '%s', '%s', '%s', '%s')",
		SQL_ReturnEscaped(ip),
		SQL_ReturnEscaped(username),
		SQL_ReturnEscaped(banner),
		SQL_ReturnEscaped(reason),
		ReturnDate()
	);
	mysql_tquery(g_iHandle, string);

	format(string, sizeof(string), "UPDATE `accounts` SET `banned` = 1 WHERE `username` = '%s'", SQL_ReturnEscaped(username));
	mysql_tquery(g_iHandle, string);
}

Blacklist_Add_TempBan(ip[], username[], banner[], reason[], hours)
{
	static
	    string[270];

	format(string, sizeof(string), "INSERT INTO `blacklist` (`IP`, `Username`, `BannedBy`, `Reason`, `Date`, `TempHours`) VALUES('%s', '%s', '%s', '%s', '%s', %d)",
		SQL_ReturnEscaped(ip),
		SQL_ReturnEscaped(username),
		SQL_ReturnEscaped(banner),
		SQL_ReturnEscaped(reason),
		ReturnDate(),
		hours
	);
	mysql_tquery(g_iHandle, string);

	format(string, sizeof(string), "UPDATE `accounts` SET `banned` = 1 WHERE `username` = '%s'", SQL_ReturnEscaped(username));
	mysql_tquery(g_iHandle, string);
}

Blacklist_Remove(username[])
{
	static
	    string[128];

	format(string, sizeof(string), "DELETE FROM `blacklist` WHERE `Username` = '%s'", SQL_ReturnEscaped(username));
    mysql_tquery(g_iHandle, string);

	format(string, sizeof(string), "UPDATE `accounts` SET `banned` = 0 WHERE `username` = '%s'", SQL_ReturnEscaped(username));
	mysql_tquery(g_iHandle, string);
}

Blacklist_RemoveIP(ip[])
{
	static
	    string[128];

    format(string, sizeof(string), "DELETE FROM `blacklist` WHERE `IP` = '%s'", SQL_ReturnEscaped(ip));
    mysql_tquery(g_iHandle, string);
}

IsPlayerInRangeOfDynamicObject(playerid, objectid, Float:radius)
{
	if(IsValidDynamicObject(objectid))
	{
		new
		    interiorid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_INTERIOR_ID),
			worldid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_WORLD_ID),
		    Float:x,
		    Float:y,
		    Float:z;

		GetDynamicObjectPos(objectid, x, y, z);

		if(interiorid == -1) {
		    interiorid = GetPlayerInterior(playerid);
		} if(worldid == -1) {
		    worldid = GetPlayerVirtualWorld(playerid);
		}

		if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z) && GetPlayerInterior(playerid) == interiorid && GetPlayerVirtualWorld(playerid) == worldid)
		{
		    return 1;
		}
	}

	return 0;
}

stock Inventory_Clear(playerid)
{
	static
	    string[64];

	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
	    if (InventoryData[playerid][i][invExists])
	    {
	        InventoryData[playerid][i][invExists] = 0;
	        InventoryData[playerid][i][invModel] = 0;
	        InventoryData[playerid][i][invQuantity] = 0;
		}
	}
	format(string, sizeof(string), "DELETE FROM `inventory` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
	return mysql_tquery(g_iHandle, string);
}

stock Inventory_Set(playerid, item[], model, amount)
{
	new itemid = Inventory_GetItemID(playerid, item);

	if (itemid == -1 && amount > 0)
		Inventory_Add(playerid, item, model, amount);

	else if (amount > 0 && itemid != -1)
	    Inventory_SetQuantity(playerid, item, amount);

	else if (amount < 1 && itemid != -1)
	    Inventory_Remove(playerid, item, -1);

	return 1;
}

stock Inventory_GetItemID(playerid, item[])
{
	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
	    if (!InventoryData[playerid][i][invExists])
	        continue;

		if (!strcmp(InventoryData[playerid][i][invItem], item)) return i;
	}
	return -1;
}

stock Inventory_GetFreeID(playerid)
{
	if (Inventory_Items(playerid) >= PlayerData[playerid][pCapacity])
		return -1;

	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
	    if (!InventoryData[playerid][i][invExists])
	        return i;
	}
	return -1;
}

stock Inventory_Items(playerid)
{
    new count;

    for (new i = 0; i != MAX_INVENTORY; i ++) if (InventoryData[playerid][i][invExists]) {
        count++;
	}
	return count;
}

stock Inventory_Count(playerid, item[])
{
	new itemid = Inventory_GetItemID(playerid, item);

	if (itemid != -1)
	    return InventoryData[playerid][itemid][invQuantity];

	return 0;
}

stock Inventory_HasItem(playerid, item[])
{
	return (Inventory_GetItemID(playerid, item) != -1);
}

stock Inventory_SetQuantity(playerid, item[], quantity)
{
	new
	    itemid = Inventory_GetItemID(playerid, item),
	    string[128];

	if (itemid != -1)
	{
	    format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
	    mysql_tquery(g_iHandle, string);

	    InventoryData[playerid][itemid][invQuantity] = quantity;
	}
	return 1;
}

stock Inventory_Add(playerid, item[], model, quantity = 1)
{
	new
		itemid = Inventory_GetItemID(playerid, item),
		string[128];

	if (itemid == -1)
	{
	    itemid = Inventory_GetFreeID(playerid);

	    if (itemid != -1)
	    {
	        InventoryData[playerid][itemid][invExists] = true;
	        InventoryData[playerid][itemid][invModel] = model;
	        InventoryData[playerid][itemid][invQuantity] = quantity;

	        strpack(InventoryData[playerid][itemid][invItem], item, 32 char);

			if (strcmp(item, "Demo Soda") != 0)
			{
				format(string, sizeof(string), "INSERT INTO `inventory` (`ID`, `invItem`, `invModel`, `invQuantity`) VALUES('%d', '%s', '%d', '%d')", PlayerData[playerid][pID], item, model, quantity);
				mysql_tquery(g_iHandle, string, "OnInventoryAdd", "dd", playerid, itemid);
			}
	        return itemid;
		}
		return -1;
	}
	else
	{
	    format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = `invQuantity` + %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
	    mysql_tquery(g_iHandle, string);

	    InventoryData[playerid][itemid][invQuantity] += quantity;
	}
	return itemid;
}

stock Inventory_Remove(playerid, item[], quantity = 1)
{
	new
		itemid = Inventory_GetItemID(playerid, item),
		string[128];

	if (itemid != -1)
	{
	    if (InventoryData[playerid][itemid][invQuantity] > 0)
	    {
	        InventoryData[playerid][itemid][invQuantity] -= quantity;
		}
		if (quantity == -1 || InventoryData[playerid][itemid][invQuantity] < 1)
		{
		    InventoryData[playerid][itemid][invExists] = false;
		    InventoryData[playerid][itemid][invModel] = 0;
		    InventoryData[playerid][itemid][invQuantity] = 0;

		    format(string, sizeof(string), "DELETE FROM `inventory` WHERE `ID` = '%d' AND `invID` = '%d'", PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
	        mysql_tquery(g_iHandle, string);
		}
		else if (quantity != -1 && InventoryData[playerid][itemid][invQuantity] > 0)
		{
			format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = `invQuantity` - %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
            mysql_tquery(g_iHandle, string);
		}
		return 1;
	}
	return 0;
}

stock RemoveAlpha(color) {
    return (color & ~0xFF);
}

stock CancelDrivingTest(playerid)
{
	if (PlayerData[playerid][pDrivingTest] || PlayerData[playerid][pBikeTest] || PlayerData[playerid][pTruckTest])
	{
 		SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
 		SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

  		SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
  		SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

		DisablePlayerCheckpoint(playerid);
  		SetCameraBehindPlayer(playerid);

		DestroyVehicle(PlayerData[playerid][pTestCar]);
  		PlayerData[playerid][pDrivingTest] = false;
		PlayerData[playerid][pBikeTest] = false;
		PlayerData[playerid][pTruckTest] = false;
		RemovePlayerAttachedObject(playerid, 3);
	}
	return 1;
}

stock House_WeaponStorage(playerid, houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	static
	    string[320];

	string[0] = 0;

	for (new i = 0; i < 10; i ++)
	{
	    if (!HouseData[houseid][houseWeapons][i])
	        format(string, sizeof(string), "%sEmpty Slot\n", string);

		else
			format(string, sizeof(string), "%s%s (Ammo: %d)\n", string, ReturnWeaponName(HouseData[houseid][houseWeapons][i]), HouseData[houseid][houseAmmo][i]);
	}
	Dialog_Show(playerid, HouseWeapons, DIALOG_STYLE_LIST, "Weapon Storage", string, "Select", "Cancel");
	return 1;
}

stock House_ShowItems(playerid, houseid)
{
    if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	static
	    string[MAX_HOUSE_STORAGE * 32],
		name[32];

	string[0] = 0;

	for (new i = 0; i != MAX_HOUSE_STORAGE; i ++)
	{
	    if (!HouseStorage[houseid][i][hItemExists])
	        format(string, sizeof(string), "%sEmpty Slot\n", string);

		else {
			strunpack(name, HouseStorage[houseid][i][hItemName]);

			if (HouseStorage[houseid][i][hItemQuantity] == 1) {
			    format(string, sizeof(string), "%s%s\n", string, name);
			}
			else format(string, sizeof(string), "%s%s (%d)\n", string, name, HouseStorage[houseid][i][hItemQuantity]);
		}
	}
	Dialog_Show(playerid, HouseItems, DIALOG_STYLE_LIST, "Item Storage", string, "Select", "Cancel");
	return 1;
}

stock House_OpenStorage(playerid, houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	new
		items[2],
		string[MAX_HOUSE_STORAGE * 32];

	for (new i = 0; i < MAX_HOUSE_STORAGE; i ++) if (HouseStorage[houseid][i][hItemExists]) {
	    items[0]++;
	}
	for (new i = 0; i < 10; i ++) if (HouseData[houseid][houseWeapons][i]) {
	    items[1]++;
	}
	if (!House_IsOwner(playerid, houseid))
	    format(string, sizeof(string), "Item Storage (%d/%d)\nWeapon Storage (%d/10)", items[0], MAX_HOUSE_STORAGE, items[1]);

	else
		format(string, sizeof(string), "Item Storage (%d/%d)\nWeapon Storage (%d/10)\nMoney Safe (%s)", items[0], MAX_HOUSE_STORAGE, items[1], FormatNumber(HouseData[houseid][houseMoney]));

	Dialog_Show(playerid, HouseStorage, DIALOG_STYLE_LIST, "House Storage", string, "Select", "Cancel");
	return 1;
}

stock House_GetItemID(houseid, item[])
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	for (new i = 0; i < MAX_HOUSE_STORAGE; i ++)
	{
	    if (!HouseStorage[houseid][i][hItemExists])
	        continue;

		if (!strcmp(HouseStorage[houseid][i][hItemName], item)) return i;
	}
	return -1;
}

stock House_GetFreeID(houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	for (new i = 0; i < MAX_HOUSE_STORAGE; i ++)
	{
	    if (!HouseStorage[houseid][i][hItemExists])
	        return i;
	}
	return -1;
}

stock House_AddItem(houseid, item[], model, quantity = 1, slotid = -1)
{
    if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	new
		itemid = House_GetItemID(houseid, item),
		string[128];

	if (itemid == -1)
	{
	    itemid = House_GetFreeID(houseid);

	    if (itemid != -1)
	    {
	        if (slotid != -1)
	            itemid = slotid;

	        HouseStorage[houseid][itemid][hItemExists] = true;
	        HouseStorage[houseid][itemid][hItemModel] = model;
	        HouseStorage[houseid][itemid][hItemQuantity] = quantity;

	        strpack(HouseStorage[houseid][itemid][hItemName], item, 32 char);

			format(string, sizeof(string), "INSERT INTO `housestorage` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", HouseData[houseid][houseID], item, model, quantity);
			mysql_tquery(g_iHandle, string, "OnStorageAdd", "dd", houseid, itemid);

	        return itemid;
		}
		return -1;
	}
	else
	{
	    format(string, sizeof(string), "UPDATE `housestorage` SET `itemQuantity` = `itemQuantity` + %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
	    mysql_tquery(g_iHandle, string);

	    HouseStorage[houseid][itemid][hItemQuantity] += quantity;
	}
	return itemid;
}

stock House_RemoveItem(houseid, item[], quantity = 1)
{
    if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	new
		itemid = House_GetItemID(houseid, item),
		string[128];

	if (itemid != -1)
	{
	    if (HouseStorage[houseid][itemid][hItemQuantity] > 0)
	    {
	        HouseStorage[houseid][itemid][hItemQuantity] -= quantity;
		}
		if (quantity == -1 || HouseStorage[houseid][itemid][hItemQuantity] < 1)
		{
		    HouseStorage[houseid][itemid][hItemExists] = false;
		    HouseStorage[houseid][itemid][hItemModel] = 0;
		    HouseStorage[houseid][itemid][hItemQuantity] = 0;

		    format(string, sizeof(string), "DELETE FROM `housestorage` WHERE `ID` = '%d' AND `itemID` = '%d'", HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
	        mysql_tquery(g_iHandle, string);
		}
		else if (quantity != -1 && HouseStorage[houseid][itemid][hItemQuantity] > 0)
		{
			format(string, sizeof(string), "UPDATE `housestorage` SET `itemQuantity` = `itemQuantity` - %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
            mysql_tquery(g_iHandle, string);
		}
		return 1;
	}
	return 0;
}

House_RemoveAllItems(houseid)
{
	static
	    query[64];

	for (new i = 0; i != MAX_HOUSE_STORAGE; i ++) {
        HouseStorage[houseid][i][hItemExists] = false;
        HouseStorage[houseid][i][hItemModel] = 0;
        HouseStorage[houseid][i][hItemQuantity] = 0;
	}
	format(query, 64, "DELETE FROM `housestorage` WHERE `ID` = '%d'", HouseData[houseid][houseID]);
	mysql_tquery(g_iHandle, query);

	for (new i = 0; i < 10; i ++) {
	    HouseData[houseid][houseWeapons][i] = 0;
	    HouseData[houseid][houseAmmo][i] = 0;
	}
	return 1;
}

stock Car_GetItemID(carid, item[])
{
	if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	for (new i = 0; i < MAX_CAR_STORAGE; i ++)
	{
	    if (!CarStorage[carid][i][cItemExists])
	        continue;

		if (!strcmp(CarStorage[carid][i][cItemName], item)) return i;
	}
	return -1;
}

stock Car_GetFreeID(carid)
{
	if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	for (new i = 0; i < MAX_CAR_STORAGE; i ++)
	{
	    if (!CarStorage[carid][i][cItemExists])
	        return i;
	}
	return -1;
}

stock Car_AddItem(carid, item[], model, quantity = 1, slotid = -1)
{
    if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	new
		itemid = Car_GetItemID(carid, item),
		string[128];

	if (itemid == -1)
	{
	    itemid = Car_GetFreeID(carid);

	    if (itemid != -1)
	    {
	        if (slotid != -1)
	            itemid = slotid;

	        CarStorage[carid][itemid][cItemExists] = true;
	        CarStorage[carid][itemid][cItemModel] = model;
	        CarStorage[carid][itemid][cItemQuantity] = quantity;

	        strpack(CarStorage[carid][itemid][cItemName], item, 32 char);

			format(string, sizeof(string), "INSERT INTO `carstorage` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", CarData[carid][carID], item, model, quantity);
			mysql_tquery(g_iHandle, string, "OnCarStorageAdd", "dd", carid, itemid);

	        return itemid;
		}
		return -1;
	}
	else
	{
	    format(string, sizeof(string), "UPDATE `carstorage` SET `itemQuantity` = `itemQuantity` + %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, CarData[carid][carID], CarStorage[carid][itemid][cItemID]);
	    mysql_tquery(g_iHandle, string);

	    CarStorage[carid][itemid][cItemQuantity] += quantity;
	}
	return itemid;
}

stock Car_RemoveItem(carid, item[], quantity = 1)
{
    if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	new
		itemid = Car_GetItemID(carid, item),
		string[128];

	if (itemid != -1)
	{
	    if (CarStorage[carid][itemid][cItemQuantity] > 0)
	    {
	        CarStorage[carid][itemid][cItemQuantity] -= quantity;
		}
		if (quantity == -1 || CarStorage[carid][itemid][cItemQuantity] < 1)
		{
		    CarStorage[carid][itemid][cItemExists] = false;
		    CarStorage[carid][itemid][cItemModel] = 0;
		    CarStorage[carid][itemid][cItemQuantity] = 0;

		    format(string, sizeof(string), "DELETE FROM `carstorage` WHERE `ID` = '%d' AND `itemID` = '%d'", CarData[carid][carID], CarStorage[carid][itemid][cItemID]);
	        mysql_tquery(g_iHandle, string);
		}
		else if (quantity != -1 && CarStorage[carid][itemid][cItemQuantity] > 0)
		{
			format(string, sizeof(string), "UPDATE `carstorage` SET `itemQuantity` = `itemQuantity` - %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, CarData[carid][carID], CarStorage[carid][itemid][cItemID]);
            mysql_tquery(g_iHandle, string);
		}
		return 1;
	}
	return 0;
}

Car_RemoveAllItems(carid)
{
	static
	    query[64];

	for (new i = 0; i != MAX_CAR_STORAGE; i ++) {
        CarStorage[carid][i][cItemExists] = false;
        CarStorage[carid][i][cItemModel] = 0;
        CarStorage[carid][i][cItemQuantity] = 0;
	}
	format(query, 64, "DELETE FROM `carstorage` WHERE `ID` = '%d'", CarData[carid][carID]);
	mysql_tquery(g_iHandle, query);

	for (new i = 0; i < 5; i ++) {
	    CarData[carid][carWeapons][i] = 0;
	    CarData[carid][carAmmo][i] = 0;
	}
	return 1;
}

FormatNumber(number, prefix[] = "$")
{
	static
		value[32],
		length;

	format(value, sizeof(value), "%d", (number < 0) ? (-number) : (number));

	if ((length = strlen(value)) > 3)
	{
		for (new i = length, l = 0; --i >= 0; l ++) {
		    if ((l > 0) && (l % 3 == 0)) strins(value, ",", i + 1);
		}
	}
	if (prefix[0] != 0)
	    strins(value, prefix, 0);

	if (number < 0)
		strins(value, "-", 0);

	return value;
}

ResetFaction(playerid)
{
    PlayerData[playerid][pFaction] = -1;
    PlayerData[playerid][pFactionID] = -1;
    PlayerData[playerid][pFactionRank] = 0;
    PlayerData[playerid][pSwatMember] = 0;
    PlayerData[playerid][pFactionDivision] = 0;
	PlayerData[playerid][pChannel] = 0;
	PlayerData[playerid][pChannel2] = 0;
	PlayerData[playerid][pChannel3] = 0;
	PlayerData[playerid][pChannel4] = 0;
}

forward DragUpdate(playerid, targetid);
public DragUpdate(playerid, targetid)
{
	if (PlayerData[targetid][pDragged] && PlayerData[targetid][pDraggedBy] == playerid)
	{
	    static
	        Float:fX,
	        Float:fY,
	        Float:fZ,
			Float:fAngle;

		GetPlayerPos(playerid, fX, fY, fZ);
		GetPlayerFacingAngle(playerid, fAngle);

		fX -= 3.0 * floatsin(-fAngle, degrees);
		fY -= 3.0 * floatcos(-fAngle, degrees);

		SetPlayerPos(targetid, fX, fY, fZ);
		SetPlayerInterior(targetid, GetPlayerInterior(playerid));
		SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
	}
	return 1;
}

StopDragging(playerid)
{
	if (PlayerData[playerid][pDragged])
	{
	    PlayerData[playerid][pDragged] = 0;
		PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
		KillTimer(PlayerData[playerid][pDragTimer]);
	}
	return 1;
}

ResetEditing(playerid)
{
    if (PlayerData[playerid][pEditFurniture] != -1)
		Furniture_Refresh(PlayerData[playerid][pEditFurniture]);

	if (PlayerData[playerid][pEditPump] != -1)
	{
		Pump_Refresh(PlayerData[playerid][pEditPump]);
		PlayerData[playerid][pGasStation] = -1;
	}
	PlayerData[playerid][pEditType] = 0;
 	PlayerData[playerid][pEditGate] = -1;
 	PlayerData[playerid][pEditRack] = -1;
	PlayerData[playerid][pEditPump] = -1;
	PlayerData[playerid][pEditFurniture] = -1;
	PlayerData[playerid][pEditATM] = -1;
	return 1;
}

ResetPlayer(playerid)
{
	if (PlayerData[playerid][pDrinking])
	    DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);

	if (PlayerData[playerid][pSmoking])
	    DestroyPlayerProgressBar(playerid, PlayerData[playerid][pSmokeBar]);

    if (PlayerData[playerid][pFirstAid])
	    KillTimer(PlayerData[playerid][pAidTimer]);

	if (PlayerData[playerid][pDrivingTest] || PlayerData[playerid][pBikeTest] || PlayerData[playerid][pTruckTest])
	    DestroyVehicle(PlayerData[playerid][pTestCar]);

	if (PlayerData[playerid][pWaypoint])
	{
        PlayerData[playerid][pWaypoint] = 0;
        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][69]);
	}
	foreach (new i : Player) if (PlayerData[i][pDraggedBy] == playerid) {
	    StopDragging(i);
	}
	if (PlayerData[playerid][pDragged]) {
	    StopDragging(playerid);
	}
    PlayerData[playerid][pHospital] = -1;
	PlayerData[playerid][pCooking] = 0;
	PlayerData[playerid][pCookingTime] = 0;
	PlayerData[playerid][pCookingHouse] = -1;
	PlayerData[playerid][pGasPump] = -1;
	PlayerData[playerid][pCarryTrash] = 0;
	PlayerData[playerid][pGasStation] = -1;
	PlayerData[playerid][pCrafting] = 0;
	PlayerData[playerid][pOpeningCrate] = 0;
	PlayerData[playerid][pHarvesting] = 0;
	PlayerData[playerid][pDrivingTest] = 0;
	PlayerData[playerid][pBikeTest] = 0;
	PlayerData[playerid][pTruckTest] = 0;
	PlayerData[playerid][pFuelCan] = 0;
	PlayerData[playerid][pFingerTime] = 0;
	PlayerData[playerid][pFingerItem] = -1;
	PlayerData[playerid][pFirstAid] = 0;
	PlayerData[playerid][pDrinking] = 0;
	PlayerData[playerid][pSmoking] = 0;
	PlayerData[playerid][pDrinkTime] = 0;
	PlayerData[playerid][pEmergency] = 0;
	PlayerData[playerid][pEmergencyBoth] = 0;
	PlayerData[playerid][pDealerCallDrugs] = 0;
	PlayerData[playerid][pDealerCallGuns] = 0;
	PlayerData[playerid][pDealerCallMP] = 0;
	PlayerData[playerid][pDealerCallPP] = 0;
	PlayerData[playerid][pDealerCallSMGP] = 0;
	PlayerData[playerid][pDealerCallSP] = 0;
	PlayerData[playerid][pDealerCallRP] = 0;
	PlayerData[playerid][pDealerCallDP] = 0;
	PlayerData[playerid][pPlaceAd] = 0;
	PlayerData[playerid][pAdTime] = 0;
	PlayerData[playerid][pLoanAsk] = 0;
	PlayerData[playerid][pTaxiCalled] = 0;
	PlayerData[playerid][pMechanicCalled] = 0;
	PlayerData[playerid][pMining] = 0;
	PlayerData[playerid][pMinedRock] = 0;
	PlayerData[playerid][pMineTime] = 0;
	PlayerData[playerid][pBleeding] = 0;
	PlayerData[playerid][pBleedTime] = 0;
	PlayerData[playerid][pLoadType] = 0;
	PlayerData[playerid][pLoadCrate] = 0;
	PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pUnloading] = -1;
	PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pUsedMagazine] = 0;
	PlayerData[playerid][pSorting] = -1;
	PlayerData[playerid][pSortCrate] = 0;
	PlayerData[playerid][pCP] = 0;
	PlayerData[playerid][pMaskOn] = 0;
	PlayerData[playerid][pHideTags] = 0;
	PlayerData[playerid][pCuffed] = 0;
	PlayerData[playerid][pGraffiti] = -1;
	PlayerData[playerid][pGraffitiTime] = 0;
	PlayerData[playerid][pPicking] = 0;
	PlayerData[playerid][pPickCar] = -1;
	PlayerData[playerid][pPickTime] = 0;

	if (Inventory_HasItem(playerid, "Mask")) {
	    Inventory_Remove(playerid, "Mask");
	}
	ResetNameTag(playerid);

	RemovePlayerAttachedObject(playerid, 4);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	DisablePlayerCheckpoint(playerid);
	GameTextForPlayer(playerid, " ", 1, 3);

	HidePlayerFooter(playerid);
	HoldWeapon(playerid, 0);
}

ResetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) {
		PlayerData[playerid][pGuns][i] = 0;
		PlayerData[playerid][pAmmo][i] = 0;
	}
	return 1;
}

ResetWeapon(playerid, weaponid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) {
	    if (PlayerData[playerid][pGuns][i] != weaponid) {
	        GivePlayerWeapon(playerid, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);
		}
		else {
            PlayerData[playerid][pGuns][i] = 0;
            PlayerData[playerid][pAmmo][i] = 0;
	    }
	}
	return 1;
}

GiveWeaponToPlayer(playerid, weaponid, ammo)
{
	if (weaponid < 0 || weaponid > 46)
	    return 0;

	PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]] = weaponid;
	PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] += ammo;

	return GivePlayerWeapon(playerid, weaponid, ammo);
}

GiveMoney(playerid, amount)
{
	PlayerData[playerid][pMoney] += amount;
	GivePlayerMoney(playerid, amount);

	return 1;
}

GetPlayerSQLID(playerid)
{
	return (PlayerData[playerid][pID]);
}

GetMoney(playerid)
{
	return (PlayerData[playerid][pMoney]);
}

IsValidPlayerName(const str[])
{
	if (!str[0] || str[0] == '\1')
		return 0;

	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if ((str[i] >= '0' && str[i] <= '9') || (str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z'))
	        continue;

		if (str[i] == '_' || str[i] == '$' || str[i] == '@' || str[i] == '[' || str[i] == ']')
		    continue;

		else
		    return 0;
	}
	return 1;
}

IsAnIP(str[])
{
	if (!str[0] || str[0] == '\1')
		return 0;

	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if ((str[i] < '0' || str[i] > '9') && str[i] != '.')
	        return 0;

	    if (0 < ((i == 0) ? (strval(str)) : (strval(str[i + 1]))) > 255)
	        return 0;
	}
	return 1;
}

Report_GetCount(playerid)
{
	new count;

    for (new i = 0; i != MAX_REPORTS; i ++)
	{
	    if (ReportData[i][rExists] && ReportData[i][rPlayer] == playerid)
	    {
	        count++;
		}
	}
	return count;
}

Report_Clear(playerid)
{
    for (new i = 0; i != MAX_REPORTS; i ++)
	{
	    if (ReportData[i][rExists] && ReportData[i][rPlayer] == playerid)
	    {
	        Report_Remove(i);
		}
	}
	return 1;
}

Report_Add(playerid, const text[], type = 1)
{
	for (new i = 0; i != MAX_REPORTS; i ++)
	{
	    if (!ReportData[i][rExists])
	    {
	        ReportData[i][rExists] = true;
	        ReportData[i][rType] = type;
	        ReportData[i][rPlayer] = playerid;

	        strpack(ReportData[i][rText], text, 128 char);
			return i;
		}
	}
	return -1;
}

Report_Remove(reportid)
{
	if (reportid != -1 && ReportData[reportid][rExists])
	{
	    ReportData[reportid][rExists] = false;
	    ReportData[reportid][rPlayer] = INVALID_PLAYER_ID;
	}
	return 1;
}

Assistance_Add(playerid, const text[], type = 1)
{
	for (new i = 0; i != MAX_ASSISTANCES; i ++)
	{
	    if (!AssistanceData[i][aExists])
	    {
	        AssistanceData[i][aExists] = true;
	        AssistanceData[i][aType] = type;
	        AssistanceData[i][aPlayer] = playerid;

	        strpack(AssistanceData[i][aText], text, 128 char);
			return i;
		}
	}
	return -1;
}

Assistance_Remove(assistanceid)
{
	if (assistanceid != -1 && AssistanceData[assistanceid][aExists])
	{
	    AssistanceData[assistanceid][aExists] = false;
	    AssistanceData[assistanceid][aPlayer] = INVALID_PLAYER_ID;
	}
	return 1;
}

KickEx(playerid)
{
	if (PlayerData[playerid][pKicked])
	    return 0;

	PlayerData[playerid][pKicked] = 1;
	SetTimerEx("KickTimer", 200, false, "d", playerid);

	return 1;
}

forward KickTimer(playerid);
public KickTimer(playerid)
{
	if (PlayerData[playerid][pKicked])
	{
		return Kick(playerid);
	}
	return 0;
}

stock SetDefaultSpawn(playerid)
{
    SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);


	if(PlayerData[playerid][pSpawnPoint] == 0)
	{
	    SetPlayerPos(playerid, 5134.4199, -1769.7264, 9.9042);
	    SetPlayerFacingAngle(playerid, 56.0514);
	}
	if(PlayerData[playerid][pSpawnPoint] == 2)
	{
	    SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	    SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
	    SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
	    SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
	}

	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, 1);
	return 1;
}

stock RespawnPlayer(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
        new
		    Float:x,
		    Float:y,
	    	Float:z;

	    GetPlayerPos(playerid, x, y, z);
	    SetPlayerPos(playerid, x, y, z + 1);
	}
	SpawnPlayer(playerid);
	SetDefaultSpawn(playerid);
	return 1;
}

stock IsPlayerIdle(playerid) {
	new
	    index = GetPlayerAnimationIndex(playerid);

	return ((index == 1275) || (1181 <= index <= 1192));
}

stock IsPlayerNearDynamicObject(playerid, objectid, Float:range = 5.0) {

	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	GetDynamicObjectPos(objectid, fX, fY, fZ);

	return (IsPlayerInRangeOfPoint(playerid, range, fX, fY, fZ));
}

stock IsPlayerSpawned(playerid)
{
	if (playerid < 0 || playerid >= MAX_PLAYERS)
	    return 0;

	return (!PlayerData[playerid][pKilled]) && (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && GetPlayerState(playerid) != PLAYER_STATE_NONE && GetPlayerState(playerid) != PLAYER_STATE_WASTED);
}

stock GetVehicleMaxSeats(vehicleid)
{
    static const g_arrMaxSeats[] = {
		4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
		1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4, 4,
		2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2, 2,
		4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2, 1,
		1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4, 2, 2,
		4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2, 4,
		4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0, 4,
		0, 0
	};
	new
	    model = GetVehicleModel(vehicleid);

	if (400 <= model <= 611)
	    return g_arrMaxSeats[model - 400];

	return 0;
}

stock GetNearestVehicle (playerid, Float: distance = 3.5)
{
     new Float: xX, Float: yY, Float: zZ, retElement = -1;
     for (new i = 0; i <MAX_VEHICLES; i ++)
     {
         GetVehiclePos (i, xX, yY, zZ);
         new Float: odist = GetPlayerDistanceFromPoint (playerid, xX, yY, zZ);
         if (retElement == -1)
         {
             retElement = i;
             distance = odist;
         }
         else if (odist <distance)
         {
             retElement = i;
             distance = odist;
         }
     }
     return retElement;
}

/*stock GetNearestVehicle(playerid)
{
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && GetVehiclePos(i, fX, fY, fZ))
	{
	    if (IsPlayerInRangeOfPoint(playerid, 5.0, fX, fY, fZ)) return i;
	}
	return INVALID_VEHICLE_ID;
}*/

stock IsPlayerNearPlayer(playerid, targetid, Float:radius)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetPlayerPos(targetid, fX, fY, fZ);

	return (GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}

stock IsPlayerNearBoot(playerid, vehicleid)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleBoot(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ);
}

stock IsPlayerNearHood(playerid, vehicleid)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleHood(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ);
}

stock SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendNearbyBMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if(PlayerData[i][pBChatDisabled] == 1) continue;
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if(PlayerData[i][pBChatDisabled] == 1) continue;
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendAdminAlert(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pAdmin] >= 1) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 1) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendHelperAlert(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pHelper] >= 1 || PlayerData[i][pAdmin] >= 1) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (PlayerData[i][pHelper] >= 1 || PlayerData[i][pAdmin] >= 1) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}


stock SendDonatorAlert(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pDonator] >= 1) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (PlayerData[i][pDonator] >= 1) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendFactionAlert(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pAdmin] >= 1 || PlayerData[i][pFactionMod] > 0) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 1 || PlayerData[i][pFactionMod] > 0) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendFactionMessageEx(type, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pDisableFaction]) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pDisableFaction]) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendFactionMessage(factionid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pFaction] == factionid && !PlayerData[i][pDisableFaction]) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pFaction] == factionid && !PlayerData[i][pDisableFaction]) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendPagerMessage(factionid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pFaction] == factionid)
		{
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pFaction] == factionid)
	{
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendJobMessage(jobid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pJob] == jobid) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pJob] == jobid) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendVehicleMessage(vehicleid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid) {
 		SendClientMessage(i, color, string);
	}
	return 1;
}

stock SendRadioMessage(frequency, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel] == frequency) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel] == frequency) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendRadioMessage2(frequency, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel2] == frequency) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel2] == frequency) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendRadioMessage3(frequency, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel3] == frequency) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel3] == frequency) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendRadioMessage4(frequency, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel4] == frequency) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel4] == frequency) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendClientMessageEx(playerid, color, const text[], {Float, _}:...)
{
	static
	    args,
	    str[144];

	/*
     *  Custom function that uses #emit to format variables into a string.
     *  This code is very fragile; touching any code here will cause crashing!
	*/
	if ((args = numargs()) == 3)
	{
	    SendClientMessage(playerid, color, text);
	}
	else
	{
		while (--args >= 3)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit PUSH.S 8
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessage(playerid, color, str);

		#emit RETN
	}
	return 1;
}

stock SendClientMessageToAllEx(color, const text[], {Float, _}:...)
{
	static
	    args,
	    str[144];

	/*
     *  Custom function that uses #emit to format variables into a string.
     *  This code is very fragile; touching any code here will cause crashing!
	*/
	if ((args = numargs()) == 3)
	{
	    SendClientMessageToAll(color, text);
	}
	else
	{
		while (--args >= 2)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessageToAll(color, str);

		#emit RETN
	}
	return 1;
}

IsValidRoleplayName(const name[]) {
	if (!name[0] || strfind(name, "_") == -1)
	    return 0;

	else for (new i = 0, len = strlen(name); i != len; i ++) {
	    if ((i == 0) && (name[i] < 'A' || name[i] > 'Z'))
	        return 0;

		else if ((i != 0 && i < len  && name[i] == '_') && (name[i + 1] < 'A' || name[i + 1] > 'Z'))
		    return 0;

		else if ((name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z') && name[i] != '_' && name[i] != '.')
		    return 0;
	}
	return 1;
}

stock ShowPlayerFooter(playerid, string[], time = 5000) {
	if (PlayerData[playerid][pShowFooter]) {
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][39]);
	    KillTimer(PlayerData[playerid][pFooterTimer]);
	}
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][39], string);
	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][39]);

	PlayerData[playerid][pShowFooter] = true;
	PlayerData[playerid][pFooterTimer] = SetTimerEx("HidePlayerFooter", time, false, "d", playerid);
}

forward HidePlayerFooter(playerid);
public HidePlayerFooter(playerid) {

	if (!PlayerData[playerid][pShowFooter])
	    return 0;

	PlayerData[playerid][pShowFooter] = false;
	return PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][39]);
}

ResetStatistics(playerid)
{
	for (new i = 0; i < 3; i ++) {
	    PlayerCharacters[playerid][i][0] = 0;

	    for (new j = 0; j < 9; j ++) {
	    	AccessoryData[playerid][i][j] = 0.0;
	    }
	}
	for (new i = 0; i != MAX_INVENTORY; i ++) {
	    InventoryData[playerid][i][invExists] = false;
	    InventoryData[playerid][i][invModel] = 0;
	    InventoryData[playerid][i][invQuantity] = 0;
	}
	for (new i = 0; i < 12; i ++) {
	    PlayerData[playerid][pGuns][i] = 0;
	    PlayerData[playerid][pAmmo][i] = 0;
	}
	for (new i = 0; i != MAX_HOUSE_FURNITURE; i ++) {
	    ListedFurniture[playerid][i] = -1;
	}
	for (new i = 0; i < MAX_LISTED_ITEMS; i ++) {
	    NearestItems[playerid][i] = -1;
	}
	for (new i = 0; i != MAX_CONTACTS; i ++) {
	    ContactData[playerid][i][contactExists] = false;
	    ContactData[playerid][i][contactID] = 0;
	    ContactData[playerid][i][contactNumber] = 0;
	    ListedContacts[playerid][i] = -1;
	}
	for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) {
	    LocationData[playerid][i][locationExists] = false;
	    LocationData[playerid][i][locationID] = 0;
	}
	for (new i = 0; i != MAX_PLAYER_TICKETS; i ++) {
	    TicketData[playerid][i][ticketID] = 0;
		TicketData[playerid][i][ticketExists] = false;
		TicketData[playerid][i][ticketFee] = 0;
	}
	BoomboxData[playerid][boomboxPlaced] = 0;
	BoomboxData[playerid][boomboxPos][0] = 0.0;
	BoomboxData[playerid][boomboxPos][1] = 0.0;
	BoomboxData[playerid][boomboxPos][2] = 0.0;

	PlayerData[playerid][pID] = -1;
	PlayerData[playerid][pAccount] = 0;
	PlayerData[playerid][pLogged] = 0;
	PlayerData[playerid][pLoginAttempts] = 0;
	PlayerData[playerid][pCreated] = 0;
	PlayerData[playerid][pGender] = 1;
	PlayerData[playerid][pBirthdate][0] = 0;
	PlayerData[playerid][pOrigin][0] = 0;
	PlayerData[playerid][pSkin] = 98;
    PlayerData[playerid][pEditType] = 0;
	PlayerData[playerid][pEditObject] = 0;
	PlayerData[playerid][pUnableToRepair] = 0;
	PlayerData[playerid][pBChatDisabled] = 0;
	PlayerData[playerid][pAttachedGun1] = -1;
	PlayerData[playerid][pAttachedGun2] = -1;
	PlayerData[playerid][pAttachedGun3] = -1;
	PlayerData[playerid][pEditGun] = 0;
	PlayerData[playerid][pAttachedGun1Pos][0] = 0;
	PlayerData[playerid][pAttachedGun1Pos][1] = 0;
	PlayerData[playerid][pAttachedGun1Pos][2] = 0;
	PlayerData[playerid][pAttachedGun1Pos][3] = 0;
	PlayerData[playerid][pAttachedGun1Pos][4] = 0;
	PlayerData[playerid][pAttachedGun1Pos][5] = 0;
	PlayerData[playerid][pAttachedGun1Pos][6] = 0;
	PlayerData[playerid][pAttachedGun1Pos][7] = 0;
	PlayerData[playerid][pAttachedGun1Pos][8] = 0;
	PlayerData[playerid][pAttachedGun2Pos][0] = 0;
	PlayerData[playerid][pAttachedGun2Pos][1] = 0;
	PlayerData[playerid][pAttachedGun2Pos][2] = 0;
	PlayerData[playerid][pAttachedGun2Pos][3] = 0;
	PlayerData[playerid][pAttachedGun2Pos][4] = 0;
	PlayerData[playerid][pAttachedGun2Pos][5] = 0;
	PlayerData[playerid][pAttachedGun2Pos][6] = 0;
	PlayerData[playerid][pAttachedGun2Pos][7] = 0;
	PlayerData[playerid][pAttachedGun2Pos][8] = 0;
	PlayerData[playerid][pAttachedGun3Pos][0] = 0;
	PlayerData[playerid][pAttachedGun3Pos][1] = 0;
	PlayerData[playerid][pAttachedGun3Pos][2] = 0;
	PlayerData[playerid][pAttachedGun3Pos][3] = 0;
	PlayerData[playerid][pAttachedGun3Pos][4] = 0;
	PlayerData[playerid][pAttachedGun3Pos][5] = 0;
	PlayerData[playerid][pAttachedGun3Pos][6] = 0;
	PlayerData[playerid][pAttachedGun3Pos][7] = 0;
	PlayerData[playerid][pAttachedGun3Pos][8] = 0;
    PlayerData[playerid][pGlasses] = 0;
    PlayerData[playerid][pHat] = 0;
    PlayerData[playerid][pBandana] = 0;
    PlayerData[playerid][pPos] = 0.0;
    PlayerData[playerid][pInterior] = 0;
    PlayerData[playerid][pWorld] = 0;
    PlayerData[playerid][pCharacter] = 0;
    PlayerData[playerid][pKilled] = 0;
    PlayerData[playerid][pHospital] = -1;
    PlayerData[playerid][pHospitalInt] = -1;
    PlayerData[playerid][pHospitalTime] = 0;
    PlayerData[playerid][pRepairTime] = 0;
    PlayerData[playerid][pMoney] = 1000;
    PlayerData[playerid][pBankMoney] = 9000;
    PlayerData[playerid][pSpawnPoint] = 0;
    PlayerData[playerid][pSavings] = 0;
    PlayerData[playerid][pAdmin] = 0;
    PlayerData[playerid][pHelper] = 0;
	PlayerData[playerid][pPlayersAssisted] = 0;
	PlayerData[playerid][pCompliments] = 0;
    PlayerData[playerid][pAccent] = 0;
	PlayerData[playerid][pShowFooter] = 0;
	PlayerData[playerid][pReportTime] = 0;
	PlayerData[playerid][pHelpTime] = 0;
	PlayerData[playerid][pSpectator] = INVALID_PLAYER_ID;
	PlayerData[playerid][pJailTime] = 0;
	PlayerData[playerid][pKicked] = 0;
	PlayerData[playerid][pMuted] = 0;
	PlayerData[playerid][pSpamCount] = 0;
	PlayerData[playerid][pCommandCount] = 0;
	PlayerData[playerid][pDisplayStats] = 0;
	PlayerData[playerid][pToggleGlasses] = 0;
	PlayerData[playerid][pToggleHat] = 0;
	PlayerData[playerid][pToggleChatAnim] = 0;
	PlayerData[playerid][pToggleBandana] = 0;
	PlayerData[playerid][pToggleArmor] = 0;
    PlayerData[playerid][pLastShot] = INVALID_PLAYER_ID;
    PlayerData[playerid][pShotTime] = 0;
	PlayerData[playerid][pInventoryItem] = 0;
	PlayerData[playerid][pStorageItem] = 0;
	PlayerData[playerid][pStorageSelect] = 0;
	PlayerData[playerid][pProductModify] = 0;
	PlayerData[playerid][pDonator] = 0;
	PlayerData[playerid][pFightStyle] = 4;
	PlayerData[playerid][pHouse] = -1;
	PlayerData[playerid][pBusiness] = -1;
	PlayerData[playerid][pEntrance] = -1;
	PlayerData[playerid][pGasPump] = -1;
	PlayerData[playerid][pGasStation] = -1;
    PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pEditPump] = -1;
	PlayerData[playerid][pEditFurniture] = -1;
	PlayerData[playerid][pEditGate] = -1;
	PlayerData[playerid][pEditRack] = -1;
	PlayerData[playerid][pEditATM] = -1;
	PlayerData[playerid][pSelectFurniture] = 0;
	PlayerData[playerid][pRefill] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pRefillPrice] = 0;
	PlayerData[playerid][pHouseSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pHouseOffered] = -1;
	PlayerData[playerid][pHouseValue] = 0;
	PlayerData[playerid][pBusinessSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pBusinessOffered] = -1;
	PlayerData[playerid][pBusinessValue] = 0;
	PlayerData[playerid][pCarSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pCarOffered] = -1;
	PlayerData[playerid][pCarValue] = 0;
	PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pShakeType] = 0;
	PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFoodSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFoodType] = 0;
	PlayerData[playerid][pFoodPrice] = 0;
	PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFactionOffered] = -1;
	PlayerData[playerid][pLoanOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pLoanOffered] = -1;
	PlayerData[playerid][pPhone] = 0;
	PlayerData[playerid][pPhoneOff] = 0;
	PlayerData[playerid][pLottery] = 0;
	PlayerData[playerid][pLotteryB] = 0;
	PlayerData[playerid][pHunger] = 100;
	PlayerData[playerid][pThirst] = 100;
	PlayerData[playerid][pHungerTime] = 0;
	PlayerData[playerid][pThirstTime] = 0;
	PlayerData[playerid][pCooking] = 0;
	PlayerData[playerid][pCookingTime] = 0;
	PlayerData[playerid][pPlayingHours] = 0;
	PlayerData[playerid][pMinutes] = 0;
	PlayerData[playerid][pArmorStatus] = 0;
	PlayerData[playerid][pArmorShown] = 0;
	PlayerData[playerid][pClothesType] = 0;
	PlayerData[playerid][pDrivingTest] = 0;
	PlayerData[playerid][pBikeTest] = 0;
	PlayerData[playerid][pTruckTest] = 0;
	PlayerData[playerid][pTestStage] = 0;
	PlayerData[playerid][pTestWarns] = 0;
	PlayerData[playerid][pFurnitureType] = 0;
	gCurHoldingGun[playerid] = 0;
	PlayerData[playerid][pJob] = 0;
	PlayerData[playerid][pTaxiFee] = 0;
	PlayerData[playerid][pTaxiTime] = 0;
	PlayerData[playerid][pTaxiPlayer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pTaxiDuty] = 0;
	PlayerData[playerid][pFirstAid] = 0;
	PlayerData[playerid][pIncomingCall] = 0;
	PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
	PlayerData[playerid][pMining] = 0;
	PlayerData[playerid][pMineTime] = 0;
	PlayerData[playerid][pMineCount] = 0;
	PlayerData[playerid][pMinedRock] = 0;
	PlayerData[playerid][pCarryTrash] = 0;
	PlayerData[playerid][pCarryCrate] = -1;
	PlayerData[playerid][pCrafting] = 0;
	PlayerData[playerid][pOpeningCrate] = 0;
	PlayerData[playerid][pHarvesting] = 0;
	PlayerData[playerid][pFaction] = -1;
	PlayerData[playerid][pFactionID] = -1;
	PlayerData[playerid][pFactionRank] = 0;
	PlayerData[playerid][pFactionDivision] = 0;
	PlayerData[playerid][pFactionEdit] = -1;
	PlayerData[playerid][pSelectedSlot] = -1;
	PlayerData[playerid][pOnDuty] = 0;
	PlayerData[playerid][pTazer] = 0;
	PlayerData[playerid][pBackup] = 0;
	PlayerData[playerid][pBeanBag] = 0;
	PlayerData[playerid][pStunned] = 0;
	PlayerData[playerid][pCuffed] = 0;
    PlayerData[playerid][pDragged] = 0;
    PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	PlayerData[playerid][pPrisoned] = 0;
	PlayerData[playerid][pInjured] = 0;
	PlayerData[playerid][pWarrants] = 0;
    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pTrackTime] = 0;
	PlayerData[playerid][pCP] = 0;
	PlayerData[playerid][pBroadcast] = 0;
	PlayerData[playerid][pNewsGuest] = INVALID_PLAYER_ID;
	PlayerData[playerid][pMuteTime] = 0;
	PlayerData[playerid][pTransfer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pWaypoint] = 0;
	PlayerData[playerid][pWaypointPos][0] = 0.0;
	PlayerData[playerid][pWaypointPos][1] = 0.0;
	PlayerData[playerid][pWaypointPos][2] = 0.0;
	PlayerData[playerid][pFuelCan] = 0;
	PlayerData[playerid][pDisableOOC] = 0;
	PlayerData[playerid][pDisablePM] = 0;
	PlayerData[playerid][pDisableFaction] = 0;
	PlayerData[playerid][pDisableBC] = 0;
	PlayerData[playerid][pNameChange][0] = 0;
	PlayerData[playerid][pDrugTime] = 0;
	PlayerData[playerid][pDrugUsed] = 0;
	PlayerData[playerid][pFingerTime] = 0;
	PlayerData[playerid][pFingerItem] = 0;
	PlayerData[playerid][pWeapon] = 0;
	PlayerData[playerid][pBackpackLoot] = -1;
	PlayerData[playerid][pLastWeapon] = 0;
    PlayerData[playerid][pChannel] = 0;
    PlayerData[playerid][pChannel2] = 0;
    PlayerData[playerid][pChannel3] = 0;
    PlayerData[playerid][pChannel4] = 0;
	PlayerData[playerid][pEmergency] = 0;
	PlayerData[playerid][pEmergencyBoth] = 0;
	PlayerData[playerid][pDealerCallDrugs] = 0;
	PlayerData[playerid][pDealerCallGuns] = 0;
	PlayerData[playerid][pDealerCallMP] = 0;
	PlayerData[playerid][pDealerCallPP] = 0;
	PlayerData[playerid][pDealerCallSMGP] = 0;
	PlayerData[playerid][pDealerCallSP] = 0;
	PlayerData[playerid][pDealerCallRP] = 0;
	PlayerData[playerid][pDealerCallDP] = 0;
	PlayerData[playerid][pPlaceAd] = 0;
	PlayerData[playerid][pLoanAsk] = 0;
	PlayerData[playerid][pRangeBooth] = -1;
	PlayerData[playerid][pTargets] = 0;
	PlayerData[playerid][pTargetLevel] = 0;
	PlayerData[playerid][pVendorTime] = 0;
	PlayerData[playerid][pLoopAnim] = 0;
	PlayerData[playerid][pBoombox] = INVALID_PLAYER_ID;
	PlayerData[playerid][pTakeItems] = INVALID_PLAYER_ID;
 	PlayerData[playerid][pDrinkBar] = INVALID_PLAYER_BAR_ID;
	PlayerData[playerid][pSmokeBar] = INVALID_PLAYER_BAR_ID;
	PlayerData[playerid][pDrinking] = 0;
	PlayerData[playerid][pSmoking] = 0;
	PlayerData[playerid][pDrinkTime] = 0;
	PlayerData[playerid][pTaxiCalled] = 0;
	PlayerData[playerid][pMechanicCalled] = 0;
	PlayerData[playerid][pSpeedTime] = 0;
	PlayerData[playerid][pMarker] = 0;
	PlayerData[playerid][pBleeding] = 0;
	PlayerData[playerid][pBleedTime] = 0;
	PlayerData[playerid][pLoadType] = 0;
	PlayerData[playerid][pLoadCrate] = 0;
	PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pUnloading] = -1;
	PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pShipment] = -1;
	PlayerData[playerid][pDeliverShipment] = 0;
	PlayerData[playerid][pHoldWeapon] = 0;
	PlayerData[playerid][pUsedMagazine] = 0;
	PlayerData[playerid][pAdvertise][0] = 0;
	PlayerData[playerid][pFreeze] = 0;
	PlayerData[playerid][pTask] = 0;
    PlayerData[playerid][pBankTask] = 0;
    PlayerData[playerid][pStoreTask] = 0;
    PlayerData[playerid][pTestTask] = 0;
    PlayerData[playerid][pSorting] = -1;
    PlayerData[playerid][pSortCrate] = 0;
    PlayerData[playerid][pHUD] = 1;
    PlayerData[playerid][pAdminDuty] = 0;
    PlayerData[playerid][pSeekHelp] = 0;
    PlayerData[playerid][pMaskID] = random(90000) + 10000;
    PlayerData[playerid][pMaskOn] = 0;
    PlayerData[playerid][pFactionMod] = 0;
    PlayerData[playerid][pPropertyMod] = 0;
    PlayerData[playerid][pSwatMember] = 0;
    PlayerData[playerid][pClothes1] = -1;
    PlayerData[playerid][pClothes2] = -1;
    PlayerData[playerid][pClothes3] = -1;
    PlayerData[playerid][pCapacity] = 35;
    PlayerData[playerid][pPlayRadio] = 0;
    PlayerData[playerid][pGraffiti] = -1;
    PlayerData[playerid][pGraffitiTime] = 0;
    PlayerData[playerid][pGraffitiColor] = 0;
    PlayerData[playerid][pEditGraffiti] = -1;
    PlayerData[playerid][pAdminHide] = 0;
    PlayerData[playerid][pDetectorTime] = 0;
    PlayerData[playerid][pPicking] = 0;
    PlayerData[playerid][pPickCar] = -1;
	PlayerData[playerid][pPickTime] = 0;
    PlayerData[playerid][pNameTag] = Text3D:INVALID_3DTEXT_ID;
	PlayerData[playerid][pStealRadioTimer] = 0;

	TruckingCheck[playerid] = 0;

	StretcherLoaded[playerid] = false;
	UsingStretcher[playerid] = false;
	PatientID[playerid] = -1;
	MedicID[playerid] = -1;
	PatientID[playerid] = -1;
	Stretcher[playerid] = -1;
	Loaded2Stretcher[playerid] = false;
	StretcherSpawned[playerid] = false;

	ViewingMap[playerid] = false;

	ResetVariables(playerid);

    ResetWarnings(playerid);
}

ResetNameTag(playerid)
{
    foreach (new i : Player) {
		ShowPlayerNameTagForPlayer(i, playerid, 1);
	}
	if (IsValidDynamic3DTextLabel(PlayerData[playerid][pNameTag]))
	    DestroyDynamic3DTextLabel(PlayerData[playerid][pNameTag]);

    PlayerData[playerid][pNameTag] = Text3D:INVALID_3DTEXT_ID;
    return 1;
}

ResetWarnings(playerid)
{
    PlayerData[playerid][pWarnings] = 0;
   	PlayerData[playerid][pWarn1][0] = 0;
    PlayerData[playerid][pWarn2][0] = 0;
}

GetNumberOwner(number)
{
	foreach (new i : Player) if (PlayerData[i][pPhone] == number && Inventory_HasItem(i, "Cellphone")) {
		return i;
	}
	return INVALID_PLAYER_ID;
}

IsPlayerInsideTaxi(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (GetVehicleModel(vehicleid) == 420 || GetVehicleModel(vehicleid) == 438)
	{
	    foreach (new i : Player)
		{
			if ((i != playerid) && (PlayerData[i][pJob] == JOB_TAXI && PlayerData[i][pTaxiDuty] && GetPlayerState(i) == PLAYER_STATE_DRIVER) && GetPlayerVehicleID(i) == vehicleid)
				return 1;
		}
	}
	return 0;
}

/*
SelectCharacter(playerid, id)
{
	PlayerData[playerid][pCharacter] = id;

	if (!PlayerCharacters[playerid][id - 1][0])
	    return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Create Character", "Please enter the name of your new character below:\n\nWarning: Your name must be in the Firstname_Lastname format and not exceed 20 characters.", "Create", "Cancel");

	static
	    query[200];

	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][72], PlayerCharacters[playerid][id - 1]);

	format(query, sizeof(query), "SELECT `skin`, `Birthdate`, `Origin`, `CreateDate`, `LastLogin` FROM `characters` WHERE `chara` = '%s'", PlayerCharacters[playerid][id - 1]);
	mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_SHOW_CHARACTER);

	return 1;
}
*/

SelectCharacter(playerid, id)
{
	PlayerData[playerid][pCharacter] = id;

	if (!PlayerCharacters[playerid][id - 1][0])
	    return Dialog_Show(playerid, ForceToCharMenuDialog, DIALOG_STYLE_MSGBOX, "Create Character", "You must create a character on the UCP\n\n("SERVER_URL")", "Back", "");

	static
	    query[200];

	format(query, sizeof(query), "SELECT `skin`, `Birthdate`, `Origin`, `CreateDate`, `LastLogin` FROM `characters` WHERE `chara` = '%s'", PlayerCharacters[playerid][id - 1]);
	mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_SHOW_CHARACTER);

	return 1;
}

Dialog:ForceToCharMenuDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		ShowCharacterMenu(playerid);
	}
	if(!response)
	{
		ShowCharacterMenu(playerid);
	}
	return 1;
}


IsNumber(const str[])
{
	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if (i == 0 && str[0] == '-')
			continue;

	    else if (str[i] < '0' || str[i] > '9')
			return 0;
	}
	return 1;
}

ReturnWeaponName(weaponid)
{
	static
		name[32];

	GetWeaponName(weaponid, name, sizeof(name));

	if (!weaponid)
	    name = "None";

	else if (weaponid == 18)
	    name = "Molotov Cocktail";

	else if (weaponid == 44)
	    name = "Nightvision";

	else if (weaponid == 45)
	    name = "Infrared";

	return name;
}

ReturnVehicleModelName(model)
{
	new
	    name[32] = "None";

    if (model < 400 || model > 611)
	    return name;

	format(name, sizeof(name), g_arrVehicleNames[model - 400]);
	return name;
}

stock ReturnVehicleName(vehicleid)
{
	new
		model = GetVehicleModel(vehicleid),
		name[32] = "None";

    if (model < 400 || model > 611)
	    return name;

	format(name, sizeof(name), g_arrVehicleNames[model - 400]);
	return name;
}

GetVehicleModelByName(const name[])
{
	if (IsNumber(name) && (strval(name) >= 400 && strval(name) <= 611))
	    return strval(name);

	for (new i = 0; i < sizeof(g_arrVehicleNames); i ++)
	{
	    if (strfind(g_arrVehicleNames[i], name, true) != -1)
	    {
	        return i + 400;
		}
	}
	return 0;
}

GetVehicleDriver(vehicleid) {
	foreach (new i : Player) {
		if (GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicleid) return i;
	}
	return INVALID_PLAYER_ID;
}

stock IsWindowedVehicle(vehicleid)
{
	static const g_aWindowStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1,
	    1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1,
		1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
	new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aWindowStatus[modelid - 400]);
}

stock IsNewsVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 488, 582: return 1;
	}
	return 0;
}

stock IsHighCostRepair(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 411, 415, 429, 451, 506, 541, 580, 480, 403, 406, 444: return 1;
	}
	return 0;
}

stock IsMidCostRepair(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 470, 560, 562, 402, 408, 409, 431, 434, 477, 495, 565, 559, 587, 603: return 1;
	}
	return 0;
}

stock IsACruiser(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 523, 488, 548, 563, 427, 490, 528, 596..599, 426, 579, 416, 407, 601, 560, 405, 411, 428, 433, 470, 482, 497, 525, 541, 566, 415: return 1;
	}
	return 0;
}

stock IsADetectiveVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 560, 426, 507, 490: return 1;
	}
	return 0;
}

stock IsDoorVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475:
		    return 1;

		case 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536:
		    return 1;

		case 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
			return 1;
	}
	return 0;
}

stock IsAMotorbike(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 448, 461, 462, 463, 468, 471, 521, 522, 523, 581, 586: return 1;
	}
	return 0;
}

stock IsBicycle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 510, 509, 481: return 1;
	}
	return 0;
}

stock IsSpeedoVehicle(vehicleid)
{
	if (GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || GetVehicleModel(vehicleid) == 481 || !IsEngineVehicle(vehicleid)) {
	    return 0;
	}
	return 1;
}

stock IsLoadableVehicle(vehicleid)
{
	new modelid = GetVehicleModel(vehicleid);

	if (GetVehicleTrailer(vehicleid))
	    modelid = GetVehicleModel(GetVehicleTrailer(vehicleid));

	switch (modelid) {
	    case 400..609: return 1;
	}
	return 0;
}

stock IsCourierVehicle(vehid)
{
    switch (GetVehicleModel(vehid)) {
        case 413, 414, 422, 428, 440, 455, 456, 459, 478, 482, 498, 499, 554, 573, 609: return 1;
    }
    return 0;
}

stock GetMaxCrates(vehicleid)
{
	new crates;

	switch (GetVehicleModel(vehicleid)) {
	    case 414, 455, 456, 499, 498, 609: crates = 10;
		default: crates = 6;
	}
	return crates;
}

stock IsCrateInUse(crateid)
{
	if (CrateData[crateid][crateVehicle] != INVALID_VEHICLE_ID && IsValidVehicle(CrateData[crateid][crateVehicle])) {
	    return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pCarryCrate] == crateid && GetPlayerSpecialAction(i) == SPECIAL_ACTION_CARRY) {
	    return 1;
	}
	return 0;
}

stock GetVehicleCrates(vehicleid)
{
	if (!IsValidVehicle(vehicleid) || !IsLoadableVehicle(vehicleid))
		return 0;

	new crates;

	for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && CrateData[i][crateVehicle] == vehicleid) {
	    crates++;
	}
 	return crates;
}

stock IsABoat(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: return 1;
	}
	return 0;
}

stock IsABike(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 448, 461..463, 468, 521..523, 581, 586, 481, 509, 510: return 1;
	}
	return 0;
}

stock IsAPlane(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 460, 464, 476, 511, 512, 513, 519, 520, 553, 577, 592, 593: return 1;
	}
	return 0;
}

stock IsAHelicopter(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: return 1;
	}
	return 0;
}

stock IsEngineVehicle(vehicleid)
{
	static const g_aEngineStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
    new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aEngineStatus[modelid - 400]);
}

stock Float:GetPlayerSpeed(playerid)
{
	static Float:velocity[3];

	if (IsPlayerInAnyVehicle(playerid))
	    GetVehicleVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);
	else
	    GetPlayerVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);

	return floatsqroot((velocity[0] * velocity[0]) + (velocity[1] * velocity[1]) + (velocity[2] * velocity[2])) * 100.0;
}

stock ResetBombInfo(vehicleid)
{
	g_Bomb_Vehicles[vehicleid][bv_i_ArmedType] = 0;
	g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer] = 0;
	g_Bomb_Vehicles[vehicleid][bv_i_BombOwner] = 0;
	g_Bomb_Vehicles[vehicleid][bv_b_BombActivated] = false;
	g_Bomb_Vehicles[vehicleid][bv_b_BombDisarmed] = false;
}


stock CarBomb_OnVehicleStart(vehicleid)
{
	if(g_Bomb_Vehicles[vehicleid][bv_i_ArmedType] != VEHICLE_BOMB_TYPE_UNARMED && g_Bomb_Vehicles[vehicleid][bv_b_BombActivated] == false)
	{
		switch(g_Bomb_Vehicles[vehicleid][bv_i_ArmedType])
		{
			case VEHICLE_BOMB_TYPE_IGNITION:
			{
				BombActivated(vehicleid);
				return 1;
			}

			case VEHICLE_BOMB_TYPE_SPEED:
			{
				SetTimerEx("ArmSpeedBomb", g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer] * 1000, false, "d", vehicleid);
				return 1;
			}
		}
	}

	return 1;
}

stock GetGateByID(sqlid)
{
	for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateID] == sqlid)
	    return i;

	return -1;
}

stock GetHouseByID(sqlid)
{
	for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && HouseData[i][houseID] == sqlid)
	    return i;

	return -1;
}

stock GetBusinessByID(sqlid)
{
	for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizID] == sqlid)
	    return i;

	return -1;
}

stock GetEntranceByID(sqlid)
{
	for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceID] == sqlid)
	    return i;

	return -1;
}

stock GetElapsedTime(time, &hours, &minutes, &seconds)
{
	hours = 0;
	minutes = 0;
	seconds = 0;

	if (time >= 3600)
	{
		hours = (time / 3600);
		time -= (hours * 3600);
	}
	while (time >= 60)
	{
	    minutes++;
	    time -= 60;
	}
	return (seconds = time);
}

stock OnlineOnDatabase(playerid, value)
{
	new query[200], playername[40];

	GetPlayerName(playerid, playername, sizeof(playername));

	format(query, sizeof(query), "UPDATE `characters` SET `online` = '%d' WHERE `chara` = '%s'", value, playername);
	mysql_tquery(g_iHandle, query);

	return 1;
}

stock GetDuration(time)
{
	new
	    str[32];

	if (time < 0 || time == gettime()) {
	    format(str, sizeof(str), "Never");
	    return str;
	}
	else if (time < 60)
		format(str, sizeof(str), "%d seconds", time);

	else if (time >= 0 && time < 60)
		format(str, sizeof(str), "%d seconds", time);

	else if (time >= 60 && time < 3600)
		format(str, sizeof(str), (time >= 120) ? ("%d minutes") : ("%d minute"), time / 60);

	else if (time >= 3600 && time < 86400)
		format(str, sizeof(str), (time >= 7200) ? ("%d hours") : ("%d hour"), time / 3600);

	else if (time >= 86400 && time < 2592000)
 		format(str, sizeof(str), (time >= 172800) ? ("%d days") : ("%d day"), time / 86400);

	else if (time >= 2592000 && time < 31536000)
 		format(str, sizeof(str), (time >= 5184000) ? ("%d months") : ("%d month"), time / 2592000);

	else if (time >= 31536000)
		format(str, sizeof(str), (time >= 63072000) ? ("%d years") : ("%d year"), time / 31536000);

	strcat(str, " ago");

	return str;
}

stock GetEngineStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (engine != 1)
		return 0;

	return 1;
}

stock GetHoodStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (bonnet != 1)
		return 0;

	return 1;
}

stock GetTrunkStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (boot != 1)
		return 0;

	return 1;
}

stock GetLightStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (lights != 1)
		return 0;

	return 1;
}

stock SetEngineStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, status, lights, alarm, doors, bonnet, boot, objective);
}

stock SetLightStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, status, alarm, doors, bonnet, boot, objective);
}

stock SetTrunkStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, status, objective);
}

stock SetHoodStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, status, boot, objective);
}

public OnObjectMoved(objectid)
{
	for (new i = 0; i < MAX_BOOTHS; i ++) if (g_BoothUsed[i] && g_BoothObject[i] == objectid) {
	    DestroyObject(g_BoothObject[i]);

	    return SetTimerEx("UpdateBooth", 3000, false, "dd", Booth_GetPlayer(i), i);
	}
	return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	foreach(new i : Player)
	{
		if(PlayerData[i][pAdmin] >= 6)
		{
	    	Dialog_Show(i, ShowOnly, DIALOG_STYLE_MSGBOX, "[!] MySQL Alert", "Error: %s\n\nCallback %s\n\nQuery %s", "Ok", "", error, callback, query);
		}
	}
 	printf("[MySQL]: Error: %s\nCallback %s\nQuery %s", error, callback, query);
	return 1;
}

stock IsCorrectMail(mail[])
{
	new len = strlen(mail), bool:find[2], w;
 	if(!(6 < len < 129)) return false;
  	for___loop(new l; l < len; l++)
  	{
   		if(mail[l] == '.') find[0] = true;
     	if(mail[l] == '@')
      	{
       		if(find[1]) return false;
         	find[1] = true;
          	w = l;
           	if(w > 64) return false;
       	}
        if(!(mail[l] >= 'A' && mail[l] <= 'Z' || mail[l] >= 'a' && mail[l] <= 'z' || mail[l] >= '0' && mail[l] <= '9' || mail[l] == '.' || mail[l] == '-' || mail[l] == '_' || mail[l] == '@')) return false;
   	}
    if(len - w > 65) return false;
    if(!find[0] || !find[1]) return false;
    return true;
}

forward QueryEmailCheck(extraid);
public QueryEmailCheck(extraid)
{
	if(!IsPlayerConnected(extraid))
		return 0;

	new rows, fields, Email[200];

	cache_get_data(rows, fields, g_iHandle);
	cache_get_field_content(0, "email", Email, g_iHandle, 200);

	if(isnull(Email) == true)
	{
		Dialog_Show(extraid, EmailRegistration, DIALOG_STYLE_INPUT, "Email Registration", "A valid email is required for UCP integration.\n\n Enter your email below.", "Continue", "");
		return 1;
	}

	ShowCharacterMenu(extraid);

	return 1;
}

forward OnQueryFinished(extraid, threadid);
public OnQueryFinished(extraid, threadid)
{
	if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields
	;
	switch (threadid)
	{
	    case THREAD_CREATE_CHAR:
	    {
	        PlayerData[extraid][pID] = cache_insert_id(g_iHandle);
	        PlayerData[extraid][pLogged] = 1;

			SQL_SaveCharacter(extraid);

			PlayerData[extraid][pID] = -1;
			PlayerData[extraid][pLogged] = 0;
	    }
		case THREAD_CHECK_ACCOUNT:
		{
		    cache_get_data(rows, fields, g_iHandle);

		    if (rows)
			{
			    static
			        loginDate[36];

			    cache_get_row(0, 0, loginDate, g_iHandle);

				format(PlayerData[extraid][pLoginDate], 36, loginDate);
				// ShowLoginTD(extraid);
		        Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "Account Login", "Welcome back to Vice City Roleplay!\n\nPlease enter your password below to login to your account:", "Login", "Cancel", PlayerData[extraid][pLoginDate]);
			}
			else
			{
				SendClientMessage(extraid, COLOR_ANTICHEAT, "You must register a master account with the ucp ("SERVER_URL")");
			    Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Account Registration", "Welcome to Vice City County Roleplay, %s.\n\nYou must register a master account on our UCP. "SERVER_URL"", "Register", "Cancel", ReturnName(extraid));
				KickEx(extraid);
			}
    	}
    	case THREAD_LOGIN:
   		{
    	    cache_get_data(rows, fields, g_iHandle);

    	    if (!rows)
    	    {
    	        PlayerData[extraid][pLoginAttempts]++;

    	        if (PlayerData[extraid][pLoginAttempts] >= 3)
    	        {
    	            SendClientMessage(extraid, COLOR_LIGHTRED, "Notice: You have been kicked for using up your login attempts.");
    	            KickEx(extraid);
				}
				else
				{
    	        	Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "Account Login", "Welcome back to Vice City Roleplay!\n\nPlease enter your password below to login to your account:", "Login", "Cancel", PlayerData[extraid][pLoginDate]);
    	        	SendClientMessageEx(extraid, COLOR_LIGHTRED, "Notice: Incorrect password specified (%d/3 attempts).", PlayerData[extraid][pLoginAttempts]);
				}
			}
			else
			{
				static
					query[128];

				// Update the last login date.
                format(query, sizeof(query), "UPDATE `accounts` SET `IP` = '%s', `LoginDate` = '%s' WHERE `Username` = '%s'", ReturnIP(extraid), ReturnDate(), PlayerData[extraid][pUsername]);
				mysql_tquery(g_iHandle, query);

    			// Load the character data.
				format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Username` = '%s' LIMIT 3", PlayerData[extraid][pUsername]);
				mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_CHARACTERS);
			}
		}
		case THREAD_CHARACTERS:
		{
			cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows; i ++) {
			    cache_get_field_content(i, "chara", PlayerCharacters[extraid][i], g_iHandle, MAX_PLAYER_NAME);
		    }

			new query[128];

			format(query, sizeof(query), "SELECT * FROM `accounts` WHERE `username` = '%s'", PlayerData[extraid][pUsername]);
			mysql_tquery(g_iHandle, query, "QueryEmailCheck", "d", extraid);

			//ShowCharacterMenu(extraid);
		}
		case THREAD_LOAD_CHARACTER:
		{
		    static
		        string[128];

		    cache_get_data(rows, fields, g_iHandle);

			foreach (new i : Player)
			{
			    if (PlayerData[i][pCharacter] == PlayerData[extraid][pCharacter] && !strcmp(ReturnName(i), PlayerCharacters[extraid][PlayerData[extraid][pCharacter] - 1]) && i != extraid)
       			{
       			    ShowCharacterMenu(extraid);
				   	SendErrorMessage(extraid, "This character is already logged in.");
				}
			}

			switch (SetPlayerName(extraid, PlayerCharacters[extraid][PlayerData[extraid][pCharacter] - 1]))
			{
			    case -1: {
					SendClientMessageEx(extraid, COLOR_LIGHTRED, "Notice: Your character's name seems to be in use already.");
				}
				default:
				{
				    if (!rows) {
				        return 0;
					}
					static
					    query[128];

			        PlayerData[extraid][pID] = cache_get_field_int(0, "ID");
			        PlayerData[extraid][pCreated] = cache_get_field_int(0, "Created");
			        PlayerData[extraid][pGender] = cache_get_field_int(0, "Gender");

					cache_get_field_content(0, "Birthdate", PlayerData[extraid][pBirthdate], g_iHandle, 24);
			        cache_get_field_content(0, "Origin", PlayerData[extraid][pOrigin], g_iHandle, 32);

					PlayerData[extraid][pStealRadioTimer] = cache_get_field_int(0, "stealradioTimer");
			        PlayerData[extraid][pSkin] = cache_get_field_int(0, "skin");
			        PlayerData[extraid][pPos][0] = cache_get_field_float(0, "PosX");
			        PlayerData[extraid][pPos][1] = cache_get_field_float(0, "PosY");
			        PlayerData[extraid][pPos][2] = cache_get_field_float(0, "PosZ");
			        PlayerData[extraid][pPos][3] = cache_get_field_float(0, "PosA");
			        PlayerData[extraid][pHealth] = cache_get_field_float(0, "Health");
			        PlayerData[extraid][pInterior] = cache_get_field_int(0, "Interior");
			        PlayerData[extraid][pWorld] = cache_get_field_int(0, "World");
			        PlayerData[extraid][pHospital] = cache_get_field_int(0, "Hospital");
                    PlayerData[extraid][pHospitalInt] = cache_get_field_int(0, "HospitalInt");
			        PlayerData[extraid][pMoney] = cache_get_field_int(0, "Money");
			        PlayerData[extraid][pBankMoney] = cache_get_field_int(0, "BankMoney");
			        PlayerData[extraid][pOwnsBillboard] = cache_get_field_int(0, "OwnsBillboard");
					PlayerData[extraid][pSavings] = cache_get_field_int(0, "Savings");
			        // PlayerData[extraid][pAdmin] = cache_get_field_int(0, "Admin"); DO NOT LOAD HERE
			        // PlayerData[extraid][pHelper] = cache_get_field_int(0, "Helper"); DO NOT LOAD HERE
					PlayerData[extraid][pPlayersAssisted] = cache_get_field_int(0, "PlayersAssisted");
					PlayerData[extraid][pCompliments] = cache_get_field_int(0, "Complimented");
			        PlayerData[extraid][pAccent] = cache_get_field_int(0, "Accent");
			        PlayerData[extraid][pJailTime] = cache_get_field_int(0, "JailTime");
			        PlayerData[extraid][pMuted] = cache_get_field_int(0, "Muted");
			        PlayerData[extraid][pHouse] = cache_get_field_int(0, "House");
			        PlayerData[extraid][pBusiness] = cache_get_field_int(0, "Business");
			        PlayerData[extraid][pEntrance] = cache_get_field_int(0, "Entrance");
			        PlayerData[extraid][pPhone] = cache_get_field_int(0, "Phone");
			        PlayerData[extraid][pLottery] = cache_get_field_int(0, "Lottery");
			        PlayerData[extraid][pLottery] = cache_get_field_int(0, "LotteryB");
			        PlayerData[extraid][pHunger] = cache_get_field_int(0, "Hunger");
			        PlayerData[extraid][pThirst] = cache_get_field_int(0, "Thirst");
			        PlayerData[extraid][pPlayingHours] = cache_get_field_int(0, "PlayingHours");
			        PlayerData[extraid][pMinutes] = cache_get_field_int(0, "Minutes");
			        PlayerData[extraid][pArmorStatus] = cache_get_field_float(0, "ArmorStatus");
			        PlayerData[extraid][pJob] = cache_get_field_int(0, "Job");
			        PlayerData[extraid][pFactionID] = cache_get_field_int(0, "Faction");
			        PlayerData[extraid][pFactionRank] = cache_get_field_int(0, "FactionRank");
			        PlayerData[extraid][pFactionDivision] = cache_get_field_int(0, "FactionDivision");
			        PlayerData[extraid][pPrisoned] = cache_get_field_int(0, "Prisoned");
			        PlayerData[extraid][pInjured] = cache_get_field_int(0, "Injured");
			        PlayerData[extraid][pWarrants] = cache_get_field_int(0, "Warrants");
			        PlayerData[extraid][pChannel] = cache_get_field_int(0, "Channel");
			        PlayerData[extraid][pBleeding] = cache_get_field_int(0, "Bleeding");
			        PlayerData[extraid][pAdminHide] = cache_get_field_int(0, "AdminHide");
			        PlayerData[extraid][pWarnings] = cache_get_field_int(0, "Warnings");
			        PlayerData[extraid][pDonator] = cache_get_field_int(0, "Donator");
			        PlayerData[extraid][pFightStyle] = cache_get_field_int(0, "FightStyle");
			        PlayerData[extraid][pMaskID] = cache_get_field_int(0, "MaskID");
			        PlayerData[extraid][pFactionMod] = cache_get_field_int(0, "FactionMod");
					PlayerData[extraid][pPropertyMod] = cache_get_field_int(0, "PropertyMod");
			        PlayerData[extraid][pSwatMember] = cache_get_field_int(0, "SwatMember");
			        PlayerData[extraid][pClothes1] = cache_get_field_int(0, "Clothes1");
			        PlayerData[extraid][pClothes2] = cache_get_field_int(0, "Clothes2");
			        PlayerData[extraid][pClothes3] = cache_get_field_int(0, "Clothes3");
			        PlayerData[extraid][pCapacity] = cache_get_field_int(0, "Capacity");
			        PlayerData[extraid][pChannel2] = cache_get_field_int(0, "Channel2");
			        PlayerData[extraid][pChannel3] = cache_get_field_int(0, "Channel3");
			        PlayerData[extraid][pChannel4] = cache_get_field_int(0, "Channel4");
			        PlayerData[extraid][pSpawnPoint] = cache_get_field_int(0, "SpawnPoint");
					PlayerData[extraid][pCarLicense] = cache_get_field_int(0, "CarLicense");
					PlayerData[extraid][pTruckLicense] = cache_get_field_int(0, "TruckLicense");
					PlayerData[extraid][pBikeLicense] = cache_get_field_int(0, "MotorBikeLicense");
					PlayerData[extraid][pAirLicense] = cache_get_field_int(0, "AirplaneLicense");
					PlayerData[extraid][pHeliLicense] = cache_get_field_int(0, "HelicopterLicense");
					PlayerData[extraid][pWeaponLicense] = cache_get_field_int(0, "WeaponLicense");
					PlayerData[extraid][pToggleChatAnim] = cache_get_field_int(0, "ChatAnim");

					LoadDataFromMasterAccount(extraid);

					OnlineOnDatabase(extraid, 1);

					cache_get_field_content(0, "Warn1", PlayerData[extraid][pWarn1], g_iHandle, 32);
					cache_get_field_content(0, "Warn2", PlayerData[extraid][pWarn2], g_iHandle, 32);
					// cache_get_field_content(0, "ForumName", PlayerData[extraid][pForumName], g_iHandle, 32); // DO NOT LOAD HERE

			        for (new i = 0; i < 13; i ++) {
			            format(query, sizeof(query), "Gun%d", i + 1);
			            PlayerData[extraid][pGuns][i] = cache_get_field_int(0, query);

			            format(query, sizeof(query), "Ammo%d", i + 1);
			            PlayerData[extraid][pAmmo][i] = cache_get_field_int(0, query);
			        }
			        PlayerData[extraid][pGlasses] = cache_get_field_int(0, "Glasses");
					PlayerData[extraid][pHat] = cache_get_field_int(0, "Hat");
					PlayerData[extraid][pBandana] = cache_get_field_int(0, "Bandana");
					AccessoryInfo[extraid][5][0] = cache_get_field_int(0, "Slot5ObjID");
					AccessoryInfo[extraid][9][0] = cache_get_field_int(0, "Slot9ObjID");
					AccessoryInfo[extraid][5][1] = cache_get_field_int(0, "Slot5BoneID");
					AccessoryInfo[extraid][9][1] = cache_get_field_int(0, "Slot9BoneID");

					cache_get_field_content(0, "GlassesPos", string, g_iHandle);
					sscanf(string, "p<|>fffffffff", AccessoryData[extraid][0][0], AccessoryData[extraid][0][1], AccessoryData[extraid][0][2], AccessoryData[extraid][0][3], AccessoryData[extraid][0][4], AccessoryData[extraid][0][5], AccessoryData[extraid][0][6], AccessoryData[extraid][0][7], AccessoryData[extraid][0][8]);

					cache_get_field_content(0, "HatPos", string, g_iHandle);
					sscanf(string, "p<|>fffffffff", AccessoryData[extraid][1][0], AccessoryData[extraid][1][1], AccessoryData[extraid][1][2], AccessoryData[extraid][1][3], AccessoryData[extraid][1][4], AccessoryData[extraid][1][5], AccessoryData[extraid][1][6], AccessoryData[extraid][1][7], AccessoryData[extraid][1][8]);

					cache_get_field_content(0, "BandanaPos", string, g_iHandle);
					sscanf(string, "p<|>fffffffff", AccessoryData[extraid][2][0], AccessoryData[extraid][2][1], AccessoryData[extraid][2][2], AccessoryData[extraid][2][3], AccessoryData[extraid][2][4], AccessoryData[extraid][2][5], AccessoryData[extraid][2][6], AccessoryData[extraid][2][7], AccessoryData[extraid][2][8]);

					cache_get_field_content(0, "Slot5Pos", string, g_iHandle);
					sscanf(string, "p<|>fffffffff", AccessoryData[extraid][5][0], AccessoryData[extraid][5][1], AccessoryData[extraid][5][2], AccessoryData[extraid][5][3], AccessoryData[extraid][5][4], AccessoryData[extraid][5][5], AccessoryData[extraid][5][6], AccessoryData[extraid][5][7], AccessoryData[extraid][5][8]);

					cache_get_field_content(0, "Slot9Pos", string, g_iHandle);
					sscanf(string, "p<|>fffffffff", AccessoryData[extraid][9][0], AccessoryData[extraid][9][1], AccessoryData[extraid][9][2], AccessoryData[extraid][9][3], AccessoryData[extraid][9][4], AccessoryData[extraid][9][5], AccessoryData[extraid][9][6], AccessoryData[extraid][9][7], AccessoryData[extraid][9][8]);



					if (!PlayerData[extraid][pMaskID])
					    PlayerData[extraid][pMaskID] = random(90000) + 10000;

					if (!PlayerData[extraid][pCapacity])
					    PlayerData[extraid][pCapacity] = 35;

				    for (new i = 0; i < 81; i ++) {
				        if (i < 8 || (i >= 71 && i <= 80)) PlayerTextDrawHide(extraid, PlayerData[extraid][pTextdraws][i]);
					}
				    if (PlayerData[extraid][pAdmin] > 0)
				    {
				        SendAdminAction(extraid, "You have logged in as an Administrator rank: %s.", AdminRankName(extraid));
						if(PlayerData[extraid][pAdminHide] == 0) SendAdminAlert(COLOR_LIGHTRED, "[Admin]:{FFFFFF} %s %s just logged in.", AdminRankName(extraid), ReturnName(extraid, 0));
				    }
				    if (PlayerData[extraid][pHelper] > 0)
				    {
				        SendAdminAction(extraid, "You have logged in as Support Team rank: %s.", HelperRankName(extraid));
				    }
				    PlayerData[extraid][pLogged] = 1;

                    format(query, sizeof(query), "SELECT * FROM `inventory` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_INVENTORY);

                    format(query, sizeof(query), "SELECT * FROM `contacts` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_CONTACTS);

                    format(query, sizeof(query), "SELECT * FROM `tickets` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_TICKETS);

                    format(query, sizeof(query), "SELECT * FROM `gps` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_LOCATIONS);

                    if(PlayerData[extraid][pOwnsBillboard] == 0)
                    {
                        PlayerData[extraid][pOwnsBillboard] = -1;
					}
					if (PlayerData[extraid][pFactionID] != -1) {
					    PlayerData[extraid][pFaction] = GetFactionByID(PlayerData[extraid][pFactionID]);

					    if (PlayerData[extraid][pFaction] == -1) {
					        ResetFaction(extraid);
						}
					}
				    if (!PlayerData[extraid][pCreated])
				    {
				        new
				            str[48];


						HideLoginTD(extraid);
						format(str, sizeof(str), "~r~Name:~w~ %s", ReturnName(extraid));
				        PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][14], str);

				        for (new i = 11; i < 23; i ++) {
				            PlayerTextDrawShow(extraid, PlayerData[extraid][pTextdraws][i]);
						}
						PlayerData[extraid][pSkin] = 98;

						PlayerData[extraid][pOrigin][0] = '\0';
						PlayerData[extraid][pBirthdate][0] = '\0';

						SendServerMessage(extraid, "You are now required to fill in your ID card.");
						SetPlayerInterior(extraid, 3);

						SetPlayerPos(extraid, 364.958312, 173.570709, 990.610534);
						SetPlayerCameraPos(extraid, 364.958312, 173.570709, 1010.610534);
						SetPlayerCameraLookAt(extraid, 364.458343, 173.576049, 1010.389343);
				    }
				    else
				    {
        				SetSpawnInfo(extraid, 0, PlayerData[extraid][pSkin], PlayerData[extraid][pPos][0], PlayerData[extraid][pPos][1], PlayerData[extraid][pPos][2], 0.0, 0, 0, 0, 0, 0, 0);

				        TogglePlayerSpectating(extraid, 0);
				        TogglePlayerControllable(extraid, 0);
				        SetPlayerFightingStyle(extraid, PlayerData[extraid][pFightStyle]);

				        CancelSelectTextDraw(extraid);
				        SetTimerEx("SpawnTimer", 1000, false, "d", extraid);
					}
				}
			}
		}
		case THREAD_VERIFY_PASS:
		{
		    cache_get_data(rows, fields, g_iHandle);

		    if (rows)
				Dialog_Show(extraid, NewPass, DIALOG_STYLE_PASSWORD, "Enter New Password", "Please enter your new password below.\n\nNote: Please use a strong and safe password for additional security.", "Change", "Cancel");

			else
				SendErrorMessage(extraid, "You have entered an incorrect password.");
		}
		case THREAD_FIND_USERNAME:
		{
		    static
		        query[128];

			cache_get_data(rows, fields, g_iHandle);

			if (rows)
			{
				new
				    name[MAX_PLAYER_NAME + 1];

				cache_get_row(0, 0, name, g_iHandle);

				if (strcmp(name, PlayerData[extraid][pUsername], false) != 0)
				{
					format(PlayerData[extraid][pUsername], sizeof(name), name);
					SetPlayerName(extraid, name);
				}
		    }
		    format(query, sizeof(query), "SELECT `LoginDate` FROM `accounts` WHERE `Username` = '%s'", PlayerData[extraid][pUsername]);
			mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_CHECK_ACCOUNT);
		}
		case THREAD_LOAD_INVENTORY:
		{
		    static
		        name[32];

		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_INVENTORY; i ++) {
			    InventoryData[extraid][i][invExists] = true;
			    InventoryData[extraid][i][invID] = cache_get_field_int(i, "invID");
			    InventoryData[extraid][i][invModel] = cache_get_field_int(i, "invModel");
                InventoryData[extraid][i][invQuantity] = cache_get_field_int(i, "invQuantity");

				cache_get_field_content(i, "invItem", name, g_iHandle, sizeof(name));
				strpack(InventoryData[extraid][i][invItem], name, 32 char);
			}
		}
		case THREAD_LOAD_CONTACTS:
		{
		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_CONTACTS; i ++) {
				cache_get_field_content(i, "contactName", ContactData[extraid][i][contactName], g_iHandle, 32);

				ContactData[extraid][i][contactExists] = true;
			    ContactData[extraid][i][contactID] = cache_get_field_int(i, "contactID");
			    ContactData[extraid][i][contactNumber] = cache_get_field_int(i, "contactNumber");
			}
		}
		case THREAD_LOAD_LOCATIONS:
		{
		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_GPS_LOCATIONS; i ++) {
				cache_get_field_content(i, "locationName", LocationData[extraid][i][locationName], g_iHandle, 32);

				LocationData[extraid][i][locationExists] = true;
			    LocationData[extraid][i][locationID] = cache_get_field_int(i, "locationID");
			    LocationData[extraid][i][locationPos][0] = cache_get_field_float(i, "locationX");
			    LocationData[extraid][i][locationPos][1] = cache_get_field_float(i, "locationY");
			    LocationData[extraid][i][locationPos][2] = cache_get_field_float(i, "locationZ");
			}
		}
		case THREAD_LOAD_TICKETS:
		{
		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_PLAYER_TICKETS; i ++) {
				cache_get_field_content(i, "ticketReason", TicketData[extraid][i][ticketReason], g_iHandle, 64);
				cache_get_field_content(i, "ticketDate", TicketData[extraid][i][ticketDate], g_iHandle, 36);

				TicketData[extraid][i][ticketExists] = true;
			    TicketData[extraid][i][ticketID] = cache_get_field_int(i, "ticketID");
			    TicketData[extraid][i][ticketFee] = cache_get_field_int(i, "ticketFee");
			}
		}
		case THREAD_BAN_LOOKUP:
		{
		    new
		        reason[128],
				date[36],
				username[24];

		    cache_get_data(rows, fields, g_iHandle);

		    if (rows) {
		        cache_get_field_content(0, "username", username, g_iHandle);
		        cache_get_field_content(0, "Date", date, g_iHandle);
				cache_get_field_content(0, "Reason", reason, g_iHandle);
				new hours = cache_get_field_int(0, "TempHours");

				if(hours > 0)
				{
					Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Ban Notice", "Your IP is temporarily banned from the server.\n\nIP: %s\nDate: %s\nReason: %s\nHours: %d\n\nTo request a ban appeal, please visit our website and submit a ban appeal.", "Close", "", PlayerData[extraid][pIP], date, reason, hours);
					KickEx(extraid);
					return 1;
				}
				if (!strcmp(username, "null", true) || !username[0])
				{
				    Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Ban Notice", "Your IP is banned from this server.\n\nIP: %s\nDate: %s\nReason: %s\n\nTo request a ban appeal, please visit our website and submit a ban appeal.", "Close", "", PlayerData[extraid][pIP], date, reason);
					KickEx(extraid);
				}
				else
				{
				    Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Ban Notice", "You are banned from this server.\n\nUsername: %s\nDate: %s\nReason: %s\n\nTo request a ban appeal, please visit our website and submit a ban appeal.", "Close", "", PlayerData[extraid][pUsername], date, reason);
					KickEx(extraid);
				}
		    }
		}
		/*
		case THREAD_SHOW_CHARACTER:
		{
			cache_get_data(rows, fields, g_iHandle);

			if (rows)
			{
			    static
			        skin,
			        birthdate[16],
			        origin[32],
					string[128];

			    skin = cache_get_field_int(0, "skin");

				cache_get_field_content(0, "Birthdate", birthdate, g_iHandle);
				cache_get_field_content(0, "Origin", origin, g_iHandle);

				PlayerTextDrawSetPreviewModel(extraid, PlayerData[extraid][pTextdraws][73], skin);

				if (!strlen(birthdate)) {
				    birthdate = "Not Specified";
				}
				if (!strlen(origin)) {
				    origin = "Not Specified";
				}
				format(string, sizeof(string), "~b~DOB:~w~ %s", birthdate);
				PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][74], string);

				format(string, sizeof(string), "~b~Origin:~w~ %s", origin);
				PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][75], string);

				format(string, sizeof(string), "~b~Creation:~w~ %s", GetDuration(gettime() - cache_get_field_int(0, "CreateDate")));
				PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][76], string);

				format(string, sizeof(string), "~b~Played:~w~ %s", GetDuration(gettime() - cache_get_field_int(0, "LastLogin")));
				PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][77], string);

				for (new i = 0; i < 8; i ++) {
				    PlayerTextDrawHide(extraid, PlayerData[extraid][pTextdraws][i]);
				}
			    for (new i = 71; i < 81; i ++) {
			        PlayerTextDrawShow(extraid, PlayerData[extraid][pTextdraws][i]);
				}
			}
		}
		*/
		case THREAD_SHOW_CHARACTER:
		{
			cache_get_data(rows, fields, g_iHandle);

			if(rows)
			{
			    new skin, birthdate[16], origin[32], string[128];

			    skin = cache_get_field_int(0, "skin");
				cache_get_field_content(0, "Birthdate", birthdate, g_iHandle);
				cache_get_field_content(0, "Origin", origin, g_iHandle);

				if (!strlen(birthdate)) {
				    birthdate = "Not Specified";
				}
				if (!strlen(origin)) {
				    origin = "Not Specified";
				}

				new dialogtitle[60];
				format(dialogtitle, sizeof(dialogtitle), "Viewing: %s", PlayerCharacters[extraid][PlayerData[extraid][pCharacter]]);

				format(string, sizeof(string),
				"Skin ID: %i\nDOB: %s\nOrigin: %s\nCreated: %s\nLast Login %s\n"COL_GREEN"Select Character", skin, birthdate, origin, GetDuration(gettime() - cache_get_field_int(0, "CreateDate")), GetDuration(gettime() - cache_get_field_int(0, "LastLogin")));
				Dialog_Show(extraid, SpawnCharacter, DIALOG_STYLE_LIST, dialogtitle, string, "Back", "Select");
			}
		}
		case THREAD_LOAD_MASTERACCOUNT_DATA:
		{
			cache_get_data(rows, fields, g_iHandle);

			if(rows)
			{
				PlayerData[extraid][pAdmin] = cache_get_field_int(0, "Admin");
				PlayerData[extraid][pHelper] = cache_get_field_int(0, "Helper");
				cache_get_field_content(0, "ForumName", PlayerData[extraid][pForumName], g_iHandle, 32);
				printf("Admin Level: %i\n", PlayerData[extraid][pAdmin]);
				printf("Helper Level: %i\n", PlayerData[extraid][pHelper]);
				printf("Forum Name: %s\n", PlayerData[extraid][pForumName]);
			}
		}
	}
	return 1;
}

Dialog:SpawnCharacter(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
		ShowCharacterMenu(playerid);
	}
	else
	{
		if(listitem == 0)
		{
			SQL_LoadCharacter(playerid, PlayerData[playerid][pCharacter]);
			return 1;
		}
		if(listitem == 1)
		{
			SQL_LoadCharacter(playerid, PlayerData[playerid][pCharacter]);
			return 1;
		}
		if(listitem == 2)
		{
			SQL_LoadCharacter(playerid, PlayerData[playerid][pCharacter]);
			return 1;
		}
		if(listitem == 3)
		{
			SQL_LoadCharacter(playerid, PlayerData[playerid][pCharacter]);
			return 1;
		}
		if(listitem == 4)
		{
			SQL_LoadCharacter(playerid, PlayerData[playerid][pCharacter]);
			return 1;
		}
		if(listitem == 5)
		{
			SQL_LoadCharacter(playerid, PlayerData[playerid][pCharacter]);
			return 1;
		}
	}
	return 1;
}

forward LoadDataFromMasterAccount(extraid);
public LoadDataFromMasterAccount(extraid)
{
	new query[250];
	new name[MAX_PLAYER_NAME];
	GetPlayerName(extraid, name, sizeof(name));
	format(query, sizeof(query), "SELECT Admin, Helper, ForumName FROM accounts WHERE username = '%s'", SQL_ReturnEscaped(PlayerData[extraid][pUsername]));
	mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_MASTERACCOUNT_DATA);
	return 1;
}

forward OnCarOwnerMDCOwned(extraid, plate[], vmodel);
public OnCarOwnerMDCOwned(extraid, plate[], vmodel)
{
	if (GetFactionType(extraid) != FACTION_POLICE && GetFactionType(extraid) != FACTION_GOV)
	    return 0;

	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(extraid, "MDC ERR");

	new charname[40], string[1024], title[90];
	cache_get_field_content(0, "chara", charname);

	format(string, sizeof(string), "_______________________________________\n \n");
	format(string, sizeof(string), "%sVehicle Plate:\t\t%s\n", string, plate);
	format(string, sizeof(string), "%sVehicle Model:\t\t%s\n", string, ReturnVehicleModelName(vmodel));
	format(string, sizeof(string), "%sVehicle Owner:\t\t%s\n \n", string, charname);
	format(string, sizeof(string), "%s_______________________________________", string);

	format(title, sizeof(title), "Vehicle Information Search");

	Dialog_Show(extraid, MDCVehicleInfoResult, DIALOG_STYLE_MSGBOX, title, string, "Back", "");


	return 1;
}

forward OnCarOwnerMDC(extraid, plate[]);
public OnCarOwnerMDC(extraid, plate[])
{
	if (GetFactionType(extraid) != FACTION_POLICE && GetFactionType(extraid) != FACTION_GOV)
	    return 0;

	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(extraid, "Plate doesn't exist.");

	if(rows > 1)
		return SendErrorMessage(extraid, "MDC ERROR: More then one vehicle found matching plate. Contact admin.");

	static
		string[1024],
		title[90],
		//charactername[40],
		ownerstring[80] = "N/A",
		ownerpid,
		vPlate[15],
		carfaction,
		carjob,
		vmodel;

	ownerpid = cache_get_field_int(0, "carOwner");
	carfaction = cache_get_field_int(0, "carFaction");
	carjob = cache_get_field_int(0, "carJob");
	vmodel = cache_get_field_int(0, "carModel");
	cache_get_field_content(0, "carPlate", vPlate);

	if(ownerpid != 0)
	{
		new query[128];
		format(query, sizeof(query), "SELECT * FROM `characters` WHERE `ID` = '%d'", ownerpid);
		mysql_tquery(g_iHandle, query, "OnCarOwnerMDCOwned", "dsd", extraid, vPlate, vmodel);
		return 1;
	}

	if(carfaction != 0)
	{
		switch(carfaction)
		{
			case 1: ownerstring = "Vice City Police Dept.";
			case 2: ownerstring = "Vice City News Netowrk";
			case 3: ownerstring = "Fire Department";
			case 4: ownerstring = "Vice City Government";
			case 5: ownerstring = "Unidentified (gang)";
			case 6: ownerstring = "Security Faction";
		}
	}

	if(carjob != 0)
	{
		switch(carjob)
		{
			case 1: ownerstring = "Courier (job)";
			case 2: ownerstring = "Mechanic (job)";
			case 3: ownerstring = "Taxi (job)";
			case 4: ownerstring = "Underloader (job)";
			case 5: ownerstring = "Miner (job)";
			case 6: ownerstring = "Food Vendor (job)";
			case 7: ownerstring = "Sanitation (job)";
			case 8: ownerstring = "Sorting (job)";
			case 9: ownerstring = "Weapon Smuggle (job)";
			case 10: ownerstring = "Fishing (job)";
		}
	}


	format(string, sizeof(string), "_______________________________________\n \n");
	format(string, sizeof(string), "%sVehicle Plate:\t\t%s\n", string, vPlate);
	format(string, sizeof(string), "%sVehicle Model:\t\t%s\n", string, ReturnVehicleModelName(vmodel));
	format(string, sizeof(string), "%sVehicle Owner:\t\t%s\n \n", string, ownerstring);
	format(string, sizeof(string), "%s_______________________________________", string);

	format(title, sizeof(title), "Vehicle Information Search");

	Dialog_Show(extraid, MDCVehicleInfoResult, DIALOG_STYLE_MSGBOX, title, string, "Back", "");
	return 1;
}

forward OnViewCarInfo(extraid, vehid);
public OnViewCarInfo(extraid, vehid)
{
	if (GetFactionType(extraid) != FACTION_POLICE && GetFactionType(extraid) != FACTION_GOV)
	    return 0;

	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(extraid, "No results found for \"%d\".", vehid);

	static
		string[1024],
		title[100],
		ownerpid,
		carfaction,
		carjob,
		ownerstring[128];

	ownerpid = cache_get_field_int(0, "carOwner");
	carfaction = cache_get_field_int(0, "carFaction");
	carjob = cache_get_field_int(0, "carJob");

	if(ownerpid != 0)
	{
		new query[200];
		format(query, sizeof(query), "SELECT * FROM `characters` WHERE `ID` = '%d'", ownerpid);
		mysql_tquery(g_iHandle, query, "OnCarOwnerMDC", "dd", extraid, vehid);
		return 1;
	}


	if(carfaction != 0)
	{
		switch(carfaction)
		{
			case 1: ownerstring = "Vice City Police Dept.";
			case 2: ownerstring = "Vice City News Netowrk";
			case 3: ownerstring = "Fire Department";
			case 4: ownerstring = "Vice City Government";
			case 5: ownerstring = "Unidentified (gang)";
			case 6: ownerstring = "Security Faction";
		}
	}

	if(carjob != 0)
	{
		switch(carjob)
		{
			case 1: ownerstring = "Courier (job)";
			case 2: ownerstring = "Mechanic (job)";
			case 3: ownerstring = "Taxi (job)";
			case 4: ownerstring = "Underloader (job)";
			case 5: ownerstring = "Miner (job)";
			case 6: ownerstring = "Food Vendor (job)";
			case 7: ownerstring = "Sanitation (job)";
			case 8: ownerstring = "Sorting (job)";
			case 9: ownerstring = "Weapon Smuggle (job)";
			case 10: ownerstring = "Fishing (job)";
		}
	}

	if(CarData[vehid][carID] == 0) ownerstring = "carID was not loaded properly /carid - Cant find owner";

	format(string, sizeof(string), "________________________\n \n");
	format(string, sizeof(string), "%sVehicle ID:    %d\n", string, vehid);
	format(string, sizeof(string), "%sVehicle Model:        %s\n", string, ReturnVehicleName(vehid));
	format(string, sizeof(string), "%sVehicle Owner:        %s\n \n", string, ownerstring);
	format(string, sizeof(string), "%s________________________", string);

	format(title, sizeof(title), "Vehicle Information For: %d", vehid);

	Dialog_Show(extraid, VehicleInfoFacJob, DIALOG_STYLE_MSGBOX, title, string, "Back", "");
	return 1;
}

forward OnViewInfo(extraid, name[]);
public OnViewInfo(extraid, name[])
{
	if (GetFactionType(extraid) != FACTION_POLICE && GetFactionType(extraid) != FACTION_GOV)
	    return 0;

	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(extraid, "No results found for \"%s\".", name);

	static
		string[1024],
		title[100],
		charactername[40],
		genderint,
		genderstring[10],
		birthdate[36],
		phonenum,
		skin,
		carlic,
		carS[5],
		trucklic,
		truckS[5],
		bikelic,
		bikeS[5],
		airlic,
		airS[5],
		helilic,
		heliS[5],
		weplic,
		wepS[20];

	genderint = cache_get_field_int(0, "Gender");
	cache_get_field_content(0, "Birthdate", birthdate, g_iHandle);
	cache_get_field_content(0, "chara", charactername, g_iHandle);
	skin = cache_get_field_int(0, "skin");
	phonenum = cache_get_field_int(0, "Phone");
	carlic = cache_get_field_int(0, "CarLicense");
	trucklic = cache_get_field_int(0, "TruckLicense");
	bikelic = cache_get_field_int(0, "MotorBikeLicense");
	airlic = cache_get_field_int(0, "AirplaneLicense");
	helilic = cache_get_field_int(0, "HelicopterLicense");
	weplic = cache_get_field_int(0, "WeaponLicense");

	charactername[strfind(charactername, "_", false)] = ' ';

	if(genderint == 1) genderstring = "Male";
	if(genderint == 2) genderstring = "Female";
	if(carlic == 0) carS = "NO";
	if(carlic == 1) carS = "YES";
	if(trucklic == 0) truckS = "NO";
	if(trucklic == 1) truckS = "YES";
	if(bikelic == 0) bikeS = "NO";
	if(bikelic == 1) bikeS = "YES";
	if(airlic == 0) airS = "NO";
	if(airlic == 1) airS = "YES";
	if(helilic == 0) heliS = "NO";
	if(helilic == 1) heliS = "YES";
	if(weplic == 0) wepS = "NO";
	if(weplic == 1) wepS = "YES";

	format(string, sizeof(string), "_____________________________\n \n");
	format(string, sizeof(string), "%sFull Name:\t \t%s\n", string, charactername);
	format(string, sizeof(string), "%sDoB:\t \t \t%s\n", string, birthdate);
	format(string, sizeof(string), "%sGender:\t \t%s\n", string, genderstring);
	format(string, sizeof(string), "%sPhone Number:\t \t%d\n \n", string, phonenum);
	format(string, sizeof(string), "%sLicenses:\n", string);
	format(string, sizeof(string), "%s[%s] Drivers\n", string, carS);
	format(string, sizeof(string), "%s[%s] Motorcycle\n", string, bikeS);
	format(string, sizeof(string), "%s[%s] Truck\n", string, truckS);
	format(string, sizeof(string), "%s[%s] Airplane\n", string, airS);
	format(string, sizeof(string), "%s[%s] Helicopter\n", string, heliS);
	format(string, sizeof(string), "%s[%s] Firearms\n \n", string, wepS);
	format(string, sizeof(string), "%s_____________________________", string);

	format(title, sizeof(title), "Person: %s - (S:%d)", charactername, skin);

	Dialog_Show(extraid, MDCPersonalInfoResult, DIALOG_STYLE_MSGBOX, title, string, "Back", "");
	return 1;
}

forward OnViewCharges(extraid, name[]);
public OnViewCharges(extraid, name[])
{
	if (GetFactionType(extraid) != FACTION_POLICE && GetFactionType(extraid) != FACTION_GOV)
	    return 0;

	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(extraid, "No results found for charges on \"%s\".", name);

	static
	    string[1024],
		desc[128],
		date[36];

	string[0] = 0;

	for (new i = 0; i < rows; i ++) {
	    cache_get_field_content(i, "Description", desc, g_iHandle);
	    cache_get_field_content(i, "Date", date, g_iHandle);

	    format(string, sizeof(string), "%s%s (%s)\n", string, desc, date);
	}
	format(desc, sizeof(desc), "Charges: %s", name);
	Dialog_Show(extraid, ChargeList, DIALOG_STYLE_LIST, desc, string, "Close", "");
	return 1;
}

stock SetCameraData(playerid)
{
    SetPlayerPos(playerid, -1553.776367, 844.732299, 32.268722);

	SetPlayerCameraPos(playerid, 5524.316894, -1035.757080, 10.603099);

	SetPlayerCameraLookAt(playerid, 5524.316894, -1035.757080, 10.603099);
	return 1;
}

forward AccountCheck(playerid);
public AccountCheck(playerid)
{
    //SetPlayerPos(playerid, -1988.752075, -72.294998, 38.647026);
	//SetPlayerCameraPos(playerid, -1988.752075, -72.294998, 58.647026);
	//SetPlayerCameraLookAt(playerid, -2006.489868, -72.107597, 55.977474);

	SetCameraData(playerid);
	SQL_CheckAccount(playerid);
	return 1;
}

forward OnResolveUsername(extraid, character[]);
public OnResolveUsername(extraid, character[])
{
    new
		rows,
		fields,
		name[24];

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
 		return SendErrorMessage(extraid, "There is no account linked with the specified name.");

	cache_get_row(0, 0, name, g_iHandle);
	SendServerMessage(extraid, "%s's master account is: %s.", character, name);

	return 1;
}

forward OnLoginDate(extraid, username[]);
public OnLoginDate(extraid, username[])
{
    if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields,
	    date[36];

	cache_get_data(rows, fields, g_iHandle);

	if (rows) {
	    cache_get_row(0, 0, date, g_iHandle);

	    SendServerMessage(extraid, "%s's last login was on: %s.", username, date);
	}
	else {
	    SendErrorMessage(extraid, "Invalid username specified.");
	}
	return 1;
}

forward OnCarStorageAdd(carid, itemid);
public OnCarStorageAdd(carid, itemid)
{
	CarStorage[carid][itemid][cItemID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnStorageAdd(houseid, itemid);
public OnStorageAdd(houseid, itemid)
{
	HouseStorage[houseid][itemid][hItemID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnDealerCarCreated(bizid, slotid);
public OnDealerCarCreated(bizid, slotid)
{
	DealershipCars[bizid][slotid][vehID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnFurnitureCreated(furnitureid);
public OnFurnitureCreated(furnitureid)
{
	FurnitureData[furnitureid][furnitureID] = cache_insert_id(g_iHandle);
	Furniture_Save(furnitureid);
	return 1;
}

forward OnContactAdd(playerid, id);
public OnContactAdd(playerid, id)
{
	ContactData[playerid][id][contactID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnInventoryAdd(playerid, itemid);
public OnInventoryAdd(playerid, itemid)
{
	InventoryData[playerid][itemid][invID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnBanLookup(playerid, username[]);
public OnBanLookup(playerid, username[])
{
	if (!IsPlayerConnected(playerid))
	    return 0;

	static
	    rows,
	    fields,
	    reason[128],
	    date[36];

	cache_get_data(rows, fields, g_iHandle);

	if (rows) {
	    cache_get_field_content(0, "Reason", reason, g_iHandle);
	    cache_get_field_content(0, "Date", date, g_iHandle);

		SendServerMessage(playerid, "%s was banned on %s, reason: %s", username, date, reason);
	}
	else {
	    SendErrorMessage(playerid, "%s is not banned from this server.", username);
	}
	return 1;
}

forward OnVerifyNameChange(playerid, newname[]);
public OnVerifyNameChange(playerid, newname[])
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	    return SendErrorMessage(playerid, "The specified name \"%s\" is already in use.", newname);

	foreach (new i : Player) if (!strcmp(ReturnName(i), newname, true)) {
	    return SendErrorMessage(playerid, "The specified name \"%s\" is already in use.", newname);
	}
	format(PlayerData[playerid][pNameChange], 24, newname);

	SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s is requesting a name change to %s (use \"/acceptname\" or \"/declinename\").", ReturnName(playerid, 0), newname);
	SendServerMessage(playerid, "Your name change request was sent to the admins.");

	return 1;
}

forward OnDeleteCharacter(playerid, name[]);
public OnDeleteCharacter(playerid, name[])
{
	static
	    rows,
	    fields,
		query[128],
		id = -1;

    cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(playerid, "The character \"%s\" is not linked under any accounts.", name);

	if (cache_get_field_int(0, "Admin") > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "You are not authorized to delete a higher admin's character.");

	id = cache_get_field_int(0, "ID");

	if (id) {
	    format(query, sizeof(query), "DELETE FROM `contacts` WHERE `ID` = '%d'", id);
     	mysql_tquery(g_iHandle, query);

		format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d'", id);
  		mysql_tquery(g_iHandle, query);

		format(query, sizeof(query), "DELETE FROM `inventory` WHERE `ID` = '%d'", id);
		mysql_tquery(g_iHandle, query);

		format(query, sizeof(query), "DELETE FROM `tickets` WHERE `ID` = '%d'", id);
  		mysql_tquery(g_iHandle, query);

	    format(query, sizeof(query), "DELETE FROM `characters` WHERE `ID` = '%d'", id);
  		mysql_tquery(g_iHandle, query);

  		SendServerMessage(playerid, "You have deleted \"%s\" successfully.", name);
	}
	return 1;
}

forward OnDeleteAccount(playerid, name[]);
public OnDeleteAccount(playerid, name[])
{
	static
	    rows,
	    fields,
		id = -1;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(playerid, "The username \"%s\" doesn't exist.", name);

	static
	    query[128];

	for (new i = 0; i < rows; i ++)
	{
	    if ((id = cache_get_field_int(i, "ID")))
		{
	        format(query, sizeof(query), "DELETE FROM `contacts` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);

	        format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);

	        format(query, sizeof(query), "DELETE FROM `inventory` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);

            format(query, sizeof(query), "DELETE FROM `tickets` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);
		}
	}
	format(query, sizeof(query), "DELETE FROM `accounts` WHERE `Username` = '%s'", name);
    mysql_tquery(g_iHandle, query);

    format(query, sizeof(query), "DELETE FROM `characters` WHERE `Username` = '%s'", name);
    mysql_tquery(g_iHandle, query);

    SendServerMessage(playerid, "You have deleted \"%s\" from the database.", name);
    return 1;
}

forward OnNameChange(playerid, userid, newname[]);
public OnNameChange(playerid, userid, newname[])
{
	if (!IsPlayerConnected(playerid) || !IsPlayerConnected(userid))
	    return 0;

	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	    return SendErrorMessage(playerid, "The specified name \"%s\" is in use.", newname);

    new
		oldname[MAX_PLAYER_NAME];

	GetPlayerName(userid, oldname, sizeof(oldname));

	ChangeName(userid, newname);

    for (new i = 0, l = strlen(oldname); i != l; i ++) {
	    if (oldname[i] == '_') oldname[i] = ' ';
	}
	for (new i = 0, l = strlen(newname); i != l; i ++) {
	    if (newname[i] == '_') newname[i] = ' ';
	}
	SendServerMessage(playerid, "You have changed %s's name to %s.", oldname, newname);
	SendServerMessage(userid, "%s has changed your name to %s.", ReturnName(playerid, 0), newname);
	return 1;
}

forward OnTicketCreated(playerid, ticketid);
public OnTicketCreated(playerid, ticketid)
{
	TicketData[playerid][ticketid][ticketID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnRackCreated(rackid);
public OnRackCreated(rackid)
{
	if (rackid == -1 || !RackData[rackid][rackExists])
	    return 0;

	RackData[rackid][rackID] = cache_insert_id(g_iHandle);
	Rack_Save(rackid);

	return 1;
}

forward SafeSetPlayerPos(playerid, Float:x, Float:y, Float:z);
public SafeSetPlayerPos(playerid, Float:x, Float:y, Float:z)
{
	SetPlayerPos(playerid, x,y,z);
	return 1;
}

forward OnGateCreated(gateid);
public OnGateCreated(gateid)
{
	if (gateid == -1 || !GateData[gateid][gateExists])
	    return 0;

	GateData[gateid][gateID] = cache_insert_id(g_iHandle);
	Gate_Save(gateid);

	return 1;
}

forward OnBusinessCreated(bizid);
public OnBusinessCreated(bizid)
{
	if (bizid == -1 || !BusinessData[bizid][bizExists])
	    return 0;

	BusinessData[bizid][bizID] = cache_insert_id(g_iHandle);
	Business_Save(bizid);

	return 1;
}

forward OnEntranceCreated(entranceid);
public OnEntranceCreated(entranceid)
{
	if (entranceid == -1 || !EntranceData[entranceid][entranceExists])
	    return 0;

	EntranceData[entranceid][entranceID] = cache_insert_id(g_iHandle);
	EntranceData[entranceid][entranceWorld] = EntranceData[entranceid][entranceID] + 7000;

	Entrance_Save(entranceid);

	return 1;
}

forward OnCarCreated(carid);
public OnCarCreated(carid)
{
	if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	CarData[carid][carID] = cache_insert_id(g_iHandle);
	Car_Save(carid);

	return 1;
}

forward OnPumpCreated(pumpid);
public OnPumpCreated(pumpid)
{
    PumpData[pumpid][pumpID] = cache_insert_id(g_iHandle);
	Pump_Save(pumpid);

	return 1;
}

forward OnArrestCreated(arrestid);
public OnArrestCreated(arrestid)
{
	if (arrestid == -1 || !ArrestData[arrestid][arrestExists])
	    return 0;

	ArrestData[arrestid][arrestID] = cache_insert_id(g_iHandle);
	Arrest_Save(arrestid);

	return 1;
}

forward OnPlantCreated(plantid);
public OnPlantCreated(plantid)
{
	if (plantid == -1 || !PlantData[plantid][plantExists])
	    return 0;

	PlantData[plantid][plantID] = cache_insert_id(g_iHandle);
	Plant_Save(plantid);

	return 1;
}

forward OnCrateCreated(crateid);
public OnCrateCreated(crateid)
{
	if (crateid == -1 || !CrateData[crateid][crateExists])
	    return 0;

	CrateData[crateid][crateID] = cache_insert_id(g_iHandle);
	Crate_Save(crateid);

	return 1;
}

forward OnFactionCreated(factionid);
public OnFactionCreated(factionid)
{
	if (factionid == -1 || !FactionData[factionid][factionExists])
	    return 0;

	FactionData[factionid][factionID] = cache_insert_id(g_iHandle);

	Faction_Save(factionid);
	Faction_SaveRanks(factionid);
	Faction_SaveDivisions(factionid);

	return 1;
}

forward OnBackpackCreated(id);
public OnBackpackCreated(id)
{
	if (id == -1 || !BackpackData[id][backpackExists])
	    return 0;

	BackpackData[id][backpackID] = cache_insert_id(g_iHandle);
	Backpack_Save(id);

	return 1;
}

forward OnATMCreated(atmid);
public OnATMCreated(atmid)
{
    if (atmid == -1 || !ATMData[atmid][atmExists])
		return 0;

	ATMData[atmid][atmID] = cache_insert_id(g_iHandle);
 	ATM_Save(atmid);

	return 1;
}

forward OnImpoundCreated(impoundid);
public OnImpoundCreated(impoundid)
{
	if (impoundid == -1 || !ImpoundData[impoundid][impoundExists])
	    return 0;

	ImpoundData[impoundid][impoundID] = cache_insert_id(g_iHandle);
	Impound_Save(impoundid);

	return 1;
}

forward OnGraffitiCreated(id);
public OnGraffitiCreated(id)
{
	GraffitiData[id][graffitiID] = cache_insert_id(g_iHandle);
	Graffiti_Save(id);

	return 1;
}

forward OnAPBCreated(id);
public OnAPBCreated(id)
{
	APBData[id][apbID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnNinerCreated(id);
public OnNinerCreated(id)
{
	NinerData[id][ninerID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnDetectorCreated(id);
public OnDetectorCreated(id)
{
	MetalDetectors[id][detectorID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnGarbageCreated(garbageid);
public OnGarbageCreated(garbageid)
{
	if (garbageid == -1 || !GarbageData[garbageid][garbageExists])
	    return 0;

	GarbageData[garbageid][garbageID] = cache_insert_id(g_iHandle);
	Garbage_Save(garbageid);

	return 1;
}

forward OnVendorCreated(vendorid);
public OnVendorCreated(vendorid)
{
	if (vendorid == -1 || !VendorData[vendorid][vendorExists])
	    return 0;

	VendorData[vendorid][vendorID] = cache_insert_id(g_iHandle);
	Vendor_Save(vendorid);

	return 1;
}

forward OnSpeedCreated(speedid);
public OnSpeedCreated(speedid)
{
	if (speedid == -1 || !SpeedData[speedid][speedExists])
	    return 0;

	SpeedData[speedid][speedID] = cache_insert_id(g_iHandle);
	Speed_Save(speedid);

	return 1;
}

forward OnHouseCreated(houseid);
public OnHouseCreated(houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	HouseData[houseid][houseID] = cache_insert_id(g_iHandle);
	House_Save(houseid);

	return 1;
}

forward OnDroppedItem(itemid);
public OnDroppedItem(itemid)
{
	if (itemid == -1 || !DroppedItems[itemid][droppedModel])
	    return 0;

	DroppedItems[itemid][droppedID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnJobCreated(jobid);
public OnJobCreated(jobid)
{
	if (jobid == -1 || !JobData[jobid][jobExists])
	    return 0;

	JobData[jobid][jobID] = cache_insert_id(g_iHandle);
	Job_Save(jobid);

	return 1;
}

forward OnCharacterLookup(extraid, id, character[]);
public OnCharacterLookup(extraid, id, character[])
{
	if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields,
	    string[128];

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	{
	    static
	        admin,
	        skin,
	        createDate,
	        lastLogin;

		admin = cache_get_field_int(0, "Admin");
		skin = cache_get_field_int(0, "skin");

		createDate = cache_get_field_int(0, "CreateDate");
		lastLogin = cache_get_field_int(0, "LastLogin");

		format(string, sizeof(string), "~g~Name:~w~ %s~n~~g~Account:~w~ %s~n~~g~Created:~w~ %s~n~~g~Last Login:~w~ %s", character, (admin > 0) ? ("Admin") : ("Player"), GetDuration(gettime() - createDate), GetDuration(gettime() - lastLogin));
		PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][52], string);

		format(string, sizeof(string), "#%d: %s", id, character);
		PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][53], string);

		PlayerTextDrawSetPreviewModel(extraid, PlayerData[extraid][pTextdraws][54], skin);

		for (new i = 40; i < 58; i ++)
  		{
    		if (i >= 50)
      			PlayerTextDrawShow(extraid, PlayerData[extraid][pTextdraws][i]);

			else if (i < 50)
   				PlayerTextDrawHide(extraid, PlayerData[extraid][pTextdraws][i]);
   		}
		SelectTextDraw(extraid, -1);

		PlayerData[extraid][pDisplayStats] = 2;
		PlayerData[extraid][pCharacterMenu] = id;
	}
	return 1;
}

forward OnCharacterCheck(extraid, character[]);
public OnCharacterCheck(extraid, character[])
{
	if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields,
		query[150];


	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	{
	    Dialog_Show(extraid, CreateChar, DIALOG_STYLE_INPUT, "Create Character", "Error: The specified name \"%s\" is in use!\n\nPlease enter the name of your new character below:\n\nWarning: Your name must be in the Firstname_Lastname format and not exceed 24 characters.", "Create", "Cancel", character);
	}
	else
	{
		format(query, sizeof(query), "INSERT INTO `characters` (`Username`, `chara`, `CreateDate`) VALUES('%s', '%s', '%d')", PlayerData[extraid][pUsername], character, gettime());
		mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_CREATE_CHAR);

		format(PlayerCharacters[extraid][PlayerData[extraid][pCharacter] - 1], MAX_PLAYER_NAME + 1, character);
		SendServerMessage(extraid, "You have successfully created character \"%s\".", character);

		ShowCharacterMenu(extraid);
		PlayerData[extraid][pLogged] = 0;
	}
	return 1;
}

stock FlashTextDraw(playerid, PlayerText:textid, delay = 500)
{
	PlayerTextDrawHide(playerid, textid);

	SetTimerEx("FlashShowTextDraw", delay, false, "dd", playerid, _:textid);

	return 1;
}

stock FlashTextDrawEx(playerid, PlayerText:textid, amount = 1)
{
	PlayerTextDrawHide(playerid, textid);

	SetTimerEx("FlashShowTextDrawEx", 500, false, "ddd", playerid, _:textid, amount);

	return 1;
}

forward FlashShowTextDrawEx(playerid, PlayerText:textid, amount);
public FlashShowTextDrawEx(playerid, PlayerText:textid, amount)
{
    if ((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pCharacter] != 0 && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawned(playerid)) {
	    PlayerTextDrawShow(playerid, textid);

	    if (amount > 0) return SetTimerEx("HideTextDrawEx", 500, false, "ddd", playerid, _:textid, amount);
	}
	return 1;
}

forward HideTextDrawEx(playerid, PlayerText:textid, amount);
public HideTextDrawEx(playerid, PlayerText:textid, amount)
{
    if ((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pCharacter] != 0 && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawned(playerid)) {
	    PlayerTextDrawHide(playerid, textid);

	    if (amount > 0) return SetTimerEx("FlashShowTextDrawEx", 500, false, "ddd", playerid, _:textid, --amount);
	}
	return 1;
}

forward FlashShowTextDraw(playerid, PlayerText:textid);
public FlashShowTextDraw(playerid, PlayerText:textid)
{
	if ((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pCharacter] != 0 && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawned(playerid)) {
	    PlayerTextDrawShow(playerid, textid);
	}
	return 1;
}

stock RestartCheck()
{
	static
	    time[3],
		string[32];

	if (g_ServerRestart == 1 && !g_RestartTime)
	{
		foreach (new i : Player) {
		    SQL_SaveCharacter(i);
		    SetPlayerName(i, PlayerData[i][pUsername]);
		}
		SendRconCommand("gmx");
	}
	else if (g_ServerRestart == 1) {
		GetElapsedTime(g_RestartTime--, time[0], time[1], time[2]);

		format(string, 32, "~r~Server Restart:~w~ %02d:%02d", time[1], time[2]);
	    TextDrawSetString(gServerTextdraws[3], string);
	}
	return 1;
}

stock TotalledCheck()
{
	static
	    Float:fHealth;

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && GetVehicleHealth(i, fHealth) && fHealth < 300.0) {
		//if(fHealth == 0.0)
	    SetVehicleHealth(i, 300.0);
	    SetEngineStatus(i, false);
	}
	return 1;
}

forward MinuteCheck();
public MinuteCheck()
{
	static
	    Float:hp;

	for(new g; g < MAX_911_CALLS; g++) if (NinerData[g][ninerExists])
	{
		NinerData[g][ninerTimer]++;
		if(NinerData[g][ninerTimer] >= 60)
		{

			if(NinerData[g][ninerType] == NINER_POLICE)
			{
				for (new b = 0; b != MAX_FACTIONS; b ++) if (FactionData[b][factionType] == FACTION_POLICE)
				{
					SendFactionMessage(b, COLOR_RADIOCHAT, "[Dispatch]: A 911 call has went unanswered. (cid: %d)", NinerData[g][ninerID]);
				}
			}
			if(NinerData[g][ninerType] == NINER_MEDIC)
			{
				for (new b = 0; b != MAX_FACTIONS; b ++) if (FactionData[b][factionType] == FACTION_MEDIC)
				{
					SendFactionMessage(b, COLOR_HOSPITAL, "[Dispatch]: A 911 call has went unanswered. (cid: %d)", NinerData[g][ninerID]);
				}
			}
			if(NinerData[g][ninerType] == NINER_BOTH)
			{
				for (new b = 0; b != MAX_FACTIONS; b ++) if (FactionData[b][factionType] == FACTION_MEDIC)
				{
					SendFactionMessage(b, COLOR_HOSPITAL, "[Dispatch]: A 911 call has went unanswered. (cid: %d)", NinerData[g][ninerID]);
				}
				for (new b = 0; b != MAX_FACTIONS; b ++) if (FactionData[b][factionType] == FACTION_POLICE)
				{
					SendFactionMessage(b, COLOR_RADIOCHAT, "[Dispatch]: A 911 call has went unanswered. (cid: %d)", NinerData[g][ninerID]);
				}
			}
			Niner_Unans(g);
		}
	}


    foreach (new i : Player)
	{
	    if (!PlayerData[i][pLogged] && !PlayerData[i][pCharacter]) //&& !IsPlayerPause(i))
	        continue;

        PlayerData[i][pMinutes]++;

        if (PlayerData[i][pMinutes] >= 60)
       	{
       	    new paycheck = random(100) + 100;
       	    new govpaycheck = random(200) + 500;
       	    new privpay = random(100) + 300;
			new totalpaycheck;
			new Float:totaltax;
			new Float:taxpercent = floatdiv(PAYCHECK_TAX_PERCENT, 100);



			if(PlayerData[i][pFactionRank] >= 5) govpaycheck = govpaycheck + 200;
			if(PlayerData[i][pFactionRank] >= 8) govpaycheck = govpaycheck + 200;

        	PlayerData[i][pMinutes] = 0;

			PlayerData[i][pPlayingHours]++;

			if(PlayerData[i][pOwnsBillboard] >= 0)
			{
			    if(PlayerData[i][pBankMoney] >= BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice])
			    {
					totalpaycheck = paycheck;
					totaltax = floatmul(totalpaycheck, taxpercent);
					PlayerData[i][pBankMoney] -= floatround(totaltax, floatround_ceil);
					Tax_AddMoney(floatround(totaltax, floatround_ceil));

				    SendClientMessage(i, COLOR_ANTICHEAT, "-----------------------------------------------------------");
	         		SendClientMessageEx(i, COLOR_WHITE, "Your {33CC33}%s{FFFFFF} paycheck was added to your bank account.", FormatNumber(paycheck));
	         		SendClientMessageEx(i, COLOR_WHITE, "{33CC33}%s{FFFFFF} has been deducted from your bank account for billboard fees", FormatNumber(BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice]));
					SendClientMessageEx(i, COLOR_WHITE, "Total tax deducted from paycheck: {ff0000}$%d", floatround(totaltax, floatround_ceil));
					SendClientMessage(i, COLOR_ANTICHEAT, "-----------------------------------------------------------");
					PlayerData[i][pBankMoney] -= BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice];
					Tax_AddMoney(BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice]);
					PlayerData[i][pBankMoney] += paycheck;
					return 1;
				}
                if(PlayerData[i][pBankMoney] < BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice])
			    {
					totalpaycheck = paycheck;
					totaltax = floatmul(totalpaycheck, taxpercent);
					PlayerData[i][pBankMoney] -= floatround(totaltax, floatround_ceil);
					Tax_AddMoney(floatround(totaltax, floatround_ceil));

			        SendClientMessage(i, COLOR_ANTICHEAT, "-----------------------------------------------------------");
	         		SendClientMessageEx(i, COLOR_WHITE, "Your {33CC33}%s{FFFFFF} paycheck was added to your bank account.", FormatNumber(paycheck));
	         		SendClientMessageEx(i, COLOR_LIGHTRED, "You cannot afford to pay for your billboard anymore, therefor it has been unrented");
					SendClientMessageEx(i, COLOR_WHITE, "Total tax deducted from paycheck: {ff0000}$%d", floatround(totaltax, floatround_ceil));
					SendClientMessage(i, COLOR_ANTICHEAT, "-----------------------------------------------------------");
					BillBoardData[PlayerData[i][pOwnsBillboard]][bbOwner] = 0;
					Billboard_Save(PlayerData[i][pOwnsBillboard]);
					Billboard_Refresh(PlayerData[i][pOwnsBillboard]);
					PlayerData[i][pOwnsBillboard] = -1;
					PlayerData[i][pBankMoney] += paycheck;
				}
				return 1;
			}
			else if (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_NEWS || GetFactionType(i) == FACTION_GOV)
			{
				totalpaycheck = paycheck + govpaycheck;
				totaltax = floatmul(totalpaycheck, taxpercent);
				PlayerData[i][pBankMoney] -= floatround(totaltax, floatround_ceil);
				Tax_AddMoney(floatround(totaltax, floatround_ceil));
				Tax_AddMoney(-govpaycheck);

	         	SendClientMessage(i, COLOR_ANTICHEAT, "-----------------------------------------------------------");
	         	SendClientMessageEx(i, COLOR_WHITE, "Your {33CC33}%s{FFFFFF} paycheck was added to your bank account.", FormatNumber(paycheck));
	         	SendClientMessageEx(i, COLOR_WHITE, "Your government pay {33CC33}%s{FFFFFF} has also been added to your account.", FormatNumber(govpaycheck));
				SendClientMessageEx(i, COLOR_WHITE, "Total tax deducted from paycheck: {ff0000}$%d", floatround(totaltax, floatround_ceil));
				SendClientMessage(i, COLOR_ANTICHEAT, "-----------------------------------------------------------");
                PlayerData[i][pBankMoney] += paycheck;
                PlayerData[i][pBankMoney] += govpaycheck;

			}
			else if (GetFactionType(i) == FACTION_MEDIC)
			{
				new totalgovpay = govpaycheck + govpaycheck;
				totalpaycheck = paycheck + totalgovpay;
				totaltax = floatmul(totalpaycheck, taxpercent);
				PlayerData[i][pBankMoney] -= floatround(totaltax, floatround_ceil);
				Tax_AddMoney(floatround(totaltax, floatround_ceil));
				Tax_AddMoney(-totalgovpay);

	         	SendClientMessage(i, COLOR_ANTICHEAT, "-----------------------------------------------------------");
	         	SendClientMessageEx(i, COLOR_WHITE, "Your {33CC33}%s{FFFFFF} paycheck was added to your bank account.", FormatNumber(paycheck));
	         	SendClientMessageEx(i, COLOR_WHITE, "Your government pay {33CC33}%s{FFFFFF} has also been added to your account.", FormatNumber(totalgovpay));
				SendClientMessageEx(i, COLOR_WHITE, "Total tax deducted from paycheck: {ff0000}$%d", floatround(totaltax, floatround_ceil));
				SendClientMessage(i, COLOR_ANTICHEAT, "-----------------------------------------------------------");
                PlayerData[i][pBankMoney] += paycheck;
                PlayerData[i][pBankMoney] += totalgovpay;

			}
			else if(GetFactionType(i) == FACTION_GANG_DRUGS || GetFactionType(i) == FACTION_SECURITY || GetFactionType(i) == FACTION_GANG_GUNS)
			{
				totalpaycheck = paycheck + privpay;
				totaltax = floatmul(totalpaycheck, taxpercent);
				PlayerData[i][pBankMoney] -= floatround(totaltax, floatround_ceil);
				Tax_AddMoney(floatround(totaltax, floatround_ceil));

			    SendClientMessage(i, COLOR_ANTICHEAT, "-----------------------------------------------------------");
	         	SendClientMessageEx(i, COLOR_WHITE, "Your {33CC33}%s{FFFFFF} paycheck was added to your bank account.", FormatNumber(paycheck));
	         	SendClientMessageEx(i, COLOR_WHITE, "Your additional pay {33CC33}%s{FFFFFF} has also been added to your account.", FormatNumber(privpay));
				SendClientMessageEx(i, COLOR_WHITE, "Total tax deducted from paycheck: {ff0000}$%d", floatround(totaltax, floatround_ceil));
				SendClientMessage(i, COLOR_ANTICHEAT, "-----------------------------------------------------------");
	            PlayerData[i][pBankMoney] += paycheck;
	            PlayerData[i][pBankMoney] += privpay;
			}
			else
			{
				totalpaycheck = paycheck;
				totaltax = floatmul(totalpaycheck, taxpercent);
				PlayerData[i][pBankMoney] -= floatround(totaltax, floatround_ceil);
				Tax_AddMoney(floatround(totaltax, floatround_ceil));

				SendClientMessage(i, COLOR_ANTICHEAT, "-----------------------------------------------------------");
	         	SendClientMessageEx(i, COLOR_WHITE, "Your {33CC33}%s{FFFFFF} paycheck was added to your bank account.", FormatNumber(paycheck));
				SendClientMessageEx(i, COLOR_WHITE, "Total tax deducted from paycheck: {ff0000}$%d", floatround(totaltax, floatround_ceil));
				SendClientMessage(i, COLOR_ANTICHEAT, "-----------------------------------------------------------");
                PlayerData[i][pBankMoney] += paycheck;
			}
			return 1;
		}

		if (PlayerData[i][pInjured])
		{
		    GetPlayerHealth(i, hp);
		    SetPlayerHealth(i, hp - 20.0);
		}
	}
	for (new i = 0; i != MAX_DRUG_PLANTS; i ++) if (PlantData[i][plantExists] && PlantData[i][plantDrugs] < Plant_MaxGrams(PlantData[i][plantType])) {
	    PlantData[i][plantDrugs]++;

	    Plant_Refresh(i);
	    Plant_Save(i);
	}
	return 1;
}

forward PlayerUpdateXY();
public PlayerUpdateXY()
{
	static Float:x, Float:y, Float:z, xi, yi;
	new query[128];

	foreach (new i : Player)
	{
	    if (!PlayerData[i][pLogged] && !PlayerData[i][pCharacter])
	        continue;

		GetPlayerPos(i, x, y, z);
		xi = floatround(x, floatround_ceil);
		yi = floatround(y, floatround_ceil);
		format(query, sizeof(query), "UPDATE `characters` SET `GPcoordinates` = '%i:%i' WHERE `ID` = %i", xi, yi, PlayerData[i][pID]);
		mysql_tquery(g_iHandle, query);
	}

	return 1;
}



forward PlayerCheck();
public PlayerCheck()
{
	//static str[128], Float:health, id = -1;
	static str[128], id = -1;

	TotalledCheck();
	RestartCheck();

	foreach (new i : Player)
	{
	    if (!PlayerData[i][pLogged] && !PlayerData[i][pCharacter])
	        continue;

	    gCurHoldingGun[i] = GetPlayerWeapon(i);

		if(PlayerData[i][pStealRadioTimer] > 0)
			PlayerData[i][pStealRadioTimer] --;

		if(Loaded2Stretcher[i] == true && !IsPlayerConnected(MedicID[i]))
		{
			TogglePlayerControllable(i, 1);
			Loaded2Stretcher[i] = false;
			MedicID[i] = -1;
		}

		if (PlayerData[i][pWaypoint])
		{
			format(str, sizeof(str), "~b~Waypoint:~w~ %s (%.2f meters)", PlayerData[i][pLocation], GetPlayerDistanceFromPoint(i, PlayerData[i][pWaypointPos][0], PlayerData[i][pWaypointPos][1], PlayerData[i][pWaypointPos][2]));
			PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][69], str);
		}

		if (PlayerData[i][pMaskOn])
		{
			if (!PlayerData[i][pHideTags])
			{
				foreach (new g : Player) {
					ShowPlayerNameTagForPlayer(g, i, 0);
				}
				format(str, sizeof(str), "Mask_%d", PlayerData[i][pMaskID]);

				PlayerData[i][pHideTags] = 1;
				PlayerData[i][pNameTag] = CreateDynamic3DTextLabel(str, COLOR_WHITE, 0.0, 0.0, 0.2, 8.0, i, INVALID_VEHICLE_ID, 1, -1, -1);
			}
		}

		switch (PlayerData[i][pHouseLights])
		{
			case 0:
			{
				if ((id = House_Inside(i)) != -1 && !HouseData[id][houseLights])
				{
					PlayerData[i][pHouseLights] = true;
					PlayerTextDrawShow(i, PlayerData[i][pTextdraws][62]);
				}
				else PlayerTextDrawHide(i, PlayerData[i][pTextdraws][62]);
			}
			case 1:
			{
				if ((id = House_Inside(i)) == -1 || (id != -1 && HouseData[id][houseLights]))
				{
					PlayerData[i][pHouseLights] = false;
					PlayerTextDrawHide(i, PlayerData[i][pTextdraws][62]);
				}
			}
		}
		if (PlayerData[i][pDrinking] && GetPlayerSpecialAction(i) != SPECIAL_ACTION_DRINK_SPRUNK && !IsPlayerInAnyVehicle(i))
		{
			DestroyPlayerProgressBar(i, PlayerData[i][pDrinkBar]);
			PlayerData[i][pDrinking] = 0;
		}
		if (PlayerData[i][pSmoking] && GetPlayerSpecialAction(i) != SPECIAL_ACTION_SMOKE_CIGGY && !IsPlayerInAnyVehicle(i))
		{
			DestroyPlayerProgressBar(i, PlayerData[i][pSmokeBar]);
			PlayerData[i][pSmoking] = 0;
		}

		if (PlayerData[i][pMining] && !IsPlayerInRangeOfPoint(i, 50.0, 364.4101,848.4666,20.9380))
		{
			PlayerData[i][pMining] = false;
			PlayerData[i][pMineCount] = 0;

			RemovePlayerAttachedObject(i, 4);
			SendServerMessage(i, "You have left the mine. Your crowbar has been removed.");
		}

		if (GetPlayerMoney(i) != PlayerData[i][pMoney])
		{
			ResetPlayerMoney(i);
			GivePlayerMoney(i, PlayerData[i][pMoney]);
		}
		if (GetPlayerScore(i) != PlayerData[i][pPlayingHours])
		{
			SetPlayerScore(i, PlayerData[i][pPlayingHours]);
		}

		if(PlayerData[i][pChannel] == 911 && GetFactionType(i) != FACTION_POLICE)
		{
		    PlayerData[i][pChannel] = 0;
		}
		if (PlayerData[i][pPicking])
		{
			if ((id = PlayerData[i][pPickCar]) != -1)
			{
			    if (Car_Nearest(i) != id)
			    {
			        PlayerData[i][pPicking] = 0;
			        PlayerData[i][pPickCar] = -1;
			        PlayerData[i][pPickTime] = 0;
				}
				else
				{
				    PlayerData[i][pPickTime]++;

				    format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Picking... %d", 60 - PlayerData[i][pPickTime]);
					GameTextForPlayer(i, str, 1000, 3);

					if (PlayerData[i][pPickTime] >= 60)
					{
                        static
					        engine, lights, alarm, doors, bonnet, boot, objective;

	    				GetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
					    SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, 1, 0, bonnet, boot, objective);

						SetTimerEx("StopAlarm", 20000, false, "d", CarData[id][carVehicle]);

                        PlayerData[i][pPicking] = 0;
                        PlayerData[i][pPickCar] = -1;
                        PlayerData[i][pPickTime] = 0;

                        CarData[id][carLocked] = 0;
						Car_Save(id);

					    SendNearbyMessage(i, 30.0, COLOR_PURPLE, "* %s has picked the lock of the vehicle.", ReturnName(i, 0));
					    ShowPlayerFooter(i, "You have ~r~unlocked~w~ the vehicle!");
					    SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "[Dispatch]: All units, a %s has been stolen from %s. Responding units please advise.", ReturnVehicleName(CarData[id][carVehicle]), GetPlayerLocation(i));

					}
				}
		    }
		}
		if (!PlayerData[i][pKilled] && PlayerData[i][pHospital] != -1)
		{
			PlayerData[i][pHospitalTime]++;

			format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Recovering... %d", 15 - PlayerData[i][pHospitalTime]);
			GameTextForPlayer(i, str, 1000, 3);

			ApplyAnimation(i, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);

			if (PlayerData[i][pHospitalTime] >= 15)
			{
       			SetPlayerPos(i, -204.5867, -1740.7955, 675.7687);
			    SetPlayerFacingAngle(i, 0.0000);

			    TogglePlayerControllable(i, 1);
			    SetCameraBehindPlayer(i);

			    SetPlayerVirtualWorld(i, PlayerData[i][pHospital] + 5000);
			    SendServerMessage(i, "You have recovered at the nearest hospital.");

			    GameTextForPlayer(i, " ", 1, 3);

			    PlayerData[i][pHospitalInt] = PlayerData[i][pHospital];
			    PlayerData[i][pHospital] = -1;
			    PlayerData[i][pHospitalTime] = 0;
			}
		}
		else if (PlayerData[i][pMuted] && PlayerData[i][pMuteTime] > 0)
		{
		    PlayerData[i][pMuteTime]--;

		    if (!PlayerData[i][pMuteTime])
		    {
				PlayerData[i][pMuted] = 0;
				PlayerData[i][pMuteTime] = 0;
		    }
		}
		else if (PlayerData[i][pGraffiti] != -1 && PlayerData[i][pGraffitiTime] > 0)
		{
			if (Graffiti_Nearest(i) != PlayerData[i][pGraffiti])
			{
			    PlayerData[i][pGraffiti] = -1;
                PlayerData[i][pGraffitiTime] = 0;
			}
			else
			{
	            PlayerData[i][pGraffitiTime]--;

	            if (PlayerData[i][pGraffitiTime] < 1)
				{
				    strunpack(str, PlayerData[i][pGraffitiText]);
	                format(GraffitiData[PlayerData[i][pGraffiti]][graffitiText], 64, str);

				    GraffitiData[PlayerData[i][pGraffiti]][graffitiColor] = PlayerData[i][pGraffitiColor];

					Graffiti_Refresh(PlayerData[i][pGraffiti]);
				    Graffiti_Save(PlayerData[i][pGraffiti]);

				    ClearAnimations(i, 1);
					SendNearbyMessage(i, 30.0, COLOR_PURPLE, "* %s puts their can of spray paint away.", ReturnName(i, 0));

	                PlayerData[i][pGraffiti] = -1;
	                PlayerData[i][pGraffitiTime] = 0;
				}
			}
		}
		else if (PlayerData[i][pSpamCount] > 0)
		{
		    PlayerData[i][pSpamCount]--;
		}
		else if (PlayerData[i][pCommandCount] > 0)
		{
		    PlayerData[i][pCommandCount]--;
		}
		else if (PlayerData[i][pVendorTime] > 0)
		{
		    PlayerData[i][pVendorTime]--;
		}
		else if (PlayerData[i][pDrinkTime] > 0)
		{
		    PlayerData[i][pDrinkTime]--;
		}
		else if (PlayerData[i][pAdTime] > 0)
		{
		    PlayerData[i][pAdTime]--;
		}
		else if (PlayerData[i][pSpeedTime] > 0)
		{
		    PlayerData[i][pSpeedTime]--;
		}
		/*else if (PlayerData[i][pBleeding] && PlayerData[i][pBleedTime] > 0)
		{
		    if (--PlayerData[i][pBleedTime] == 0)
		    {
		        SetPlayerHealth(i, ReturnHealth(i) - 3.0);
			    PlayerData[i][pBleedTime] = 10;
				SendClientMessage(i, -1, "[debug]: bleeding");

			    //CreateBlood(i);
			    //SetTimerEx("HidePlayerBox", 500, false, "dd", i, _:ShowPlayerBox(i, 0xFF000066));
			}
		}*/
		else if (PlayerData[i][pFingerTime] > 0)
		{
		    PlayerData[i][pFingerTime]--;

		    if (!PlayerData[i][pFingerTime] && DroppedItems[PlayerData[i][pFingerItem]][droppedModel] && IsPlayerInRangeOfPoint(i, 1.5, DroppedItems[PlayerData[i][pFingerItem]][droppedPos][0], DroppedItems[PlayerData[i][pFingerItem]][droppedPos][1], DroppedItems[PlayerData[i][pFingerItem]][droppedPos][2]))
		    {
		        SendServerMessage(i, "The fingerprint scanner has detected a match: %s.", DroppedItems[PlayerData[i][pFingerItem]][droppedPlayer]);
                PlayerData[i][pFingerItem] = -1;
			}
		}
		else if (PlayerData[i][pDrugUsed] != 0 && PlayerData[i][pDrugTime] > 0)
		{
		    if (--PlayerData[i][pDrugTime] && 1 <= PlayerData[i][pDrugUsed] <= 3 && GetPlayerDrunkLevel(i) < 5000) {
		        SetPlayerDrunkLevel(i, 10000);

				PlayerTextDrawShow(i, PlayerData[i][pTextdraws][8]);

				if (PlayerData[i][pDrugUsed] == 3) {
				    SetPlayerWeather(i, -67);
				    SetPlayerTime(i, 12, 12); // Set the time (the drug weather is buggy at night)
				}
			}
			if (1 <= PlayerData[i][pDrugUsed] <= 3 && ReturnHealth(i) <= 95) {
		    	SetPlayerHealth(i, ReturnHealth(i) + 25);
			}
			if (!PlayerData[i][pDrugTime])
		    {
				SetPlayerTime(i, ServerTime[0], ServerTime[1]);

		        SetPlayerDrunkLevel(i, 500);
				PlayerTextDrawHide(i, PlayerData[i][pTextdraws][8]);

				PlayerData[i][pDrugUsed] = 0;
		        SendServerMessage(i, "The effects from the drugs have subsided. You might need a painkiller to reset any side effects caused by the drugs.");
		    }
		}
		else if (PlayerData[i][pStunned] > 0)
		{
            PlayerData[i][pStunned]--;

			if (GetPlayerAnimationIndex(i) != 388)
             ApplyAnimation(i, "CRACK", "crckdeth2", 4.1, 1, 0, 0, 0, 0, 1);

            if (!PlayerData[i][pStunned])
            {
                TogglePlayerControllable(i, 1);
                ShowPlayerFooter(i, "You are no longer ~r~stunned.");
			}
		}
		else if (PlayerData[i][pJailTime] > 0)
		{
		    static
		        hours,
		        minutes,
		        seconds;

		    PlayerData[i][pJailTime]--;

			GetElapsedTime(PlayerData[i][pJailTime], hours, minutes, seconds);

			format(str, sizeof(str), "~g~Prison Time:~w~ %02d:%02d:%02d", hours, minutes, seconds);
			PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][70], str);

		    if (!PlayerData[i][pJailTime])
		    {
		        PlayerData[i][pPrisoned] = 0;

		        SetDefaultSpawn(i);

				SendServerMessage(i, "You have been released from jail.");
		        PlayerTextDrawHide(i, PlayerData[i][pTextdraws][70]);
			}
		}
		else if (PlayerData[i][pTrackTime] > 0 && IsPlayerConnected(PlayerData[i][pMDCPlayer]) && GetFactionType(i) == FACTION_POLICE)
		{
		    PlayerData[i][pTrackTime]--;

		    if (!PlayerData[i][pTrackTime])
		    {
		        if ((id = House_Inside(PlayerData[i][pMDCPlayer])) != -1)
				{
				    PlayerData[i][pCP] = 1;

				    SetPlayerCheckpoint(i, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2], 3.0);
		            SendServerMessage(i, "%s's last reported location was at \"%s\" (marked on radar).", ReturnName(PlayerData[i][pMDCPlayer], 0), HouseData[id][houseAddress]);
		        }
		        else if ((id = Business_Inside(PlayerData[i][pMDCPlayer])) != -1)
		        {
		            PlayerData[i][pCP] = 1;

		            SetPlayerCheckpoint(i, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2], 3.0);
		            SendServerMessage(i, "%s's last reported location was at \"%s\" (marked on radar).", ReturnName(PlayerData[i][pMDCPlayer], 0), BusinessData[id][bizName]);
		        }
		        else if (GetPlayerInterior(PlayerData[i][pMDCPlayer]) == 0)
		        {
		            static
		                Float:fX,
		                Float:fY,
		                Float:fZ;

		            GetPlayerPos(PlayerData[i][pMDCPlayer], fX, fY, fZ);
		            PlayerData[i][pCP] = 1;

                    SetPlayerCheckpoint(i, fX, fY, fZ, 3.0);
		            SendServerMessage(i, "%s's last reported location was at \"%s\" (marked on radar).", ReturnName(PlayerData[i][pMDCPlayer], 0), GetLocation(fX, fY, fZ));
		        }
		        else
		        {
		            SendServerMessage(i, "Unable to locate %s; the target is out of range (inside an interior).", ReturnName(PlayerData[i][pMDCPlayer], 0));
				}
			}
		}
		else if (PlayerData[i][pCooking] && IsPlayerSpawned(i))
		{
		    PlayerData[i][pCookingTime]--;

		    if (House_Inside(i) == PlayerData[i][pCookingHouse])
		    {
			    format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~~h~Cooking...~w~ %d seconds", PlayerData[i][pCookingTime]);
			    GameTextForPlayer(i, str, 1200, 3);
			}
		    if (PlayerData[i][pCookingTime] < 1)
		    {
		        if (House_Inside(i) != PlayerData[i][pCookingHouse])
		        {
		            SendServerMessage(i, "You have left your food unattended and burned it.");
		        }
		        else
				{
					switch (PlayerData[i][pCooking])
		        	{
                    	case 1:
		            	{
		               	    id = Inventory_Add(i, "Cooked Burger", 2703, 1);

		               	    if (id == -1)
		               	        return SendErrorMessage(i, "You don't have any inventory slots left.");

		                	SendNearbyMessage(i, 30.0, COLOR_PURPLE, "** The microwave beeps, you can smell a burger! (( %s ))", ReturnName(i, 0));
		                	SendServerMessage(i, "The cooked burger was added to your inventory.");
		            	}
			            case 2:
			            {
			                id = Inventory_Add(i, "Cooked Pizza", 2702, 6);

			                if (id == -1)
		               	        return SendErrorMessage(i, "You don't have any inventory slots left.");

		    	            SendNearbyMessage(i, 30.0, COLOR_PURPLE, "** The oven beeps, you can smell pizza! (( %s ))", ReturnName(i, 0));
		    	            SendServerMessage(i, "The cooked pizza was added to your inventory.");
		        	    }
					}
				}
                PlayerData[i][pCooking] = 0;
                PlayerData[i][pCookingTime] = 0;
                PlayerData[i][pCookingHouse] = -1;
		    }
		}
		else if (PlayerData[i][pDrivingTest] && IsPlayerInVehicle(i, PlayerData[i][pTestCar]) || PlayerData[i][pBikeTest] && IsPlayerInVehicle(i, PlayerData[i][pTestCar]) || PlayerData[i][pTruckTest] && IsPlayerInVehicle(i, PlayerData[i][pTestCar]))
		{
		    if (!IsPlayerInRangeOfPoint(i, 200.0, g_arrDrivingCheckpoints[PlayerData[i][pTestStage]][0], g_arrDrivingCheckpoints[PlayerData[i][pTestStage]][1], g_arrDrivingCheckpoints[PlayerData[i][pTestStage]][2]))
			{
		        //CancelDrivingTest(i);
				//SendClientMessage(i, COLOR_LIGHTRED, "[Alert]:{FFFFFF} You have failed the test due to leaving the test area.");
    		}
			else if (GetPlayerSpeed(i) >= 60.0) //60.0 after testing purposes
   			{
				if (++PlayerData[i][pTestWarns] < 3)
				{
    				SendClientMessageEx(i, COLOR_LIGHTRED, "[Alert]:{FFFFFF} You are going too fast, slow down! (%d/3)", PlayerData[i][pTestWarns]);
        		}
	       		else
				{
    				CancelDrivingTest(i);
        			SendClientMessage(i, COLOR_LIGHTRED, "[Alert]:{FFFFFF} You have failed the test due to excessive speeding!");
			    }
			}
		}
		else if (IsPlayerInsideTaxi(i))
		{
		    PlayerData[i][pTaxiTime]++;

		    if (PlayerData[i][pTaxiTime] == 15)
		    {
		        PlayerData[i][pTaxiTime] = 0;
		        PlayerData[i][pTaxiFee] += 10;
		    }
		    format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~$%d...~w~ %d seconds", PlayerData[i][pTaxiFee], PlayerData[i][pTaxiTime]);

			GameTextForPlayer(i, str, 1100, 3);
			GameTextForPlayer(GetVehicleDriver(GetPlayerVehicleID(i)), str, 1100, 3);
		}
		if ((id = Boombox_Nearest(i)) != INVALID_PLAYER_ID && PlayerData[i][pBoombox] != id && strlen(BoomboxData[id][boomboxURL]) && !IsPlayerInAnyVehicle(i))
		{
		    strunpack(str, BoomboxData[id][boomboxURL]);
		    PlayerData[i][pBoombox] = id;

		    StopAudioStreamForPlayer(i);
		    PlayAudioStreamForPlayer(i, str, BoomboxData[id][boomboxPos][0], BoomboxData[id][boomboxPos][1], BoomboxData[id][boomboxPos][2], 30.0, 1);
		}
		else if (PlayerData[i][pBoombox] != INVALID_PLAYER_ID && !IsPlayerInRangeOfPoint(i, 30.0, BoomboxData[PlayerData[i][pBoombox]][boomboxPos][0], BoomboxData[PlayerData[i][pBoombox]][boomboxPos][1], BoomboxData[PlayerData[i][pBoombox]][boomboxPos][2]))
		{
		    PlayerData[i][pBoombox] = INVALID_PLAYER_ID;
		    StopAudioStreamForPlayer(i);
		}
		if (PlayerData[i][pInjured] == 1 && GetPlayerAnimationIndex(i) != 388)
		{
			ApplyAnimation(i, "CRACK", "crckdeth1", 4.1, 0, 0, 0, 1, 0, 1);
		}
        if (PlayerData[i][pHealthTime] > 0)
        {
            PlayerData[i][pHealthTime]--;
		}
		if (PlayerData[i][pRangeBooth] != -1 && !IsPlayerInRangeOfPoint(i, 3.0, arrBoothPositions[PlayerData[i][pRangeBooth]][0], arrBoothPositions[PlayerData[i][pRangeBooth]][1], arrBoothPositions[PlayerData[i][pRangeBooth]][2]))
		{
			Booth_Leave(i);
		}
		format(str, sizeof(str), "%d%c", PlayerData[i][pHunger], '%');
		PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][63], str);

		format(str, sizeof(str), "%d%c", PlayerData[i][pThirst], '%');
		PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][64], str);

		static keys[3];
		GetPlayerKeys(i, keys[0], keys[1], keys[2]);

		if (GetPlayerWeapon(i) == 42 && (keys[0] & KEY_FIRE))
		{
			static
				Float:fX,
				Float:fY,
				Float:fZ;

			for (new f = 0; f < sizeof(g_aFireObjects); f ++)
			{
				GetDynamicObjectPos(g_aFireObjects[f], fX, fY, fZ);

				if ((IsValidDynamicObject(g_aFireObjects[f]) && IsPlayerInRangeOfPoint(i, 6.0, fX, fY, fZ)) && ++ g_aFireExtinguished[f] == 3)
				{
					SetTimerEx("DestroyWater", 2000, false, "d", CreateDynamicObject(18744, fX, fY, fZ - 0.2, 0.0, 0.0, 0.0));

					DestroyDynamicObject(g_aFireObjects[f]);
					g_aFireExtinguished[f] = 0;
				}
			}
		}
		if ((keys[0] & KEY_FIRE) && (GetVehicleModel(GetPlayerVehicleID(i)) == 407 || GetVehicleModel(GetPlayerVehicleID(i)) == 544))
		{
			static
				Float:fX,
				Float:fY,
				Float:fZ,
				Float:fVector[3],
				Float:fCamera[3];

			GetPlayerCameraFrontVector(i, fVector[0], fVector[1], fVector[2]);
			GetPlayerCameraPos(i, fCamera[0], fCamera[1], fCamera[2]);

			for (new f = 0; f < sizeof(g_aFireObjects); f ++)
			{
				GetDynamicObjectPos(g_aFireObjects[f], fX, fY, fZ);

				if (IsValidDynamicObject(g_aFireObjects[f]) && IsPlayerInRangeOfPoint(i, 20.0, fX, fY, fZ))
				{
					if (++g_aFireExtinguished[f] == 5 && DistanceCameraTargetToLocation(fCamera[0], fCamera[1], fCamera[2], fX, fY, fZ + 2.5, fVector[0], fVector[1], fVector[2]) < 12.0)
					{
						SetTimerEx("DestroyWater", 2000, false, "d", CreateDynamicObject(18744, fX, fY, fZ - 0.2, 0.0, 0.0, 0.0));

						DestroyDynamicObject(g_aFireObjects[f]);
						g_aFireExtinguished[f] = 0;
					}
				}
			}
		}

	}
	return 1;
}

forward StopAlarm(vehicleid);
public StopAlarm(vehicleid)
{
	static
		engine, lights, alarm, doors, bonnet, boot, objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, engine, lights, 0, doors, bonnet, boot, objective);
	return 1;
}

forward UpdateTime();
public UpdateTime()
{
    static
        string[32];

    // Increment server time
    ServerTime[1] ++;
    ServerTime[1] ++;

    // Check if time needs to reset
    if(ServerTime[1] > 60)
    {
        ServerTime[0] ++;
        ServerTime[1] = 0;
    }
    if(ServerTime[0] > 24)
    {
        ServerTime[0] = 0;
    }

    if (ServerTime[0] >= 12)
        format(string, 32, "%02d:%02d PM", (ServerTime[0] == 12) ? (12) : (ServerTime[0] - 12), ServerTime[1]);

    else if (ServerTime[0] < 12)
        format(string, 32, "%02d:%02d AM", (ServerTime[0] == 0) ? (12) : (ServerTime[0]), ServerTime[1]);

    TextDrawSetString(gServerTextdraws[0], string);

    foreach (new i : Player) if (PlayerData[i][pDrugUsed] != 3) {
        SetPlayerTime(i, ServerTime[0], ServerTime[1]);
    }
    SetTimer("UpdateTime", 15000, false);
}

forward RefuelCheck();
public RefuelCheck()
{
	new
	    string[128];

	foreach (new i : Player)
	{
	    if (!PlayerData[i][pLogged] || PlayerData[i][pRefill] == INVALID_VEHICLE_ID)
	        continue;

        if (PlayerData[i][pRefill] != INVALID_VEHICLE_ID && PlayerData[i][pGasPump] != -1)
		{
		    PlayerData[i][pRefillPrice]++;

		    CoreVehicles[PlayerData[i][pRefill]][vehFuel] ++;
		    PumpData[PlayerData[i][pGasPump]][pumpFuel] --;

		    if (PumpData[PlayerData[i][pGasPump]][pumpExists])
			{
			    format(string, sizeof(string), "[Gas Pump: %d]\n{FFFFFF}Fuel Left: %d liters", PlayerData[i][pGasPump], PumpData[PlayerData[i][pGasPump]][pumpFuel]);
			    UpdateDynamic3DTextLabelText(PumpData[PlayerData[i][pGasPump]][pumpText3D], COLOR_DEPARTMENT, string);
			}
			if (CoreVehicles[PlayerData[i][pRefill]][vehFuel] >= 100 || GetEngineStatus(PlayerData[i][pRefill]) || !PumpData[PlayerData[i][pGasPump]][pumpExists] || PumpData[PlayerData[i][pGasPump]][pumpFuel] < 0)
			{
			    CoreVehicles[PlayerData[i][pRefill]][vehFuel] = 100;

				if(GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_GOV || GetFactionType(i) == FACTION_MEDIC)
				{
				    SendServerMessage(i, "Your fuel has been funded by the Government.");
			    }
			    else
			    {
			    	GiveMoney(i, -PlayerData[i][pRefillPrice]);
			    	SendServerMessage(i, "You have refilled your vehicle for $%d.", PlayerData[i][pRefillPrice]);
			    }

			    if (PumpData[PlayerData[i][pGasPump]][pumpExists])
				{
					if (PumpData[PlayerData[i][pGasPump]][pumpFuel] < 0)
						PumpData[PlayerData[i][pGasPump]][pumpFuel] = 0;

					new Float:vaultadd;

					vaultadd = floatmul(PlayerData[i][pRefillPrice], 0.05);

					floatround(vaultadd, floatround_ceil);

					BusinessData[PlayerData[i][pGasStation]][bizVault] += vaultadd;
					Business_Save(PlayerData[i][pGasStation]);

					Pump_Save(PlayerData[i][pGasPump]);
				}
				StopRefilling(i);
			}
		}
	}
	return 1;
}

forward FuelUpdate();
public FuelUpdate()
{
	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsEngineVehicle(i) && GetEngineStatus(i))
	{
	    if (CoreVehicles[i][vehFuel] > 0)
	    {
	        CoreVehicles[i][vehFuel]--;

			if (CoreVehicles[i][vehFuel] >= 1 && CoreVehicles[i][vehFuel] <= 5)
			{
			    SendClientMessage(GetVehicleDriver(i), COLOR_LIGHTRED, "[Alert]:{FFFFFF} This vehicle is low on fuel. You must visit a fuel station!");
			}
		}
		if (CoreVehicles[i][vehFuel] <= 0)
		{
		    CoreVehicles[i][vehFuel] = 0;
		    SetEngineStatus(i, false);
		}
	}
}

public OnVehicleDeath(vehicleid, killerid)
{
	if(GetVehicleModel(vehicleid) == 519)
    {
    	for___loop(new i=0; i<MAX_PLAYERS; i++)
		{
			if(IsInShml[i] != 0)
        	{
				SetPlayerHealth(i, 0);
				SendClientMessage(i, COLOR_RED, "The plane has crashed. Along with everyone else aboard the plane, you have died.");
			}
		}
	}
	if (CoreVehicles[vehicleid][vehTemporary])
	{
	    CoreVehicles[vehicleid][vehTemporary] = false;
	    DestroyVehicle(vehicleid);
	}

	new id = Car_GetID(vehicleid);

	if(id != -1)
	{
		if(CarData[id][carFaction] == 0 && CarData[id][carJob] == 0) CarData[id][carHP] = 300.0;

		for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && CrateData[i][crateVehicle] == id) {
			Crate_Delete(i);
		}
		Car_Spawn(id);
	}
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	SetVehicleColor(vehicleid, color1, color2);
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	SetVehiclePaintjob(vehicleid, paintjobid);
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	new
		id = Car_GetID(vehicleid),
		slot = GetVehicleComponentType(componentid);

	if (id != -1)
	{
	    CarData[id][carMods][slot] = componentid;
	    Car_Save(id);
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	vehiclecallsign[vehicleid] = 0;
    if (CoreVehicles[vehicleid][vehTemporary])
	{
	    CoreVehicles[vehicleid][vehTemporary] = false;
	    DestroyVehicle(vehicleid);
	}
    for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && CrateData[i][crateVehicle] == vehicleid) {
	    Crate_Delete(i);
	}
	if (IsValidObject(CoreVehicles[vehicleid][vehCrate]) && GetVehicleModel(vehicleid) == 530)
	    DestroyObject(CoreVehicles[vehicleid][vehCrate]);

	ResetVehicle(vehicleid);
	return 1;
}

public OnRconCommand(cmd[])
{
	new command[128], idx;
    command = strtok(cmd, idx);

    if(strcmp(command, "respawncars", true) == 0)
    {
        new count;

        for (new i = 1; i != MAX_VEHICLES; i ++)
        {
            if (IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID)
            {
                RespawnVehicle(i);
                count++;
            }
        }
        new str[128];
        format(str, sizeof(str), "A UCP Admin has respawned %d unoccupied vehicles.", count);
        SendClientMessageToAll(-1, str);
        return 1;
    }
    return 0;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	if(Dialog_Opened(playerid)) return 0;


	for (new i = 0; i < MAX_DYNAMIC_JOBS; i ++)
	{
		if(pickupid == JobData[i][jobPickups][0])
		{
			new jobid = Job_Nearest(playerid);

			if(PlayerData[playerid][pJob] == 0)
			{
				new string[180];
				format(string, sizeof(string), "Would you like to go on duty as a %s?", JobData[jobid][jobType]);
				Dialog_Show(playerid, JoinJob, DIALOG_STYLE_MSGBOX, Job_GetName(JobData[jobid][jobType]), string, "Yes", "Cancel");
			}
			else if(PlayerData[playerid][pJob] != 0)
			{
				Dialog_Show(playerid, LeaveJob, DIALOG_STYLE_MSGBOX, Job_GetName(JobData[jobid][jobType]), "Would you like to go off duty from your current job?", "Yes", "Cancel");
			}
		}
	}

	return 1;
}

Dialog:JoinJob(playerid, response, listitem, inputtext[])
{
	if(!response)
	{

	}
	else
	{
		cmd_debug_joinjob(playerid, "\1");
	}
	return 1;
}

Dialog:LeaveJob(playerid, response, listitem, inputtext[])
{
	if(!response)
	{

	}
	else
	{
		cmd_debug_leavejob(playerid, "\1");
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if (!success)
	{
	    foreach (new i : Player) if (!strcmp(PlayerData[i][pIP], ip, true) && PlayerData[i][pAdmin] < 6) {
	        Kick(i);
	    }
	    SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}RCON login attempt failed from \"%s\".", ip);
	}
	else
	{
	    foreach (new i : Player) if (!strcmp(PlayerData[i][pIP], ip, true) && PlayerData[i][pAdmin] < 6) {
	        Blacklist_Add(ip, PlayerData[i][pUsername], "Server", "Unauthorized RCON");

	        SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s was banned for logging into RCON without authorization.", ReturnName(i, 0));
			break;
		}
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
    if (PlayerData[playerid][pMaskOn])
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	else
	    ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);

	if(PlayerData[playerid][pBackup] == 1 && (GetFactionType(playerid) == FACTION_POLICE))
	{
		if(GetFactionType(forplayerid) == FACTION_POLICE)
		{
			SetPlayerMarkerForPlayer(forplayerid, playerid, 0xFFFFFFFF);
		}
	}
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	if(PlayerData[playerid][pBackup] == 1 && (GetFactionType(playerid) == FACTION_POLICE))
	{
		if(GetFactionType(forplayerid) == FACTION_POLICE)
		{
			SetPlayerMarkerForPlayer(forplayerid, playerid, 0xFFFFFFFF);
		}
	}
    return 1;
}

forward OnPlayerTeleport(playerid, Float:distance);
public OnPlayerTeleport(playerid, Float:distance)
{
	if(!PlayerData[playerid][pAdmin])
	{
    	SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has teleported approximately %0.2f from their last location, please spectate.", ReturnName(playerid, 0), distance);
	}
	return 1;
}

forward OnPlayerUseItem(playerid, itemid, name[]);
public OnPlayerUseItem(playerid, itemid, name[])
{
    if (IsFurnitureItem(name))
	{
        new id = House_Inside(playerid);

        if (id == -1)
            return SendErrorMessage(playerid, "You must be inside a house to place furniture.");

		if (!House_IsOwner(playerid, id))
		    return SendErrorMessage(playerid, "You can only place furniture in your own house.");

		static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, angle);

        x += 5.0 * floatsin(-angle, degrees);
        y += 5.0 * floatcos(-angle, degrees);

		if (Furniture_GetCount(id) > MAX_HOUSE_FURNITURE)
		    return SendErrorMessage(playerid, "You can only have %d furniture items in your house.", MAX_HOUSE_FURNITURE);

		new furniture = Furniture_Add(id, name, InventoryData[playerid][itemid][invModel], x, y, z, 0.0, 0.0, angle);

		if (furniture == -1)
		    return SendErrorMessage(playerid, "The server has reached the furniture limit.");

		Inventory_Remove(playerid, name);
		PlayerData[playerid][pEditFurniture] = furniture;

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has deployed their \"%s\".", ReturnName(playerid, 0), name);
		EditDynamicObject(playerid, FurnitureData[furniture][furnitureObject]);
	}
	else if (!strcmp(name, "Magazine", true)) {
	    cmd_usemag(playerid, "\1");
	}
	else if (!strcmp(name, "Boombox", true)) {
	    cmd_boombox(playerid, "place");
	}
	else if (!strcmp(name, "Backpack", true)) {
	    cmd_backpack(playerid, "\1");
	}
	else if (!strcmp(name, "First Aid", true)) {
        cmd_usekit(playerid, "\1");
    }
    else if (!strcmp(name, "Cellphone", true)) {
        cmd_phone(playerid, "\1");
    }
    else if (!strcmp(name, "Portable Radio", true)) {
        SendSyntaxMessage(playerid, "Use \"/r [text]\" to chat with your radio.");
    }
    else if (!strcmp(name, "Fuel Can", true)) {
        cmd_fill(playerid, "\1");
    }
    else if (!strcmp(name, "Repair Kit", true)) {
        cmd_repair(playerid, "\1");
    }
    else if (!strcmp(name, "NOS Canister", true)) {
        cmd_nitrous(playerid, "\1");
    }
    else if (!strcmp(name, "Spray Can", true)) {
        cmd_paint(playerid, "\1");
    }
    else if (!strcmp(name, "GPS System", true)) {
        cmd_gps(playerid, "\1");
    }
    else if (!strcmp(name, "Fishing Rod", true)) {
        cmd_fishing(playerid, "\1");
    }
    else if (!strcmp(name, "Bait", true)) {
        SendServerMessage(playerid, "You must use /fishing to use your bait at the fishing pier");
    }
    else if (!strcmp(name, "Marijuana", true)) {
        cmd_usedrug(playerid, "marijuana");
    }
    else if (!strcmp(name, "Cocaine", true)) {
        cmd_usedrug(playerid, "cocaine");
    }
    else if (!strcmp(name, "Heroin", true)) {
        cmd_usedrug(playerid, "heroin");
    }
    else if (!strcmp(name, "Steroids", true)) {
        cmd_usedrug(playerid, "steroids");
    }
    else if (!strcmp(name, "Soda", true)) {
        cmd_drink(playerid, "soda");
    }
    else if (!strcmp(name, "Cigar", true))
	{
    	if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
		    return SendErrorMessage(playerid, "You can't use this command now.");

		if (PlayerData[playerid][pSmoking])
		    return SendErrorMessage(playerid, "You are already smoking a cigarette.");

	    if (!Inventory_HasItem(playerid, "Cigar"))
	    	return SendErrorMessage(playerid, "You don't have any packs of cigarettes on you.");

	    PlayerData[playerid][pSmoking] = 1;
	    PlayerData[playerid][pSmokeBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);
	    ShowPlayerProgressBar(playerid, PlayerData[playerid][pSmokeBar]);

	    SetPlayerProgressBarValue(playerid, PlayerData[playerid][pSmokeBar], 100.0);
		Inventory_Remove(playerid, "Cigar");
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a cigarette from its pack and lights it up.", ReturnName(playerid, 0));
		ShowPlayerFooter(playerid, "Press ~y~LMB~w~ to take a puff.");
		return 1;
	}
	else if (!strcmp(name, "Painkiller", true))
	{
    	if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
		    return SendErrorMessage(playerid, "You can't use this command now.");

	    if (!Inventory_HasItem(playerid, "Painkiller"))
	    	return SendErrorMessage(playerid, "You don't have any painkillers on you.");

	    ApplyAnimation(playerid, "FOOD", "EAT_Chicken",4.1,0,1,1,0,0);
		SetPlayerWeather(playerid, 0);
		GivePlayerHealth(playerid, 15);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a pill and swallows it.", ReturnName(playerid, 0));
		ShowPlayerFooter(playerid, "Your health has been replenished by 15 percent.");
		return 1;
	}
    else if (!strcmp(name, "Water Bottle", true)) {
        cmd_drink(playerid, "water");
    }
    else if (!strcmp(name, "Frozen Pizza", true)) {
        cmd_cook(playerid, "pizza");
    }
    else if (!strcmp(name, "Frozen Burger", true)) {
        cmd_cook(playerid, "burger");
    }
    else if (!strcmp(name, "Armored Vest", true)) {
        cmd_vest(playerid, "\1");
    }
    else if (!strcmp(name, "Ammo Cartridge", true)) {
        cmd_ammo(playerid, "\1");
    }
    else if (!strcmp(name, "Colt 45", true)) {
        EquipWeapon(playerid, "Colt 45");
    }
    else if (!strcmp(name, "Glock-17", true)) {
        EquipWeapon(playerid, "Glock-17");
    }
    else if (!strcmp(name, "Shotgun", true)) {
        EquipWeapon(playerid, "Shotgun");
    }
    else if (!strcmp(name, "Micro SMG", true)) {
        EquipWeapon(playerid, "Micro SMG");
    }
    else if (!strcmp(name, "Tec-9", true)) {
        EquipWeapon(playerid, "Tec-9");
    }
    else if (!strcmp(name, "MP5", true)) {
        EquipWeapon(playerid, "MP5");
    }
    else if (!strcmp(name, "AK-47", true)) {
        EquipWeapon(playerid, "AK-47");
    }
    else if (!strcmp(name, "M4", true)) {
        EquipWeapon(playerid, "M4");
    }
    else if (!strcmp(name, "Rifle", true)) {
        EquipWeapon(playerid, "Rifle");
    }
    else if (!strcmp(name, "Sniper", true)) {
        EquipWeapon(playerid, "Sniper");
    }
    else if (!strcmp(name, "Golf Club", true)) {
        EquipWeapon(playerid, "Golf Club");
    }
    else if (!strcmp(name, "Knife", true)) {
        EquipWeapon(playerid, "Knife");
    }
	else if (!strcmp(name, "Pocket Knife", true)) {
        cmd_pocketknife(playerid, "Pocket Knife");
    }
    else if (!strcmp(name, "Shovel", true)) {
        EquipWeapon(playerid, "Shovel");
    }
    else if (!strcmp(name, "Katana", true)) {
        EquipWeapon(playerid, "Katana");
    }
    else if (!strcmp(name, "Marijuana Seeds", true)) {
        cmd_plant(playerid, "Weed");
    }
    else if (!strcmp(name, "Cocaine Seeds", true)) {
        cmd_plant(playerid, "Cocaine");
    }
    else if (!strcmp(name, "Heroin Opium Seeds", true)) {
        cmd_plant(playerid, "Heroin");
    }
    else if (!strcmp(name, "Crowbar", true)) {
        cmd_crowbar(playerid, "Crowbar");
    }
    else if (!strcmp(name, "Screwdriver", true)) {
        cmd_screwdriver(playerid, "Screwdriver");
    }
    else if (!strcmp(name, "Cooked Pizza", true))
	{
        if (PlayerData[playerid][pHunger] > 100)
            return SendErrorMessage(playerid, "You are not hungry right now.");

        if (!IsPlayerAttachedObjectSlotUsed(playerid, 4))
		{
		    SetPlayerAttachedObject(playerid, 4, 2702, 6, 0.173041, 0.049197, 0.056789, 0.000000, 274.166107, 299.057983, 1.000000, 1.000000, 1.000000);
			SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, 4);
		}
        PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 15 > 100) ? (100) : (PlayerData[playerid][pHunger] + 15);
		Inventory_Remove(playerid, "Cooked Pizza");

		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes a slice of pizza and eats it.", ReturnName(playerid, 0));
    }
    else if (!strcmp(name, "Cooked Burger", true))
	{
	    if (PlayerData[playerid][pHunger] > 99)
            return SendErrorMessage(playerid, "You are not hungry right now.");

		if (!IsPlayerAttachedObjectSlotUsed(playerid, 4))
		{
		    SetPlayerAttachedObject(playerid, 4, 2703, 6, 0.078287, 0.019677, -0.001004, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, 4);
		}
        PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 20 > 100) ? (100) : (PlayerData[playerid][pHunger] + 20);
		Inventory_Remove(playerid, "Cooked Burger");

		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes a cooked burger and eats it.", ReturnName(playerid, 0));
    }
    else if (!strcmp(name, "Chicken", true))
	{
	    if (PlayerData[playerid][pHunger] > 99)
            return SendErrorMessage(playerid, "You are not hungry right now.");

        PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 25 > 100) ? (100) : (PlayerData[playerid][pHunger] + 25);
		Inventory_Remove(playerid, "Chicken");

		ApplyAnimation(playerid, "VENDING", "VEND_Eat_P", 4.1, 0, 0, 0, 0, 0, 1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes a piece of chicken and eats it.", ReturnName(playerid, 0));
    }
    return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]] != weaponid)
 		return 0;

	if ((weaponid >= 22 && weaponid <= 38) && hittype == BULLET_HIT_TYPE_OBJECT && PlayerData[playerid][pRangeBooth] != -1 && hitid == g_BoothObject[PlayerData[playerid][pRangeBooth]])
 	{
 	    static
	        string[128];

		PlayerPlaySound(playerid, 6401, 0.0, 0.0, 0.0);

		PlayerData[playerid][pTargets]++;
		DestroyObject(g_BoothObject[PlayerData[playerid][pRangeBooth]]);

		format(string, sizeof(string), "~b~Targets:~w~ %d/10", PlayerData[playerid][pTargets]);
		PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][81], string);

		SetTimerEx("UpdateBooth", 3000, false, "dd", playerid, PlayerData[playerid][pRangeBooth]);
	}
	if (weaponid == 23 && PlayerData[playerid][pTazer] && GetFactionType(playerid) == FACTION_POLICE) {
	    PlayerPlaySoundEx(playerid, 6003);
	}
	if ((weaponid >= 22 && weaponid <= 38) && hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
	    if (PlayerData[hitid][pRangeBooth] != -1 || PlayerData[hitid][pHospital] != -1)
	        return 0;

		if (PlayerData[hitid][pDrugUsed] == 2)
		{
		    new
				Float:damage = floatdiv(g_arrWeaponDamage[weaponid], 2),
				Float:health;

		    GetPlayerHealth(hitid, health);
		    SetPlayerHealth(hitid, floatsub(health, damage));

		    return 0;
		}
	}
	if ((22 <= weaponid <= 38) && (GetPlayerWeaponState(playerid) == WEAPONSTATE_LAST_BULLET && GetPlayerAmmo(playerid) == 1) && !IsPlayerAttachedObjectSlotUsed(playerid, 4))
 	{
  		switch (weaponid) {
 	        case 22: Inventory_Add(playerid, "Colt 45", 346);
 	        case 24: Inventory_Add(playerid, "Glock-17", 348);
 	        case 25: Inventory_Add(playerid, "Shotgun", 349);
 	        case 28: Inventory_Add(playerid, "Micro SMG", 352);
 	        case 29: Inventory_Add(playerid, "MP5", 353);
 	        case 30: Inventory_Add(playerid, "AK-47", 355);
 	        case 31: Inventory_Add(playerid, "M4", 356);
 	        case 32: Inventory_Add(playerid, "Tec-9", 372);
 	        case 33: Inventory_Add(playerid, "Rifle", 357);
 	        case 34: Inventory_Add(playerid, "Sniper", 358);
		}
 	    ResetWeapon(playerid, weaponid);

 	    HoldWeapon(playerid, weaponid);
 	    SendServerMessage(playerid, "You must attach a magazine to this weapon (press 'N' to put away).");
	}
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
    new Float: health;
    new Float: armour;
    GetPlayerHealth(playerid, health);
    GetPlayerArmour(playerid, armour);

	floatround(armour, floatround_round);

	if(armour <= 5.0 && armour != 0.0)
	{
		armour = 0;
		SetPlayerArmour(playerid, 0);
	}
    //
    if (PlayerData[playerid][pFirstAid])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[Alert]:{FFFFFF} Your first aid kit is no longer in effect as you took damage.");

        PlayerData[playerid][pFirstAid] = 0;
		KillTimer(PlayerData[playerid][pAidTimer]);
	}
    //
    if(issuerid != INVALID_PLAYER_ID)
    {
        if(weaponid == 0)
        {
            switch(armour)
            {
                case 0:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 5); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 5); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 5);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 5); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 5);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 5); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 5); // Head.
                    }
                }
                case 1..300:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 5); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 5); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 5);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 5); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 5);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 5); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 5); // Head.
                    }
                }
            }
        }
        else if(weaponid == 3)
        {
            switch(armour)
            {
                case 0:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 8); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 8); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 8);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 8); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 8);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 8); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 8); // Head.
                    }
                }
                case 1..300:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, armour - 8); // Torso.
                        case 4: SetPlayerArmour(playerid, armour - 8); // Groin.
                        case 5: SetPlayerArmour(playerid, armour - 8);  // Left Arm.
                        case 6: SetPlayerArmour(playerid, armour - 8); // Right Arm.
                        case 7: SetPlayerArmour(playerid, armour - 8);  // Left Leg.
                        case 8: SetPlayerArmour(playerid, armour - 8); // Right Leg.
                        case 9: SetPlayerArmour(playerid, armour - 8); // Head.
                    }
                }
            }
        }
        else if(weaponid == 4)
        {
            switch(armour)
            {
                case 0:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 11); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 11); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 11);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 11); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 11);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 11); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 11); // Head.
                    }
                }
                case 1..300:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 11); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 11); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 11);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 11); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 11);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 11); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 11); // Head.
                    }
                }
            }
        }
        else if(weaponid == 5)
        {
            switch(armour)
            {
                case 0:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 11); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 11); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 11);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 11); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 11);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 11); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 11); // Head.
                    }
                }
                case 1..300:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 11); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 11); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 11);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 11); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 11);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 11); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 11); // Head.
                    }
                }
            }
        }
        else if(weaponid == 8)
        {
            switch(armour)
            {
                case 0:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 13); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 13); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 13);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 13); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 13);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 13); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 99); // Head.
                    }
                }
                case 1..300:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 13); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 13); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 13);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 13); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 13);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 13); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 99); // Head.
                    }
                }
            }
        }
        else if(weaponid == 22)
        {
            switch(armour)
            {
                case 0:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 15); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 15); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 15);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 15); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 15);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 15); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 45); // Head.
                    }
                }
                case 1..300:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, armour - 11); // Torso.
                        case 4: SetPlayerArmour(playerid, armour - 11); // Groin.
                        case 5: SetPlayerArmour(playerid, armour - 11);  // Left Arm.
                        case 6: SetPlayerArmour(playerid, armour - 11); // Right Arm.
                        case 7: SetPlayerArmour(playerid, armour - 11);  // Left Leg.
                        case 8: SetPlayerArmour(playerid, armour - 11); // Right Leg.
                        case 9: SetPlayerArmour(playerid, armour - 45); // Head.
                    }
                }
            }
        }
        else if(weaponid == 23)
        {
            switch(armour)
            {
                case 0:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 11); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 11); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 11);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 11); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 11);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 11); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 45); // Head.
                    }
                }
                case 1..300:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 11); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 11); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 11);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 11); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 11);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 11); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 45); // Head.
                    }
                }
            }
        }
        else if(weaponid == 24)
        {
            switch(armour)
            {
                case 0:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 25); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 20); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 10);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 10); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 10);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 10); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 50); // Head.
                    }
                }
                case 1..300:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, armour - 13); // Torso.
                        case 4: SetPlayerArmour(playerid, armour - 10); // Groin.
                        case 5: SetPlayerArmour(playerid, armour - 5);  // Left Arm.
                        case 6: SetPlayerArmour(playerid, armour - 5); // Right Arm.
                        case 7: SetPlayerArmour(playerid, armour - 5);  // Left Leg.
                        case 8: SetPlayerArmour(playerid, armour - 5); // Right Leg.
                        case 9: SetPlayerArmour(playerid, armour - 25); // Head.
                    }
                }
            }
        }
        else if(weaponid == 24)
        {
            switch(armour)
            {
                case 0:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 30); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 20); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 15);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 15); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 15);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 15); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 60); // Head.
                    }
                }
                case 1..300:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, armour - 15); // Torso.
                        case 4: SetPlayerArmour(playerid, armour - 10); // Groin.
                        case 5: SetPlayerArmour(playerid, armour - 8);  // Left Arm.
                        case 6: SetPlayerArmour(playerid, armour - 8); // Right Arm.
                        case 7: SetPlayerArmour(playerid, armour - 8);  // Left Leg.
                        case 8: SetPlayerArmour(playerid, armour - 8); // Right Leg.
                        case 9: SetPlayerArmour(playerid, armour - 40); // Head.
                    }
                }
            }
        }
        else if(weaponid == 25)
        {
            switch(armour) // Creates a switch that switches through the armour float, and checks the value.
            {
                case 0: // If the value is 0, the codes underneath will activate.
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 40); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 20); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 15);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 15); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 15);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 15); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 60); // Head.
                    }
                }
                case 1..300: // Otherwise the codes underneath will activate.
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, armour - 20); // Torso.
                        case 4: SetPlayerArmour(playerid, armour - 10); // Groin.
                        case 5: SetPlayerArmour(playerid, armour - 7);  // Left Arm.
                        case 6: SetPlayerArmour(playerid, armour - 7); // Right Arm.
                        case 7: SetPlayerArmour(playerid, armour - 7);  // Left Leg.
                        case 8: SetPlayerArmour(playerid, armour - 7); // Right Leg.
                        case 9: SetPlayerArmour(playerid, armour - 50); // Head.
                    }
                }
            }
        }
        else if(weaponid == 29)
        {
            switch(armour)
            {
                case 0:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 15); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 10); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 10);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 10); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 10);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 10); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 50); // Head.
                    }
                }
                case 1..300:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, armour - 10); // Torso.
                        case 4: SetPlayerArmour(playerid, armour - 10); // Groin.
                        case 5: SetPlayerArmour(playerid, armour - 5);  // Left Arm.
                        case 6: SetPlayerArmour(playerid, armour - 5); // Right Arm.
                        case 7: SetPlayerArmour(playerid, armour - 5);  // Left Leg.
                        case 8: SetPlayerArmour(playerid, armour - 5); // Right Leg.
                        case 9: SetPlayerArmour(playerid, armour - 25); // Head.
                    }
                }
            }
        }
        else if(weaponid == 30)
        {
            switch(armour) // Creates a switch that switches through the armour float, and checks the value.
            {
                case 0: // If the value is 0, the codes underneath will activate.
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 35); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 35); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 20);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 20); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 14);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 14); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 50); // Head.
                    }
                }
                case 1..300: // Otherwise the codes underneath will activate.
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, armour - 15); // Torso.
                        case 4: SetPlayerArmour(playerid, armour - 15); // Groin.
                        case 5: SetPlayerArmour(playerid, armour - 10);  // Left Arm.
                        case 6: SetPlayerArmour(playerid, armour - 10); // Right Arm.
                        case 7: SetPlayerArmour(playerid, armour - 7);  // Left Leg.
                        case 8: SetPlayerArmour(playerid, armour - 7); // Right Leg.
                        case 9: SetPlayerArmour(playerid, armour - 50); // Head.
                    }
                }
            }
        }
        else if(weaponid == 31)
        {
            switch(armour) // Creates a switch that switches through the armour float, and checks the value.
            {
                case 0: // If the value is 0, the codes underneath will activate.
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 20.0); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 20.0); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 10.0);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 10.0); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 7.0);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 7.0); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 60.0); // Head.
                    }
                }
                case 1..300: // Otherwise the codes underneath will activate.
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, armour - 10.0); // Torso.
                        case 4: SetPlayerArmour(playerid, armour - 10.0); // Groin.
                        case 5: SetPlayerArmour(playerid, armour - 5.0);  // Left Arm.
                        case 6: SetPlayerArmour(playerid, armour - 4.0); // Right Arm.
                        case 7: SetPlayerArmour(playerid, armour - 4.0);  // Left Leg.
                        case 8: SetPlayerArmour(playerid, armour - 4.0); // Right Leg.
                        case 9: SetPlayerArmour(playerid, armour - 50.0); // Head.
                    }
                }
            }
        }
        else if(weaponid == 32)
        {
            switch(armour)
            {
                case 0:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 15); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 15); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 15);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 15); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 15);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 15); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 50); // Head.
                    }
                }
                case 1..300:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, armour - 10); // Torso.
                        case 4: SetPlayerArmour(playerid, armour - 10); // Groin.
                        case 5: SetPlayerArmour(playerid, armour - 10);  // Left Arm.
                        case 6: SetPlayerArmour(playerid, armour - 10); // Right Arm.
                        case 7: SetPlayerArmour(playerid, armour - 10);  // Left Leg.
                        case 8: SetPlayerArmour(playerid, armour - 10); // Right Leg.
                        case 9: SetPlayerArmour(playerid, armour - 25); // Head.
                    }
                }
            }
        }
        else if(weaponid == 33)
        {
            switch(armour)
            {
                case 0:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 40); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 25); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 15);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 15); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 15);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 15); // Right Leg.
                        case 9: SetPlayerHealth(playerid, health - 60); // Head.
                    }
                }
                case 1..300:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, armour - 25); // Torso.
                        case 4: SetPlayerArmour(playerid, armour - 15); // Groin.
                        case 5: SetPlayerArmour(playerid, armour - 5);  // Left Arm.
                        case 6: SetPlayerArmour(playerid, armour - 5); // Right Arm.
                        case 7: SetPlayerArmour(playerid, armour - 5);  // Left Leg.
                        case 8: SetPlayerArmour(playerid, armour - 5); // Right Leg.
                        case 9: SetPlayerArmour(playerid, armour - 70); // Head.
                    }
                }
            }
        }
        else if(weaponid == 34)
        {
            switch(armour) // Creates a switch that switches through the armour float, and checks the value.
            {
                case 0: // If the value is 0, the codes underneath will activate.
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, health - 60); // Torso.
                        case 4: SetPlayerHealth(playerid, health - 35); // Groin.
                        case 5: SetPlayerHealth(playerid, health - 20);  // Left Arm.
                        case 6: SetPlayerHealth(playerid, health - 20); // Right Arm.
                        case 7: SetPlayerHealth(playerid, health - 20);  // Left Leg.
                        case 8: SetPlayerHealth(playerid, health - 20); // Right Leg.
                        case 9: SetPlayerHealth(playerid, 0.0); // Head.
                    }
                }
                case 1..300: // Otherwise the codes underneath will activate.
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, armour - 25); // Torso.
                        case 4: SetPlayerArmour(playerid, armour - 15); // Groin.
                        case 5: SetPlayerArmour(playerid, armour - 5);  // Left Arm.
                        case 6: SetPlayerArmour(playerid, armour - 5); // Right Arm.
                        case 7: SetPlayerArmour(playerid, armour - 5);  // Left Leg.
                        case 8: SetPlayerArmour(playerid, armour - 5); // Right Leg.
                        case 9: SetPlayerHealth(playerid, 0.0); // Head.
                    }
                }
            }
        }
		if(GetPlayerArmour(playerid, armour) < 0) SetPlayerArmour(playerid, 0);
    }
    return 0;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if (damagedid != INVALID_PLAYER_ID)
	{
		PlayerData[damagedid][pLastShot] = playerid;
		PlayerData[damagedid][pShotTime] = gettime();

		if (IsBleedableWeapon(weaponid) && !PlayerData[damagedid][pBleeding] && ReturnArmour(damagedid) < 1 && PlayerData[playerid][pRangeBooth] == -1 && PlayerData[damagedid][pHospital] == -1)
		{
		    if (!PlayerHasTazer(playerid) && !PlayerHasBeanBag(playerid))
		    {
			    PlayerData[damagedid][pBleeding] = 1;
			    PlayerData[damagedid][pBleedTime] = 10;

				//CreateBlood(damagedid);
			    //SetTimerEx("HidePlayerBox", 500, false, "dd", damagedid, _:ShowPlayerBox(damagedid, 0xFF000066));
			}
		}
		if (PlayerData[playerid][pDrugUsed] == 2 && (weaponid >= 0 && weaponid <= 15))
		{
		    SetPlayerHealth(damagedid, ReturnHealth(damagedid) - 6);
		}
		// removed from this if below GetFactionType(playerid) == FACTION_POLICE &&
        if (PlayerData[playerid][pTazer] && PlayerData[damagedid][pStunned] < 1 && weaponid == 23)
        {
			//if (GetPlayerState(damagedid) != PLAYER_STATE_ONFOOT)
			//    return SendErrorMessage(playerid, "The player must be onfoot to be stunned.");

            if (GetPlayerDistanceFromPlayer(playerid, damagedid) > 10.0)
                return SendErrorMessage(playerid, "You must be closer to stun the player.");

            new
                string[64];

			format(string, sizeof(string), "You've been ~r~stunned~w~ by %s.", ReturnName(playerid, 0));

            PlayerData[damagedid][pStunned] = 10;
            TogglePlayerControllable(damagedid, 0);

            ApplyAnimation(damagedid, "CRACK", "crckdeth2", 4.1, 1, 0, 0, 0, 0, 1);
            ShowPlayerFooter(damagedid, string);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has stunned %s with their tazer.", ReturnName(playerid, 0), ReturnName(damagedid, 0));
        }
        if (GetFactionType(playerid) == FACTION_POLICE && PlayerData[playerid][pBeanBag] && PlayerData[damagedid][pStunned] < 1 && weaponid == 25)
        {
			//if (GetPlayerState(damagedid) != PLAYER_STATE_ONFOOT)
			//    return SendErrorMessage(playerid, "The player must be onfoot to be stunned.");

            if (GetPlayerDistanceFromPlayer(playerid, damagedid) > 10.0)
                return SendErrorMessage(playerid, "You must be closer to shoot the player.");

            new
                string[64];

			format(string, sizeof(string), "You've been ~r~stunned~w~ by %s.", ReturnName(playerid, 0));

            PlayerData[damagedid][pStunned] = 10;
            TogglePlayerControllable(damagedid, 0);

            ApplyAnimation(damagedid, "CRACK", "crckdeth2", 4.1, 1, 0, 0, 0, 0, 1);
            ShowPlayerFooter(damagedid, string);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has stunned %s with their beanbag shotgun.", ReturnName(playerid, 0), ReturnName(damagedid, 0));
        }
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if (killerid != INVALID_PLAYER_ID)
	{

		if(reason == 50 && killerid != INVALID_PLAYER_ID)
		    SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has killed %s by heli-blading.", ReturnName(killerid, 0), ReturnName(playerid, 0));

        if(reason == 29 && killerid != INVALID_PLAYER_ID && GetPlayerState(killerid) == PLAYER_STATE_DRIVER)
		    SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has killed %s by driver shooting.", ReturnName(killerid, 0), ReturnName(playerid, 0));
	}

	if(IsInBus[playerid] == 1)
	{
		IsInBus[playerid] = 0;
  		KillTimer(Timer1[playerid]);
		KillTimer(Timer2[playerid]);
	}

	if(IsInShml[playerid] == 1)
	{
	    IsInShml[playerid] = 0;
	}

	if(Intropic[playerid] == 1)
	{
	    Intropic[playerid] = 0;
	}

	if(InAmbulance[playerid] == 1)
	{
	    InAmbulance[playerid] = 0;
	}

	if(InEnforcer[playerid] == 1)
	{
	    InEnforcer[playerid] = 0;
	}

	if(InJourney[playerid] == 1)
	{
	    InJourney[playerid] = 0;
	}

	if(InRaindance[playerid] == 1)
	{
	    InRaindance[playerid] = 0;
	}

	if(PoolAimer == playerid)
	{
		PoolAimer = -1;
		TextDrawHideForPlayer(playerid, PoolTD[0]);
		TextDrawHideForPlayer(playerid, PoolTD[1]);
		TextDrawHideForPlayer(playerid, PoolTD[2]);
		TextDrawHideForPlayer(playerid, PoolTD[3]);
		DestroyObject(AimObject);
	}
	if(PlayingPool[playerid])
	{
		PlayingPool[playerid] = 0;
		new
			count = GetPoolPlayersCount();
		if(count <= 0)
		{
			PoolStarted = 0;
			RespawnPoolBalls();
		}
	}

	new weaponid = gCurHoldingGun[playerid];
	static Float:x, Float:y, Float:z, Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	//x += 1.5 * floatsin(-angle, degrees);
	//y += 1.5 * floatcos(-angle, degrees);

	if(gCurHoldingGun[playerid] > 1) // If they weren't holding brass knuckles/fist
	{
    	DropItem(ReturnWeaponName(weaponid), ReturnName(playerid, 0), GetWeaponModel(weaponid), 1, x, y, z - 1, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), weaponid, GetPlayerAmmo(playerid));
	}
	ResetWeapon(playerid, weaponid);

	return 1;
}

forward UnfreezeBMX(playerid);
public UnfreezeBMX(playerid)
{
	TogglePlayerControllable(playerid, 1);
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if (PlayerData[playerid][pHospital] != -1 || !IsPlayerSpawned(playerid) || PlayerData[playerid][pInjured])
	    return 0;

	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehidc = GetPlayerVehicleID(playerid);
		if(IsBicycle(vehidc) && PRESSED(KEY_ACTION))
		{
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezeBMX", 500, false, "%d", playerid);
		}
	}

    if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED && newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP))
		ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 4.0, 0, 1, 1, 0, 0, 1);

	if (PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid))
	{
		cmd_open(playerid, "\1");
	}
	if (newkeys & KEY_YES && IsPlayerSpawned(playerid))
	{
	    if (PlayerData[playerid][pJailTime] > 0)
			return SendErrorMessage(playerid, "You can't open your inventory while jailed.");

		if (PlayerData[playerid][pCuffed] > 0 || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
		    return SendErrorMessage(playerid, "You can't open your inventory at the moment.");

		OpenInventory(playerid);
	}
	if (newkeys & KEY_SPRINT && IsPlayerSpawned(playerid) && PlayerData[playerid][pLoopAnim])
	{
	    cmd_stopanim(playerid, "\1");
	}
	if (newkeys & KEY_FIRE && PlayerData[playerid][pSmoking])
	{
		if(GetPlayerProgressBarValue(playerid, PlayerData[playerid][pSmokeBar]) <= 0.0)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			DestroyPlayerProgressBar(playerid, PlayerData[playerid][pSmokeBar]);

			PlayerData[playerid][pSmoking] = 0;
			SendServerMessage(playerid, "You have finished smoking your cigarette.");
		}
		else
		{
			SetPlayerProgressBarValue(playerid, PlayerData[playerid][pSmokeBar], GetPlayerProgressBarValue(playerid, PlayerData[playerid][pSmokeBar]) - 10.0);
		}
	}
	if (newkeys & KEY_FIRE && PlayerData[playerid][pDrinking])
	{
	    if (GetPlayerAnimationIndex(playerid) != 15 && GetPlayerAnimationIndex(playerid) != 16 && !PlayerData[playerid][pDrinkTime])
     	{
		    if (GetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar]) <= 0.0)
		    {
	    	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);

				PlayerData[playerid][pDrinking] = 0;
				SendServerMessage(playerid, "You have finished drinking from the bottle.");
		    }
	    	else
	    	{
	    	    PlayerData[playerid][pDrinkTime] = 2;

	    	    switch (PlayerData[playerid][pDrinking])
	    	    {
					case 1: PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 5 >= 100) ? (100) : (PlayerData[playerid][pThirst] + 5);
                    case 2: PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 5 >= 100) ? (100) : (PlayerData[playerid][pThirst] + 5);
				}
			    SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], GetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar]) - 10.0);
			}
		}
	}
	if (newkeys & KEY_FIRE && PlayerData[playerid][pMining] && IsPlayerNearMine(playerid))
	{
	    if (PlayerData[playerid][pMineTime] > 0 || PlayerData[playerid][pMinedRock])
	        return 1;

		new id = Job_NearestPoint(playerid);

		if (id != -1)
		{
		    PlayerData[playerid][pMineTime] = 1;
		    SetTimerEx("MineTime", 400, false, "d", playerid);

		    if (PlayerData[playerid][pMineCount] < 5)
	    	{
	    	    PlayerData[playerid][pMineCount]++;

	        	ApplyAnimation(playerid, "BASEBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
            	ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.0, 0, 1, 1, 0, 0, 1);
			}
			else
			{
			    PlayerData[playerid][pMinedRock] = 1;
			    PlayerData[playerid][pMineCount] = 0;

			    RemovePlayerAttachedObject(playerid, 4);

			    ApplyAnimation(playerid, "BSKTBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
            	ApplyAnimation(playerid, "BSKTBALL", "BBALL_pickup", 4.0, 0, 1, 1, 0, 0, 1);

			    SetPlayerAttachedObject(playerid, 4, 2936, 5, 0.044377, 0.029049, 0.161334, 265.922912, 9.904896, 21.765972, 0.500000, 0.500000, 0.500000);
				SendServerMessage(playerid, "You have digged up a rock. Deliver it to the marker.");

				SetPlayerCheckpoint(playerid, JobData[id][jobDeliver][0], JobData[id][jobDeliver][1], JobData[id][jobDeliver][2], 2.5);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			}
	    }
	}
	else if (newkeys & KEY_CTRL_BACK)
	{
	    if (PlayerData[playerid][pUsedMagazine])
	    {
	        new weaponid = PlayerData[playerid][pHoldWeapon];

	        switch (weaponid)
	        {
			    case 22:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Colt 45");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 17);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s holds onto the weapon and cocks it.", ReturnName(playerid, 0));
				}
				case 24:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Glock-17");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 7);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s holds onto the weapon and cocks it.", ReturnName(playerid, 0));
				}
				case 25:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Shotgun");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 8);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s holds onto the weapon and pumps it.", ReturnName(playerid, 0));
				}
				case 28:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Micro SMG");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 50);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s holds onto the weapon and cocks it.", ReturnName(playerid, 0));
				}
				case 29:
       			{
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "MP5");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 30);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s holds onto the weapon and cocks it.", ReturnName(playerid, 0));
				}
				case 32:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Tec-9");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 50);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s holds onto the weapon and cocks it.", ReturnName(playerid, 0));
				}
				case 30:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "AK-47");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 30);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s holds onto the weapon and cocks it.", ReturnName(playerid, 0));
				}
				case 31:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "M4");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 31);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s holds onto the weapon and cocks it.", ReturnName(playerid, 0));
				}
				case 33:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Rifle");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 5);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s holds onto the weapon and cocks it.", ReturnName(playerid, 0));
				}
		        case 34:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Sniper");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 5);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s holds onto the weapon and cocks it.", ReturnName(playerid, 0));
				}
			}
			return 1;
	    }
	}
	else if (newkeys & KEY_NO && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
	    static
	        string[320];

		if (IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid)))
		{
		    cmd_engine(playerid, "\1");
		}
		if (PlayerData[playerid][pHoldWeapon] > 0)
		{
		    if (PlayerData[playerid][pUsedMagazine])
      			Inventory_Add(playerid, "Magazine", 2039);

		    HoldWeapon(playerid, 0);
		    return SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s puts away their empty weapon.", ReturnName(playerid, 0));
		}
		if (PlayerData[playerid][pLoadCrate])
		{
			new id = Job_NearestPoint(playerid, 20.0);
		    for (new i = 1; i != MAX_VEHICLES; i ++) if (IsPlayerNearBoot(playerid, i))
			{
			    if (!IsCourierVehicle(i))
			        return SendErrorMessage(playerid, "You can't load crates into this vehicle.");

			    if (CoreVehicles[i][vehLoadType] != 0 && CoreVehicles[i][vehLoadType] != PlayerData[playerid][pLoadType])
			        return SendErrorMessage(playerid, "This vehicle is already loaded with something else.");

			    if (CoreVehicles[i][vehLoads] >= GetMaxCrates(i))
			        return SendErrorMessage(playerid, "This vehicle can only hold up to %d crates.", GetMaxCrates(i));

				CoreVehicles[i][vehLoads]++;
				CoreVehicles[i][vehLoadType] = PlayerData[playerid][pLoadType];

                ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);
                SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s drops a crate into the back of the %s.", ReturnName(playerid, 0), ReturnVehicleName(i));
				PlayerData[playerid][pLoadCrate] = 0;
				RemovePlayerAttachedObject(playerid, 4);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				SetPlayerCheckpoint(playerid, JobData[id][jobPoint][0], JobData[id][jobPoint][1], JobData[id][jobPoint][2], 1.0);

                if (CoreVehicles[i][vehLoads] == GetMaxCrates(i))
                {
                    DisablePlayerCheckpoint(playerid);

					if (PlayerData[playerid][pShipment] != -1)
					{
					    PlayerData[playerid][pDeliverShipment] = 1;

					    SendServerMessage(playerid, "You have loaded all the crates. Type /unload at the marker.");
					    SetPlayerCheckpoint(playerid, BusinessData[PlayerData[playerid][pShipment]][bizDeliver][0], BusinessData[PlayerData[playerid][pShipment]][bizDeliver][1], BusinessData[PlayerData[playerid][pShipment]][bizDeliver][2], 3.0);
					}
					else switch (PlayerData[playerid][pLoadType])
                    {
                    	case 1: SendServerMessage(playerid, "You have loaded all the crates. Type /unload at any retail store. (/gps)");
                        case 2: SendServerMessage(playerid, "You have loaded all the crates. Type /unload at any weapon store. (/gps)");
                        case 3: SendServerMessage(playerid, "You have loaded all the crates. Type /unload at any clothing store. (/gps)");
                        case 4: SendServerMessage(playerid, "You have loaded all the crates. Type /unload at any fast food store. (/gps)");
                        case 5: SendServerMessage(playerid, "You have loaded all the crates. Type /unload at any gas station. (/gps)");
                        case 6: SendServerMessage(playerid, "You have loaded all the crates. Type /unload at any furniture store. (/gps)");
                        case 7: SendServerMessage(playerid, "You have loaded all the crates. Type /unload at any bait store.(/gps)");
					}
					PlayerData[playerid][pLoading] = 0;
					PlayerData[playerid][pLoadType] = 0;
                }
                PlayerData[playerid][pLoadCrate] = 0;


				return 1;
			}
		}
		for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && !BackpackData[i][backpackPlayer] && IsPlayerInRangeOfPoint(playerid, 2.0, BackpackData[i][backpackPos][0], BackpackData[i][backpackPos][1], BackpackData[i][backpackPos][2])) {
		    return Backpack_Items(playerid, i);
		}
        if (PlayerData[playerid][pCarryTrash])
		{
			for (new i = 1; i != MAX_VEHICLES; i ++) if (GetVehicleModel(i) == 408 && IsPlayerNearBoot(playerid, i))
			{
			    if (CoreVehicles[i][vehTrash] >= 15)
			        return SendErrorMessage(playerid, "This vehicle cannot hold anymore trash (limit: 15).");

				CoreVehicles[i][vehTrash]++;

				RemovePlayerAttachedObject(playerid, 4);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has loaded a trash bag into the Trashmaster.", ReturnName(playerid, 0));

				PlayerData[playerid][pCarryTrash] = 0;
				break;
			}
		}

		if (PlayerData[playerid][pCarryCrate] != -1)
		{
			for (new i = 1; i != MAX_VEHICLES; i ++) if (IsLoadableVehicle(i) && IsPlayerNearBoot(playerid, i))
			{
			    if (GetVehicleCrates(i) >= GetMaxCrates(i))
			        return SendErrorMessage(playerid, "This vehicle cannot hold anymore crates (limit: %d).", GetMaxCrates(i));

				CrateData[PlayerData[playerid][pCarryCrate]][crateVehicle] = i;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				RemovePlayerAttachedObject(playerid, 4);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has loaded a crate into the %s.", ReturnName(playerid, 0), ReturnVehicleName(i));

				CrateData[PlayerData[playerid][pCarryCrate]][cratePos][0] = 0.0;
				CrateData[PlayerData[playerid][pCarryCrate]][cratePos][1] = 0.0;
				CrateData[PlayerData[playerid][pCarryCrate]][cratePos][2] = 0.0;

				PlayerData[playerid][pCarryCrate] = -1;
				ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);
				break;
			}
		}
		else if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
		{
		    new
				count = 0,
				id = Item_Nearest(playerid);

		    if (id != -1)
		    {
		        string = "";

		        for (new i = 0; i < MAX_DROPPED_ITEMS; i ++) if (count < MAX_LISTED_ITEMS && DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2]) && GetPlayerInterior(playerid) == DroppedItems[i][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[i][droppedWorld]) {
		            NearestItems[playerid][count++] = i;

		            strcat(string, DroppedItems[i][droppedItem]);
		            strcat(string, "\n");
		        }
		        if (count == 1)
		        {
				    if (DroppedItems[id][droppedWeapon] != 0)
					{
				        if (PlayerData[playerid][pPlayingHours] < 2)
							return SendErrorMessage(playerid, "You must have at least 2 playing hours.");

    	   				GiveWeaponToPlayer(playerid, DroppedItems[id][droppedWeapon], DroppedItems[id][droppedAmmo]);

    	                Item_Delete(id);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has picked up a %s.", ReturnName(playerid, 0), ReturnWeaponName(DroppedItems[id][droppedWeapon]));
					}
					else if (PickupItem(playerid, id))
					{
			    		format(string, sizeof(string), "~g~%s~w~ added to inventory!", DroppedItems[id][droppedItem]);
			    		ShowPlayerFooter(playerid, string);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has picked up a \"%s\".", ReturnName(playerid, 0), DroppedItems[id][droppedItem]);
					}
					else
						SendErrorMessage(playerid, "You don't have any room in your inventory.");
				}
				else Dialog_Show(playerid, PickupItems, DIALOG_STYLE_LIST, "Pickup Items", string, "Pickup", "Cancel");
			}
		}
	}
	else if (PRESSED(KEY_SECONDARY_ATTACK))
	{
		static
		    id = -1;

		if ((id = Vendor_Nearest(playerid)) != -1)
		{
		    switch (VendorData[id][vendorType])
		    {
		        case 1:
		        {
					if (GetMoney(playerid) < 3)
					    return SendErrorMessage(playerid, "You must have at least 3 dollars.");

					if (PlayerData[playerid][pVendorTime] > 0)
					    return SendErrorMessage(playerid, "Please wait before purchasing from a vendor again.");

					if (Inventory_Count(playerid, "Cooked Burger") >= 5)
					    return SendErrorMessage(playerid, "You have too many burgers in your inventory already.");

					id = Inventory_Add(playerid, "Cooked Burger", 2703);

					if (id != -1)
					{
					    PlayerData[playerid][pVendorTime] = 3;

					    GiveMoney(playerid, -3);
					    ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

					    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has purchased a burger from the vendor for $3.", ReturnName(playerid, 0));
						ShowPlayerFooter(playerid, "Your ~p~burger~w~ was added to your inventory.");
					}
				}
				case 2:
		        {
					if (GetMoney(playerid) < 2)
					    return SendErrorMessage(playerid, "You must have at least 2 dollars.");

					if (PlayerData[playerid][pVendorTime] > 0)
					    return SendErrorMessage(playerid, "Please wait before purchasing from a vendor again.");

					if (Inventory_Count(playerid, "Soda") >= 10)
					    return SendErrorMessage(playerid, "You have too many soda bottles in your inventory already.");

					id = Inventory_Add(playerid, "Soda", 1543);

					if (id != -1)
					{
                        PlayerData[playerid][pVendorTime] = 3;

					    GiveMoney(playerid, -2);
					    ApplyAnimation(playerid, "VENDING", "VEND_USE", 4.0, 0, 0, 0, 0, 0);

					    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has purchased a soda from the vendor for $2.", ReturnName(playerid, 0));
						ShowPlayerFooter(playerid, "Your ~p~soda~w~ was added to your inventory.");
					}
				}
			}
		}
		if (PlayerData[playerid][pRangeBooth] != -1)
		{
		    Booth_Leave(playerid);
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has left the shooting booth.", ReturnName(playerid, 0));
		}
		else for (new i = 0; i < MAX_BOOTHS; i ++) if (!g_BoothUsed[i] && IsPlayerInRangeOfPoint(playerid, 1.5, arrBoothPositions[i][0], arrBoothPositions[i][1], arrBoothPositions[i][2]))
		{
		    g_BoothUsed[i] = true;
		    PlayerData[playerid][pRangeBooth] = i;

		    UpdateWeapons(playerid);
		    ResetPlayerWeapons(playerid);

		    GivePlayerWeapon(playerid, 24, 15000);

			Booth_Refresh(playerid);
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][81], "~b~Targets:~w~ 0/10");

			PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][81]);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has entered the shooting booth.", ReturnName(playerid, 0));
			return 1;
		}
		if (IsPlayerInRangeOfPoint(playerid, 2.5, -204.5648, -1736.1201, 675.7687) && PlayerData[playerid][pHospitalInt] != -1)
		{
			SetPlayerPosEx(playerid, arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][0], arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][1], arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][2]);
			SetPlayerFacingAngle(playerid, arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][3]);

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHospitalInt] = -1;
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 272.2939, 1388.8876, 11.1342))
		{
		    SetPlayerPosEx(playerid, 1206.8619, -1314.3546, 797.0880);
		    SetPlayerFacingAngle(playerid, 270.0000);

		    SetPlayerInterior(playerid, 5);
		    SetPlayerVirtualWorld(playerid, PRISON_WORLD);

		    SetCameraBehindPlayer(playerid);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 1206.8619, -1314.3546, 796.7880) && GetPlayerVirtualWorld(playerid) == PRISON_WORLD && !PlayerData[playerid][pJailTime])
		{
		    if (PlayerData[playerid][pFreeze])
			{
		        TogglePlayerControllable(playerid, 1);
		        KillTimer(PlayerData[playerid][pFreezeTimer]);
			}
		    SetPlayerPosEx(playerid, 272.2939, 1388.8876, 11.1342);
		    SetPlayerFacingAngle(playerid, 270.0000);

		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);

		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);

		    SetCameraBehindPlayer(playerid);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 1211.1923, -1354.3439, 796.7456) && GetPlayerVirtualWorld(playerid) == PRISON_WORLD)
		{
		    if (PlayerData[playerid][pFreeze])
			{
		        TogglePlayerControllable(playerid, 1);
		        KillTimer(PlayerData[playerid][pFreezeTimer]);
			}
		    SetPlayerPosEx(playerid, 201.8927, 1437.1788, 10.5950);
		    SetPlayerFacingAngle(playerid, 180.0000);

		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);

		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);

		    SetCameraBehindPlayer(playerid);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 201.8927, 1437.1788, 10.5950))
		{
		    SetPlayerPosEx(playerid, 1211.1923, -1354.3439, 797.0456);
		    SetPlayerFacingAngle(playerid, 0.0000);

		    SetPlayerInterior(playerid, 5);
		    SetPlayerVirtualWorld(playerid, PRISON_WORLD);

		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);

		    SetCameraBehindPlayer(playerid);
		}
		for (new i = 0; i < sizeof(arrHospitalSpawns); i ++) if (IsPlayerInRangeOfPoint(playerid, 3.0, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2]))
		{
			SetPlayerPosEx(playerid, -204.5648, -1736.1201, 675.7687);
			SetPlayerFacingAngle(playerid, 180.0000);

			SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, i + 5000);

			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHospitalInt] = i;

		    return 1;
	    }
	    if ((id = Gate_Nearest(playerid)) != -1)
		{
		    cmd_open(playerid, "\1");
		}
	    if ((id = House_Nearest(playerid)) != -1)
	    {
	        if (HouseData[id][houseLocked])
	            return SendErrorMessage(playerid, "You cannot enter a locked house.");

			SetPlayerPosEx(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
			SetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);

			SetPlayerInterior(playerid, HouseData[id][houseInterior]);
			SetPlayerVirtualWorld(playerid, HouseData[id][houseID] + 5000);

			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHouse] = HouseData[id][houseID];
			return 1;
		}
		if ((id = House_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]))
	    {
			SetPlayerPosEx(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
			SetPlayerFacingAngle(playerid, HouseData[id][housePos][3] - 180.0);

			SetPlayerInterior(playerid, HouseData[id][houseExterior]);
			SetPlayerVirtualWorld(playerid, HouseData[id][houseExteriorVW]);

			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHouse] = -1;
			return 1;
		}
        if ((id = Business_Nearest(playerid)) != -1)
	    {
	        if (BusinessData[id][bizLocked])
	            return SendErrorMessage(playerid, "This business is closed by the owner.");

			if (PlayerData[playerid][pTask] && !PlayerData[playerid][pStoreTask])
			{
			    PlayerData[playerid][pStoreTask] = 1;
			    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Retail Store", "This business is a Retail Store. You can purchase many items here using the /buy command.\nThere are many useful things that you can purchase here, which are added to your inventory.\n\nThe most useful item is the GPS System, as this device allows you to find what you need.\nYou can leave this business at any time by pressing the 'F' key at the door.", "Close", "");

			    if (IsTaskCompleted(playerid))
				{
    				PlayerData[playerid][pTask] = 0;
					ShowPlayerFooter(playerid, "You have ~g~completed~w~ all your tasks!");
				}
			}
			SetPlayerPosEx(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
			SetPlayerFacingAngle(playerid, BusinessData[id][bizInt][3]);

			SetPlayerInterior(playerid, BusinessData[id][bizInterior]);
			SetPlayerVirtualWorld(playerid, BusinessData[id][bizID] + 6000);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pBusiness] = BusinessData[id][bizID];

			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);

			if (strlen(BusinessData[id][bizMessage]) && strcmp(BusinessData[id][bizMessage], "NULL", true)) {
			    SendClientMessage(playerid, COLOR_DEPARTMENT, BusinessData[id][bizMessage]);
			}
			return 1;
		}
		if ((id = Business_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]))
	    {
			SetPlayerPosEx(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
			SetPlayerFacingAngle(playerid, BusinessData[id][bizPos][3] - 180.0);

			SetPlayerInterior(playerid, BusinessData[id][bizExterior]);
			SetPlayerVirtualWorld(playerid, BusinessData[id][bizExteriorVW]);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pBusiness] = -1;
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);
			return 1;
		}
		if ((id = Entrance_Nearest(playerid)) != -1)
	    {
	        if (EntranceData[id][entranceLocked])
	            return SendErrorMessage(playerid, "This entrance is locked at the moment.");

            if (PlayerData[playerid][pTask])
			{
				if (EntranceData[id][entranceType] == 2 && !PlayerData[playerid][pBankTask])
				{
			    	PlayerData[playerid][pBankTask] = 1;
			    	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);
			    	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Banking", "This is one of the banks of Vice City. You can manage your bank accounts here.\nEach player has a standard bank account and a savings account for extra funds.\n\nYou can type /bank inside this building to manage either of your bank accounts.\nIf you are near any ATM machine, you can use the /atm command for your banking needs.", "Close", "");

				    if (IsTaskCompleted(playerid))
					{
				        PlayerData[playerid][pTask] = 0;
						ShowPlayerFooter(playerid, "You have ~g~completed~w~ all your tasks!");
					}
				}
				else if (EntranceData[id][entranceType] == 1 && !PlayerData[playerid][pTestTask])
				{
			    	PlayerData[playerid][pTestTask] = 1;
			    	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "DMV", "The DMV is where a player can attempt the driving test to obtain their licenses.\nYou must avoid hitting obstacles, damaging the vehicle or speeding during the test.\n\nIt is legally required to possess a driving license to drive in Vice City.\nDriving without a license can result in several consequences by law enforcement.", "Close", "");

				    if (IsTaskCompleted(playerid))
					{
				        PlayerData[playerid][pTask] = 0;
						ShowPlayerFooter(playerid, "You have ~g~completed~w~ all your tasks!");
					}
				}
			}
			if (EntranceData[id][entranceCustom])
				SetPlayerPosEx(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

			else
			    SetPlayerPosEx(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

			SetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

			SetPlayerInterior(playerid, EntranceData[id][entranceInterior]);
			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceWorld]);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pEntrance] = EntranceData[id][entranceID];
			return 1;
		}
		if ((id = Entrance_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]))
	    {
	        if (EntranceData[id][entranceCustom])
				SetPlayerPosEx(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

			else
			    SetPlayerPosEx(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

			SetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3] - 180.0);

			SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);
			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pEntrance] = Entrance_GetLink(playerid);
			return 1;
		}
		if ((id = Crate_Nearest(playerid)) != -1 && PlayerData[playerid][pCarryCrate] == -1 && !IsCrateInUse(id))
		{
		    // If the crate is within a stack, this function below
		    // will get the highest crate on the stack.

		    if ((id = Crate_Highest(id)) == -1)
		        id = Crate_Nearest(playerid);

		    ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);

            PlayerData[playerid][pCarryCrate] = id;
            SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.000000, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s reaches down and picks up a crate.", ReturnName(playerid, 0));
			SendServerMessage(playerid, "You have picked up a crate. Load it in a vehicle using 'N'.");

			DestroyDynamicObject(CrateData[id][crateObject]);
			DestroyDynamic3DTextLabel(CrateData[id][crateText3D]);

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			CrateData[id][crateObject] = INVALID_OBJECT_ID;
			return 1;
		}
		if (PlayerData[playerid][pCarryCrate] != -1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY && !PlayerData[playerid][pCrafting])
		{
		    ApplyAnimation(playerid, "CARRY", "null", 4.0, 0, 0, 0, 0, 0);
		    ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);

			Crate_Drop(playerid, 1.5);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has dropped the crate.", ReturnName(playerid, 0));

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			return 1;
		}
		if (newkeys == 16)
		{
		    if (IsInBus[playerid] > 0)
		    {
				new Float:X,Float:Y,Float:Z;
				GetVehiclePos(IsInBus[playerid], X, Y, Z);
				SetPlayerPosEx(playerid, X+1, Y+4, Z);
				SetPlayerInterior(playerid, 0);
				KillTimer(Timer1[playerid]);
				KillTimer(Timer2[playerid]);
				IsInBus[playerid] = 0;
			}
			else if (IsInShml[playerid] > 0)
		    {
				new Float:X,Float:Y,Float:Z;
				GetVehiclePos(IsInShml[playerid], X, Y, Z);
				SetPlayerPosEx(playerid, X+1, Y+4, Z);
				SetPlayerInterior(playerid, 0);
				IsInShml[playerid] = 0;
			}
			else if (Intropic[playerid] > 0)
		    {
				new Float:X,Float:Y,Float:Z;
				GetVehiclePos(Intropic[playerid], X, Y, Z);
				SetPlayerPosEx(playerid, X+1, Y+4, Z);
				SetPlayerInterior(playerid, 0);
				Intropic[playerid] = 0;
			}
			else if (InAmbulance[playerid] > 0)
		    {
				new Float:X,Float:Y,Float:Z;
				GetVehiclePos(InAmbulance[playerid], X, Y, Z);
				SetPlayerPosEx(playerid, X+1, Y+4, Z);
				SetPlayerInterior(playerid, 0);
				InAmbulance[playerid] = 0;
			}
			else if (InEnforcer[playerid] > 0)
		    {
				new Float:X,Float:Y,Float:Z;
				GetVehiclePos(InEnforcer[playerid], X, Y, Z);
				SetPlayerPosEx(playerid, X+1, Y+4, Z);
				SetPlayerInterior(playerid, 0);
				InEnforcer[playerid] = 0;
			}
			else if (InJourney[playerid] > 0)
		    {
				new Float:X,Float:Y,Float:Z;
				GetVehiclePos(InJourney[playerid], X, Y, Z);
				SetPlayerPosEx(playerid, X+1, Y+1, Z);
				SetPlayerInterior(playerid, 0);
				InJourney[playerid] = 0;
			}
			else if (InRaindance[playerid] > 0)
		    {
				new Float:X,Float:Y,Float:Z;
				GetVehiclePos(InRaindance[playerid], X, Y, Z);
				SetPlayerPosEx(playerid, X-1, Y, Z);
				SetPlayerInterior(playerid, 0);
				InRaindance[playerid] = 0;
			}

		}
		if((newkeys & KEY_YES) && !(oldkeys & KEY_YES))
		{
	 		detonateExplosives(playerid);
		}
	}
	if(PoolStarted && PlayingPool[playerid])
	{
		if (IsKeyJustUp(KEY_SECONDARY_ATTACK, newkeys, oldkeys))
		{
			if(PlayingPool[playerid] && PoolAimer != playerid && !UsingChalk[playerid])
			{
				SetTimerEx("PlayPoolSound", 1400, 0, "d", 31807);
				SetPlayerArmedWeapon(playerid, 0);
				SetPlayerAttachedObject(playerid, OBJ_SLOT_POOL, 338, 6, 0, 0.07, -0.85, 0, 0, 0);
				ApplyAnimation(playerid, "POOL", "POOL_ChalkCue",3.0,0,0,0,0,0,1);
				UsingChalk[playerid] = 1;
				SetTimerEx("RestoreWeapon", 3500, 0, "d", playerid);
			}
		}
		if (IsKeyJustUp(KEY_JUMP, newkeys, oldkeys))
		{
			if(PoolAimer == playerid)
			{
				if(PoolCamera[playerid] < 2) PoolCamera[playerid]++;
				else PoolCamera[playerid] = 0;
				new
					Float:poolrot = AimAngle[playerid][0],
					Float:Xa,
					Float:Ya,
					Float:Za,
					Float:x,
					Float:y;
				GetObjectPos(PoolBall[0][bObject], Xa, Ya, Za);
				switch(PoolCamera[playerid])
				{
					case 0:
					{
						GetXYBehindObjectInAngle(PoolBall[0][bObject], poolrot, x, y, 0.675);
						SetPlayerCameraPos(playerid, x, y, 998.86785888672+0.28);
						SetPlayerCameraLookAt(playerid, Xa, Ya, Za+0.170);
					}
					case 1:
					{
						SetPlayerCameraPos(playerid, 511.84469604492, -84.831642150879, 1001.4904174805);
						SetPlayerCameraLookAt(playerid,510.11267089844, -84.831642150879, 998.86785888672);
					}
					case 2:
					{
						SetPlayerCameraPos(playerid, 508.7971496582, -84.831642150879, 1001.4904174805);
						SetPlayerCameraLookAt(playerid,510.11267089844, -84.831642150879, 998.86785888672);
					}
				}
			}
		}
		if (IsKeyJustUp(KEY_HANDBRAKE, newkeys, oldkeys))
		{
			if(AreAllBallsStopped())
			{
				if(PoolAimer != playerid)
				{
					if(!UsingChalk[playerid] && PoolAimer == -1 && PoolBall[0][bExisting])
					{
						new
							Float:poolrot,
							Float:X,
							Float:Y,
							Float:Z,
							Float:Xa,
							Float:Ya,
							Float:Za,
							Float:x,
							Float:y;
						GetPlayerPos(playerid, X, Y, Z);
						GetObjectPos(PoolBall[0][bObject], Xa, Ya, Za);
						if(Is2DPointInRangeOfPoint(X, Y, Xa, Ya, 3.0) && Z < 999.5)
						{
							TogglePlayerControllable(playerid, 0);
							GetAngleToXY(Xa, Ya, X, Y, poolrot);
							SetPlayerFacingAngle(playerid, poolrot);
							AimAngle[playerid][0] = poolrot;
							AimAngle[playerid][1] = poolrot;
							SetPlayerArmedWeapon(playerid, 0);
							GetXYInFrontOfPos(Xa, Ya, poolrot+180, x, y, 0.085);
							AimObject = CreateObject(3004, x, y, Za, 7.0, 0, poolrot+180);
							switch(PoolCamera[playerid])
							{
								case 0:
								{
									GetXYBehindObjectInAngle(PoolBall[0][bObject], poolrot, x, y, 0.675);
									SetPlayerCameraPos(playerid, x, y, 998.86785888672+0.28);
									SetPlayerCameraLookAt(playerid, Xa, Ya, Za+0.170);
								}
								case 1:
								{
									SetPlayerCameraPos(playerid, 511.84469604492, -84.831642150879, 1001.4904174805);
									SetPlayerCameraLookAt(playerid,510.11267089844, -84.831642150879, 998.86785888672);
								}
								case 2:
								{
									SetPlayerCameraPos(playerid, 508.7971496582, -84.831642150879, 1001.4904174805);
									SetPlayerCameraLookAt(playerid,510.11267089844, -84.831642150879, 998.86785888672);
								}
							}
							ApplyAnimation(playerid, "POOL", "POOL_Med_Start",50.0,0,0,0,1,1,1);
							PoolAimer = playerid;
							TextDrawShowForPlayer(playerid, PoolTD[0]);
							TextDrawShowForPlayer(playerid, PoolTD[1]);
							TextDrawTextSize(PoolTD[2], 501.0, 0.0);
							TextDrawShowForPlayer(playerid, PoolTD[2]);
							TextDrawShowForPlayer(playerid, PoolTD[3]);
							PoolPower = 1.0;
							PoolDir = 0;
						}
					}
				}
				else
				{
					TogglePlayerControllable(playerid, 1);
					GiveWeaponToPlayer(playerid, 7, 1);
					ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0, 1);
					SetCameraBehindPlayer(playerid);
					PoolAimer = -1;
					DestroyObject(AimObject);
					TextDrawHideForPlayer(playerid, PoolTD[0]);
					TextDrawHideForPlayer(playerid, PoolTD[1]);
					TextDrawHideForPlayer(playerid, PoolTD[2]);
					TextDrawHideForPlayer(playerid, PoolTD[3]);
				}
			}
		}
		if (IsKeyJustUp(KEY_FIRE, newkeys, oldkeys))
		{
			if(PoolAimer == playerid)
			{
				new
					Float:speed;
				ApplyAnimation(playerid, "POOL", "POOL_Med_Shot",3.0,0,0,0,0,0,1);
				speed = 0.4 + (PoolPower * 2.0) / 100.0;
				PHY_SetObjectVelocity(PoolBall[0][bObject], speed * floatsin(-AimAngle[playerid][0], degrees), speed * floatcos(-AimAngle[playerid][0], degrees));
				if(PoolCamera[playerid] == 0)
				{
					switch(random(2))
					{
						case 0: SetPlayerCameraPos(playerid, 511.84469604492, -84.831642150879, 1001.4904174805);
						case 1: SetPlayerCameraPos(playerid, 508.7971496582, -84.831642150879, 1001.4904174805);
					}
					SetPlayerCameraLookAt(playerid,510.11267089844, -84.831642150879, 998.86785888672);
				}
				PlayPoolSound(31810);
				PoolAimer = -1;
				DestroyObject(AimObject);
				GiveWeaponToPlayer(playerid, 7, 1);
				PoolLastShooter = playerid;
				PoolLastScore = 0;
				TextDrawHideForPlayer(playerid, PoolTD[0]);
				TextDrawHideForPlayer(playerid, PoolTD[1]);
				TextDrawHideForPlayer(playerid, PoolTD[2]);
				TextDrawHideForPlayer(playerid, PoolTD[3]);
			}
		}
	}
	if(HOLDING(HOLDING_KEY) && IsPlayerInDynamicArea(playerid, areaViceCity, 0)) 
	{
        TextDrawShowForPlayer(playerid, screenVCMap);
	    for(new i = 0, k = sizeof(screenVCPlaces); i < k; i++) 
		{
			TextDrawShowForPlayer(playerid, screenVCPlaces[i]);
		}
        ViewingMap[playerid] = true;
	}
 	if(RELEASED(HOLDING_KEY)) {
        TextDrawHideForPlayer(playerid, screenVCMap);
	    for(new i = 0, k = sizeof(screenVCPlaces); i < k; i++) {
			TextDrawHideForPlayer(playerid, screenVCPlaces[i]);
		}
        PlayerTextDrawHide(playerid, screenArrow[playerid]);
        PlayerTextDrawDestroy(playerid, screenArrow[playerid]);
        ViewingMap[playerid] = false;
    }

	return 1;
}

public PHY_OnObjectUpdate(objectid)
{
	if(PoolStarted)
	{
		for___loop(new i; i < sizeof PoolBall; i++)
		{
			if(objectid == PoolBall[i][bObject] && PHY_IsObjectMoving(PoolBall[i][bObject]))
			{
				new
					hole = IsBallInHole(i);
				if(hole)
				{
					new
						Float:speed,
						Float:vx, Float:vy, Float:vz;
					PHY_GetObjectVelocity(PoolBall[i][bObject], vx, vy, vz);
					speed = floatsqroot(vx * vx + vy * vy) + 0.2;

					PoolBall[i][bExisting] = 0;
					PHY_DeleteObject(PoolBall[i][bObject]);

					PlayPoolSound(31803 + random(3));

					switch(hole)
					{
						case 1: MoveObject(PoolBall[i][bObject], 509.61123657,-85.79737091,998.86785889-0.25, speed);
						case 2: MoveObject(PoolBall[i][bObject], 510.67373657,-84.84423065,998.86785889-0.25, speed);
						case 3: MoveObject(PoolBall[i][bObject], 510.61914062,-83.88769531,998.86785889-0.25, speed);
						case 4: MoveObject(PoolBall[i][bObject], 509.61077881,-83.89227295,998.86785889-0.25, speed);
						case 5: MoveObject(PoolBall[i][bObject], 510.61825562,-85.80107880,998.86785889-0.25, speed);
						case 6: MoveObject(PoolBall[i][bObject], 509.55642700,-84.84602356,998.86785889-0.25, speed);
					}
					if(i)
					{
						PoolScore[PoolLastShooter] ++;
						PoolLastScore ++;
						new string[128];
						if(PoolLastScore > 0) format(string, 128, "~g~~h~+%d", PoolLastScore);
						else format(string, 128, "~r~~h~%d", PoolLastScore);
						GameTextForPlayer(PoolLastShooter, string, 100000, 4);
						PlayerPlaySound(PoolLastShooter, 1250, 0.0, 0.0, 0.0);
					}
					else
					{
						PoolScore[PoolLastShooter] --;
						PoolLastScore --;
						new string[128];
						if(PoolLastScore > 0) format(string, 128, "~g~~h~+~r~~h~%d", PoolLastScore);
						else format(string, 128, "~r~~h~%d", PoolLastScore);
						GameTextForPlayer(PoolLastShooter, string, 100000, 4);
						PlayerPlaySound(PoolLastShooter, 1250, 0.0, 0.0, 0.0);
					}
					if(GetPoolBallsCount() <= 1)
					{
						PoolStarted = 0;
						PoolAimer = -1;
						new
							winscore = GetMaxPoolScore(),
							name[MAX_PLAYER_NAME];
						RespawnPoolBalls();
						RestoreCamera(PoolLastShooter);
						PoolLastShooter = -1;
						foreach (new p : Player)
						{
							if(PlayingPool[p] && PoolScore[p] == winscore)
							{
								new
									string[128];
								GetPlayerName(p, name, sizeof name);
								format(string, 128, "{FFFF45}The winner is: {EBEBEB}%s {FFFF45}with {EBEBEB}%d {FFFF45}points.", name, winscore);
								SendPoolPlayersMessage(string);
							}
						}
						foreach (new p : Player)
						{
							if(PlayingPool[p])
							{
								PlayingPool[p] = 0;
							}
						}
					}
					else if(AreAllBallsStopped())
					{
						SetTimerEx("RestoreCamera", 800, 0, "d", PoolLastShooter);
						PoolLastShooter = -1;
					}
				}
				return 1;
			}
		}
	}
	return 1;
}

public PHY_OnObjectCollideWithObject(object1, object2)
{
	if(PoolStarted)
	{
		for___loop(new i; i < sizeof PoolBall; i++)
		{
			if(object1 == PoolBall[i][bObject])
			{
				PlayPoolSound(31800 + random(3));
				return 1;
			}
		}
	}
	return 1;
}

public PHY_OnObjectCollideWithWall(objectid, wallid)
{
	if(PoolStarted)
	{
		for___loop(new i; i < sizeof PoolBall; i++)
		{
			if(objectid == PoolBall[i][bObject])
			{
				PlayPoolSound(31808);
				return 1;
			}
		}
	}
	return 1;
}

forward CueReset(playerid);
public CueReset(playerid)
{
	ResetWeapon(playerid, 7);
	return 1;
}


public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(PlayingPool[playerid])
	{
		PlayingPool[playerid] = 0;
		SetTimerEx("CueReset", 5000, false, "d", playerid);
		new
			count = GetPoolPlayersCount();
		if(count <= 0)
		{
			PoolStarted = 0;
			RespawnPoolBalls();
		}
	}

	if(PlayerData[playerid][pBackup] == 1)
	{
		new bool:inside = false, Float:x, Float:y, Float:z;
		if (House_Inside(playerid) != -1 || Business_Inside(playerid) != -1 || Entrance_Inside(playerid) != -1)
		{
			inside = true;
			GetPlayerLocationEx(playerid, x, y, z);
		}

		if(inside)
		{
			new
				hid = House_Inside(playerid),
				bid = Business_Inside(playerid),
				eid = Entrance_Inside(playerid);

			new intstring[50];
			if(hid != -1) format(intstring, sizeof(intstring), "%s", HouseData[hid][houseAddress]);
			if(bid != -1) format(intstring, sizeof(intstring), "%s", BusinessData[bid][bizName]);
			if(eid != -1) format(intstring, sizeof(intstring), "%s", EntranceData[eid][entranceName]);

			foreach (new i : Player)
			{
				if (GetFactionType(i) == FACTION_POLICE)
				{
					SetPlayerCheckpoint(i, x, y, z, 2.0);
					SendClientMessageEx(i, COLOR_RADIOCHAT, "[%s] %s %s is requesting backup at %s. (Red Map Marker).", GetInitials(Faction_GetName(playerid)), Faction_GetRank(playerid), ReturnName(playerid, 0), intstring);
				}
			}
		}
	}
	return 1;
}


Float:GetPointDistanceToPoint(Float:x1,Float:y1,Float:x2,Float:y2)
{
	new Float:x, Float:y;
	x = x1-x2;
	y = y1-y2;
	return floatsqroot(x*x+y*y);
}


stock GetAngleToXY(Float:X, Float:Y, Float:CurrX, Float:CurrY, &Float:angle)
{
	angle = atan2(Y-CurrY, X-CurrX);
	angle = floatsub(angle, 90.0);
	if(angle < 0.0) angle = floatadd(angle, 360.0);
}


stock GetXYInFrontOfPos(Float:xx,Float:yy,Float:a, &Float:x2, &Float:y2, Float:distance)
{
	if(a>360)
	{
		a=a-360;
	}
	xx += (distance * floatsin(-a, degrees));
	yy += (distance * floatcos(-a, degrees));
	x2=xx;
	y2=yy;
}

stock IsPointFacingPoint(Float:dOffset, Float:X, Float:Y, Float:pA, Float:pX, Float:pY)
{
	new
		Float:ang;

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(AngleInRangeOfAngle(-ang, pA, dOffset)) return true;

	return false;

}

stock Is2DPointInRangeOfPoint(Float:x, Float:y, Float:x2, Float:y2, Float:range)
{
	x2 -= x;
	y2 -= y;
	return ((x2 * x2) + (y2 * y2)) < (range * range);
}

stock IsObjectInSphere(objectid,Float:x,Float:y,Float:z,Float:radius2)
{
	new Float:x1,Float:y1,Float:z1,Float:tmpdis;
	GetObjectPos(objectid,x1,y1,z1);
	tmpdis = floatsqroot(floatpower(floatabs(floatsub(x,x1)),2)+ floatpower(floatabs(floatsub(y,y1)),2)+ floatpower(floatabs(floatsub(z,z1)),2));
	if(tmpdis < radius2) return 1;
	return 0;
}

GetBallModel(i)
{
	switch(i)
	{
		case 0: return 3003;
		case 1: return 3002;
		case 2: return 3001;
		case 3: return 2995;
		case 4: return 2996;
		case 5: return 3106;
		case 6: return 3105;
		case 7: return 3103;
		case 8: return 3001;
		case 9: return 3100;
		case 10: return 2997;
		case 11: return 3000;
		case 12: return 3102;
		case 13: return 2999;
		case 14: return 2998;
		case 15: return 3104;
	}
	return 0;
}

stock GetPoolBallsCount()
{
	new
		count;
	for___loop(new i; i < 16; i++)
	{
		if(PoolBall[i][bExisting] || i == 0) count++;
	}
	return count;
}


stock GetMaxPoolScore()
{
	new
		scoremax = -1;
	foreach (new i : Player)
	{
		if(PlayingPool[i])
		{
			if(PoolScore[i] > scoremax)
			{
				scoremax = PoolScore[i];
			}
		}
	}
	return scoremax;
}

stock SendPoolPlayersMessage(string[])
{
	foreach (new i : Player)
	{
		if(PlayingPool[i])
		{
			SendClientMessage(i, -1, string);
		}
	}
}

stock AreAllBallsStopped()
{
	new
		Float:x, Float:y, Float:z;
	for___loop(new i; i < 16; i++)
	{
		if(PoolBall[i][bExisting])
		{
			PHY_GetObjectVelocity(PoolBall[i][bObject], x, y, z);
			if(x != 0.0 || y != 0.0)
				return 0;
		}
	}
	return 1;
}

stock RespawnPoolBalls(init = 0)
{
	for___loop(new i; i < 16; i++)
	{
		/*PoolBall[i][bMoving] = 0;
		PoolBall[i][bSpeed] = 0;*/
		//StopObject(PoolBall[i][bObject]);
		DestroyObject(PoolBall[i][bObject]);
		if(PoolBall[i][bExisting])
		{
			PHY_DeleteObject(PoolBall[i][bObject]);
			PoolBall[i][bExisting] = 0;
		}
	}

	if(PoolAimer != -1)
	{
		TogglePlayerControllable(PoolAimer, 1);
		ClearAnimations(PoolAimer);
		ApplyAnimation(PoolAimer, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
		SetCameraBehindPlayer(PoolAimer);
		PoolAimer = -1;
		DestroyObject(AimObject);
		TextDrawHideForPlayer(PoolAimer, PoolTD[0]);
		TextDrawHideForPlayer(PoolAimer, PoolTD[1]);
		TextDrawHideForPlayer(PoolAimer, PoolTD[2]);
		TextDrawHideForPlayer(PoolAimer, PoolTD[3]);
	}

	CreateBalls();
	if(init)
	{
		for___loop(new i; i < sizeof PoolBall; i++)
			InitBall(i);
	}
}

stock CreateBalls()
{
	PoolBall[0][bObject] = CreateObject(3003, 510.11218261719, -84.40771484375, 998.86785888672, 0, 0, 0);
	PoolBall[1][bObject] = CreateObject(3002, 510.10882568359, -85.166389465332, 998.86749267578, 0, 0, 0);
	PoolBall[2][bObject] = CreateObject(3101, 510.14270019531, -85.232612609863, 998.86749267578, 0, 0, 0);
	PoolBall[3][bObject] = CreateObject(2995, 510.0676574707, -85.232200622559, 998.86749267578, 0, 0, 0);
	PoolBall[4][bObject] = CreateObject(2996, 510.18600463867, -85.295257568359, 998.86749267578, 0, 0, 0);
	PoolBall[5][bObject] = CreateObject(3106, 510.11242675781, -85.297294616699, 998.86749267578, 0, 0, 0);
	PoolBall[6][bObject] = CreateObject(3105, 510.03665161133, -85.299163818359, 998.86749267578, 0, 0, 0);
	PoolBall[7][bObject] = CreateObject(3103, 510.22308349609, -85.362342834473, 998.86749267578, 0, 0, 0);
	PoolBall[8][bObject] = CreateObject(3001, 510.14828491211, -85.365989685059, 998.86749267578, 0, 0, 0);
	PoolBall[9][bObject] = CreateObject(3100, 510.07455444336, -85.365234375, 998.86749267578, 0, 0, 0);
	PoolBall[10][bObject] = CreateObject(2997, 510.00054931641, -85.363563537598, 998.86749267578, 0, 0, 0);
	PoolBall[11][bObject] = CreateObject(3000, 510.25915527344, -85.431137084961, 998.86749267578, 0, 0, 0);
	PoolBall[12][bObject] = CreateObject(3102, 510.18399047852, -85.430549621582, 998.86749267578, 0, 0, 0);
	PoolBall[13][bObject] = CreateObject(2999, 510.10900878906, -85.43196105957, 998.86749267578, 0, 0, 0);
	PoolBall[14][bObject] = CreateObject(2998, 510.03570556641, -85.432624816895, 998.86749267578, 0, 0, 0);
	PoolBall[15][bObject] = CreateObject(3104, 509.96197509766, -85.427406311035, 998.86749267578, 0, 0, 0);
}

stock InitBall(i)
{
	PHY_InitObject(PoolBall[i][bObject], 3003, _, _, PHY_MODE_2D);
	PHY_SetObjectFriction(PoolBall[i][bObject], 0.40);
	PHY_RollObject(PoolBall[i][bObject], _, PHY_ROLLING_MODE_ADVANCED);
	PHY_SetObjectWorld(PoolBall[i][bObject], 3);
	PoolBall[i][bExisting] = 1;
}

stock LoadPool()
{
	CreateBalls();

	SetTimer("PoolTimer", 21, 1);

	PHY_SetWallWorld(PHY_CreateWall(509.627 - 0.038, -85.780 - 0.038, 510.598 + 0.038, -85.780 - 0.038), 3);
	PHY_SetWallWorld(PHY_CreateWall(510.598 + 0.038, -85.780 - 0.038, 510.598 + 0.038, -83.907 + 0.038), 3);
	PHY_SetWallWorld(PHY_CreateWall(510.598 + 0.038, -83.907 + 0.038, 509.627 - 0.038, -83.907 + 0.038), 3);
	PHY_SetWallWorld(PHY_CreateWall(509.627 - 0.038, -83.907 + 0.038, 509.627 - 0.038, -85.780 - 0.038), 3);


	PoolTD[0] = TextDrawCreate(505.000000, 260.000000, "~n~~n~");
	TextDrawBackgroundColor(PoolTD[0], 255);
	TextDrawFont(PoolTD[0], 1);
	TextDrawLetterSize(PoolTD[0], 0.500000, 0.439999);
	TextDrawColor(PoolTD[0], -1);
	TextDrawSetOutline(PoolTD[0], 0);
	TextDrawSetProportional(PoolTD[0], 1);
	TextDrawSetShadow(PoolTD[0], 1);
	TextDrawUseBox(PoolTD[0], 1);
	TextDrawBoxColor(PoolTD[0], 255);
	TextDrawTextSize(PoolTD[0], 569.000000, -10.000000);

	PoolTD[1] = TextDrawCreate(506.000000, 261.000000, "~n~~n~");
	TextDrawBackgroundColor(PoolTD[1], 255);
	TextDrawFont(PoolTD[1], 1);
	TextDrawLetterSize(PoolTD[1], 0.500000, 0.300000);
	TextDrawColor(PoolTD[1], -1);
	TextDrawSetOutline(PoolTD[1], 0);
	TextDrawSetProportional(PoolTD[1], 1);
	TextDrawSetShadow(PoolTD[1], 1);
	TextDrawUseBox(PoolTD[1], 1);
	TextDrawBoxColor(PoolTD[1], 911303167);
	TextDrawTextSize(PoolTD[1], 568.000000, 0.000000);

	PoolTD[2] = TextDrawCreate(506.000000, 261.000000, "~n~~n~");
	TextDrawBackgroundColor(PoolTD[2], 255);
	TextDrawFont(PoolTD[2], 1);
	TextDrawLetterSize(PoolTD[2], 0.500000, 0.300000);
	TextDrawColor(PoolTD[2], -1);
	TextDrawSetOutline(PoolTD[2], 0);
	TextDrawSetProportional(PoolTD[2], 1);
	TextDrawSetShadow(PoolTD[2], 1);
	TextDrawUseBox(PoolTD[2], 1);
	TextDrawBoxColor(PoolTD[2], -1949699841);
	TextDrawTextSize(PoolTD[2], 501.000000, 0.000000);

	PoolTD[3] = TextDrawCreate(503.000000, 240.000000, "Power");
	TextDrawBackgroundColor(PoolTD[3], 255);
	TextDrawFont(PoolTD[3], 2);
	TextDrawLetterSize(PoolTD[3], 0.280000, 1.699999);
	TextDrawColor(PoolTD[3], -1);
	TextDrawSetOutline(PoolTD[3], 1);
	TextDrawSetProportional(PoolTD[3], 1);
}

stock GetPoolPlayersCount()
{
	new
		count;
	if(PoolStarted)
	{
		foreach (new i : Player)
		{
			if(PlayingPool[i])
			{
				count++;
			}
		}
	}
	return count;
}

forward PoolTimer();
public PoolTimer()
{
	if(!PoolStarted) return 0;
	if(PoolAimer != -1)
	{
		new
			playerid = PoolAimer,
			keys,
			ud,
			lr;
		GetPlayerKeys(playerid, keys, ud, lr);
		if(!(keys & KEY_FIRE))
		{
			if(lr)
			{
				new
					Float:X,
					Float:Y,
					Float:Z,
					Float:Xa,
					Float:Ya,
					Float:Za,
					Float:x,
					Float:y,
					Float:newrot,
					Float:dist;
				GetPlayerPos(playerid, X, Y ,Z);
				GetObjectPos(PoolBall[0][bObject], Xa, Ya, Za);
				newrot = AimAngle[playerid][0] + (lr > 0 ? 0.9 : -0.9);
				dist = GetPointDistanceToPoint(X, Y, Xa, Ya);
				if(AngleInRangeOfAngle(AimAngle[playerid][1], newrot, 30.0))
				{
					AimAngle[playerid][0] = newrot;
					switch(PoolCamera[playerid])
					{
						case 0:
						{
							GetXYBehindObjectInAngle(PoolBall[0][bObject], newrot, x, y, 0.675);
							SetPlayerCameraPos(playerid, x, y, 998.86785888672+0.28);
							SetPlayerCameraLookAt(playerid, Xa, Ya, Za+0.170);
						}
						case 1:
						{
							SetPlayerCameraPos(playerid, 511.84469604492, -84.831642150879, 1001.4904174805);
							SetPlayerCameraLookAt(playerid,510.11267089844, -84.831642150879, 998.86785888672);
						}
						case 2:
						{
							SetPlayerCameraPos(playerid, 508.7971496582, -84.831642150879, 1001.4904174805);
							SetPlayerCameraLookAt(playerid,510.11267089844, -84.831642150879, 998.86785888672);
						}
					}
					GetXYInFrontOfPos(Xa, Ya, newrot+180, x, y, 0.085);
					SetObjectPos(AimObject, x, y, Za);
					SetObjectRot(AimObject, 7.0, 0, AimAngle[playerid][0]+180);
					GetXYInFrontOfPos(Xa, Ya, newrot+180, X, Y, dist);
					SetPlayerPos(playerid, X, Y, Z);
					SetPlayerFacingAngle(playerid, newrot);
				}
			}
		}
		else
		{
			if(PoolDir)
				PoolPower -= 2.0;
			else
				PoolPower += 2.0;
			if(PoolPower <= 0)
			{
				PoolDir = 0;
				PoolPower = 2.0;
			}
			else if(PoolPower > 100.0)
			{
				PoolDir = 1;
				PoolPower = 98.0;
			}
			TextDrawTextSize(PoolTD[2], 501.0 + ((67.0 * PoolPower)/100.0), 0.0);
			TextDrawShowForPlayer(playerid, PoolTD[2]);
		}
	}

	if(PoolLastShooter != -1 && AreAllBallsStopped())
	{
		SetTimerEx("RestoreCamera", 800, 0, "d", PoolLastShooter);
		PoolLastShooter = -1;
	}
	return 1;
}

forward RestoreCamera(playerid);
public RestoreCamera(playerid)
{
	if(!PoolBall[0][bExisting])
	{
		DestroyObject(PoolBall[0][bObject]);
		PoolBall[0][bObject] = CreateObject(GetBallModel(0) ,510.11218261719, -84.40771484375, 998.86785888672, 0, 0, 0);
		InitBall(0);
	}
	GameTextForPlayer(playerid, " ", 100000, 4);
	if(PoolAimer == playerid) return 0;
	TogglePlayerControllable(playerid, 1);
	return SetCameraBehindPlayer(playerid);
}

forward RestoreWeapon(playerid);
public RestoreWeapon(playerid)
{
	RemovePlayerAttachedObject(playerid, OBJ_SLOT_POOL);
	UsingChalk[playerid] = 0;
	GiveWeaponToPlayer(playerid, 7, 1);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

stock IsBallInHole(i)
{
	if(IsObjectInSphere(PoolBall[i][bObject],509.61123657,-85.79737091,998.86785889,0.0825)) return 1;
	else if(IsObjectInSphere(PoolBall[i][bObject],510.67373657,-84.84423065,998.86785889,0.0825)) return 2;
	else if(IsObjectInSphere(PoolBall[i][bObject],510.61914062,-83.88769531,998.86785889,0.0825)) return 3;
	else if(IsObjectInSphere(PoolBall[i][bObject],509.61077881,-83.89227295,998.86785889,0.0825)) return 4;
	else if(IsObjectInSphere(PoolBall[i][bObject],510.61825562,-85.80107880,998.86785889,0.0825)) return 5;
	else if(IsObjectInSphere(PoolBall[i][bObject],509.55642700,-84.84602356,998.86785889,0.0825)) return 6;
	else return 0;
}

stock GetXYBehindObjectInAngle(objectid, Float:a, &Float:x2, &Float:y2, Float:distance)
{
	new Float:z;
	GetObjectPos(objectid, x2, y2, z);

	x2 += (distance * floatsin(-a+180, degrees));
	y2 += (distance * floatcos(-a+180, degrees));
}

forward PlayPoolSound(soundid);
public PlayPoolSound(soundid)
{
	foreach(new i : Player)
	{
		if(PlayingPool[i])
		{
			PlayerPlaySound(i, soundid, 0, 0, 0);
		}
	}
	return 1;
}

stock IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

stock IsKeyJustUp(key, newkeys, oldkeys)
{
	if(!(newkeys & key) && (oldkeys & key)) return 1;
	return 0;
}

stock PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

stock AngleInRangeOfAngle(Float:a1, Float:a2, Float:range)
{
	a1 -= a2;
	if((a1 < range) && (a1 > -range)) return true;

	return false;
}


forward PutInsideVehicle(playerid, vehicleid);
public PutInsideVehicle(playerid, vehicleid)
{
	if (!PlayerData[playerid][pDrivingTest] || !PlayerData[playerid][pBikeTest] || !PlayerData[playerid][pTruckTest])
	    return 0;

	RemoveFromVehicle(vehicleid);
    PutPlayerInVehicle(playerid, vehicleid, 0);
    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    if (IsPlayerNPC(playerid))
	    return 1;

	if(Seatbelt[playerid] == 1)
	{
	    Seatbelt[playerid] = 0;
	    if(IsABike(GetPlayerVehicleID(playerid)))
		{
            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s grabs their helmet and removes it from their head.", ReturnName(playerid, 0));
            SendClientMessageEx(playerid, COLOR_WHITE, "You have taken off your helmet.");
            ShowPlayerFooter(playerid, "You have ~r~removed~w~ your helmet!");
            RemovePlayerAttachedObject(playerid, 3);
        }
        else
		{
            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s clicks the seatbelt button unbuckling their seatbelt.", ReturnName(playerid, 0));
            SendClientMessageEx(playerid, COLOR_WHITE, "You have taken off your seatbelt.");
            ShowPlayerFooter(playerid, "You have ~r~removed~w~ your seatbelt!");
        }
	}


	if (PlayerData[playerid][pTaxiDuty])
	{
        foreach (new i : Player) if (PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
	        LeaveTaxi(i, playerid);
	    }
	    SetPlayerColor(playerid, DEFAULT_COLOR);

        PlayerData[playerid][pTaxiDuty] = false;
        SendServerMessage(playerid, "You are no longer on taxi duty!");
	}
    if (PlayerData[playerid][pDrivingTest] || PlayerData[playerid][pBikeTest] || PlayerData[playerid][pTruckTest])
	{
	    SetTimerEx("PutInsideVehicle", 500, false, "dd", playerid, vehicleid);
		Dialog_Show(playerid, LeaveTest, DIALOG_STYLE_MSGBOX, "Confirm Test Leave", "Warning: Are you sure you want to exit the test?", "Yes", "No");
	}
	if (PlayerData[playerid][pJob] == JOB_UNLOADER && GetVehicleModel(vehicleid) == 530)
	{
	    CoreVehicles[vehicleid][vehLoadType] = 0;
		DestroyObject(CoreVehicles[vehicleid][vehCrate]);

		CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    if (IsPlayerNPC(playerid))
	    return 1;

	if(UsingStretcher[playerid] == true)
    {
    	VehicleStop(playerid);
    	SendErrorMessage(playerid, "You can't enter a vehicle while holding a stretcher (/dropstretcher)");
    	return 1;
    }

	if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED && !ispassenger || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || PlayerData[playerid][pInjured] || PlayerData[playerid][pFirstAid]) {
	    ClearAnimations(playerid);

	    return 0;
	}
	new id = Car_GetID(vehicleid);

	if (!ispassenger && id != -1 && CarData[id][carFaction] > 0 && GetFactionType(playerid) != CarData[id][carFaction]) {
	    ClearAnimations(playerid);

	    return SendErrorMessage(playerid, "You don't have the keys to this vehicle.");
	}
	if (!ispassenger && id != -1 && CarData[id][carJob] > 0 && PlayerData[playerid][pJob] != CarData[id][carJob]) {
	    ClearAnimations(playerid);

	    return SendErrorMessage(playerid, "You don't have the keys to this vehicle.");
	}
	if (ispassenger)
	{
		if (GetVehicleModel(vehicleid) == 519)
		{
			IsInShml[playerid]=vehicleid;
			SetPlayerPosEx(playerid, 1891.4706,-8156.8750,2.4471);
			SetPlayerFacingAngle(playerid, 0);
			SetCameraBehindPlayer(playerid);
			SetPlayerInterior(playerid, 1);
		}
	}
	CarBomb_OnVehicleStart(vehicleid);
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(TruckingCheck[playerid] >= 1 && PlayerData[playerid][pUnloading] == -1)
	{
	    if (!IsPlayerInAnyVehicle(playerid))
		{
		    SendErrorMessage(playerid, "You're not in a vehicle");
		    return 1;
		}
		new vehicleid = GetPlayerVehicleID(playerid);
		if (!IsLoadableVehicle(vehicleid))
  		{
  			SendErrorMessage(playerid, "You're not in a delivery vehicle.");
  		}
	    new string[180];
        format(string, sizeof(string), "You have earned $%d from the courier mission!", TruckingCheck[playerid]);
        GiveMoney(playerid, TruckingCheck[playerid]);
        TruckingCheck[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, string);
		DisablePlayerCheckpoint(playerid);
		PlayerData[playerid][pLoadType] = 0;
	}
	if (PlayerData[playerid][pCP])
	{
	    DisablePlayerCheckpoint(playerid);
	    PlayerData[playerid][pCP] = 0;
	}
	if (PlayerData[playerid][pTask])
	{
	    new id = -1;

		if ((id = Entrance_Nearest(playerid)) != -1 && EntranceData[id][entranceType] == 2 && !PlayerData[playerid][pBankTask])
		    ShowPlayerFooter(playerid, "Press ~y~'F'~w~ to enter this bank.");

        if ((id = Business_Nearest(playerid)) != -1 && BusinessData[id][bizType] == 1 && !PlayerData[playerid][pStoreTask])
		    ShowPlayerFooter(playerid, "Press ~y~'F'~w~ to enter this retail store.");

        if ((id = Entrance_Nearest(playerid)) != -1 && EntranceData[id][entranceType] == 1 && !PlayerData[playerid][pTestTask])
		    ShowPlayerFooter(playerid, "Press ~y~'F'~w~ to enter this DMV.");

		DisablePlayerCheckpoint(playerid);
	}
 	if (PlayerData[playerid][pDealerCallMP] == 0)
 	{
   		DisablePlayerCheckpoint(playerid);
  	}
  	if (PlayerData[playerid][pDealerCallPP] == 0)
 	{
	    DisablePlayerCheckpoint(playerid);
  	}
  	if (PlayerData[playerid][pDealerCallSMGP] == 0)
 	{
	    DisablePlayerCheckpoint(playerid);
  	}
  	if (PlayerData[playerid][pDealerCallSP] == 0)
 	{
	    DisablePlayerCheckpoint(playerid);
  	}
  	if (PlayerData[playerid][pDealerCallRP] == 0)
 	{
	    DisablePlayerCheckpoint(playerid);
  	}
  	if (PlayerData[playerid][pDealerCallDP] == 0)
 	{
	    DisablePlayerCheckpoint(playerid);
  	}
	if (PlayerData[playerid][pDrivingTest] || PlayerData[playerid][pBikeTest] || PlayerData[playerid][pTruckTest])
	{
	    PlayerData[playerid][pTestStage]++;

	    if (PlayerData[playerid][pTestStage] < sizeof(g_arrDrivingCheckpoints)) {
			SetPlayerCheckpoint(playerid, g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][0], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][1], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][2], 3.0);
		}
		else
		{
		    static
		        Float:health;

		    GetVehicleHealth(GetPlayerVehicleID(playerid), health);

		    if (health < 950.0)
				SendErrorMessage(playerid, "You have failed the driving test - the vehicle was damaged!");

		    else
			{
		        if(PlayerData[playerid][pDrivingTest])
				{
					GiveMoney(playerid, -50);
		        	ShowPlayerFooter(playerid, "You've been charged ~r~$50~w~ for the test.");

					Inventory_Add(playerid, "Car License", 1581);

					SendServerMessage(playerid, "You have passed the driving test and received your car license.");

					new query[128];
					format(query, sizeof(query), "UPDATE `characters` SET `CarLicense` = '1' WHERE `chara` = '%s'", ReturnName(playerid));
					mysql_tquery(g_iHandle, query);
					PlayerData[playerid][pCarLicense] = 1;
				}

				if(PlayerData[playerid][pBikeTest])
				{
					GiveMoney(playerid, -200);
		        	ShowPlayerFooter(playerid, "You've been charged ~r~$200~w~ for the test.");

					Inventory_Add(playerid, "Motorbike License", 1581);

					SendServerMessage(playerid, "You have passed the motorcycle test and received your bike license.");

					new query[128];
					format(query, sizeof(query), "UPDATE `characters` SET `MotorBikeLicense` = '1' WHERE `chara` = '%s'", ReturnName(playerid));
					mysql_tquery(g_iHandle, query);
					PlayerData[playerid][pBikeLicense] = 1;
				}

				if(PlayerData[playerid][pTruckTest])
				{
					GiveMoney(playerid, -500);
		        	ShowPlayerFooter(playerid, "You've been charged ~r~$500~w~ for the test.");

					Inventory_Add(playerid, "Truck License", 1581);

					SendServerMessage(playerid, "You have passed the truck license test and received your truck license.");

					new query[128];
					format(query, sizeof(query), "UPDATE `characters` SET `TruckLicense` = '1' WHERE `chara` = '%s'", ReturnName(playerid));
					mysql_tquery(g_iHandle, query);
					PlayerData[playerid][pTruckLicense] = 1;
				}
		    }
  			CancelDrivingTest(playerid);
		}
	}
	else
	{
	    new
			vehicleid = GetPlayerVehicleID(playerid),
			Float:health;

		if (PlayerData[playerid][pWaypoint])
		{
		    PlayerData[playerid][pWaypoint] = 0;

		    DisablePlayerCheckpoint(playerid);
		    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][69]);
		}
		else if (PlayerData[playerid][pJob] == JOB_COURIER && !IsPlayerInAnyVehicle(playerid))
		{
			if (PlayerData[playerid][pLoading] && !PlayerData[playerid][pLoadCrate] && Job_NearestPoint(playerid) != -1)
			{
			    PlayerData[playerid][pLoadCrate] = 1;

		        SetPlayerAttachedObject(playerid, 4, 3014, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
				ShowPlayerFooter(playerid, "Press ~y~'N'~w~ near a truck to load the crate.");
			}
			else if (PlayerData[playerid][pUnloading] != -1)
			{
				if (!PlayerData[playerid][pLoadCrate])
				{
				    PlayerData[playerid][pLoadCrate] = 1;
				    ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);

			        SetPlayerAttachedObject(playerid, 4, 3014, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

					SetPlayerCheckpoint(playerid, BusinessData[PlayerData[playerid][pUnloading]][bizDeliver][0], BusinessData[PlayerData[playerid][pUnloading]][bizDeliver][1], BusinessData[PlayerData[playerid][pUnloading]][bizDeliver][2], 1.0);
					ShowPlayerFooter(playerid, "Deliver the crate to the ~r~checkpoint.");

					CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoads]--;
				}
				else
				{
				    static
				        Float:fX,
				        Float:fY,
				        Float:fZ,
						string[64];

				    PlayerData[playerid][pLoadCrate] = 0;
				    ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

				    RemovePlayerAttachedObject(playerid, 4);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

					switch (CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoadType])
					{
					    case 1:
						{
							TruckingCheck[playerid] += 110;
					        //GiveMoney(playerid, 35);
					        ShowPlayerFooter(playerid, "~g~$110~w~ has been added to your check.");
							BusinessData[PlayerData[playerid][pUnloading]][bizProducts] += 15;
							Business_Save(PlayerData[playerid][pUnloading]);
					    }
					    case 2:
						{
						    TruckingCheck[playerid] += 125;
					        //GiveMoney(playerid, 40);
					        ShowPlayerFooter(playerid, "~g~$125~w~ has been added to your check.");
							BusinessData[PlayerData[playerid][pUnloading]][bizProducts] += 15;
							Business_Save(PlayerData[playerid][pUnloading]);
					    }
					    case 3:
						{
						    TruckingCheck[playerid] += 115;
					        //GiveMoney(playerid, 30);
					        ShowPlayerFooter(playerid, "~g~$115~w~ has been added to your check.");
							BusinessData[PlayerData[playerid][pUnloading]][bizProducts] += 15;
							Business_Save(PlayerData[playerid][pUnloading]);
					    }
					    case 4:
						{
						    TruckingCheck[playerid] += 85;
					        //GiveMoney(playerid, 35);
					        ShowPlayerFooter(playerid, "~g~$85~w~ has been added to your check.");
							BusinessData[PlayerData[playerid][pUnloading]][bizProducts] += 15;
							Business_Save(PlayerData[playerid][pUnloading]);
					    }
					    case 5:
						{
						    TruckingCheck[playerid] += 110;
					        //GiveMoney(playerid, 40);
					        ShowPlayerFooter(playerid, "~g~$110~w~ has been added to your check.");
							BusinessData[PlayerData[playerid][pUnloading]][bizProducts] += 15;
							Business_Save(PlayerData[playerid][pUnloading]);
					    }
					    case 6:
						{
						    TruckingCheck[playerid] += 110;
					        //GiveMoney(playerid, 35);
					        ShowPlayerFooter(playerid, "~g~$110~w~ has been added to your check.");
							BusinessData[PlayerData[playerid][pUnloading]][bizProducts] += 15;
							Business_Save(PlayerData[playerid][pUnloading]);
					    }
					}
					if (CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoadType] == 5)
					{
						for (new i = 0; i < MAX_GAS_PUMPS; i ++) if (PumpData[i][pumpExists] && PumpData[i][pumpBusiness] == PlayerData[playerid][pUnloading]) {
						    PumpData[i][pumpFuel] += 100;

			                format(string, sizeof(string), "[Gas Pump: %d]\n{FFFFFF}Fuel Left: %d liters", i, PumpData[i][pumpFuel]);
							SendClientMessageEx(playerid, -1, string);
						    UpdateDynamic3DTextLabelText(PumpData[i][pumpText3D], COLOR_DEPARTMENT, string);

						    Pump_Save(i);
						}
					}
					else
					{
						BusinessData[PlayerData[playerid][pUnloading]][bizProducts] += 20;
						Business_Save(PlayerData[playerid][pUnloading]);
					}
					if (CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoads] > 0)
					{
					    GetVehicleBoot(PlayerData[playerid][pUnloadVehicle], fX, fY, fZ);
					    SetPlayerCheckpoint(playerid, fX, fY, fZ, 1.0);
					}
					else
					{
					    CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoads] = 0;
					    CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoadType] = 0;

				     	PlayerData[playerid][pUnloading] = -1;
					    PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;

						DisablePlayerCheckpoint(playerid);
					    SendServerMessage(playerid, "You have delivered all the crates from the vehicle.");
					    SendServerMessage(playerid, "Deliver your truck to the checkpoint to get paid.");
					    SetPlayerCheckpoint(playerid, 605.3452,1651.1082,6.9922, 5.0);

					    if (PlayerData[playerid][pShipment] != -1)
					    {
					        foreach (new i : Player) if (Business_IsOwner(i, PlayerData[playerid][pShipment])) {
					            SendServerMessage(playerid, "%s has delivered your shipment to %s.", ReturnName(playerid, 0), BusinessData[PlayerData[playerid][pShipment]][bizName]);
							}
							BusinessData[PlayerData[playerid][pShipment]][bizShipment] = 0;
							Business_Save(PlayerData[playerid][pShipment]);

          					PlayerData[playerid][pShipment] = -1;
          					PlayerData[playerid][pDeliverShipment] = 0;
					    }
					}
				}
			}
		}
		else if (PlayerData[playerid][pJob] == JOB_MINER && PlayerData[playerid][pMinedRock] && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
		{
			PlayerData[playerid][pMinedRock] = 0;
			PlayerData[playerid][pMineCount] = 0;

			DisablePlayerCheckpoint(playerid);
			RemovePlayerAttachedObject(playerid, 4);

			SetPlayerAttachedObject(playerid, 4, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

			switch (random(100))
			{
			    case 0..5:
				{
					SendServerMessage(playerid, "You have earned $32 for the block of Quartz.");
					GiveMoney(playerid, 32);
			    }
			    case 6..30:
				{
                    SendServerMessage(playerid, "You have earned $80 for the block of Gypsum.");
					GiveMoney(playerid, 80);
			    }
			    case 31..69:
				{
                    SendServerMessage(playerid, "You have earned $91 for the block of Pyroxene.");
					GiveMoney(playerid, 91);
			    }
			    case 70..89:
				{
                    SendServerMessage(playerid, "You have earned $136 for the block of Halite.");
					GiveMoney(playerid, 136);
			    }
			    case 90..94:
				{
                    SendServerMessage(playerid, "You have earned $177 for the block of Amphibole.");
					GiveMoney(playerid, 177);
			    }
			    case 95..97:
				{
                    SendServerMessage(playerid, "You have earned $409 for the block of Biolite.");
					GiveMoney(playerid, 409);
			    }
			    case 98..99:
				{
                    SendServerMessage(playerid, "You have earned $2109 for a bit of Gold.");
					GiveMoney(playerid, 2109);
			    }
			}
		}
	    else if (PlayerData[playerid][pJob] == JOB_UNLOADER && IsPlayerInWarehouse(playerid) && GetVehicleModel(vehicleid) == 530 && CoreVehicles[vehicleid][vehLoadType] == 7)
	    {
	        GetVehicleHealth(vehicleid, health);

	        CoreVehicles[vehicleid][vehLoadType] = 0;
	        DestroyObject(CoreVehicles[vehicleid][vehCrate]);

			CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
			DisablePlayerCheckpoint(playerid);

			if (health < CoreVehicles[vehicleid][vehLoadHealth]) {
			    SendErrorMessage(playerid, "You have damaged the crate during the process.");
			}
			else {
				new money3 = random(80) + 50;
				SendServerMessage(playerid, "You have unloaded a crate for $%d.", money3);
				GiveMoney(playerid, money3);
			}
		}
		else if (PlayerData[playerid][pJob] == JOB_SORTER && PlayerData[playerid][pSorting] != -1)
		{
		    if (PlayerData[playerid][pSortCrate])
		    {
		        PlayerData[playerid][pSortCrate] = 0;

		        RemovePlayerAttachedObject(playerid, 4);
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

		        ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
		        SetPlayerCheckpoint(playerid, JobData[PlayerData[playerid][pSorting]][jobPoint][0], JobData[PlayerData[playerid][pSorting]][jobPoint][1], JobData[PlayerData[playerid][pSorting]][jobPoint][2], 1.0);

				new money2 = random(60) + 70;
				SendServerMessage(playerid, "You earned $%d for the package.",money2);
				GiveMoney(playerid, money2);
			}
			else
			{
                SetPlayerAttachedObject(playerid, 4, 1220, 5, 0.137832, 0.176979, 0.151424, 96.305931, 185.363006, 20.328088, 0.699999, 0.800000, 0.699999);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
				SetPlayerCheckpoint(playerid, JobData[PlayerData[playerid][pSorting]][jobDeliver][0], JobData[PlayerData[playerid][pSorting]][jobDeliver][1], JobData[PlayerData[playerid][pSorting]][jobDeliver][2], 1.0);

                PlayerData[playerid][pSortCrate] = 1;
				ShowPlayerFooter(playerid, "Deliver the package to the ~r~marker.");
			}
		}
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if (IsPlayerNPC(playerid))
	    return 1;

	new vehicleid = GetPlayerVehicleID(playerid);

	if (newstate == PLAYER_STATE_WASTED && PlayerData[playerid][pJailTime] < 1)
	{
	    for (new i = 34; i < 39; i ++) {
			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	    }
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][82]);

	    PlayerData[playerid][pHealth] = 100.0;

	    ResetWeapons(playerid);
	    ResetPlayer(playerid);

	    PlayerData[playerid][pKilled] = 1;

	    if (!PlayerData[playerid][pInjured])
		{
	        PlayerData[playerid][pInjured] = 1;

	        PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
	    	PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

	    	GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	    	GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
		}
		else
		{
		    TextDrawHideForPlayer(playerid, gServerTextdraws[2]);

			PlayerData[playerid][pInjured] = 0;
			PlayerData[playerid][pHospital] = GetClosestHospital(playerid);
		}
		if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
		{
		    SendClientMessage(PlayerData[playerid][pCallLine], COLOR_YELLOW, "[Phone]:{FFFFFF} The caller hanged up the phone.");
		    CancelCall(playerid);
		}
		if (PlayerData[playerid][pCarryCrate] != -1)
		{
			Crate_Drop(playerid);
		}
	}
	else if (oldstate == PLAYER_STATE_DRIVER)
	{
	    if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED)
	        return RemoveFromVehicle(playerid);

	    for (new i = 34; i < 39; i ++)
			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][82]);
	}
	else if (newstate == PLAYER_STATE_DRIVER)
	{
	    new id = Car_GetID(vehicleid);

		if (id != -1 && CarData[id][carFaction] > 0 && GetFactionType(playerid) != CarData[id][carFaction]) {
		    RemovePlayerFromVehicle(playerid);

	    	return SendErrorMessage(playerid, "You don't have the keys to this vehicle.");
		}
		if (id != -1 && CarData[id][carJob] > 0 && PlayerData[playerid][pJob] != CarData[id][carJob]) {
		    RemovePlayerFromVehicle(playerid);

	    	return SendErrorMessage(playerid, "You don't have the keys to this vehicle.");
		}
		if (PlayerData[playerid][pJob] == JOB_GARBAGE && GetVehicleModel(vehicleid) == 408 && CoreVehicles[vehicleid][vehTrash] > 0)
		{
		    new pointid = -1;

		    if ((pointid = GetClosestJobPoint(playerid, 7)) != -1)
		    {
			    PlayerData[playerid][pCP] = 1;
			    SetPlayerCheckpoint(playerid, JobData[pointid][jobPoint][0], JobData[pointid][jobPoint][1], JobData[pointid][jobPoint][2], 2.5);

		    	SendServerMessage(playerid, "This vehicle is loaded with %d trash bags (marker set to dump).", CoreVehicles[vehicleid][vehTrash]);
		    }
		}
		if (PlayerData[playerid][pJob] == JOB_COURIER && IsLoadableVehicle(vehicleid) && CoreVehicles[vehicleid][vehLoads] > 0)
		{
		    if (PlayerData[playerid][pLoading])
		    {
				DisablePlayerCheckpoint(playerid);
				PlayerData[playerid][pLoading] = 0;
			}
			static
			    string[64];

		    switch (CoreVehicles[vehicleid][vehLoadType])
			{
				case 1: format(string, sizeof(string), "~b~Loaded:~w~ Retail Supplies~n~~b~Loaded Crates:~w~ %d", CoreVehicles[vehicleid][vehLoads]);
		        case 2: format(string, sizeof(string), "~b~Loaded:~w~ Ammunition~n~~b~Loaded Crates:~w~ %d", CoreVehicles[vehicleid][vehLoads]);
                case 3: format(string, sizeof(string), "~b~Loaded:~w~ Clothing~n~~b~Loaded Crates:~w~ %d", CoreVehicles[vehicleid][vehLoads]);
                case 4: format(string, sizeof(string), "~b~Loaded:~w~ Food Supplies~n~~b~Loaded Crates:~w~ %d", CoreVehicles[vehicleid][vehLoads]);
                case 5: format(string, sizeof(string), "~b~Loaded:~w~ Fishing~n~~b~Loaded Crates:~w~ %d", CoreVehicles[vehicleid][vehLoads]);
                case 6: format(string, sizeof(string), "~b~Loaded:~w~ Furniture~n~~b~Loaded Crates:~w~ %d", CoreVehicles[vehicleid][vehLoads]);
                case 7: format(string, sizeof(string), "~b~Loaded:~w~ Fishing Supplies~n~~b~Loaded Crates:~w~ %d", CoreVehicles[vehicleid][vehLoads]);
			}
		    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][82]);
		    PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][82], string);
		}
	    if (IsVehicleImpounded(vehicleid))
	    {
	        RemovePlayerFromVehicle(playerid);
	        SendErrorMessage(playerid, "This vehicle is impounded and you can't use it.");
	    }
		else if (!IsEngineVehicle(vehicleid))
		{
			SetEngineStatus(vehicleid, true);
		}
		else
		{
			if (!GetEngineStatus(vehicleid))
			{
			    if (CoreVehicles[vehicleid][vehFuel] < 1)
	    			ShowPlayerFooter(playerid, "There is no ~r~fuel~w~ in this vehicle.");

				else if (ReturnVehicleHealth(vehicleid) <= 300)
	    			ShowPlayerFooter(playerid, "This vehicle is ~r~totalled~w~ and needs repairing.");

  				else ShowPlayerFooter(playerid, "Type ~r~/engine~w~ to start the engine.");
			}
			if (IsDoorVehicle(vehicleid) && !Inventory_HasItem(playerid, "Car License") && !PlayerData[playerid][pDrivingTest])
			{
   				SendClientMessage(playerid, COLOR_LIGHTRED, "[Vehicle]:{FFFFFF} You do not have a license.");
			}
			if (IsAMotorbike(vehicleid) && !Inventory_HasItem(playerid, "Motorbike License") && !PlayerData[playerid][pBikeTest])
			{
   				SendClientMessage(playerid, COLOR_LIGHTRED, "[Motorcycle]:{FFFFFF} You do not have a license.");
			}
			if (IsAPlane(vehicleid) && !Inventory_HasItem(playerid, "Airplane License") && !PlayerData[playerid][pDrivingTest])
			{
   				SendClientMessage(playerid, COLOR_LIGHTRED, "[Pilot]:{FFFFFF} You do not have a pilot's license.");
			}
			if (IsAHelicopter(vehicleid) && !Inventory_HasItem(playerid, "Helicopter License") && !PlayerData[playerid][pDrivingTest])
			{
   				SendClientMessage(playerid, COLOR_LIGHTRED, "[Helicopter]:{FFFFFF} You do not have a helicopter license.");
			}
		}
	    if (IsSpeedoVehicle(vehicleid) && !PlayerData[playerid][pDisableSpeedo]) for (new i = 34; i < 39; i ++) {
			PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		SetPlayerArmedWeapon(playerid, 0);
	}
	if ((oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER) && PlayerData[playerid][pPlayRadio])
	{
	    PlayerData[playerid][pPlayRadio] = 0;
	    StopAudioStreamForPlayer(playerid);
	}
	if (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    if (PlayerData[playerid][pBoombox] != INVALID_PLAYER_ID)
	    {
	        PlayerData[playerid][pBoombox] = INVALID_PLAYER_ID;
			StopAudioStreamForPlayer(playerid);
	    }
	    if (IsEngineVehicle(vehicleid) && CoreVehicles[vehicleid][vehRadio])
	    {
	        static
	            url[128];

			strunpack(url, CoreVehicles[vehicleid][vehURL]);

			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, url);

			PlayerData[playerid][pPlayRadio] = 1;
		}
	    foreach (new i : Player) if (PlayerData[i][pSpectator] == playerid) {
     		PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
		}
		if (PlayerData[playerid][pInjured] == 1)
		{
		    RemoveFromVehicle(playerid);
		}
	}
	if (newstate == PLAYER_STATE_PASSENGER)
	{
	    switch (GetPlayerWeapon(playerid))
	    {
	        case 22, 25, 28..33:
	    		SetPlayerArmedWeapon(playerid, GetPlayerWeapon(playerid));

			default:
				SetPlayerArmedWeapon(playerid, 0);
		}
	}
	else if (oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
	    foreach (new i : Player) if (PlayerData[i][pSpectator] == playerid) {
     		PlayerSpectatePlayer(i, playerid);
		}
	}
	if (newstate == PLAYER_STATE_PASSENGER && IsPlayerInsideTaxi(playerid))
	{
	    new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));

	    PlayerData[playerid][pTaxiFee] = 5;
	    PlayerData[playerid][pTaxiTime] = 0;
	    PlayerData[playerid][pTaxiPlayer] = driverid;

	    SendServerMessage(driverid, "%s has entered your taxi as a passenger.", ReturnName(playerid, 0));
		SendServerMessage(playerid, "You have entered %s's taxi.", ReturnName(driverid, 0));
	}
 	if (oldstate == PLAYER_STATE_PASSENGER && PlayerData[playerid][pTaxiTime] != 0 && PlayerData[playerid][pTaxiPlayer] != INVALID_PLAYER_ID)
	{
	    LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);
	}
	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    if (GetVehicleModel(vehicleid) == 431 || GetVehicleModel(vehicleid) == 437)
	    {
            SetPlayerPosEx(playerid, 2022.0273, 2235.2402, 2103.9536);
            SetPlayerTime(playerid, 00,00);
			SetPlayerFacingAngle(playerid, 0);
            SetCameraBehindPlayer(playerid);
            SetPlayerInterior(playerid, 1);
            Timer1[playerid] = SetTimerEx("HornA", 60000, 1, "i", playerid);
            Timer2[playerid] = SetTimerEx("HornB", 60500, 1, "i", playerid);
            Timer3[playerid] = SetTimerEx("STime", 60000, 1, "i", playerid);
	        IsInBus[playerid] = vehicleid;
	    }
	}
	if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 582)
	{
     	SetPlayerPosEx(playerid, 1061.719727, -914.996704, 138.026016);
     	SetPlayerFacingAngle(playerid, 0);
        SetCameraBehindPlayer(playerid);
        SetPlayerInterior(playerid, 1);
		Intropic[playerid] = GetPlayerVehicleID(playerid);
	}
	if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 519)
	{
     	SetPlayerPosEx(playerid, 1892.5037, -8156.8062, 2.4471);
     	SetPlayerFacingAngle(playerid, 0);
        SetCameraBehindPlayer(playerid);
        SetPlayerInterior(playerid, 1);
		IsInShml[playerid] = GetPlayerVehicleID(playerid);
	}
	if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 416)
	{
     	SetPlayerPosEx(playerid, -813.1215, -1007.3622, 2525.9072);
     	SetPlayerFacingAngle(playerid, 0);
        SetCameraBehindPlayer(playerid);
        SetPlayerInterior(playerid, 1);
		InAmbulance[playerid] = GetPlayerVehicleID(playerid);
	}
	if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 427)
	{
     	SetPlayerPosEx(playerid, 1384.0615, -2245.8015, 3006.4172);
     	SetPlayerFacingAngle(playerid, 0);
        SetCameraBehindPlayer(playerid);
        SetPlayerInterior(playerid, 1);
		InEnforcer[playerid] = GetPlayerVehicleID(playerid);
	}
	if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 508)
	{
     	SetPlayerPosEx(playerid, -1503.1620, 2511.7263, 3207.6506);
     	SetPlayerFacingAngle(playerid, 0);
        SetCameraBehindPlayer(playerid);
        SetPlayerInterior(playerid, 1);
		InJourney[playerid] = GetPlayerVehicleID(playerid);
	}
	if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 563)
	{
     	SetPlayerPosEx(playerid, -765.6241, 1596.5237, 3002.6099);
     	SetPlayerFacingAngle(playerid, 0);
        SetCameraBehindPlayer(playerid);
        SetPlayerInterior(playerid, 1);
		InRaindance[playerid] = GetPlayerVehicleID(playerid);
	}
	return 1;
}

OnPlayerSwapGun(playerid, newgun, oldgun)
{
	if(newgun == PlayerData[playerid][pAttachedGun1])
	{
		RemovePlayerAttachedObject(playerid, 6);
	}
	if(newgun == PlayerData[playerid][pAttachedGun2])
	{
		RemovePlayerAttachedObject(playerid, 7);
	}
	if(newgun == PlayerData[playerid][pAttachedGun3])
	{
		RemovePlayerAttachedObject(playerid, 8);
	}
	if(oldgun == PlayerData[playerid][pAttachedGun1])
	{
		new gunmodel = GetWeaponModel(PlayerData[playerid][pAttachedGun1]);

		SetPlayerAttachedObject(playerid, 6, gunmodel, PlayerData[playerid][pAttachedGun1Bone], PlayerData[playerid][pAttachedGun1Pos][0], PlayerData[playerid][pAttachedGun1Pos][1], PlayerData[playerid][pAttachedGun1Pos][2],
		PlayerData[playerid][pAttachedGun1Pos][3], PlayerData[playerid][pAttachedGun1Pos][4], PlayerData[playerid][pAttachedGun1Pos][5], PlayerData[playerid][pAttachedGun1Pos][6], PlayerData[playerid][pAttachedGun1Pos][7],
		PlayerData[playerid][pAttachedGun1Pos][8]);
	}
	if(oldgun == PlayerData[playerid][pAttachedGun2])
	{
		new gunmodel = GetWeaponModel(PlayerData[playerid][pAttachedGun2]);

		SetPlayerAttachedObject(playerid, 7, gunmodel, PlayerData[playerid][pAttachedGun2Bone], PlayerData[playerid][pAttachedGun2Pos][0], PlayerData[playerid][pAttachedGun2Pos][1], PlayerData[playerid][pAttachedGun2Pos][2],
		PlayerData[playerid][pAttachedGun2Pos][3], PlayerData[playerid][pAttachedGun2Pos][4], PlayerData[playerid][pAttachedGun2Pos][5], PlayerData[playerid][pAttachedGun2Pos][6], PlayerData[playerid][pAttachedGun2Pos][7],
		PlayerData[playerid][pAttachedGun2Pos][8]);
	}
	if(oldgun == PlayerData[playerid][pAttachedGun3])
	{
		new gunmodel = GetWeaponModel(PlayerData[playerid][pAttachedGun3]);

		SetPlayerAttachedObject(playerid, 8, gunmodel, PlayerData[playerid][pAttachedGun3Bone], PlayerData[playerid][pAttachedGun3Pos][0], PlayerData[playerid][pAttachedGun3Pos][1], PlayerData[playerid][pAttachedGun3Pos][2],
		PlayerData[playerid][pAttachedGun3Pos][3], PlayerData[playerid][pAttachedGun3Pos][4], PlayerData[playerid][pAttachedGun3Pos][5], PlayerData[playerid][pAttachedGun3Pos][6], PlayerData[playerid][pAttachedGun3Pos][7],
		PlayerData[playerid][pAttachedGun3Pos][8]);
	}
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	for(new i; i < MAX_METAL_DETECTORS; i++)
	{
		if(!MetalDetectors[i][detectorExists]) continue;
		if(areaid == MetalDetectors[i][dynamicArea])
		{
			if (HasMetalItem(playerid) && gettime() > PlayerData[playerid][pDetectorTime])
			{
				PlayerData[playerid][pDetectorTime] = gettime() + 5;

				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** The metal detector sounds off. (( %s ))", ReturnName(playerid, 0));
				PlayerPlaySoundEx(playerid, 43000);
			}
			break;
		}
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if (PlayerData[playerid][pKicked])
		return 0;

	static str[64], keys[3], vehicleid;

	new holdinggun = GetPlayerWeapon(playerid);
    if(holdinggun != PlayerData[playerid][pLastWeapon])
    {
        OnPlayerSwapGun(playerid, holdinggun, PlayerData[playerid][pLastWeapon]);
    }
    PlayerData[playerid][pLastWeapon] = holdinggun;

	if (GetPlayerWeapon(playerid) > 1 && (PlayerData[playerid][pHoldWeapon] > 0 || PlayerData[playerid][pMining] > 0))
	    SetPlayerArmedWeapon(playerid, 0);

	if (IsPlayerInAnyVehicle(playerid))
		vehicleid = GetPlayerVehicleID(playerid);
	else
	    vehicleid = INVALID_VEHICLE_ID;

	GetPlayerKeys(playerid, keys[0], keys[1], keys[2]);

	if (GetPlayerWeapon(playerid) != PlayerData[playerid][pWeapon] && !PlayerData[playerid][pAdmin])
	{
	    PlayerData[playerid][pWeapon] = GetPlayerWeapon(playerid);

		if (PlayerData[playerid][pWeapon] >= 1 && PlayerData[playerid][pWeapon] <= 45 && PlayerData[playerid][pWeapon] != 40 && PlayerData[playerid][pWeapon] != 2 && PlayerData[playerid][pGuns][g_aWeaponSlots[PlayerData[playerid][pWeapon]]] != GetPlayerWeapon(playerid) && !PlayerHasTazer(playerid) && !PlayerHasBeanBag(playerid) && PlayerData[playerid][pRangeBooth] == -1 && PlayerData[playerid][pCharacter] > 0)
		{
		    SendAdminAlert(COLOR_LIGHTRED, "Anticheat: {FFFFFF}There is a high chance that %s is weapon hacking (%s).", ReturnName(playerid, 0), ReturnWeaponName(PlayerData[playerid][pWeapon]));
			//Blacklist_Add(PlayerData[playerid][pIP], PlayerData[playerid][pUsername], "Anticheat", "Weapon Hacks");
			Kick(playerid);

			return 0;
		}
	}
	if (PlayerData[playerid][pMaskOn])
	{
		if (!PlayerData[playerid][pHideTags])
	    {
            foreach (new i : Player) {
				ShowPlayerNameTagForPlayer(i, playerid, 0);
			}
		    format(str, sizeof(str), "Mask_%d", PlayerData[playerid][pMaskID]);

	        PlayerData[playerid][pHideTags] = 1;
	        PlayerData[playerid][pNameTag] = CreateDynamic3DTextLabel(str, COLOR_WHITE, 0.0, 0.0, 0.2, 8.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1);
	    }
	}
	if (!PlayerData[playerid][pMaskOn] && PlayerData[playerid][pHideTags])
	{
		PlayerData[playerid][pHideTags] = 0;
	    foreach (new i : Player) {
			ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
		ResetNameTag(playerid);
	}
	if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    if (IsSpeedoVehicle(vehicleid) && !PlayerData[playerid][pDisableSpeedo])
	    {
		    static
		        Float:fDamage,
		        Float:fSpeed,
		        Float:fVelocity[3];

	  		GetVehicleHealth(vehicleid, fDamage);
	  		GetVehicleVelocity(vehicleid, fVelocity[0], fVelocity[1], fVelocity[2]);

	  		fDamage = floatdiv(1000 - fDamage, 10) * 1.42999; // 1.33334;
 	  		fSpeed = floatmul(floatsqroot((fVelocity[0] * fVelocity[0]) + (fVelocity[1] * fVelocity[1]) + (fVelocity[2] * fVelocity[2])), 100.0);

			if (fDamage < 0.0) fDamage = 0.0;
			else if (fDamage > 100.0) fDamage = 100.0;

	        format(str, sizeof(str), "Fuel:~w~ %d%c", CoreVehicles[vehicleid][vehFuel], '%');
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][35], str);

			format(str, sizeof(str), "Speed:~w~ %.0f mph", fSpeed);
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][36], str);

			format(str, sizeof(str), "Damage:~w~ %.0f/100%%", (fDamage > 100.0) ? (100.0) : (fDamage));
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][37], str);

	        format(str, sizeof(str), "Windows:~w~ %s", (CoreVehicles[vehicleid][vehWindowsDown]) ? ("Down") : ("Up"));
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][38], str);
		}
	}
	/*if (Detector_Nearest(playerid) != -1)
	{
		if (HasMetalItem(playerid) && gettime() > PlayerData[playerid][pDetectorTime])
		{
			PlayerData[playerid][pDetectorTime] = gettime() + 5;

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** The metal detector sounds off. (( %s ))", ReturnName(playerid, 0));
			PlayerPlaySoundEx(playerid, 43000);
		}
	}*/
	/*if (GetPlayerWeapon(playerid) == 42 && (keys[0] & KEY_FIRE))
	{
        static
	        Float:fX,
	        Float:fY,
	        Float:fZ;

	    for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	    {
			GetDynamicObjectPos(g_aFireObjects[i], fX, fY, fZ);

			if ((IsValidDynamicObject(g_aFireObjects[i]) && IsPlayerInRangeOfPoint(playerid, 4.0, fX, fY, fZ)) && ++ g_aFireExtinguished[i] == 32)
   			{
   			    SetTimerEx("DestroyWater", 2000, false, "d", CreateDynamicObject(18744, fX, fY, fZ - 0.2, 0.0, 0.0, 0.0));

      			DestroyDynamicObject(g_aFireObjects[i]);
	        	g_aFireExtinguished[i] = 0;
			}
		}
	}
	if ((keys[0] & KEY_FIRE) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 407 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 544))
	{
	    static
	        Float:fX,
	        Float:fY,
	        Float:fZ,
			Float:fVector[3],
			Float:fCamera[3];

	    GetPlayerCameraFrontVector(playerid, fVector[0], fVector[1], fVector[2]);
	    GetPlayerCameraPos(playerid, fCamera[0], fCamera[1], fCamera[2]);

	    for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	    {
			GetDynamicObjectPos(g_aFireObjects[i], fX, fY, fZ);

			if (IsValidDynamicObject(g_aFireObjects[i]) && IsPlayerInRangeOfPoint(playerid, 3050, fX, fY, fZ))
			{
				if (++g_aFireExtinguished[i] == 64 && DistanceCameraTargetToLocation(fCamera[0], fCamera[1], fCamera[2], fX, fY, fZ + 2.5, fVector[0], fVector[1], fVector[2]) < 12.0)
   				{
   			    	SetTimerEx("DestroyWater", 2000, false, "d", CreateDynamicObject(18744, fX, fY, fZ - 0.2, 0.0, 0.0, 0.0));

	      			DestroyDynamicObject(g_aFireObjects[i]);
		        	g_aFireExtinguished[i] = 0;
				}
		  	}
	    }
	}*/
	//stretcher stuff
	if(StretcherLoaded[playerid] == true && UsingStretcher[playerid] == true)
	{
	    if(IsPlayerConnected(PatientID[playerid]))
		{
			new Float:vx, Float:vy, Float:vz;
			GetPlayerVelocity(playerid, vx, vy, vz);
			ApplyAnimationEx(PatientID[playerid], "BEACH", "bather", 4.1, 1, 0, 0, 1, 0, 1);
			if(vx > 0.001 || vy > 0.001 || vz > 0.001)
			{
				new Float:X, Float:Y, Float:Z, Float:R;
				GetPlayerPos(playerid, X, Y, Z);
				GetPlayerFacingAngle(playerid, R);
				GetXYInFrontOfPlayer(playerid, X, Y, 1.65);
				SetPlayerPos(PatientID[playerid], X, Y, Z + 0.70);
				SetPlayerFacingAngle(PatientID[playerid], R);
				SetCameraBehindPlayer(PatientID[playerid]);
				ApplyAnimationEx(PatientID[playerid], "BEACH", "bather", 4.1, 1, 0, 0, 1, 0, 1);
			}
			return 1;
		}
	    else
	    {
	        StretcherLoaded[playerid] = false;
	        PatientID[playerid] = -1;
	        return 1;
	    }
	}
	//endstretcher
	return 1;
}

ResetVariables(playerid)
{
	if(Assisted[playerid] != -1)
	{
		new id = Assisted[playerid];
//		new string[128];
		Assisted[id] = -1;
		Assisted[playerid] = -1;
	}
	AssistanceNeeded[playerid] = 0;
	return 1;
}

forward MyHttpResponse(playerid, response_code, data[]);
public MyHttpResponse(playerid, response_code, data[])
{
	new name[MAX_PLAYERS],string[256];
	new ip[16];
	GetPlayerName(playerid, name, sizeof(name));
	GetPlayerIp(playerid, ip, sizeof ip);
	if(strcmp(ip, "127.0.0.1", true) == 0)
	{
		format(string, 256, "[LOCALHOST] %s(%d) has joined the server.", name, playerid);
	    SendAdminAlert( 0x09F7DFC8, string);
        return 1;
	}
	if(response_code == 200)
	{
		if(data[0] == 'Y')
		{
			format(string, 256, "[Proxy Detected] %s(%d) has been kicked from the server.", name, playerid);
	    	SendAdminAlert( 0xFF0000FF, string);
	    	SendClientMessage(playerid, COLOR_ANTICHEAT, "Please disable your proxy/VPN and rejoin!");
	    	KickEx(playerid);
		}
		if(data[0] == 'N')
		{
			format(string, 256, "[Proxy Not Detected] %s(%d) thank you for joining!", name, playerid);
	    	SendAdminAlert( 0x09F7DFC8, string );
		}
		if(data[0] == 'X')
		{
			printf("WRONG IP FORMAT");
		}
		else
		{
			printf("The request failed! The response code was: %d", response_code);
		}
	}
	return 1;
}

public OnPlayerConnect(playerid)
{
	if (IsPlayerNPC(playerid))
	    return 1;

	SetPlayerColor(playerid, 0xBFFFBC00);

	new ip[16], string[59];
	GetPlayerIp(playerid, ip, sizeof ip);
	format(string, sizeof string, "https://ip.teoh.io/api/vpn/%s", ip);
	HTTP(playerid, HTTP_GET, string, "", "MyHttpResponse");

	ResetVariables(playerid);
	ResetStatistics(playerid);

    //PlayAudioStreamForPlayer(playerid, "http://34.83.129.84/kcrp.mp3");

   	for (new i = 0; i < 100; i ++)
 	{
	    SendClientMessage(playerid, -1, "");
	}

	new
		str[128];

	ResetPlayerWeapons(playerid);
	SetPlayerArmedWeapon(playerid, 0);
	pFishing[playerid] = 0;
	FishWeight[playerid] = 0;

	//SetPlayerFightingStyle(playerid, PlayerData[playerid][pFightStyle]);

	PreloadAnimations(playerid);

	if (g_ServerRestart) {
		TextDrawShowForPlayer(playerid, gServerTextdraws[3]);
	}
	for (new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) {
	    RemovePlayerAttachedObject(playerid, i);
	}

	#include "./modular/create/removebuilding.pwn"

   	PlayerData[playerid][pTLAttached] = 0; // FlashLight system
	PlayerData[playerid][pFLAttached] = 0; // FlashLight system

	CancelSelectTextDraw(playerid);

	GetPlayerIp(playerid, PlayerData[playerid][pIP], 16);
	GetPlayerName(playerid, PlayerData[playerid][pUsername], MAX_PLAYER_NAME + 1);

	CreateTextDraws(playerid);

	format(str, sizeof(str), "SELECT * FROM `blacklist` WHERE `Username` = '%s' OR `IP` = '%s'", ReturnName(playerid), PlayerData[playerid][pIP]);
	mysql_tquery(g_iHandle, str, "OnQueryFinished", "dd", playerid, THREAD_BAN_LOOKUP);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	PlayerData[playerid][pLeaveTime] = GetTickCount();

	format(PlayerData[playerid][pLeaveIP], 16, PlayerData[playerid][pIP]);

	for___loop(new i = 0; i < MAX_ASSISTANCES; i++)
	{
		if(!AssistanceData[i][aExists])
			continue;
		if(AssistanceData[i][aPlayer] == playerid) Assistance_Remove(i);
	}

	DestroyObject(Stretcher[playerid]);

	new reasonstring[30];
	if(reason == 0) reasonstring = "Timeout/Crash";
	if(reason == 1) reasonstring = "Quit";
	if(reason == 2) reasonstring = "Kick/Ban";
	SendNearbyMessage(playerid, 30.0, COLOR_GREY, "[SERVER] %s just disconnected. (%s)", ReturnName(playerid, 0), reasonstring);

	if(PlayerData[playerid][pAdmin] >= 1 && PlayerData[playerid][pAdminHide] == 0)
    	SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF} %s %s has just disconnected. (%s)", AdminRankName(playerid), ReturnName(playerid, 0), reasonstring);

 	TerminateConnection(playerid);

	if(PoolAimer == playerid)
	{
		PoolAimer = -1;
		TextDrawHideForPlayer(playerid, PoolTD[0]);
		TextDrawHideForPlayer(playerid, PoolTD[1]);
		TextDrawHideForPlayer(playerid, PoolTD[2]);
		TextDrawHideForPlayer(playerid, PoolTD[3]);
		DestroyObject(AimObject);
	}
	if(PlayingPool[playerid])
	{
		PlayingPool[playerid] = 0;
		new
			count = GetPoolPlayersCount();
		if(count <= 0)
		{
			PoolStarted = 0;
			RespawnPoolBalls();
		}
	}

	return 1;
}

/*
Server_Save()
{
	new
	    File:file = fopen("server.ini", io_write),
	    str[128];

	format(str, sizeof(str), "TaxMoney = %d\n", g_TaxVault);
	return (fwrite(file, str), fclose(file));
}

Server_Load()
{
	new File:file = fopen("server.ini", io_read);

	if (file) {
		g_TaxVault = file_parse_int(file, "TaxMoney");

		fclose(file);
	}
	return 1;
}
*/

public OnGameModeInit()
{
	#include "./modular/sql/load.pwn"

	LoadPool();
    Streamer_TickRate(60);
	Streamer_VisibleItems(STREAMER_TYPE_OBJECT, VISIBLE_ITEMS);
	ShowPlayerMarkers(0);

	static
	    arrVirtualWorlds[2000];

	WeatherRotator();

	ManualVehicleEngineAndLights();
	new rcon[80];
	format(rcon, sizeof(rcon), "hostname %s", SERVER_HOSTNAME);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "weburl %s", SERVER_URL);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "language %s", SERVER_LANGUAGE);
	SendRconCommand(rcon);
	SetGameModeText(SERVER_REVISION);

	//Server_Load();

    SetModelPreviewRotation(18875, 90.0, 180.0, 0.0);
    SetModelPreviewRotation(2703, -105.0, 0.0, -15.0);
    SetModelPreviewRotation(2702, 90.0, 90.0, 0.0);
    SetModelPreviewRotation(2814, -90.0, 0.0, -90.0);
    SetModelPreviewRotation(2768, -15.0, 0.0, -160.0);
    SetModelPreviewRotation(19142, -20.0, -90.0, 0.0);
    SetModelPreviewRotation(1581, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(2958, -10.0, -15.0, 0.0);
    SetModelPreviewRotation(1575, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(1577, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(1578, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(18634, 90.0, 90.0, 0.0);
    SetModelPreviewRotation(2043, 0.0, 0.0, 90.0);
    SetModelPreviewRotation(1484, -15.0, 30.0, 0.0);
    SetModelPreviewRotation(2226, 0.0, 0.0, 180.0);

	for(new i = 0; i < sizeof(arrVirtualWorlds); i ++) {
	    arrVirtualWorlds[i] = i + 7000;
	}

	#include "./modular/create/global-textdraws.pwn"
	#include "./modular/create/object.pwn"

    for(new i = 0; i < 24; i ++)
	{
	    PrisonData[prisonCellOpened][i] = true;
		SetDynamicObjectPos(PrisonData[prisonCells][i], PrisonCells[i][0], PrisonCells[i][1] + 1.6, PrisonCells[i][2]);
	}

	flushExplosiveData();
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);

	SetNameTagDrawDistance(35.0);

	new tempSeconds;
	gettime(ServerTime[0], ServerTime[1], tempSeconds);

	UpdateTime();


	// dynamic areas
    areaViceCity = CreateDynamicRectangle(159.508300+VICECITY_MOVE_X, -2710.853271, 3173.678222+VICECITY_MOVE_X, 664.557983, -1, 0, -1);

	#include "./modular/custom.pwn"

	SetTimer("PlayerCheck", 1000, true);
	SetTimer("PlayerUpdateXY", 5000, true);
	SetTimer("FuelUpdate", 75000, true);
	SetTimer("RefuelCheck", 500, true);
	SetTimer("LotteryUpdate", 2700000, true);
	SetTimer("MinuteCheck", 60000, true);
	SetTimer("PlayerOnMapUpdate", 1000, true); // gta vc
	//SetTimer("WeatherRotator", 2400000, true);
	//SetTimer("RandomFire", 1800000, true);
	AntiDeAMX();

	return 1;
}

public OnGameModeExit()
{
	foreach(new i : Player)
	{
		if(PlayerData[i][pCreated]) 
		{
			SQL_SaveCharacter(i);
		}
	}

    foreach(new i : Player) { // gta vc
        if(IsPlayerConnected(i)) {
            if(ViewingMap{i}) {
                ViewingMap{i} = false;
                PlayerTextDrawDestroy(i, screenArrow[i]);
            }
        }
    }

	return 1;
}

CMD:gettickrate(playerid, params[])
{
    new string[128];
    format(string, sizeof(string), "Server tickrate: %i", GetServerTickRate());
    SendClientMessage(playerid, -1, string);
    return 1;
}

CMD:getcam(playerid, params[])
{
	new Float:x, Float:y, Float:z;
    GetPlayerCameraPos(playerid, x, y, z);

    printf("The camera is looking at %f,%f,%f.", x, y, z);
}

forward WeatherRotator();
public WeatherRotator()
{
	new index = random(sizeof(g_aWeatherRotations));

	SetWeather(g_aWeatherRotations[index]);
}

forward LotteryUpdate();
public LotteryUpdate()
{
	new
		number = random(60) + 1,
		jackpot = random(2000) + 1000;

	foreach (new i : Player)
	{
	    if(PlayerData[i][pLotteryB] == 1)
	    {
			if (PlayerData[i][pLottery] == number)
			{
				GiveMoney(i, jackpot);
				SendServerMessage(i, "You have won the lottery jackpot of %s!", FormatNumber(jackpot));
			}
			else
			{
		    	SendClientMessage(i, COLOR_WHITE, "[LOTTERY]: You didn't win the lottery draw this time.");
			}
			PlayerData[i][pLottery] = 0;
			PlayerData[i][pLotteryB] = 0;
		}
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    if (IsPlayerNPC(playerid))
	    return 1;

	if (!PlayerData[playerid][pAccount] && !PlayerData[playerid][pKicked])
	{

		SetPlayerTime(playerid, ServerTime[0], ServerTime[1]);

	    PlayerData[playerid][pAccount] = 1;
	    TogglePlayerSpectating(playerid, 1);

		SetPlayerColor(playerid, DEFAULT_COLOR);
		SetTimerEx("AccountCheck", 400, false, "d", playerid); // 400 ms
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
	AntiDeAMX();

    // Skill levels
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);

	for (new i = 84; i < 91; i ++) {
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	}

	/*if (PlayerData[playerid][pSpawnPoint])
	{
	 	SetDefaultSpawn(playerid);
	}*/

	if (PlayerData[playerid][pHUD])
	{
	 	TextDrawShowForPlayer(playerid, gServerTextdraws[0]);
		TextDrawShowForPlayer(playerid, gServerTextdraws[1]);
	}
    SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
    Streamer_ToggleIdleUpdate(playerid, true);
    //SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2], PlayerData[playerid][pPos][3], 0, 0, 0, 0, 0, 0);
	StopAudioStreamForPlayer(playerid);

	PlayerData[playerid][pKilled] = 0;

    if (PlayerData[playerid][pBleeding])
	{
 		PlayerData[playerid][pBleedTime] = 1;
   	}
	if (PlayerData[playerid][pJailTime] > 0)
	{
	    if (PlayerData[playerid][pPrisoned])
	    {
	        SetPlayerInPrison(playerid);
	    }
	    else
	    {
		    SetPlayerPos(playerid, 197.6346, 175.3765, 1003.0234);
		    SetPlayerInterior(playerid, 3);

		    SetPlayerVirtualWorld(playerid, (playerid + 100));
		    SetPlayerFacingAngle(playerid, 0.0);

		    SetCameraBehindPlayer(playerid);
		}
		ResetWeapons(playerid);

		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][70]);
	    SendServerMessage(playerid, "You have %d seconds of remaining jail time.", PlayerData[playerid][pJailTime]);
	}
	else if(PlayerData[playerid][pHospital] != -1)
	{
	    PlayerData[playerid][pHospitalTime] = 0;

	    PlayerData[playerid][pHunger] = 50;
	    PlayerData[playerid][pThirst] = 50;

		SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, playerid + 100);

		SetPlayerPosEx(playerid, -211.0370, -1738.6848, 676.7153);
		SetPlayerFacingAngle(playerid, 82.0000);

		SetPlayerCameraPos(playerid, -214.236602, -1738.812133, 676.648132);
		SetPlayerCameraLookAt(playerid, -203.072738, -1738.656127, 675.768737);

        ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
        ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);

		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Recovering... 15", 1000, 3);
		TogglePlayerControllable(playerid, 0);
		CreateCorpseEx(19944, getCoordsForCorpseX[playerid], getCoordsForCorpseY[playerid]-2, getCoordsForCorpseZ[playerid], 0, playerid);

	}
	else if (!PlayerData[playerid][pCreated])
	{
    	TogglePlayerControllable(playerid, 0);
		SetPlayerPos(playerid, 216.8005, -99.8691, 1005.2578);
    	SetPlayerFacingAngle(playerid, 90.0000);

  		SetPlayerInterior(playerid, 15);
		SelectTextDraw(playerid, -1);

		for (new i = 23; i < 34; i ++) {
		    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
		}
	}
	else
	{
	    SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

	    SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
	    SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

		SetCameraBehindPlayer(playerid);
		SetAccessories(playerid);

        if (PlayerData[playerid][pWorld] == PRISON_WORLD)
		{
		    SetPlayerPosEx(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		}
		else
		{
		    if(PlayerData[playerid][pInjured] == 0)
			{
				SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			}
		}
		if (PlayerData[playerid][pInjured])
		{
		    SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			SetTimerEx("GetPlayerPosForCorpse", 1000, false, "i", playerid);

			TextDrawShowForPlayer(playerid, gServerTextdraws[2]);
			SendClientMessage(playerid, COLOR_LIGHTRED, "[Alert]:{FFFFFF} You are injured and require medical attention.");

			ApplyAnimation(playerid, "CRACK", "null", 4.0, 0, 0, 0, 1, 0, 1);
			ApplyAnimation(playerid, "CRACK", "crckdeth1", 4.1, 0, 0, 0, 1, 0, 1);
		}
		else
		{
			SetWeapons(playerid);
			ShowHungerTextdraw(playerid, 1);

			SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
			SetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);
		}
	}

	PreloadAnimLib(playerid, "POOL");

	if(PoolAimer == playerid)
	{
		PoolAimer = -1;
		TextDrawHideForPlayer(playerid, PoolTD[0]);
		TextDrawHideForPlayer(playerid, PoolTD[1]);
		TextDrawHideForPlayer(playerid, PoolTD[2]);
		TextDrawHideForPlayer(playerid, PoolTD[3]);
		DestroyObject(AimObject);
	}
	if(PlayingPool[playerid])
	{
		PlayingPool[playerid] = 0;
		new
			count = GetPoolPlayersCount();
		if(count <= 0)
		{
			PoolStarted = 0;
			RespawnPoolBalls();
		}
	}
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    if (!success)
    {
       SendErrorMessage(playerid, "Unknown command. Please use /help for a list of commands or use /support.");
    }
    return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if (!SQL_IsLogged(playerid) || (PlayerData[playerid][pKilled] > 0 || PlayerData[playerid][pHospital] != -1))
	    return 0;

	if(PlayerData[playerid][pMuted] && strfind(cmdtext, "/unmute", true) != 0)
 	{
	    SendErrorMessage(playerid, "You are muted by the system.");
	    return 0;
	}
	if (PlayerData[playerid][pCommandCount] < 6)
	{
	    PlayerData[playerid][pCommandCount]++;

	    if (PlayerData[playerid][pCommandCount] == 6) {
	        PlayerData[playerid][pCommandCount] = 0;

	        PlayerData[playerid][pMuted] = 1;
	        PlayerData[playerid][pMuteTime] = 5;

	        SendServerMessage(playerid, "You have been muted for spamming (5 seconds).");
	        SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has been automatically muted for spamming.", ReturnName(playerid, 0));
	        return 0;
		}
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if (!PlayerData[playerid][pLogged] && !PlayerData[playerid][pCharacter])
	    return 0;

	if (PlayerData[playerid][pMuted])
	{
	    SendErrorMessage(playerid, "You are muted by the system.");
	    return 0;
	}

	if(stringContainsIP(text))
    {
			SendAdminAlert(COLOR_LIGHTRED, "[SA Detection]: Player: %s | Msg: %s", ReturnName(playerid, 0), text);
    }

	if (PlayerData[playerid][pSpamCount] < 5)
	{
	    PlayerData[playerid][pSpamCount]++;

	    if (PlayerData[playerid][pSpamCount] == 5) {
	        PlayerData[playerid][pSpamCount] = 0;

	        PlayerData[playerid][pMuted] = 1;
	        PlayerData[playerid][pMuteTime] = 5;

	        SendServerMessage(playerid, "You have been muted for spamming (5 seconds).");
	        SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has been automatically muted for spamming.", ReturnName(playerid, 0));
	        return 0;
		}
	}


	if(PlayerData[playerid][pNewsGuest] != INVALID_PLAYER_ID && GetFactionType(PlayerData[playerid][pNewsGuest]) == FACTION_NEWS && IsPlayerInAnyVehicle(playerid) && IsNewsVehicle(GetPlayerVehicleID(playerid)))
	{
	    foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
	  		SendClientMessageEx(i, COLOR_LIGHTGREEN, "[News] Guest %s: %s", ReturnName(playerid, 2), text);
		}
	   	return 0;
   	}
	else
	{
		new
			targetid = PlayerData[playerid][pCallLine];

		if(!IsPlayerInAnyVehicle(playerid)) SetPlayerChatBubble(playerid, text, COLOR_WHITE, 10.0, 6000);

		if (IsPlayerOnPhone(playerid))
		{
			SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "[Phone]: %s says: %s", ReturnName(playerid, 2), text);
		}
		else if (PlayerData[playerid][pAccent] != 0 && !IsPlayerOnPhone(playerid) && !IsPlayerInAnyVehicle(playerid))
		{
			SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "[%s Accent] %s says: %s", GetAccent(playerid), ReturnName(playerid, 2), text);
		}
		else if(IsPlayerInAnyVehicle(playerid) && IsWindowedVehicle(GetPlayerVehicleID(playerid)) && !CoreVehicles[GetPlayerVehicleID(playerid)][vehWindowsDown] && !IsPlayerOnPhone(playerid) && PlayerData[playerid][pAccent])
		{
		    SendVehicleMessage(GetPlayerVehicleID(playerid), 0xBBFFEEFF, "[Vehicle] [%s Accent] %s says: %s", GetAccent(playerid), ReturnName(playerid, 2), text);
		}
		else if(PlayerData[playerid][pAccent] == 0 && !IsPlayerOnPhone(playerid) && !IsPlayerInAnyVehicle(playerid))
		{
			SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "%s says: %s", ReturnName(playerid, 2), text);
		}
		else if(IsPlayerInAnyVehicle(playerid) && IsWindowedVehicle(GetPlayerVehicleID(playerid)) && !CoreVehicles[GetPlayerVehicleID(playerid)][vehWindowsDown] && !IsPlayerOnPhone(playerid))
		{
		    SendVehicleMessage(GetPlayerVehicleID(playerid), 0xBBFFEEFF, "[Vehicle] %s says: %s", ReturnName(playerid, 2), text);
		}
		else if(!IsWindowedVehicle(GetPlayerVehicleID(playerid)) && !IsPlayerOnPhone(playerid) || IsWindowedVehicle(GetPlayerVehicleID(playerid)) && CoreVehicles[GetPlayerVehicleID(playerid)][vehWindowsDown] && !IsPlayerOnPhone(playerid))
		{
		    SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "%s says: %s", ReturnName(playerid, 2), text);
			SetPlayerChatBubble(playerid, text, COLOR_WHITE, 10.0, 6000);
		}

		if (!IsPlayerInAnyVehicle(playerid) && !PlayerData[playerid][pInjured] && !PlayerData[playerid][pLoopAnim] && !PlayerData[playerid][pToggleChatAnim] && PlayerData[playerid][pCallLine] == INVALID_PLAYER_ID) {
			ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.1, 0, 0, 0, 1, 1);
			SetTimerEx("StopChatting", strlen(text) * 100, false, "d", playerid);
		}
		switch (PlayerData[playerid][pEmergency])
		{
			case 1:
			{
				if (!strcmp(text, "Police", true))
				{
				    PlayerData[playerid][pEmergency] = 2;
				    SendClientMessage(playerid, COLOR_RADIO, "[Dispatch]:{FFFFFF} You've been dispatched to the police department. What is your location?");
				}
				else if (!strcmp(text, "FD", true))
				{
				    PlayerData[playerid][pEmergency] = 4;
				    SendClientMessage(playerid, COLOR_HOSPITAL, "[Dispatch]:{FFFFFF} You've been dispatched to the Fire Department HQ. What is your location?");
				}
				else if (!strcmp(text, "Both", true))
				{
				    PlayerData[playerid][pEmergency] = 2;
					PlayerData[playerid][pEmergencyBoth] = 1;
				    SendClientMessage(playerid, COLOR_RADIO, "[Dispatch]:{FFFFFF} Your call will be sent to both the police department and fire department. What is your location?");
				}
				else SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Dispatch]:{FFFFFF} Sorry, I don't understand. Please repeat.\"Police\", \"FD\" or \"Both\"?");
			}
			case 2:
			{
				new textmsg[128];
				strcat(textmsg, text);
				EmergencyCallsData[playerid][eCallLocation] = textmsg;
				PlayerData[playerid][pEmergency] = 3;
				SendClientMessage(playerid, COLOR_RADIO, "[Dispatch]:{FFFFFF} Ok, please describe your emergency.");
			}
			case 3:
			{
				if(PlayerData[playerid][pEmergencyBoth] == 0)
				{
					SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "911 CALL: %s (Ph#: %d)", ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
					SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "AGENCIES: PD");
					SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "LOCATION (%s): %s", GetPlayerLocation(playerid), EmergencyCallsData[playerid][eCallLocation]);
					SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "DESCRIPTION: %s", text);

					Niner_Create(playerid, NINER_POLICE, EmergencyCallsData[playerid][eCallLocation], text);

					SendClientMessage(playerid, COLOR_RADIO, "[Dispatch]:{FFFFFF} Please stay calm, our units are on the way.");
				}

				if(PlayerData[playerid][pEmergencyBoth] == 1)
				{
					SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, "911 CALL: %s (Ph#: %d)", ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
					SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, "AGENCIES: Police and Fire");
					SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, "LOCATION (%s): %s", GetPlayerLocation(playerid), EmergencyCallsData[playerid][eCallLocation]);
        			SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, "DESCRIPTION: %s", text);

					SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "911 CALL: %s (Ph#: %d)", ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
					SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "AGENCIES: Police and Fire");
					SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "LOCATION (%s): %s", GetPlayerLocation(playerid), EmergencyCallsData[playerid][eCallLocation]);
        			SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "DESCRIPTION: %s", text);

					Niner_Create(playerid, NINER_BOTH, EmergencyCallsData[playerid][eCallLocation], text);

					SendClientMessage(playerid, COLOR_RADIO, "[Dispatch]:{FFFFFF} units have been dispatched.");

					PlayerData[playerid][pEmergencyBoth] = 0;
				}

			    cmd_hangup(playerid, "\1");

			    //SetFactionMarker(playerid, FACTION_POLICE, 0x00D700FF);
			}
			case 4:
			{
				new textmsg[128];
				strcat(textmsg, text);
				EmergencyCallsData[playerid][eCallLocation] = textmsg;
				PlayerData[playerid][pEmergency] = 5;
				SendClientMessage(playerid, COLOR_HOSPITAL, "[Dispatch]:{FFFFFF} Ok, please describe your emergency.");
			}
			case 5:
			{
			    SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, "911 CALL: %s (%s)", ReturnName(playerid, 0), GetPlayerLocation(playerid));
				SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, "AGENCIES: Fire Department Only");
				SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, "LOCATION (%s): %s", GetPlayerLocation(playerid), EmergencyCallsData[playerid][eCallLocation]);
       			SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, "DESCRIPTION: %s", text);

			    SendClientMessage(playerid, COLOR_HOSPITAL, "[Dispatch]:{FFFFFF} Please stay calm, our units are on the way.");

				Niner_Create(playerid, NINER_MEDIC, EmergencyCallsData[playerid][eCallLocation], text);

			    cmd_hangup(playerid, "\1");

			    //SetFactionMarker(playerid, FACTION_MEDIC, 0x00D700FF);
			}
		}
		switch (PlayerData[playerid][pDealerCallGuns])
		{
			case 1:
			{
				if (!strcmp(text, "Melee Parts"))
				{
					if(PlayerData[playerid][pMoney] < 55000) return SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} You gotta pay me first bro. {e06960}(You don't have enough money)");
				    PlayerData[playerid][pDealerCallMP] = 1;
				    SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} I got it, melee parts. You will have your crate in no time.");
				    GiveMoney(playerid, -55000);
				    cmd_hangup(playerid, "\1");
				    SetPlayerCheckpoint(playerid, 1276.4827, 288.2883, 19.5614, 5.0);
				    Crate_Default_Create(1);
				}
				else if (!strcmp(text, "Pistol Parts"))
				{
					if(PlayerData[playerid][pMoney] < 30000) return SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} You gotta pay me first bro. {e06960}(You don't have enough money)");
				    PlayerData[playerid][pDealerCallPP] = 1;
				    SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} I got it, pistol parts. You will have your crate in no time.");
				    GiveMoney(playerid, -30000);
				    cmd_hangup(playerid, "\1");
				    Crate_Default_Create(2);
				    SetPlayerCheckpoint(playerid, 1276.4827, 288.2883, 19.5614, 5.0);
				}
				else if (!strcmp(text, "SMG Parts"))
				{
					if(PlayerData[playerid][pMoney] < 100000) return SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} You gotta pay me first bro. {e06960}(You don't have enough money)");
				    PlayerData[playerid][pDealerCallSMGP] = 1;
				    SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} I got it, SMG parts. You will have your crate in no time.");
				    GiveMoney(playerid, -100000);
				    cmd_hangup(playerid, "\1");
				    Crate_Default_Create(3);
				    SetPlayerCheckpoint(playerid, 1276.4827, 288.2883, 19.5614, 5.0);
				}
				else if (!strcmp(text, "Shotgun Parts"))
				{
					if(PlayerData[playerid][pMoney] < 18000) return SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} You gotta pay me first bro. {e06960}(You don't have enough money)");
				    PlayerData[playerid][pDealerCallSP] = 1;
				    SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} I got it, Shotgun parts. You will have your crate in no time.");
				    GiveMoney(playerid, -18000);
				    cmd_hangup(playerid, "\1");
				    Crate_Default_Create(4);
				    SetPlayerCheckpoint(playerid, 1276.4827, 288.2883, 19.5614, 5.0);
				}
				else if (!strcmp(text, "Rifle Parts"))
				{
					if(PlayerData[playerid][pMoney] < 130000) return SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} You gotta pay me first bro. {e06960}(You don't have enough money)");
				    PlayerData[playerid][pDealerCallRP] = 1;
				    SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} I got it, Rifle parts. You will have your crate in no time.");
				    GiveMoney(playerid, -130000);
				    cmd_hangup(playerid, "\1");
				    Crate_Default_Create(5);
				    SetPlayerCheckpoint(playerid, 1276.4827, 288.2883, 19.5614, 5.0);
				}
				else SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} What do you mean?");
			}
		}
		switch (PlayerData[playerid][pDealerCallDrugs])
		{
			case 1:
			{
				if (!strcmp(text, "Drugs"))
				{
					if(PlayerData[playerid][pMoney] < 10000) return SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} You gotta pay me first bro. {e06960}(You don't have enough money)");
				    PlayerData[playerid][pDealerCallDP] = 1;
				    SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} I got it, drugs. You will have your crate in no time.");
				    GiveMoney(playerid, -10000);
				    cmd_hangup(playerid, "\1");
				    Crate_Default_Create(6);
				    SetPlayerCheckpoint(playerid, 1276.4827, 288.2883, 19.5614, 5.0);
				}
				else SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} What do you mean?");
			}
		}
		switch (PlayerData[playerid][pPlaceAd])
		{
		    case 1:
		    {
			    if (!strcmp(text, "yes", true))
		        {
		            if (GetMoney(playerid) < 500)
				    {
    	                SendClientMessage(playerid, COLOR_CYAN, "[Dispatch]:{FFFFFF} Sorry, you have insufficient funds to advertise right now.");
					    cmd_hangup(playerid, "\1");
					}
					else
					{
						PlayerData[playerid][pPlaceAd] = 2;
						SendClientMessage(playerid, COLOR_CYAN, "[Dispatch]:{FFFFFF} Please specify your advertisement and we'll advertise it.");
					}
				}
			}
			case 2:
			{
			    if (GetMoney(playerid) < 500)
			    {
                    SendClientMessage(playerid, COLOR_CYAN, "[Dispatch]:{FFFFFF} Sorry, you have insufficient funds to advertise right now.");
				    cmd_hangup(playerid, "\1");
				}
				else
				{
				    GiveMoney(playerid, -500);
				    SetTimerEx("Advertise", 3000, false, "d", playerid);

                    PlayerData[playerid][pAdTime] = 120;
				    strpack(PlayerData[playerid][pAdvertise], text, 128 char);

        	        SendClientMessage(playerid, COLOR_CYAN, "[Dispatch]:{FFFFFF} Your advertisement will be published shortly.");
				    cmd_hangup(playerid, "\1");
				}
			}
		}
		switch (PlayerData[playerid][pLoanAsk])
		{
			case 1:
			{
				if (!strcmp(text, "Licensing", true))
				{
				    PlayerData[playerid][pLoanAsk] = 2;
				    SendClientMessage(playerid, COLOR_ORANGE, "[BCG Automated System]:{FFFFFF} This is the Licensing Department. Please say your name, phone number and the license you are seeking.");
				}
				else if (!strcmp(text, "Help", true))
				{
				    PlayerData[playerid][pLoanAsk] = 3;
				    SendClientMessage(playerid, COLOR_ORANGE, "[BCG Automated System]:{FFFFFF} This the help line. Please describe your problem.");
				}
				else SendClientMessage(playerid, COLOR_GREY, "[BCG Automated System]:{FFFFFF} Sorry, I don't understand. Please repeat.\"Licensing\" or \"Help\"?");
			}
			case 2:
			{
   				SendFactionMessageEx(FACTION_GOV, COLOR_RADIOCHAT, "---------------------------------------------------------");
				SendFactionMessageEx(FACTION_GOV, COLOR_RADIOCHAT, "Licensing Call Details: %s, Phone Number: %d", ReturnName(playerid, 2), PlayerData[playerid][pPhone]);
        		SendFactionMessageEx(FACTION_GOV, COLOR_RADIOCHAT, "Information: %s", text);
				SendFactionMessageEx(FACTION_GOV, COLOR_RADIOCHAT, "---------------------------------------------------------");

			    SendClientMessage(playerid, COLOR_ORANGE, "[BCG Automated System]:{FFFFFF} A member of the Licensing division should call you soon. If you do not hear back in 1 hour, call again.");
			    cmd_hangup(playerid, "\1");
			}
			case 3:
			{
				SendFactionMessageEx(FACTION_GOV, COLOR_RADIOCHAT, "---------------------------------------------------------");
			    SendFactionMessageEx(FACTION_GOV, COLOR_RADIOCHAT, "Help Call Details: %s, Phone Number: %d", ReturnName(playerid, 2), PlayerData[playerid][pPhone]);
       			SendFactionMessageEx(FACTION_GOV, COLOR_RADIOCHAT, "Question: %s", text);
				SendFactionMessageEx(FACTION_GOV, COLOR_RADIOCHAT, "---------------------------------------------------------");

			    SendClientMessage(playerid, COLOR_WHITE, "[BCG Automated System]:{FFFFFF} A government official should call you soon. If you do not hear back in 1 hour, call again.");
			    cmd_hangup(playerid, "\1");
			}
		}
		if (targetid != INVALID_PLAYER_ID && !PlayerData[playerid][pIncomingCall])
		{
			SendClientMessageEx(targetid, COLOR_YELLOW, "(Phone) %s says: %s", ReturnName(playerid, 2), text);
		}
	}
	return 0;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if (response == EDIT_RESPONSE_FINAL)
	{
	    if (PlayerData[playerid][pEditGraffiti] != -1 && GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiExists])
	    {
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][0] = x;
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][1] = y;
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][2] = z;
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][3] = rz;

			Graffiti_Refresh(PlayerData[playerid][pEditGraffiti]);
			Graffiti_Save(PlayerData[playerid][pEditGraffiti]);
			PlayerData[playerid][pEditGraffiti] = -1;
		}
	    else if (PlayerData[playerid][pEditRack] != -1 && RackData[PlayerData[playerid][pEditRack]][rackExists])
	    {
			RackData[PlayerData[playerid][pEditRack]][rackPos][0] = x;
			RackData[PlayerData[playerid][pEditRack]][rackPos][1] = y;
			RackData[PlayerData[playerid][pEditRack]][rackPos][2] = z;
			RackData[PlayerData[playerid][pEditRack]][rackPos][3] = rz;

			Rack_Refresh(PlayerData[playerid][pEditRack]);
			Rack_Save(PlayerData[playerid][pEditRack]);
			PlayerData[playerid][pEditRack] = -1;
			SendServerMessage(playerid, "You have edited the position of rack ID: %d. (id:%d)", PlayerData[playerid][pEditRack],  RackData[PlayerData[playerid][pEditRack]][rackObjects][4]);
		}
	    else if (PlayerData[playerid][pEditPump] != -1 && PumpData[PlayerData[playerid][pEditPump]][pumpExists])
	    {
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][0] = x;
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][1] = y;
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][2] = z;
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][3] = rz;

			Pump_Refresh(PlayerData[playerid][pEditPump]);
			Pump_Save(PlayerData[playerid][pEditPump]);
			PlayerData[playerid][pEditPump] = -1;

			SendServerMessage(playerid, "You have edited the position of pump ID: %d.", PlayerData[playerid][pEditPump]);
	    }
	    else if (PlayerData[playerid][pEditFurniture] != -1 && FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureExists])
	    {
	        new id = House_Inside(playerid);

	        if (id != -1 && House_IsOwner(playerid, id))
			{
			    FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][0] = x;
			    FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][1] = y;
			    FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][2] = z;
                FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][0] = rx;
                FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][1] = ry;
                FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][2] = rz;

				Furniture_Refresh(PlayerData[playerid][pEditFurniture]);
				Furniture_Save(PlayerData[playerid][pEditFurniture]);

				PlayerData[playerid][pEditFurniture] = -1;

				SendServerMessage(playerid, "You have edited the position of item \"%s\"(id:%d).", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName], PlayerData[playerid][pEditFurniture]);
			}
	    }
	    else if (PlayerData[playerid][pEditGate] != -1 && GateData[PlayerData[playerid][pEditGate]][gateExists])
	    {
	        switch (PlayerData[playerid][pEditType])
	        {
	            case 1:
	            {
	                new id = PlayerData[playerid][pEditGate];

	                GateData[PlayerData[playerid][pEditGate]][gatePos][0] = x;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][1] = y;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][2] = z;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][3] = rx;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][4] = ry;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SendServerMessage(playerid, "You have edited the position of gate ID: %d.", id);
				}
				case 2:
	            {
	                new id = PlayerData[playerid][pEditGate];

	                GateData[PlayerData[playerid][pEditGate]][gateMove][0] = x;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][1] = y;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][2] = z;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][3] = rx;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][4] = ry;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SendServerMessage(playerid, "You have edited the moving position of gate ID: %d.", id);
				}
			}
		}
		else if (PlayerData[playerid][pEditATM] != -1 && ATMData[PlayerData[playerid][pEditATM]][atmExists])
		{
			new atmid = PlayerData[playerid][pEditATM];

			ATMData[atmid][atmPos][0] = x;
			ATMData[atmid][atmPos][1] = y;
			ATMData[atmid][atmPos][2] = z;
			ATMData[atmid][atmPos][3] = rz;
			ATMData[atmid][atmInterior] = GetPlayerInterior(playerid);
			ATMData[atmid][atmWorld] = GetPlayerVirtualWorld(playerid);

			ATM_Refresh(atmid);
			ATM_Save(atmid);

			PlayerData[playerid][pEditATM] = -1;

			SendServerMessage(playerid, "You have edited the position of ATM: %d).", atmid);
		}
	}
	if (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL)
	{
	    if (PlayerData[playerid][pEditFurniture] != -1)
			Furniture_Refresh(PlayerData[playerid][pEditFurniture]);

	    if (PlayerData[playerid][pEditPump] != -1)
			Pump_Refresh(PlayerData[playerid][pEditPump]);

        if (PlayerData[playerid][pEditRack] != -1)
			Rack_Refresh(PlayerData[playerid][pEditRack]);

        if (PlayerData[playerid][pEditGraffiti] != -1)
			Graffiti_Refresh(PlayerData[playerid][pEditGraffiti]);

	    PlayerData[playerid][pEditType] = 0;
	    PlayerData[playerid][pEditGate] = -1;
		PlayerData[playerid][pEditPump] = -1;
		PlayerData[playerid][pGasStation] = -1;
		PlayerData[playerid][pEditFurniture] = -1;
		PlayerData[playerid][pEditGraffiti] = -1;
	}
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if (response)
	{
		if(PlayerData[playerid][pEditObject] != 0)
		{
			AccessoryData[playerid][index][0] = fOffsetX;
       		AccessoryData[playerid][index][1] = fOffsetY;
         	AccessoryData[playerid][index][2] = fOffsetZ;

          	AccessoryData[playerid][index][3] = fRotX;
           	AccessoryData[playerid][index][4] = fRotY;
           	AccessoryData[playerid][index][5] = fRotZ;

            AccessoryData[playerid][index][6] = (fScaleX > 3.0) ? (3.0) : (fScaleX);
            AccessoryData[playerid][index][7] = (fScaleY > 3.0) ? (3.0) : (fScaleY);
			AccessoryData[playerid][index][8] = (fScaleZ > 3.0) ? (3.0) : (fScaleZ);

			AccessoryInfo[playerid][index][0] = modelid;
			AccessoryInfo[playerid][index][1] = boneid;

			PlayerData[playerid][pEditObject] = 0;
		}
		if(PlayerData[playerid][pEditGun] != 0)
		{
			switch(PlayerData[playerid][pEditGun])
			{
	  			case 1:
	    		{
					PlayerData[playerid][pEditGun] = 0;
					PlayerData[playerid][pAttachedGun1Pos][0] = fOffsetX;
					PlayerData[playerid][pAttachedGun1Pos][1] = fOffsetY;
					PlayerData[playerid][pAttachedGun1Pos][2] = fOffsetZ;
					PlayerData[playerid][pAttachedGun1Pos][3] = fRotX;
					PlayerData[playerid][pAttachedGun1Pos][4] = fRotY;
					PlayerData[playerid][pAttachedGun1Pos][5] = fRotZ;
					PlayerData[playerid][pAttachedGun1Pos][6] = fScaleX;
					PlayerData[playerid][pAttachedGun1Pos][7] = fScaleY;
					PlayerData[playerid][pAttachedGun1Pos][8] = fScaleZ;
					//SetPlayerAttachedObject(playerid, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
				}
				case 2:
				{
					PlayerData[playerid][pEditGun] = 0;
					PlayerData[playerid][pAttachedGun2Pos][0] = fOffsetX;
					PlayerData[playerid][pAttachedGun2Pos][1] = fOffsetY;
					PlayerData[playerid][pAttachedGun2Pos][2] = fOffsetZ;
					PlayerData[playerid][pAttachedGun2Pos][3] = fRotX;
					PlayerData[playerid][pAttachedGun2Pos][4] = fRotY;
					PlayerData[playerid][pAttachedGun2Pos][5] = fRotZ;
					PlayerData[playerid][pAttachedGun2Pos][6] = fScaleX;
					PlayerData[playerid][pAttachedGun2Pos][7] = fScaleY;
					PlayerData[playerid][pAttachedGun2Pos][8] = fScaleZ;
					//SetPlayerAttachedObject(playerid, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
				}
				case 3:
				{
					PlayerData[playerid][pEditGun] = 0;
					PlayerData[playerid][pAttachedGun3Pos][0] = fOffsetX;
					PlayerData[playerid][pAttachedGun3Pos][1] = fOffsetY;
					PlayerData[playerid][pAttachedGun3Pos][2] = fOffsetZ;
					PlayerData[playerid][pAttachedGun3Pos][3] = fRotX;
					PlayerData[playerid][pAttachedGun3Pos][4] = fRotY;
					PlayerData[playerid][pAttachedGun3Pos][5] = fRotZ;
					PlayerData[playerid][pAttachedGun3Pos][6] = fScaleX;
					PlayerData[playerid][pAttachedGun3Pos][7] = fScaleY;
					PlayerData[playerid][pAttachedGun3Pos][8] = fScaleZ;
					//SetPlayerAttachedObject(playerid, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
				}
			}
		}
		if (PlayerData[playerid][pEditType] != 0)
 		{
 		    AccessoryData[playerid][PlayerData[playerid][pEditType]-1][0] = fOffsetX;
       		AccessoryData[playerid][PlayerData[playerid][pEditType]-1][1] = fOffsetY;
         	AccessoryData[playerid][PlayerData[playerid][pEditType]-1][2] = fOffsetZ;

          	AccessoryData[playerid][PlayerData[playerid][pEditType]-1][3] = fRotX;
           	AccessoryData[playerid][PlayerData[playerid][pEditType]-1][4] = fRotY;
           	AccessoryData[playerid][PlayerData[playerid][pEditType]-1][5] = fRotZ;

            AccessoryData[playerid][PlayerData[playerid][pEditType]-1][6] = (fScaleX > 3.0) ? (3.0) : (fScaleX);
            AccessoryData[playerid][PlayerData[playerid][pEditType]-1][7] = (fScaleY > 3.0) ? (3.0) : (fScaleY);
			AccessoryData[playerid][PlayerData[playerid][pEditType]-1][8] = (fScaleZ > 3.0) ? (3.0) : (fScaleZ);

			switch (PlayerData[playerid][pEditType])
			{
	  			case 1:
	    		{
		            PlayerData[playerid][pEditType] = 0;
		            PlayerData[playerid][pGlasses] = modelid;

					if (!PlayerData[playerid][pCreated])
					{
		                for (new i = 23; i < 34; i ++) {
				    		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
						}
						SelectTextDraw(playerid, -1);
						TogglePlayerControllable(playerid, 0);
					}
		            SendServerMessage(playerid, "You have confirmed your glasses.");
				}
				case 2:
	    		{
	                PlayerData[playerid][pEditType] = 0;
		            PlayerData[playerid][pHat] = modelid;

	                if (!PlayerData[playerid][pCreated])
					{
		                for (new i = 23; i < 34; i ++) {
				    		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
						}
						SelectTextDraw(playerid, -1);
						TogglePlayerControllable(playerid, 0);
					}
		            SendServerMessage(playerid, "You have confirmed your hat.");
				}
				case 3:
	    		{
	                PlayerData[playerid][pEditType] = 0;
		            PlayerData[playerid][pBandana] = modelid;

                 	if (!PlayerData[playerid][pCreated])
					{
		                for (new i = 23; i < 34; i ++) {
				    		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
						}
						SelectTextDraw(playerid, -1);
						TogglePlayerControllable(playerid, 0);
					}
		            SendServerMessage(playerid, "You have confirmed your bandana.");
				}
			}
	    }
	}
	else
	{
	    if (!PlayerData[playerid][pCreated])
		{
  			for (new i = 23; i < 34; i ++) {
			  	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);

			TogglePlayerControllable(playerid, 0);
			RemovePlayerAttachedObject(playerid, PlayerData[playerid][pEditType] - 1);
		}
	}
	return 1;
}

public OnModelSelectionResponse(playerid, extraid, index, modelid, response)
{
	if ((extraid >= MODEL_SELECTION_GLASSES && extraid <= MODEL_SELECTION_BANDANAS) && !PlayerData[playerid][pCreated] && !response)
	{
	    for (new i = 23; i < 34; i ++) {
    		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		SetTimerEx("SelectTD", 100, false, "d", playerid);
		return 1;
	}
	if ((extraid == MODEL_SELECTION_FRISK && response) && InventoryData[PlayerData[playerid][pFrisking]][index][invExists])
	{
		new name[48];
		new targetid = PlayerData[playerid][pFrisking];
		strunpack(name, InventoryData[targetid][index][invItem]);
		SendClientMessageEx(playerid, 0xf5c542ff, "[Frisk]:{FFFFFF} Item Name: %s", name);

	    if (!IsPlayerNearPlayer(playerid, targetid, 6.0))
		    return SendErrorMessage(playerid, "The player you were frisking is no longer near you.");

		new
		    models[MAX_INVENTORY],
		    amount[MAX_INVENTORY];

		for (new i = 0; i < PlayerData[targetid][pCapacity]; i ++)
		{
	 		if (InventoryData[targetid][i][invExists]) {
	   			models[i] = InventoryData[targetid][i][invModel];
	   			amount[i] = InventoryData[targetid][i][invQuantity];
			}
			else {
			    models[i] = -1;
			    amount[i] = -1;
			}
		}
		ShowModelSelectionMenu(playerid, ReturnName(targetid), MODEL_SELECTION_FRISK, models, sizeof(models), 0.0, 0.0, 0.0, 1.0, -1, true, amount);
	}

	if ((extraid == MODEL_SELECTION_INVENTORY && response) && InventoryData[playerid][index][invExists])
	{
	    new
	        name[48],
			id = -1,
			backpack = GetPlayerBackpack(playerid);

		strunpack(name, InventoryData[playerid][index][invItem]);
	    PlayerData[playerid][pInventoryItem] = index;

		switch (PlayerData[playerid][pStorageSelect])
		{
		    case 1:
		    {
		    	if ((id = House_Inside(playerid)) != -1 && House_IsOwner(playerid, id))
				{
					if (InventoryData[playerid][index][invQuantity] == 1)
					{
					    if (!strcmp(name, "Backpack") && GetHouseBackpack(id) != -1)
					        return SendErrorMessage(playerid, "You can only store one backpack in your house.");

		        		House_AddItem(id, name, InventoryData[playerid][index][invModel], 1);
		        		Inventory_Remove(playerid, name);

		        		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has stored a \"%s\" into their house storage.", ReturnName(playerid, 0), name);
				 		House_ShowItems(playerid, id);

				 		if (!strcmp(name, "Backpack") && backpack != -1)
						{
					        BackpackData[backpack][backpackPlayer] = 0;
					        BackpackData[backpack][backpackHouse] = HouseData[id][houseID];

							Backpack_Save(backpack);
							SetAccessories(playerid);
					    }
		        	}
		        	else Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "House Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", name, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
				}
				PlayerData[playerid][pStorageSelect] = 0;
			}
			case 2:
		    {
		    	if ((id = Car_Nearest(playerid)) != -1 && !CarData[id][carLocked])
				{
					if (InventoryData[playerid][index][invQuantity] == 1)
					{
					    if (!strcmp(name, "Backpack") && GetVehicleBackpack(id) != -1)
					        return SendErrorMessage(playerid, "You can only store one backpack in your trunk.");

		        		Car_AddItem(id, name, InventoryData[playerid][index][invModel], 1);
		        		Inventory_Remove(playerid, name);

		        		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has stored a \"%s\" into the trunk.", ReturnName(playerid, 0), name);
				 		Car_ShowTrunk(playerid, id);

				 		if (!strcmp(name, "Backpack") && backpack != -1)
						{
					        BackpackData[backpack][backpackPlayer] = 0;
					        BackpackData[backpack][backpackVehicle] = CarData[id][carID];

							Backpack_Save(backpack);
							SetAccessories(playerid);
					    }
		        	}
		        	else Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Car Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", name, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
				}
				PlayerData[playerid][pStorageSelect] = 0;
			}
			case 3:
		    {
		        if (!strcmp(name, "Backpack"))
		            return SendErrorMessage(playerid, "This item cannot be stored.");

				if(!strcmp(name, "Car License") || !strcmp(name, "Truck License") || !strcmp(name, "Motorbike License") || !strcmp(name, "Airplane License") || !strcmp(name, "Helicopter License") || !strcmp(name, "Firearm License"))
					return SendErrorMessage(playerid, "This item cannot be stored in a backpack.");

		    	if (InventoryData[playerid][index][invQuantity] == 1)
				{
					Backpack_Add(GetPlayerBackpack(playerid), name, InventoryData[playerid][index][invModel], 1);
   					Inventory_Remove(playerid, name);

					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has stored a \"%s\" into their backpack.", ReturnName(playerid, 0), name);
					Backpack_Open(playerid);
				}
   				else
	   			{
				   	Dialog_Show(playerid, BackpackDeposit, DIALOG_STYLE_INPUT, "Backpack Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", name, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
				}
				PlayerData[playerid][pStorageSelect] = 0;
			}
			default:
			{
		    	format(name, sizeof(name), "%s (%d)", name, InventoryData[playerid][index][invQuantity]);

		    	if (Garbage_Nearest(playerid) != -1) {
					Dialog_Show(playerid, Inventory, DIALOG_STYLE_LIST, name, "Use Item\nGive Item\nThrow Out", "Select", "Cancel");
				}
				else {
				    Dialog_Show(playerid, Inventory, DIALOG_STYLE_LIST, name, "Use Item\nGive Item\nDrop Item", "Select", "Cancel");
				}
			}
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_GLASSES))
	{
	    if (modelid == 19300)
	    {
            for (new i = 23; i < 34; i ++) {
		    	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);
			PlayerData[playerid][pGlasses] = 0;

			RemovePlayerAttachedObject(playerid, 0);
			SendServerMessage(playerid, "You have removed your glasses.");
	    }
	    else
	    {
	        PlayerData[playerid][pEditType] = 1;
	        TogglePlayerControllable(playerid, 1);

			SetPlayerAttachedObject(playerid, 0, modelid, 2, 0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000);
			EditAttachedObject(playerid, 0);
		}
	}
    if ((response) && (extraid == MODEL_SELECTION_HATS))
	{
	    if (modelid == 19300)
	    {
			for (new i = 23; i < 34; i ++) {
		    	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);
			PlayerData[playerid][pHat] = 0;

			RemovePlayerAttachedObject(playerid, 1);
			SendServerMessage(playerid, "You have removed your hat.");
	    }
	    else
	    {
		    PlayerData[playerid][pEditType] = 2;
		    TogglePlayerControllable(playerid, 1);

			SetPlayerAttachedObject(playerid, 1, modelid, 2, 0.1565, 0.0273, -0.0002, -7.9245, -1.3224, 15.0999);
			EditAttachedObject(playerid, 1);
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_BANDANAS))
	{
	    if (modelid == 19300)
	    {
            for (new i = 23; i < 34; i ++) {
		    	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);
			PlayerData[playerid][pBandana] = 0;

			RemovePlayerAttachedObject(playerid, 2);
			SendServerMessage(playerid, "You have removed your bandana.");
	    }
	    else
	    {
		    PlayerData[playerid][pEditType] = 3;
            TogglePlayerControllable(playerid, 1);

			SetPlayerAttachedObject(playerid, 2, modelid, 2, 0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000);
			EditAttachedObject(playerid, 2);
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_SKIN))
	{
	    PlayerData[playerid][pSkin] = modelid;

		SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], 1684.4392, 1771.6658, 10.8203, 270.0000, 0, 0, 0, 0, 0, 0);
		TogglePlayerSpectating(playerid, 0);
	}
	if ((response) && (extraid == MODEL_SELECTION_UNDERCOVER))
	{
	    new factionid = PlayerData[playerid][pFaction];

    	SetPlayerSkin(playerid, modelid);
		PlayerData[playerid][pSkin] = modelid;
		SetPlayerColor(playerid, DEFAULT_COLOR);
		SetPlayerArmour(playerid, 150.0);
		SetPlayerHealth(playerid, 99.0);
	  	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s gears up with his Undercover equipment.", ReturnName(playerid, 0));
	   	SendFactionMessage(factionid, COLOR_FACTIONCHAT, "[Dispatch]: %s %s is now on Undercover Duty.**", Faction_GetRank(playerid), ReturnName(playerid, 0));
	}
	if ((response) && (extraid == MODEL_SELECTION_OFFDUTYCLOTHES))
	{
    	SetPlayerSkin(playerid, modelid);
		PlayerData[playerid][pSkin] = modelid;
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has changed their clothes.", ReturnName(playerid, 0));
	}
	if ((response) && (extraid == MODEL_SELECTION_CLOTHES))
	{
	    new
			bizid = -1,
			price;

	    if ((bizid = Business_Inside(playerid)) == -1 || BusinessData[bizid][bizType] != 3)
	        return 0;

		if (BusinessData[bizid][bizProducts] < 1)
		    return SendErrorMessage(playerid, "This business is out of stock.");

	    price = BusinessData[bizid][bizPrices][PlayerData[playerid][pClothesType] - 1];

	    if (GetMoney(playerid) < price)
	        return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

		GiveMoney(playerid, -price);

		BusinessData[bizid][bizProducts]--;
		BusinessData[bizid][bizVault] += Tax_Percent(price);

		Business_Save(bizid);
		Tax_AddPercent(price);

	    switch (PlayerData[playerid][pClothesType])
	    {
	        case 1:
	        {
	            PlayerData[playerid][pSkin] = modelid;
	            SetPlayerSkin(playerid, modelid);

	            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received some clothes.", ReturnName(playerid, 0), FormatNumber(price));
			}
			case 2:
			{
			    PlayerData[playerid][pEditType] = 1;
                PlayerData[playerid][pGlasses] = modelid;

			    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received some glasses.", ReturnName(playerid, 0), FormatNumber(price));
				RemovePlayerAttachedObject(playerid, 0);

                SetPlayerAttachedObject(playerid, 0, modelid, 2, 0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000);
				EditAttachedObject(playerid, 0);
			}
			case 3:
			{
			    PlayerData[playerid][pHat] = modelid;
			    PlayerData[playerid][pEditType] = 2;

			    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a hat.", ReturnName(playerid, 0), FormatNumber(price));
                RemovePlayerAttachedObject(playerid, 1);

				SetPlayerAttachedObject(playerid, 1, modelid, 2, 0.1565, 0.0273, -0.0002, -7.9245, -1.3224, 15.0999);
				EditAttachedObject(playerid, 1);
			}
			case 4:
			{
			    PlayerData[playerid][pBandana] = modelid;
			    PlayerData[playerid][pEditType] = 3;

			    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a bandana.", ReturnName(playerid, 0), FormatNumber(price));
			    RemovePlayerAttachedObject(playerid, 2);

			    SetPlayerAttachedObject(playerid, 2, modelid, 2, 0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000);
				EditAttachedObject(playerid, 2);
			}
	    }
	}
	if ((response) && (extraid == MODEL_SELECTION_DEALER))
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
 	    {
	        if (!DealershipCars[id][index][vehModel])
	        {
	            Dialog_Show(playerid, AddVehicle, DIALOG_STYLE_LIST, "Add Vehicle", "Add by Name\nAdd by Thumbnail", "Select", "Cancel");
			}
			else
			{
			    PlayerData[playerid][pDealerCar] = index;
			    Dialog_Show(playerid, CarOptions, DIALOG_STYLE_LIST, "Dealership Vehicle", "Set Price (%s)\nRemove Vehicle", "Select", "Cancel", FormatNumber(DealershipCars[id][index][vehPrice]));
			}
	    }
	}
	if ((response) && (extraid == MODEL_SELECTION_DEALER_ADD))
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
	        for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
			{
				if (DealershipCars[id][i][vehModel] == modelid)
	            	return SendErrorMessage(playerid, "This vehicle is already sold at this dealership.");
			}
			PlayerData[playerid][pDealerCar] = modelid;
			Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Enter Price", "Please enter a price for '%s':", "Submit", "Cancel", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_BUY_CAR))
	{
	    new id = Business_Inside(playerid);

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (!DealershipCars[id][index][vehModel])
		        return SendErrorMessage(playerid, "There is no model in the selected slot.");

		    if (GetMoney(playerid) < DealershipCars[id][index][vehPrice])
	    	    return SendErrorMessage(playerid, "You can't afford this vehicle (%s).", FormatNumber(DealershipCars[id][index][vehPrice]));

			PlayerData[playerid][pDealerCar] = index;
			Dialog_Show(playerid, ConfirmCarBuy, DIALOG_STYLE_MSGBOX, "Confirm Purchase", "Are you sure you want to buy this '%s'?\n\nNote: This vehicle costs %s at this dealership.", "Yes", "No", ReturnVehicleModelName(modelid), FormatNumber(DealershipCars[id][index][vehPrice]));
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_FURNITURE))
	{
        new
			id = Business_Inside(playerid),
			type = PlayerData[playerid][pFurnitureType],
			price;

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 7)
	    {
	        price = BusinessData[id][bizPrices][type];

	        if (GetMoney(playerid) < price)
	            return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

			if (BusinessData[id][bizProducts] < 1)
		    	return SendErrorMessage(playerid, "This business is out of stock.");

			new item = Inventory_Add(playerid, GetFurnitureNameByModel(modelid), modelid);

            if (item == -1)
   	        	return SendErrorMessage(playerid, "You don't have any inventory slots left.");

			GiveMoney(playerid, -price);
			SendServerMessage(playerid, "You have purchased a \"%s\" for %s.", GetFurnitureNameByModel(modelid), FormatNumber(price));

			BusinessData[id][bizProducts]--;
			BusinessData[id][bizVault] += Tax_Percent(price);

			Business_Save(id);
			Tax_AddPercent(price);
	    }
	}
	if ((response) && (extraid == MODEL_SELECTION_COLOR))
	{
	    new vehicleid = GetNearestVehicle(playerid);

        if (vehicleid == INVALID_VEHICLE_ID)
		    return SendErrorMessage(playerid, "You are not standing near any vehicle.");

		if (!Inventory_HasItem(playerid, "Spray Can"))
		    return SendErrorMessage(playerid, "You don't have any cans of spray paint.");

	    ApplyAnimation(playerid, "GRAFFITI", "null", 4.0, 0, 0, 0, 0, 0, 0);
		ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 0, 0, 0, 0, 1);
        ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 0, 0, 0, 0, 1);

		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Spraying vehicle...", 3000, 3);
		SetTimerEx("ResprayCar", 3000, false, "ddd", playerid, vehicleid, modelid);
	}
	if ((response) && (extraid == MODEL_SELECTION_SKINS))
	{
	    Dialog_Show(playerid, FactionSkin, DIALOG_STYLE_LIST, "Edit Skin", "Add by Model ID\nAdd by Thumbnail\nClear Slot", "Select", "Cancel");
	    PlayerData[playerid][pSelectedSlot] = index;
	}
	if ((response) && (extraid == MODEL_SELECTION_ADD_SKIN))
	{
	    FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = modelid;
		Faction_Save(PlayerData[playerid][pFactionEdit]);

		SendServerMessage(playerid, "You have set the skin ID in slot %d to %d.", PlayerData[playerid][pSelectedSlot], modelid);
	}
	if ((response) && (extraid == MODEL_SELECTION_FACTION_SKIN))
	{
	    new factionid = PlayerData[playerid][pFaction];

		if (factionid == -1 || !IsNearFactionLocker(playerid))
	    	return 0;

		if (modelid == 19300)
		    return SendErrorMessage(playerid, "There is no model in the selected slot.");

  		SetPlayerSkin(playerid, modelid);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has changed their uniform.", ReturnName(playerid, 0));
	}
	if ((response) && (extraid == MODEL_SELECTION_WHEELS))
	{
        new vehicleid = GetPlayerVehicleID(playerid);

		if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
	    	return 0;

	    AddComponent(vehicleid, modelid);
	    SendServerMessage(playerid, "You have added the \"%s\" wheels to this vehicle.", GetWheelName(modelid));
	}
	return 1;
}

forward ResprayCar(playerid, vehicleid, color);
public ResprayCar(playerid, vehicleid, color)
{
	if (!PlayerData[playerid][pLogged] || GetNearestVehicle(playerid) != vehicleid)
	    return 0;

	Inventory_Remove(playerid, "Spray Can");
	ClearAnimations(playerid);

	SetVehicleColor(vehicleid, color, color);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has used a can of spray paint on the %s.", ReturnName(playerid, 0), ReturnVehicleName(vehicleid));
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if (clickedid == Text:INVALID_TEXT_DRAW)
	{
		if (!Dialog_Opened(playerid) && PlayerData[playerid][pDisplayStats] > 0)
	    {
	        if (PlayerData[playerid][pDisplayStats] == 2) {
	        	for (new i = 50; i < 58; i ++) PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	    	}
		    else for (new i = 40; i < 50; i ++) {
				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			CancelSelectTextDraw(playerid);
			PlayerData[playerid][pDisplayStats] = false;
		}
	}
	return 0;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    if(IsPlayerAdmin(playerid))
    {
        SetPlayerPosFindZ(playerid, fX, fY, fZ);
    }
    return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if (!Dialog_Opened(playerid))
	{
		if (!PlayerData[playerid][pCharacter])
		{

		}
		else
		{
			if (playertextid == PlayerData[playerid][pTextdraws][26])
			{
			    static
					arrGlasses[] = {19300, 19006, 19007, 19008, 19009, 19010, 19011, 19012, 19013, 19014, 19015, 19016, 19017, 19018, 19019, 19020, 19021, 19022, 19023, 19024, 19025, 19026, 19027, 19028, 19029, 19030, 19031, 19032, 19033, 19034, 19035};

				for (new i = 23; i < 34; i ++) {
				    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
				}
				ShowModelSelectionMenu(playerid, "Glasses", MODEL_SELECTION_GLASSES, arrGlasses, sizeof(arrGlasses), 0.0, 0.0, 90.0);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][28])
			{
			    static
					arrHats[] = {19300, 18926, 18927, 18928, 18929, 18930, 18931, 18932, 18933, 18934, 18935, 18944, 18945, 18946, 18947, 18948, 18949, 18950, 18951, 18636, 18638, 19554, 19553, 19099};

				for (new i = 23; i < 34; i ++) {
				    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
				}
				ShowModelSelectionMenu(playerid, "Hats", MODEL_SELECTION_HATS, arrHats, sizeof(arrHats), -20.0, -90.0, 0.0);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][30])
			{
			    static
					arrBandanas[] = {19300, 18911, 18912, 18913, 18914, 18915, 18916, 18917, 18918, 18919, 18920, 19801};

				for (new i = 23; i < 34; i ++) {
				    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
				}
				ShowModelSelectionMenu(playerid, "Bandanas", MODEL_SELECTION_BANDANAS, arrBandanas, sizeof(arrBandanas), 0.0, 0.0, 90.0);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][48])
			{
				for (new i = 40; i < 50; i ++)
			        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

				CancelSelectTextDraw(playerid);
				PlayerData[playerid][pDisplayStats] = false;

				SetTimerEx("OpenInventory", 100, false, "d", playerid);
			}
		}
	}
	return 1;
}

forward ForkliftUpdate(playerid, vehid);
public ForkliftUpdate(playerid, vehid)
{
	if (PlayerData[playerid][pJob] != JOB_UNLOADER || GetVehicleModel(vehid) != 530 || !IsPlayerInWarehouse(playerid) || !PlayerData[playerid][pLoading]) {
	    return 0;
	}
	GetVehicleHealth(vehid, CoreVehicles[vehid][vehLoadHealth]);
    PlayerData[playerid][pLoading] = 0;

	CoreVehicles[vehid][vehLoadType] = 7;
	CoreVehicles[vehid][vehCrate] = CreateObject(3798, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);

	AttachObjectToVehicle(CoreVehicles[vehid][vehCrate], vehid, 0.0, 1.2, -0.05, 0.0, 0.0, 0.0);
	SetPlayerCheckpoint(playerid, 1306.3438, -45.3100, 1001.0313, 1.5);

	TogglePlayerControllable(playerid, 1);
	SendServerMessage(playerid, "Deliver the crate to the marker.");
	return 1;
}

stock GetWeaponType(weaponid)
{
	switch(weaponid)
	{
	    case 22,23,24,26,28,32:
	        return WEAPON_TYPE_LIGHT;

		case 3,4,16,17,18,39,10,11,12,13,14,40,41:
		    return WEAPON_TYPE_MELEE;

		case 2,5,6,7,8,9,25,27,29,30,31,33,34,35,36,37,38:
		    return WEAPON_TYPE_HEAVY;
	}
	return WEAPON_TYPE_NONE;
}

stock ShowContacts(playerid)
{
	new
	    string[32 * MAX_CONTACTS],
		count = 0;

	string = "Add Contact\n";

	for (new i = 0; i != MAX_CONTACTS; i ++) if (ContactData[playerid][i][contactExists]) {
	    format(string, sizeof(string), "%s%s - #%d\n", string, ContactData[playerid][i][contactName], ContactData[playerid][i][contactNumber]);

		ListedContacts[playerid][count++] = i;
	}
	Dialog_Show(playerid, Contacts, DIALOG_STYLE_LIST, "My Contacts", string, "Select", "Back");
	return 1;
}

stock GetPlayerID(name[], underscore = 1)
{
	foreach (new i : Player) if (!strcmp(ReturnName(i, underscore), name, true)) {
	    return i;
	}
	return INVALID_PLAYER_ID;
}

Dialog:ShowOnly(playerid, response, listitem, inputtext[]) {
	playerid = INVALID_PLAYER_ID;
	response = 0;
	listitem = 0;
	inputtext[0] = '\0';
}

Dialog:Billboards(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new string[500], szString[100];
	    if(BillBoardData[listitem][bbExists] >= 1)
		{
		    if(!BillBoardData[listitem][bbOwner])
		    {
				BillboardCheckout[playerid] = listitem;
		        format(szString, sizeof(szString), "{FFFFFF}Rent Billboard - {FF8000}%i{FFFFFF} - {FF8000}$%d", listitem, BillBoardData[listitem][bbPrice]);
		        format(string, sizeof(string), "{FFFFFF}Billboard Name: {FF8000}%s{FFFFFF} ({FF8000}%i{FFFFFF})\nBillboard Price: {FF8000}$%d{FFFFFF}\n\n\n((Rent Fees are collected each payday from your bank account!))", BillBoardData[listitem][bbName], listitem, BillBoardData[listitem][bbPrice]);
		    	Dialog_Show(playerid, BillboardRent, DIALOG_STYLE_MSGBOX, szString, string, "Rent", "Cancel");
		    	return 1;
		    }
		    if(BillBoardData[listitem][bbOwner] == GetPlayerSQLID(playerid))
		    {
		    	Dialog_Show(playerid, MyBillboardMenu, DIALOG_STYLE_LIST, "Manage Billboard", "Edit Message\nUnrent Billboard", "Proceed", "Cancel");
		    	return 1;
		    }
		    else
		    {
		        SendErrorMessage(playerid, "Sorry, this billboard is already being rented!");
			}
		}
	}
	return 1;
}

Dialog:MyBillboardMenu(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    if(listitem == 0)
	    {
	        Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Billboard Message", "Enter in a new billboard message!\n\n(Max Chars: 230)", "Proceed", "Cancel");
	    }
	    if(listitem == 1)
	    {
	        Dialog_Show(playerid, MyBillboardUnrent, DIALOG_STYLE_MSGBOX, "Unrent Billboard", "Are you sure you wish to unrent your billboard?\n\nYou'll get half the rent fee back", "Confirm", "Cancel");
	    }
	}
	return 1;
}

Dialog:MyBillboardMessage(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Billboard Message", "Enter in a new billboard message!\n\n(Max Chars: 230)", "Proceed", "Cancel");

		if (strlen(inputtext) > 230)
	        return Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Billboard Message", "Too many characters (Max is 230)\n\nEnter in a new billboard message!\n\n(Max Chars: 230)", "Proceed", "Cancel");

		format(BillBoardData[PlayerData[playerid][pOwnsBillboard]][bbMessage], 230, inputtext);

		Billboard_Save(PlayerData[playerid][pOwnsBillboard]);
		Billboard_Refresh(PlayerData[playerid][pOwnsBillboard]);
	}
	return 1;
}

Dialog:MyBillboardUnrent(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		new bbid = PlayerData[playerid][pOwnsBillboard];

		GiveMoney(playerid, BillBoardData[bbid][bbPrice]/2);
		BillBoardData[bbid][bbOwner] = 0;
		format(BillBoardData[PlayerData[playerid][pOwnsBillboard]][bbMessage], 230, "Not Owned");
		Billboard_Save(bbid);
		Billboard_Refresh(bbid);
		PlayerData[playerid][pOwnsBillboard] = -1;
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "You have unrented your billboard");
	}
	return 1;
}

Dialog:BillboardRent(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new bbid = BillboardCheckout[playerid];
	    if(PlayerData[playerid][pBankMoney] < BillBoardData[bbid][bbPrice])
	    {
	        SendErrorMessage(playerid, "You do not have enough cash in your bank account for the billboard rental fee");
	        return 1;
	    }
	    else
	    {
			PlayerData[playerid][pBankMoney] -= BillBoardData[playerid][bbPrice];
			PlayerData[playerid][pOwnsBillboard] = bbid;
			BillBoardData[bbid][bbOwner] = GetPlayerSQLID(playerid);
			Tax_AddMoney(BillBoardData[bbid][bbPrice]);
			Billboard_Save(bbid);
			Billboard_Refresh(bbid);
			SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "You have purchased a billboard, use /mybillboard to edit the message");
		}
	}
	return 1;
}

Dialog:GraffitiColor(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Graffiti_Nearest(playerid);

		if (id == -1)
		    return 0;

	    if (IsSprayingInProgress(id))
	        return SendErrorMessage(playerid, "There is another player spraying at this point already.");

	    switch (listitem)
	    {
	        case 0:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFFFFFF;

	        case 1:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFF0000;

	        case 2:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFFFF00;

	        case 3:
	            PlayerData[playerid][pGraffitiColor] = 0xFF33CC33;

	        case 4:
	            PlayerData[playerid][pGraffitiColor] = 0xFF33CCFF;

	        case 5:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFFA500;

	        case 6:
	            PlayerData[playerid][pGraffitiColor] = 0xFF1394BF;
	    }
	    Dialog_Show(playerid, GraffitiText, DIALOG_STYLE_INPUT, "Graffiti Text", "Please enter the text you wish to spray below.\n\nNote: Your text input cannot exceed over 64 characters.", "Submit", "Cancel");
	}
	return 1;
}

Dialog:GraffitiText(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Graffiti_Nearest(playerid);

		if (id == -1)
		    return 0;

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, GraffitiText, DIALOG_STYLE_INPUT, "Graffiti Text", "Please enter the text you wish to spray below.\n\nNote: Your text input cannot exceed over 64 characters.", "Submit", "Cancel");

		if (strlen(inputtext) > 64)
		    return Dialog_Show(playerid, GraffitiText, DIALOG_STYLE_INPUT, "Graffiti Text", "Error: Your input can't exceed 64 characters.\n\nPlease enter the text you wish to spray below.\n\nNote: Your text input cannot exceed over 64 characters.", "Submit", "Cancel");

        if (IsSprayingInProgress(id))
	        return SendErrorMessage(playerid, "There is another player spraying at this point already.");

        PlayerData[playerid][pGraffiti] = id;
        PlayerData[playerid][pGraffitiTime] = 15;

		strpack(PlayerData[playerid][pGraffitiText], inputtext, 64 char);
		ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0, 1);

		ShowPlayerFooter(playerid, "You are now spraying your ~g~graffiti.");
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Spraying...~w~ please wait!", 15000, 3);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a can of spray paint and sprays the wall.", ReturnName(playerid, 0));
	}
	return 1;
}

Dialog:Radio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            Dialog_Show(playerid, CulturalRadio, DIALOG_STYLE_LIST, "Cultural", "Classical\nInstruments", "Select", "Cancel");

			case 1:
			    Dialog_Show(playerid, OldiesRadio, DIALOG_STYLE_LIST, "Oldies", "70's\n80's\n90's", "Select", "Cancel");

			case 2:
			    Dialog_Show(playerid, OtherRadio, DIALOG_STYLE_LIST, "Other", "Dance\nGlee\nMash Ups", "Select", "Cancel");

			case 3:
			    Dialog_Show(playerid, PopRadio, DIALOG_STYLE_LIST, "Pop", "Korean\nPop\nTop Hits", "Select", "Cancel");

			case 4:
			    Dialog_Show(playerid, RNBRadio, DIALOG_STYLE_LIST, "Rhythm & Blues", "R&B\nSoul", "Select", "Cancel");

			case 5:
				Dialog_Show(playerid, RockRadio, DIALOG_STYLE_LIST, "Rock", "Alternative\nClassic\nIndie Rock\nMetal\nPunk\nRock & Roll", "Select", "Cancel");

	        case 6:
	            Dialog_Show(playerid, TalkRadio, DIALOG_STYLE_LIST, "Talk", "Comedy\nScanners", "Select", "Cancel");

	 		case 7:
				Dialog_Show(playerid, UrbanRadio, DIALOG_STYLE_LIST, "Urban", "Country\nHip-Hop", "Select", "Cancel");

			case 8:
			    Dialog_Show(playerid, ElectricRadio, DIALOG_STYLE_LIST, "Electric", "ElectricFM.com\n1Dance.fm\nDanceTime.fm", "Select", "Cancel");

			case 9:
				Dialog_Show(playerid, CUSTOMRADIO, DIALOG_STYLE_INPUT, "Custom Radio URL", "Enter a custom radio URL below. (kiwi6.com or any other mp3 hosting site)", "Select", "Cancel");

			case 10:
			{
			    new vehicleid = GetPlayerVehicleID(playerid);

				StopVehicleRadio(vehicleid);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has turned off the car radio.", ReturnName(playerid, 0));
			}
	    }
	}
	return 1;
}

Dialog:UrbanRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
			    Dialog_Show(playerid, Country, DIALOG_STYLE_LIST, "Country", "GotRadio - Today's Country\n181.fm - Highway 181\nHPR1: Traditional Classic Country\nCountry - Sky.fm", "Play", "Cancel");

            case 1:
			    Dialog_Show(playerid, HipHop, DIALOG_STYLE_LIST, "Hip-Hop", "100Hits - HipHop\nHot 108 Jamz\n181.fm - The Box\nGotRadio - Urban Jams", "Play", "Cancel");
		}
	}
	return 1;
}

Dialog:Country(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://206.217.213.235:8100/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://relay.181.fm:8018/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://108.61.73.119:8024/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://scfire-ntc-aa01.stream-aol.com/stream/1019");
		}
	}
	return 1;
}

Dialog:HipHop(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://64.56.64.67:10354/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://stream-95.shoutcast.com/hot108_mp3_128kbps");

            case 2:
			    SetVehicleRadio(vehicleid, "http://108.61.73.119:8024/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://108.61.73.118:8068/");
		}
	}
	return 1;
}

Dialog:CUSTOMRADIO(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		SetVehicleRadio(vehicleid, inputtext);
	}
	else Dialog_Show(playerid, Radio, DIALOG_STYLE_LIST, "Radio Channels", "Cultural\nOldies\nOther\nPop\nRhythm & Blues\nRock\nTalk\nUrban\nElectric\nCustom URL\nTurn Radio Off", "Select", "Cancel");
	return 1;
}


Dialog:ElectricRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://72.13.83.151/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://173.192.207.51:8062/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://212.83.60.202:8000/");
		}
	}
	return 1;
}

Dialog:TalkRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
			    Dialog_Show(playerid, Comedy, DIALOG_STYLE_LIST, "Comedy", "Comedy104\nAddictedToRadio.com - Comedy\n181.fm - Comedy Club", "Play", "Cancel");

            case 1:
			    Dialog_Show(playerid, Scanners, DIALOG_STYLE_LIST, "Scanners", "New Orleans Police Department\nSan Diego Police Dispatch\nLong Beach Police Dispatch\nCalifornia Highway Patrol - Los Angeles & Orange County\nLAPD - Citywide Dispatch and Hot Shots/Code 3", "Play", "Cancel");
		}
	}
	return 1;
}

Dialog:Comedy(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://69.195.140.50:8060/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://208.77.21.13:17910/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://108.61.73.118:8026/");
		}
	}
	return 1;
}

Dialog:Scanners(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://www.radioreference.com/scripts/playlists/1/3877/0-5443008964.m3u");

			case 1:
			    SetVehicleRadio(vehicleid, "http://www.radioreference.com/scripts/playlists/1/6740/0-5443008116.m3u");

            case 2:
			    SetVehicleRadio(vehicleid, "http://www.radioreference.com/scripts/playlists/1/6740/0-5443008116.m3u");

            case 3:
			    SetVehicleRadio(vehicleid, "http://radioreference.com/scripts/playlists/1/10239/0-5443007068.m3u");

            case 4:
			    SetVehicleRadio(vehicleid, "http://radioreference.com/scripts/playlists/1/10239/0-5443007068.m3u");
		}
	}
	return 1;
}

Dialog:RockRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
			case 0:
			    Dialog_Show(playerid, Alternative, DIALOG_STYLE_LIST, "Alternative", "GotRadio - Alternative", "Play", "Cancel");

            case 1:
			    Dialog_Show(playerid, Classic, DIALOG_STYLE_LIST, "Classic", "181.FM - Rock 181 #1\n.977 The Classic Rock\n181.fm - The Eagle\n181.fm Rock 40\n181.fm Rock 181 #2", "Play", "Cancel");

            case 2:
			    Dialog_Show(playerid, IndieRock, DIALOG_STYLE_LIST, "Indie Rock", "GotRadio - Indie Underground\nIndie Rock - LifeJive.com", "Play", "Cancel");

            case 3:
			    Dialog_Show(playerid, Metal, DIALOG_STYLE_LIST, "Metal", "GotRadio - Metal Madness\nDepressive Metal Rock radio\nDeath.F(ucking)M(etal)\nDepressive metal rock (Death)\nRepressive metal rock radio (Black)", "Play", "Cancel");

            case 4:
			    Dialog_Show(playerid, Punk, DIALOG_STYLE_LIST, "Punk", "Pop Punk - Sky.fm", "Play", "Cancel");

            case 5:
			    Dialog_Show(playerid, RockRoll, DIALOG_STYLE_LIST, "Rock & Roll", "Absolute Radio", "Play", "Cancel");
		}
	}
	return 1;
}

Dialog:Alternative(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://206.217.213.235:8200/");
		}
	}
	return 1;
}

Dialog:Classic(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://relay.181.fm:8008/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://7649.live.streamtheworld.com/977_CLASSROCK_SC");

            case 2:
			    SetVehicleRadio(vehicleid, "http://relay.181.fm:8030/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://uplink.181.fm:8028/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://relay.181.fm:8064/");
		}
	}
	return 1;
}

Dialog:IndieRock(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://173.244.215.163:8330/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://208.53.138.125:8136/");
		}
	}
	return 1;
}

Dialog:Metal(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://173.244.215.163:8340/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://184.154.10.83:8390/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://209.9.229.211/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://184.154.185.170:8080/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://65.60.19.43:8270/");
		}
	}
	return 1;
}

Dialog:Punk(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://80.94.69.106:6884/");
		}
	}
	return 1;
}

Dialog:RockRoll(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://mp3-ar-192.as34763.net/");
		}
	}
	return 1;
}

Dialog:RNBRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
			case 0:
			    Dialog_Show(playerid, RNB, DIALOG_STYLE_LIST, "R&B", "181.fm - True R&B\nDEFJay.de - 100% R&B\nGotRadio - R&B Classics\nSlow Jamz\nAddictedToRadio.com - V101 RnB AAC", "Play", "Cancel");

            case 1:
			    Dialog_Show(playerid, SoulRadio, DIALOG_STYLE_LIST, "Soul", "181.fm - Soul\nSoulful Bits", "Play", "Cancel");
		}
	}
	return 1;
}

Dialog:RNB(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://108.61.73.119:8022/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://87.230.56.38/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://206.217.213.236:8390/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://173.193.32.153:8020/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://208.77.21.15:10730/");
		}
	}
	return 1;
}

Dialog:SoulRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://relay.181.fm:8058/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://88.191.137.70/");
		}
	}
	return 1;
}

Dialog:PopRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, KoreanRadio, DIALOG_STYLE_LIST, "Korean", "KPOP TOP 100\nGeneraction\nBig B Radio", "Play", "Cancel");

			case 1:
			    Dialog_Show(playerid, Pop, DIALOG_STYLE_LIST, "Pop", "My Tunes FM\nHot Hits IR\nGay FM", "Play", "Cancel");

            case 2:
			    Dialog_Show(playerid, TopHits, DIALOG_STYLE_LIST, "Top Hits", "ChartHits.fm - Your Hitz More Music\n181.fm The Office\n100Hitz - Top 40\n1.fm Absolute Top 40\nTop Hits Music - Sky.fm", "Play", "Cancel");
		}
	}
	return 1;
}

Dialog:KoreanRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://39.119.181.57:8000/128");

			case 1:
			    SetVehicleRadio(vehicleid, "http://176.31.241.195:8700/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://199.241.187.194:8060/");
		}
	}
	return 1;
}

Dialog:Pop(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://77.102.253.75:8000/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://50.117.26.26:1265/moon.wavestreamer.com:1265/live");

            case 2:
			    SetVehicleRadio(vehicleid, "http://80.237.211.85/");
		}
	}
	return 1;
}

Dialog:TopHits(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://79.141.174.206:22000/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://108.61.73.117:8002/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://206.217.213.235:8300/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://205.164.62.15:7016/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://stream-67.shoutcast.com/tophits_skyfm_mp3_96kbps");
		}
	}
	return 1;
}

Dialog:OtherRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, DanceRadio, DIALOG_STYLE_LIST, "Dance", "Dancetime.fm\nPlus Fm - Pure Dance Radio", "Play", "Cancel");

			case 1:
			    Dialog_Show(playerid, Glee, DIALOG_STYLE_LIST, "Glee", "AceRadio.net - Glee Radio", "Play", "Cancel");

            case 2:
			    Dialog_Show(playerid, MashUps, DIALOG_STYLE_LIST, "Mash Ups", "Mastermix - Base Manic Radio\nMashups\nGotRadio - Mashups\nMashup-Radio24.de\nI love mashup radio", "Play", "Cancel");
		}
	}
	return 1;
}

Dialog:DanceRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://87.230.53.17:8000/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://87.230.82.41/");
		}
	}
	return 1;
}

Dialog:Glee(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://174.36.42.110:8360/");
		}
	}
	return 1;
}

Dialog:MashUps(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://184.107.17.34:8046/");

            case 1:
				SetVehicleRadio(vehicleid, "http://67.212.166.210:8413/");

            case 2:
				SetVehicleRadio(vehicleid, "http://206.217.213.236:8530/");

            case 3:
				SetVehicleRadio(vehicleid, "http://188.138.124.98:39710/");

            case 4:
				SetVehicleRadio(vehicleid, "http://87.118.64.205:8040/");
		}
	}
	return 1;
}

Dialog:OldiesRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, 70sRadio, DIALOG_STYLE_LIST, "70's", "181.fm - 70's\nAll Hit 70's\nSky.fm", "Play", "Cancel");

			case 1:
			    Dialog_Show(playerid, 80sRadio, DIALOG_STYLE_LIST, "80's", "Golden Radio Italia 80's\n181.fm - Lite 80's\n181.fm - Awesome 80's\n80's, 80's, 80's! - Sky.fm", "Play", "Cancel");

            case 2:
			    Dialog_Show(playerid, 90sRadio, DIALOG_STYLE_LIST, "90's", "GotRadio - 90's Alternative\nAddictedToRadio.com\n181.fm - Lite 90's\n181.fm - 90's Alternative\n181.fm - Star 90's", "Play", "Cancel");
		}
	}
	return 1;
}

Dialog:70sRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://108.61.73.118:8066/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://stream-45.shoutcast.com/all_hit_70s_skyfm_mp3_96kbps");
		}
	}
	return 1;
}

Dialog:80sRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://109.123.116.202:8040/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://74.86.186.4:12114/");

			case 2:
				SetVehicleRadio(vehicleid, "http://108.61.73.118:8000/");

			case 3:
			    SetVehicleRadio(vehicleid, "http://stream-54.shoutcast.com/the80s_skyfm_mp3_96kbps");
		}
	}
	return 1;
}

Dialog:90sRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://173.244.215.162:8190/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://208.77.21.13:14330/");

			case 2:
				SetVehicleRadio(vehicleid, "http://74.86.186.4:12118/");

			case 3:
			    SetVehicleRadio(vehicleid, "http://108.61.73.118:8052/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://108.61.73.118:8012/");
		}
	}
	return 1;
}

Dialog:CulturalRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, Classical, DIALOG_STYLE_LIST, "Classical", "Mostly Classical - Sky.fm\nCalmradio.com - Mozart\n1.fm - Otto's classical\nClassical Piano - Sky.fm", "Play", "Cancel");

			case 1:
			    Dialog_Show(playerid, Instruments, DIALOG_STYLE_LIST, "Instruments", "Calmradio.com - Solo Piano & Guitar\nGotRadio - Guitar Genius\nGotRadio - Piano Perfect\nPianorama", "Play", "Cancel");
		}
	}
	return 1;
}

Dialog:Classical(playerid, response, listitem, inputtext[])
{
    if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://stream-135.shoutcast.com/classical_skyfm_mp3_96kbps");

			case 1:
			    SetVehicleRadio(vehicleid, "http://159.253.143.15:12128/");

			case 2:
			    SetVehicleRadio(vehicleid, "http://205.164.41.18:7070/");

			case 3:
			    SetVehicleRadio(vehicleid, "http://72.26.204.28:6874/");
		}
	}
	return 1;
}

Dialog:Instruments(playerid, response, listitem, inputtext[])
{
    if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://173.192.225.172:8200/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://173.244.215.162:8020/");

			case 2:
			    SetVehicleRadio(vehicleid, "http://173.244.215.162:8050/");

			case 3:
			    SetVehicleRadio(vehicleid, "http://188.127.226.185/");
		}
	}
	return 1;
}

Dialog:NewTasks(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!strcmp(inputtext, "Visit Bank (pending)"))
	    {
	        new id = GetClosestEntrance(playerid, 2);

	        if (id == -1)
	            return SendErrorMessage(playerid, "There are no banks spawned in the server.");

			SetPlayerCheckpoint(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2], 1.0);
			SendServerMessage(playerid, "Checkpoint set to the closest bank (marked on radar).");
		}
		else if (!strcmp(inputtext, "Visit Store (pending)"))
	    {
	        new id = GetClosestBusiness(playerid, 1);

	        if (id == -1)
	            return SendErrorMessage(playerid, "There are no retail stores spawned in the server.");

			if(BusinessData[id][bizOwner] != 99999999)
			    return SendErrorMessage(playerid, "There are no state-owned retail stores spawned in the server.");

			SetPlayerCheckpoint(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2], 1.0);
			SendServerMessage(playerid, "Checkpoint set to the closest retail store (marked on radar).");
		}
		else if (!strcmp(inputtext, "Visit DMV (pending)"))
	    {
	        new id = GetClosestEntrance(playerid, 1);

	        if (id == -1)
	            return SendErrorMessage(playerid, "There are no DMV's spawned in the server.");

			SetPlayerCheckpoint(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2], 1.0);
			SendServerMessage(playerid, "Checkpoint set to the closest DMV (marked on radar).");
		}
	}
	return 1;
}

Dialog:PickupItems(playerid, response, listitem, inputtext[])
{
	static
	    string[64];

	if (response)
	{
	    new id = NearestItems[playerid][listitem];

		if (id != -1 && DroppedItems[id][droppedModel])
		{
		    if (DroppedItems[id][droppedWeapon] != 0)
			{
  				if (PlayerData[playerid][pPlayingHours] < 2)
					return SendErrorMessage(playerid, "You must have at least 2 playing hours.");

				GiveWeaponToPlayer(playerid, DroppedItems[id][droppedWeapon], DroppedItems[id][droppedAmmo]);

				Item_Delete(id);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has picked up a %s.", ReturnName(playerid, 0), ReturnWeaponName(DroppedItems[id][droppedWeapon]));
			}
			else if (PickupItem(playerid, id))
			{
				format(string, sizeof(string), "~g~%s~w~ added to inventory!", DroppedItems[id][droppedItem]);
 				ShowPlayerFooter(playerid, string);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has picked up a \"%s\".", ReturnName(playerid, 0), DroppedItems[id][droppedItem]);
			}
			else
				SendErrorMessage(playerid, "You don't have any room in your inventory.");
		}
		else SendErrorMessage(playerid, "This item was already picked up.");
	}
	return 1;
}

Dialog:StartDelivery(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Job_NearestPoint(playerid);

	    if (id == -1)
	        return 0;

		PlayerData[playerid][pLoadType] = listitem + 1;
		PlayerData[playerid][pLoadCrate] = 1;
		PlayerData[playerid][pLoading] = 1;

		SendServerMessage(playerid, "You have selected \"%s\". Load the crates into a truck to begin. (Press N next to the truck)", inputtext);

        SetPlayerAttachedObject(playerid, 4, 3014, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

		ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
		ShowPlayerFooter(playerid, "Press ~y~'N'~w~ to load the crate.");
		SendServerMessage(playerid, "Use /stoploading to stop and add another crate.");
	}
	return 1;
}

Dialog:GatePass(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Gate_Nearest(playerid);

	    if (id == -1)
	        return 0;

        if (isnull(inputtext))
        	return Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Please enter the password for this gate below:", "Submit", "Cancel");

		if (strcmp(inputtext, GateData[id][gatePass]) != 0)
  			return Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Error: Incorrect password specified.\n\nPlease enter the password for this gate below:", "Submit", "Cancel");

		Gate_Operate(id);
	}
	return 1;
}

Dialog:ManageFaction(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new factionid = PlayerData[playerid][pFaction];

		if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
			return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2);

		switch(listitem)
		{
			case 0: Faction_ShowRanks(playerid, factionid);
			case 1: Faction_ShowDivisions(playerid, factionid);
			case 2:
			{
				if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3)
	    			return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3);

				new count, id;
				new fac = GetFactionType(playerid);

				for(new i = 0; i != MAX_DYNAMIC_CARS - 1; i++)
				{
					if(!CarData[i][carExists]) continue;
					if(CarData[i][carFaction] != fac) continue;

					id = CarData[i][carVehicle];
					if(GetVehicleDriver(id) != INVALID_PLAYER_ID) continue;

					RespawnVehicle(id);
					count++;
				}
				
				SendServerMessage(playerid, "You have respawned %d unoccupied faction vehicles.", count);
			}
		}
	}
	return 1;
}

Dialog:EditRanks(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!FactionData[PlayerData[playerid][pFactionEdit]][factionExists])
			return 0;

		PlayerData[playerid][pSelectedSlot] = listitem;
		Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Set Rank", "Rank: %s (%d)\n\nPlease enter a new name for this rank below:", "Submit", "Back", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);
	}
	return 1;
}

Dialog:EditDivisions(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!FactionData[PlayerData[playerid][pFactionEdit]][factionExists])
			return 0;

		PlayerData[playerid][pSelectedSlot] = listitem;
		Dialog_Show(playerid, SetDivisionName, DIALOG_STYLE_INPUT, "Set Division", "Division: %s (%d)\n\nPlease enter a new name for this division below:", "Submit", "Back", FactionDivisions[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);
	}
	return 1;
}

Dialog:SetRankName(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Set Rank", "Rank: %s (%d)\n\nPlease enter a new name for this rank below:", "Submit", "Back", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

	    if (strlen(inputtext) > 32)
	        return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Set Rank", "Error: The rank can't exceed 32 characters.\n\nRank: %s (%d)\n\nPlease enter a new name for this rank below:", "Submit", "Back", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

		format(FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], 32, inputtext);
		Faction_SaveRanks(PlayerData[playerid][pFactionEdit]);

		Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
		SendServerMessage(playerid, "You have set the name of rank %d to \"%s\".", PlayerData[playerid][pSelectedSlot] + 1, inputtext);
	}
	else Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
	return 1;
}

Dialog:SetDivisionName(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, SetDivisionName, DIALOG_STYLE_INPUT, "Set Division", "Division: %s (%d)\n\nPlease enter a new name for this division below:", "Submit", "Back", FactionDivisions[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

	    if (strlen(inputtext) > 32)
	        return Dialog_Show(playerid, SetDivisionName, DIALOG_STYLE_INPUT, "Set Division", "Error: The division can't exceed 32 characters.\n\nDivision: %s (%d)\n\nPlease enter a new name for this division below:", "Submit", "Back", FactionDivisions[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

		format(FactionDivisions[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], 32, inputtext);
		Faction_SaveDivisions(PlayerData[playerid][pFactionEdit]);

		Faction_ShowDivisions(playerid, PlayerData[playerid][pFactionEdit]);
		SendServerMessage(playerid, "You have set the name of division %d to \"%s\".", PlayerData[playerid][pSelectedSlot] + 1, inputtext);
	}
	else Faction_ShowDivisions(playerid, PlayerData[playerid][pFactionEdit]);
	return 1;
}

Dialog:AcceptTaxi(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new targetid = strval(inputtext);

	    if (!IsPlayerConnected(targetid))
	        return SendErrorMessage(playerid, "The specified player has disconnected.");

		if (!PlayerData[targetid][pTaxiCalled])
		    return SendErrorMessage(playerid, "That player's call was accepted by another taxi driver.");

		static
			Float:x,
			Float:y,
			Float:z;

		GetPlayerLocationEx(targetid, x, y, z);

		PlayerData[targetid][pTaxiCalled] = 0;
		Waypoint_Set(playerid, GetPlayerLocation(targetid), x, y, z);

        SendServerMessage(playerid, "You have accepted %s's taxi call.", ReturnName(targetid, 0));
        SendServerMessage(targetid, "%s has accepted your taxi call and is on their way.", ReturnName(playerid, 0));
	}
	return 1;
}

Dialog:AcceptMechanic(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new targetid = strval(inputtext);

	    if (!IsPlayerConnected(targetid))
	        return SendErrorMessage(playerid, "The specified player has disconnected.");

		if (!PlayerData[targetid][pMechanicCalled])
		    return SendErrorMessage(playerid, "The call was accepted by another mechanic.");

		static
			Float:x,
			Float:y,
			Float:z;

		GetPlayerLocationEx(targetid, x, y, z);

		PlayerData[targetid][pMechanicCalled] = 0;
		Waypoint_Set(playerid, GetPlayerLocation(targetid), x, y, z);

        SendServerMessage(playerid, "You have accepted %s's mechanic call.", ReturnName(targetid, 0));
        SendServerMessage(targetid, "%s has accepted your mechanic call and is on their way.", ReturnName(playerid, 0));
	}
	return 1;
}

Dialog:AcceptShipment(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new bizid = strval(inputtext);

		if (!BusinessData[bizid][bizExists])
		    return 0;

	    if (!BusinessData[bizid][bizShipment])
	        return SendErrorMessage(playerid, "This business is no longer requesting a shipment.");

		if (IsShipmentAccepted(bizid))
		    return SendErrorMessage(playerid, "This shipment was already accepted.");

		foreach (new i : Player)
		{
			if (Business_IsOwner(i, bizid))
			{
		    	SendServerMessage(i, "%s has accepted your shipment request.", ReturnName(playerid, 0));
			}
		}
		PlayerData[playerid][pShipment] = bizid;

		new type[40];
		switch (BusinessData[bizid][bizType])
		{
			case 1: type = "Retail Supplies";
	        case 2: type = "Ammunition";
	        case 3: type = "Clothing";
	        case 4: type = "Food Supplies";
			case 6: type = "Retail Supplies";
			case 7: type = "Furniture";
   			case 8: type = "Retail Supplies";
			case 9: type = "Retail Supplies";
			case 10: type = "Fishing Supplies";
		}

		SendServerMessage(playerid, "You have accepted the shipment of %s for: %s. Type /loadcrate to get crates.", type, BusinessData[bizid][bizName]);
	}
	return 1;
}

Dialog:AssistanceRequests(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new requestorid = strval(inputtext);

		for___loop(new i = 0; i < MAX_ASSISTANCES; i++)
		{
			if (!AssistanceData[i][aExists])
				continue;
			if(AssistanceData[i][aPlayer] == requestorid)
			{
				if(AssistanceNeeded[requestorid] == 0)
				{
					Assistance_Remove(i);
					SendClientMessage(playerid, COLOR_WHITE, "This player no longer needs help.");
					return 1;
				}
				new string[30];
				valstr(string, requestorid);
				return cmd_assist(playerid, string);
			}
		}
	}
	return 1;
}

Dialog:RackWeapons(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Rack_Nearest(playerid);

	    if (id == -1)
	        return 0;

	    if (!RackData[id][rackWeapons][listitem])
	    {
			if (!GetWeapon(playerid))
			    return SendErrorMessage(playerid, "You must be holding a weapon to store it.");

			RackData[id][rackWeapons][listitem] = GetWeapon(playerid);
			RackData[id][rackAmmo][listitem] = GetPlayerAmmo(playerid);

			ResetWeapon(playerid, GetWeapon(playerid));

			Rack_RefreshGuns(id);
			Rack_Save(id);

			ApplyAnimation(playerid, "WEAPONS", "SHP_Ar_Lift", 4.1, 0, 0, 0, 0, 0, 1);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has stored a %s on the weapon rack.", ReturnName(playerid, 0), ReturnWeaponName(RackData[id][rackWeapons][listitem]));
	    }
	    else
	    {
	        GiveWeaponToPlayer(playerid, RackData[id][rackWeapons][listitem], RackData[id][rackAmmo][listitem]);
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has taken a %s from the weapon rack.", ReturnName(playerid, 0), ReturnWeaponName(RackData[id][rackWeapons][listitem]));

            RackData[id][rackWeapons][listitem] = 0;
			RackData[id][rackAmmo][listitem] = 0;

			Rack_RefreshGuns(id);
			Rack_Save(id);

			ApplyAnimation(playerid, "WEAPONS", "SHP_Tray_Out", 4.1, 0, 0, 0, 0, 0, 1);
	    }
	}
	return 1;
}

Dialog:TakeItems(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || PlayerData[playerid][pTakeItems] == INVALID_PLAYER_ID)
	    return 0;

	if (response)
	{
	    if (!strcmp(inputtext, "Take Weapons")) {
	        ResetWeapons(PlayerData[playerid][pTakeItems]);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has confiscated %s's weapons.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Take Seeds")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Marijuana Seeds", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Cocaine Seeds", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Heroin Opium Seeds", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has confiscated %s's drug seeds.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Take Drugs")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Marijuana", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Cocaine", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Heroin", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Steroids", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has confiscated %s's drugs.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Take Radio")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Portable Radio", -1);

		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has confiscated %s's portable radio.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Take Car License")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Car License", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has confiscated %s's Car license.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Take Truck License")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Truck License", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has confiscated %s's Truck license.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Take Motorbike License")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Motorbike License", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has confiscated %s's Motorbike license.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Take Airplane License")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Airplane License", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has confiscated %s's Airplane license.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Take Helicopter License")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Helicopter License", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has confiscated %s's Helicopter license.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Take Backpack")) {
		    Backpack_Delete(GetPlayerBackpack(PlayerData[playerid][pTakeItems]));
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Backpack", -1);

			SetAccessories(PlayerData[playerid][pTakeItems]);
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has confiscated %s's backpack.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
	}
	return 1;
}

Dialog:TuneVehicle(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            ShowModelSelectionMenu(playerid, "Add Wheels", MODEL_SELECTION_WHEELS, {1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1096, 1097, 1098}, 17, 0.0, 0.0, 90.0);

			case 1:
			    Dialog_Show(playerid, AddNOS, DIALOG_STYLE_LIST, "Add Nitrous", "2x NOS\n5x NOS\n10x NOS", "Select", "Cancel");

			case 2:
			{
			    AddComponent(vehicleid, 1087);
			    SendServerMessage(playerid, "You have added hydraulics to this vehicle.");
			}
	    }
	}
	return 1;
}

Dialog:AddNOS(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
			{
			    AddComponent(vehicleid, 1009);
			    SendServerMessage(playerid, "You have added 2x NOS to this vehicle.");
			}
			case 1:
			{
			    AddComponent(vehicleid, 1008);
			    SendServerMessage(playerid, "You have added 5x NOS to this vehicle.");
			}
            case 2:
			{
			    AddComponent(vehicleid, 1010);
			    SendServerMessage(playerid, "You have added 10x NOS to this vehicle.");
			}
		}
	}
	return 1;
}

Dialog:EntrancePass(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = (Entrance_Inside(playerid) == -1) ? (Entrance_Nearest(playerid)) : (Entrance_Inside(playerid));

		if (id == -1)
		    return SendErrorMessage(playerid, "You are not in range of any entrance.");

		if (strcmp(EntranceData[id][entrancePass], inputtext) != 0)
            return SendErrorMessage(playerid, "Invalid password specified.");

	    if (!EntranceData[id][entranceLocked])
		{
			EntranceData[id][entranceLocked] = true;
			Entrance_Save(id);

			ShowPlayerFooter(playerid, "You have ~r~locked~w~ the entrance!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
			EntranceData[id][entranceLocked] = false;
			Entrance_Save(id);

			ShowPlayerFooter(playerid, "You have ~g~unlocked~w~ the entrance!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}

Dialog:ReleaseCar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			carid = ListedVehicles[playerid][listitem],
			id = GetImpoundByID(CarData[carid][carImpounded]);

	    if (carid != -1 && id != -1 && CarData[carid][carExists] && CarData[carid][carImpounded] != -1)
	    {
	        if (GetMoney(playerid) < CarData[carid][carImpoundPrice])
	            return SendErrorMessage(playerid, "You can't afford to release this vehicle.");

            GiveMoney(playerid, -CarData[carid][carImpoundPrice]);

            CarData[carid][carPos][0] = ImpoundData[id][impoundRelease][0];
            CarData[carid][carPos][1] = ImpoundData[id][impoundRelease][1];
            CarData[carid][carPos][2] = ImpoundData[id][impoundRelease][2];
            CarData[carid][carPos][3] = ImpoundData[id][impoundRelease][3];

			SetVehiclePos(CarData[carid][carVehicle], CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2]);
			SetVehicleZAngle(CarData[carid][carVehicle], CarData[carid][carPos][3]);

			SendServerMessage(playerid, "You have released your %s for %s. (IMPORTANT: Be sure to /park it so it doesn't spawn at the release point and get impounded again)", ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(CarData[carid][carImpoundPrice]));

            CarData[carid][carImpounded] = -1;
            CarData[carid][carImpoundPrice] = 0;

            Car_Save(carid);
	    }
	}
	return 1;
}

Dialog:GiveItem(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    static
	        userid = -1,
			itemid = -1,
			string[32];

		if (sscanf(inputtext, "u", userid))
		    return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Give Item", "Please enter the name or the ID of the player:", "Submit", "Cancel");

		if (userid == INVALID_PLAYER_ID)
		    return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Give Item", "Error: Invalid player specified.\n\nPlease enter the name or the ID of the player:", "Submit", "Cancel");

	    if (!IsPlayerNearPlayer(playerid, userid, 6.0))
			return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Give Item", "Error: You are not near that player.\n\nPlease enter the name or the ID of the player:", "Submit", "Cancel");

	    if (userid == playerid)
			return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Give Item", "Error: You can't give items to yourself.\n\nPlease enter the name or the ID of the player:", "Submit", "Cancel");

		itemid = PlayerData[playerid][pInventoryItem];

		if (itemid == -1)
		    return 0;

		strunpack(string, InventoryData[playerid][itemid][invItem]);

		if (InventoryData[playerid][itemid][invQuantity] == 1)
		{
			if (!strcmp(string, "Backpack") && Inventory_HasItem(userid, "Backpack"))
			    return SendErrorMessage(playerid, "That player is already carrying a backpack.");

			if(!strcmp(string, "Car License") || !strcmp(string, "Truck License") || !strcmp(string, "Motorbike License") || !strcmp(string, "Airplane License") || !strcmp(string, "Helicopter License") || !strcmp(string, "Firearm License"))
				return SendErrorMessage(playerid, "You can't give this item to players.");

		    new id = Inventory_Add(userid, string, InventoryData[playerid][itemid][invModel]);

		    if (id == -1)
				return SendErrorMessage(playerid, "That player doesn't have anymore inventory slots.");

			if (!strcmp(string, "Backpack") && (id = GetPlayerBackpack(playerid)) != -1)
			{
			    BackpackData[id][backpackPlayer] = PlayerData[userid][pID];
				Backpack_Save(id);

				SetAccessories(userid);
			    Inventory_Remove(playerid, "Backpack");
			}
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a \"%s\" and gives it to %s.", ReturnName(playerid, 0), string, ReturnName(userid, 0));
		    SendServerMessage(userid, "%s has given you \"%s\" (added to inventory).", ReturnName(playerid, 0), string);

			Inventory_Remove(playerid, string);
		}
		else
		{
		    Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Give Item", "Item: %s (Quantity: %d)\n\nPlease enter the amount of this item you wish to give %s:", "Give", "Cancel", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));
		    PlayerData[playerid][pGiveItem] = userid;
		}
	}
	return 1;
}

Dialog:GiveQuantity(playerid, response, listitem, inputtext[])
{
	if (response && PlayerData[playerid][pGiveItem] != INVALID_PLAYER_ID)
	{
	    new
	        userid = PlayerData[playerid][pGiveItem],
	        itemid = PlayerData[playerid][pInventoryItem],
			string[32];

		strunpack(string, InventoryData[playerid][itemid][invItem]);

		if (isnull(inputtext))
			return Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Give Item", "Item: %s (Quantity: %d)\n\nPlease enter the amount of this item you wish to give %s:", "Give", "Cancel", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));

		if (strval(inputtext) < 1 || strval(inputtext) > InventoryData[playerid][itemid][invQuantity])
		    return  Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Give Item", "Error: You don't have that much.\n\nItem: %s (Quantity: %d)\n\nPlease enter the amount of this item you wish to give %s:", "Give", "Cancel", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));


		if(!strcmp(string, "Car License") || !strcmp(string, "Truck License") || !strcmp(string, "Motorbike License") || !strcmp(string, "Airplane License") || !strcmp(string, "Helicopter License") || !strcmp(string, "Firearm License"))
			return SendErrorMessage(playerid, "You can't give this item to players.");

        new id = Inventory_Add(userid, string, InventoryData[playerid][itemid][invModel], strval(inputtext));

	    if (id == -1)
			return SendErrorMessage(playerid, "That player doesn't have anymore inventory slots.");

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a \"%s\" and gives it to %s.", ReturnName(playerid, 0), string, ReturnName(userid, 0));
	    SendServerMessage(userid, "%s has given you \"%s\" (added to inventory).", ReturnName(playerid, 0), string);

		Inventory_Remove(playerid, string, strval(inputtext));
	}
	return 1;
}

Dialog:BackpackLoot(playerid, response, listitem, inputtext[])
{
	static id = -1;

	if (response)
	{
	    if (!strcmp(inputtext, "Take Backpack"))
	    {
	        if (Inventory_HasItem(playerid, "Backpack"))
	            return SendErrorMessage(playerid, "You can only have one backpack.");

	        id = PlayerData[playerid][pBackpackLoot];

	        BackpackData[id][backpackPlayer] = PlayerData[playerid][pID];
	        BackpackData[id][backpackPos][0] = 0.0;
	        BackpackData[id][backpackPos][1] = 0.0;
	        BackpackData[id][backpackPos][2] = 0.0;

	        DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);
	        DestroyDynamicObject(BackpackData[id][backpackObject]);

			Backpack_Save(id);
			Inventory_Add(playerid, "Backpack", 3026);

			SetAccessories(playerid);
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has picked up a backpack.", ReturnName(playerid, 0));
		}
		else if ((id = BackpackListed[playerid][listitem]) != -1)
		{
			new
			    string[32];

			strcat(string, BackpackItems[id][bItemName]);

			Inventory_Add(playerid, string, BackpackItems[id][bItemModel], BackpackItems[id][bItemQuantity]);
			Backpack_Remove(BackpackItems[id][bItemBackpack], string, BackpackItems[id][bItemQuantity]);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s reaches inside the backpack and takes a \"%s\".", ReturnName(playerid, 0), string);
		}
	}
	return 1;
}

Dialog:BackpackDeposit(playerid, response, listitem, inputtext[])
{
	static
	    string[32];

	strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

	if (response)
	{
		new amount = strval(inputtext);

		if (amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
		    return Dialog_Show(playerid, BackpackDeposit, DIALOG_STYLE_INPUT, "Backpack Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

		Backpack_Add(GetPlayerBackpack(playerid), string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
		Inventory_Remove(playerid, string, amount);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has stored a \"%s\" into their backpack.", ReturnName(playerid, 0), string);
		Backpack_Open(playerid);
	}
	else Backpack_Open(playerid);
	return 1;
}

Dialog:BackpackTake(playerid, response, listitem, inputtext[])
{
	static
	    string[32],
		id = -1;

	if (response)
	{
		new amount = strval(inputtext);

		id = PlayerData[playerid][pStorageItem];

		strunpack(string, BackpackItems[id][bItemName]);

		if (amount < 1 || amount > BackpackItems[id][bItemQuantity])
		    return Dialog_Show(playerid, BackpackTake, DIALOG_STYLE_INPUT, "Backpack Take", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to take for this item:", "Take", "Back", string, BackpackItems[id][bItemQuantity]);

		Inventory_Add(playerid, string, BackpackItems[id][bItemModel], amount);
        Backpack_Remove(GetPlayerBackpack(playerid), string, amount);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has taken a \"%s\" from their backpack.", ReturnName(playerid, 0), string);
		Backpack_Open(playerid);
	}
	else Backpack_Open(playerid);
	return 1;
}

Dialog:BackpackOptions(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pStorageItem], string[32];

	    switch (listitem)
	    {
	        case 0:
	        {
	            strcat(string, BackpackItems[id][bItemName]);

	            if (BackpackItems[id][bItemQuantity] == 1)
	            {
	                Inventory_Add(playerid, string, BackpackItems[id][bItemModel]);
					Backpack_Remove(GetPlayerBackpack(playerid), string);

					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has taken a \"%s\" from their backpack.", ReturnName(playerid, 0), string);
					Backpack_Open(playerid);
	            }
	            else
	            {
	                Dialog_Show(playerid, BackpackTake, DIALOG_STYLE_INPUT, "Backpack Take", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to take for this item:", "Take", "Back", string, BackpackItems[id][bItemQuantity]);
	            }
			}
	        case 1:
	        {
	            new itemid = Inventory_GetItemID(playerid, BackpackItems[id][bItemName]);

	            if (itemid == -1)
					return SendErrorMessage(playerid, "You don't have anymore of this item to store!");

                strunpack(string, InventoryData[playerid][itemid][invItem]);

				if (IsFurnitureItem(string))
				    return SendErrorMessage(playerid, "You can't store furniture in your backpack.");

				if (InventoryData[playerid][itemid][invQuantity] == 1)
	            {
	                Backpack_Add(GetPlayerBackpack(playerid), string, InventoryData[playerid][itemid][invModel]);
					Inventory_Remove(playerid, string);

					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has stored a \"%s\" into their backpack.", ReturnName(playerid, 0), string);
					Backpack_Open(playerid);
	            }
	            else
	            {
	                PlayerData[playerid][pInventoryItem] = itemid;
	                Dialog_Show(playerid, BackpackDeposit, DIALOG_STYLE_INPUT, "Backpack Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
	            }
			}
   		}
	}
	else Backpack_Open(playerid);
	return 1;
}

Dialog:Backpack(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = -1, string[48];

	    if (!listitem)
		{
	        if (Backpack_GetItems(GetPlayerBackpack(playerid)) >= MAX_BACKPACK_CAPACITY)
	            return SendErrorMessage(playerid, "The backpack has reached it's capacity of %d items.", MAX_BACKPACK_CAPACITY);

	        OpenInventory(playerid);

	        PlayerData[playerid][pStorageSelect] = 3;
	    }
	    else if ((id = BackpackListed[playerid][listitem-1]) != -1) {
	        PlayerData[playerid][pStorageItem] = id;

			format(string, sizeof(string), "%s (Quantity: %d)", BackpackItems[id][bItemName], BackpackItems[id][bItemQuantity]);
	        Dialog_Show(playerid, BackpackOptions, DIALOG_STYLE_LIST, string, "Take Item\nStore Item\nDrop Item", "Select", "Back");
		}
	}
	return 1;
}

Dialog:MyTickets(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!TicketData[playerid][listitem][ticketExists])
	        return SendErrorMessage(playerid, "There is no ticket in the selected slot.");

		if (GetMoney(playerid) < TicketData[playerid][listitem][ticketFee])
		    return SendErrorMessage(playerid, "You can't afford to pay this ticket.");

		GiveMoney(playerid, -TicketData[playerid][listitem][ticketFee]);
        Tax_AddMoney(TicketData[playerid][listitem][ticketFee]);

		SendServerMessage(playerid, "You have paid off a %s ticket for \"%s\".", FormatNumber(TicketData[playerid][listitem][ticketFee]), TicketData[playerid][listitem][ticketReason]);
		Ticket_Remove(playerid, listitem);
	}
	return 1;
}

Dialog:MyInvoices(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!TicketData[playerid][listitem][ticketExists])
	        return SendErrorMessage(playerid, "There is no invoice in the selected slot.");

		if (GetMoney(playerid) < TicketData[playerid][listitem][ticketFee])
		    return SendErrorMessage(playerid, "You can't afford to pay this invoice.");

		GiveMoney(playerid, -TicketData[playerid][listitem][ticketFee]);
        Tax_AddMoney(TicketData[playerid][listitem][ticketFee]);

		SendServerMessage(playerid, "You have paid off an %s invoice for \"%s\".", FormatNumber(TicketData[playerid][listitem][ticketFee]), TicketData[playerid][listitem][ticketReason]);
		Ticket_Remove(playerid, listitem);
	}
	return 1;
}

Dialog:MainGPS(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Find House", "Please enter the address of the house below:", "Submit", "Cancel");

			case 1:
			    Dialog_Show(playerid, FindBusiness, DIALOG_STYLE_LIST, "Find Business", "Retail Store\nWeapon Store\nClothing Store\nFast Food\nDealership\nGas Station\nFurniture Store", "Submit", "Cancel");

			case 2:
			    Dialog_Show(playerid, FindEntrance, DIALOG_STYLE_LIST, "Find Entrance", "Nearest DMV\nNearest Bank\nNearest Warehouse\nNearest City Hall", "Select", "Cancel");

			case 3:
			    Dialog_Show(playerid, FindJob, DIALOG_STYLE_LIST, "Find Job", "Courier\nMechanic\nTaxi Driver\nCargo Unloader\nMiner\nFood Vendor\nGarbage Man\nPackage Sorter\nFisherman", "Select", "Cancel");

			case 4:
			{
				static
				    string[MAX_GPS_LOCATIONS * 32];

				string = "Add Location\n";

				for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (LocationData[playerid][i][locationExists]) {
				    format(string, sizeof(string), "%s%s\n", string, LocationData[playerid][i][locationName]);
				}
				Dialog_Show(playerid, CustomLocations, DIALOG_STYLE_LIST, "Custom Locations", string, "Select", "Back");
			}
		}
	}
	return 1;
}

Dialog:FindHouse(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (isnull(inputtext) || strlen(inputtext) > 32)
		    return Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Find House", "Please enter the address of the house below:", "Submit", "Cancel");

		for (new i = 0; i != MAX_HOUSES; i ++)
		{
			if (HouseData[i][houseExists] && !strcmp(HouseData[i][houseAddress], inputtext, true))
	    	{
         		Waypoint_Set(playerid, HouseData[i][houseAddress], HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]);
	        	return SendServerMessage(playerid, "Waypoint set to \"%s\" (marked on radar).", HouseData[i][houseAddress]);
			}
		}
        Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Find House", "Error: No results found for \"%s\".\n\nPlease enter the address of the house below:", "Submit", "Cancel", inputtext);
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:FindBusiness(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new bizid = GetClosestBusiness(playerid, listitem + 1);

		if (bizid != -1)
		{
		    Waypoint_Set(playerid, BusinessData[bizid][bizName], BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2]);
	        SendServerMessage(playerid, "Waypoint set to closest %s (marked on radar).", inputtext);
		}
		else
		{
			SendErrorMessage(playerid, "The GPS was unable to locate any business.");
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:FindEntrance(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = GetClosestEntrance(playerid, listitem + 1);

		if (id != -1)
		{
		    Waypoint_Set(playerid, EntranceData[id][entranceName], EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
	        SendServerMessage(playerid, "Waypoint set to %s (marked on radar).", inputtext);
		}
		else
		{
			SendErrorMessage(playerid, "The GPS was unable to locate any entrance.");
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:FindJob(playerid, response, listitem, inputtext[])
{
	if (response)
	{

		if(listitem == 8) listitem = 9; //since fishing job is listitem 9 in /gps

		new id = GetClosestJob(playerid, listitem + 1);

		if (id != -1)
		{
		    static
				str[32];

		    format(str, 32, "%s Job", inputtext);

		    Waypoint_Set(playerid, str, JobData[id][jobPos][0], JobData[id][jobPos][1], JobData[id][jobPos][2]);
	        SendServerMessage(playerid, "Waypoint set to %s (marked on radar).", str);
		}
		else
		{
			SendErrorMessage(playerid, "The GPS was unable to locate any job.");
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:CustomLocations(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!listitem) {
			Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Add Location", "Please enter the desired name of the location below:", "Submit", "Cancel");
	    }
	    else
		{
		    new id = Location_GetID(playerid, inputtext);

		    if (id != -1) {
		        PlayerData[playerid][pSelectedSlot] = id;

		        Dialog_Show(playerid, LocationInfo, DIALOG_STYLE_LIST, inputtext, "Set Waypoint\nDelete Location", "Select", "Back");
			}
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:AddLocation(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Add Location", "Please enter the desired name of the location below:", "Submit", "Cancel");

		if (strlen(inputtext) > 32)
		    return Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Add Location", "Error: The name can't exceed 32 characters.\n\nPlease enter the desired name of the location below:", "Submit", "Cancel");

		static
		    Float:fX,
		    Float:fY,
		    Float:fZ,
			id = -1;

		if ((id = House_Inside(playerid)) != -1) {
		    fX = HouseData[id][housePos][0];
		    fY = HouseData[id][housePos][1];
		    fZ = HouseData[id][housePos][2];
		}
		else if ((id = Business_Inside(playerid)) != -1) {
		    fX = BusinessData[id][bizPos][0];
		    fY = BusinessData[id][bizPos][1];
		    fZ = BusinessData[id][bizPos][2];
		}
        else if ((id = Entrance_Inside(playerid)) != -1) {
		    fX = EntranceData[id][entrancePos][0];
		    fY = EntranceData[id][entrancePos][1];
		    fZ = EntranceData[id][entrancePos][2];
		}
		else GetPlayerPos(playerid, fX, fY, fZ);

		Location_Add(playerid, inputtext, fX, fY, fZ);
		SendServerMessage(playerid, "You have added \"%s\" to your GPS.", inputtext);
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:LocationInfo(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pSelectedSlot];

	    switch (listitem)
	    {
	        case 0:
	        {
	            Waypoint_Set(playerid, LocationData[playerid][id][locationName], LocationData[playerid][id][locationPos][0], LocationData[playerid][id][locationPos][1], LocationData[playerid][id][locationPos][2]);
				SendServerMessage(playerid, "Waypoint set to \"%s\" (marked on radar).", LocationData[playerid][id][locationName]);
			}
			case 1:
			{
			    SendServerMessage(playerid, "You have removed \"%s\" from your GPS.", LocationData[playerid][id][locationName]);

				Location_Delete(playerid, LocationData[playerid][id][locationName]);
				dialog_MainGPS(playerid, 1, 4, "\1");
			}
	    }
	}
	else dialog_MainGPS(playerid, 1, 4, "\1");
	return 1;
}

Dialog:Warrants(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
	    return 0;

	if (response)
	{
	    static
	        name[64],
			targetid = INVALID_PLAYER_ID;

		strmid(name, inputtext, 0, strfind(inputtext, "(") - 1);

		if ((targetid = GetPlayerID(name, 0)) == INVALID_PLAYER_ID)
		    return SendErrorMessage(playerid, "The player is no longer connected.");

		if (PlayerData[targetid][pWarrants] < 1)
		    return SendErrorMessage(playerid, "The player no longer has any warrants.");

		PlayerData[playerid][pMDCPlayer] = targetid;

		format(name, sizeof(name), "MDC: %s", name);
		Dialog_Show(playerid, WarrantList, DIALOG_STYLE_LIST, name, "Track Player\nClear Warrants", "Select", "Back");
	}
	else cmd_mdc(playerid, "\1");
	return 1;
}

Dialog:WarrantList(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
	    return 0;

	if (PlayerData[playerid][pMDCPlayer] == INVALID_PLAYER_ID)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
				if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	  				return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);
	            SendServerMessage(playerid, "The MDC Satellite System is now trying to track %s...", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
	            PlayerData[playerid][pTrackTime] = 3;
			}
			case 1:
			{
			    PlayerData[PlayerData[playerid][pMDCPlayer]][pWarrants] = 0;

			    SendServerMessage(playerid, "You have cleared %s's warrants.", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
			    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s has cleared %s's active warrants.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pMDCPlayer], 0));

			    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
			}
	    }
	}
	else
	{
	    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
	    dialog_MainMDC(playerid, 1, 0, "\1");
	}
	return 1;
}

Dialog:ChargeName(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
	    return 0;

	if (response)
	{
	    new targetid;

	    if (sscanf(inputtext, "u", targetid))
	        return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Error: Please enter a valid user.\n\nPlease enter the name or ID of the player:", "Submit", "Back");

		if (targetid == INVALID_PLAYER_ID)
		    return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Error: Invalid user specified.\n\nPlease enter the name or ID of the player:", "Submit", "Back");

        if (PlayerData[targetid][pWarrants] > 14)
		    return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Error: The user already has 15 active warrants.\n\nPlease enter the name or ID of the player:", "Submit", "Back");

		PlayerData[playerid][pMDCPlayer] = targetid;
		Dialog_Show(playerid, PlaceCharge, DIALOG_STYLE_INPUT, "Place Charge", "Please enter the description of the crime committed by %s:", "Submit", "Back", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
	}
	else cmd_mdc(playerid, "\1");
	return 1;
}

Dialog:PlaceCharge(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid != FACTION_GOV))
	    return 0;

	if (PlayerData[playerid][pMDCPlayer] == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, -1, "Person does not exist. (must be online)");

	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, PlaceCharge, DIALOG_STYLE_INPUT, "Place Charge", "Please enter the description of the crime committed by %s:", "Submit", "Back", ReturnName(PlayerData[playerid][pMDCPlayer], 0));

	    PlayerData[PlayerData[playerid][pMDCPlayer]][pWarrants]++;

	    AddWarrant(PlayerData[playerid][pMDCPlayer], playerid, inputtext);
	    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s has placed a charge on %s for \"%s\".", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pMDCPlayer], 0), inputtext);

	    cmd_mdc(playerid, "\1");
	}
	else
	{
	    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
	    cmd_mdc(playerid, "\1");
	}
	return 1;
}

Dialog:SearchVehicle(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
	    return 0;

	if (response)
	{
		new vehid = strval(inputtext);

		vehid = Car_GetID(vehid);
	    MDCVehicleSearch(playerid, inputtext);
	}
	else
	{
	    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
	    cmd_mdc(playerid, "\1");
	}
	return 1;
}

Dialog:SearchPerson(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
	    return 0;

	if (response)
	{
		inputtext[strfind(inputtext, " ", false)] = '_';
	    MDCPersonSearch(playerid, inputtext);
	}
	else
	{
	    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
	    cmd_mdc(playerid, "\1");
	}
	return 1;
}

Dialog:MDCPersonalInfoResult(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
		return 0;
	if(!response || response)
	{
		Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Person Information Search\nVehicle Information Search\n \nAdd Charges\nView Charges (previous & current)\n \nAll Active Warrants\n \nAPB List\nCreate New APB\nDelete APB\n \nRecent 911 Calls\nView 911 By CID", "Select", "Cancel");
	}
	return 1;
}

Dialog:MDCVehicleInfoResult(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
		return 0;
	if(!response || response)
	{
		Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Person Information Search\nVehicle Information Search\n \nAdd Charges\nView Charges (previous & current)\n \nAll Active Warrants\n \nAPB List\nCreate New APB\nDelete APB\n \nRecent 911 Calls\nView 911 By CID", "Select", "Cancel");
	}
	return 1;
}

Dialog:FireMDC(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_MEDIC)
		return 0;

	if(!response)
	{
		new string[128];
		format(string, sizeof(string), "* %s stops using the MDC.", ReturnName(playerid, 2));
		SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
		return 1;
	}
	if (response)
	{
	    switch (listitem)
	    {
			case 0: ShowNiners(playerid, NINER_MEDIC);
			case 1: Dialog_Show(playerid, ViewNinerByCID, DIALOG_STYLE_INPUT, "View 911 Call Info", "Enter a call ID below:", "View", "Back");
		}
	}

	return 1;
}

Dialog:MainMDC(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
		return 0;
	if(!response)
	{
		new string[128];
		format(string, sizeof(string), "* %s stops using the MDC.", ReturnName(playerid, 2));
		SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
		return 1;
	}
	if (response)
	{
	    switch (listitem)
	    {

			case 0:
    		{
    		    Dialog_Show(playerid, SearchPerson, DIALOG_STYLE_INPUT, "Person Information Search", "Enter a name to search:", "Submit", "Back");
			}
			case 1: Dialog_Show(playerid, SearchVehicle, DIALOG_STYLE_INPUT, "Vehicle Information Search", "Enter a vehicle plate to search:", "Submit", "Back");
			case 2: Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Person Information Search\nVehicle Information Search\n \nAdd Charges\nView Charges (previous & current)\n \nAll Active Warrants\n \nAPB List\nCreate New APB\nDelete APB\n \nRecent 911 Calls\nView 911 By CID", "Select", "Cancel");
    		case 3:
    		{
    		    Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Add Charges", "Please enter the name or ID of the player:", "Submit", "Back");
			}
			case 4:
    		{
    		    Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "View Previous Charges", "Please enter the name or ID of the player:", "Submit", "Back");
			}
			case 5: Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Person Information Search\nVehicle Information Search\n \nAdd Charges\nView Charges (previous & current)\n \nAll Active Warrants\n \nAPB List\nCreate New APB\nDelete APB\n \nRecent 911 Calls\nView 911 By CID", "Select", "Cancel");
	        case 6:
	        {
	            static
	                string[512];

				string[0] = 0;

				foreach (new i : Player) if (PlayerData[i][pWarrants] > 0) {
				    format(string, sizeof(string), "%s%s (%d warrants)\n", string, ReturnName(i, 0), PlayerData[i][pWarrants]);
				}
				if (!strlen(string))
				   	{
						SendErrorMessage(playerid, "There are no active warrants.");
						Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Person Information Search\nVehicle Information Search\n \nAdd Charges\nView Charges (previous & current)\n \nAll Active Warrants\n \nAPB List\nCreate New APB\nDelete APB\n \nRecent 911 Calls\nView 911 By CID", "Select", "Cancel");
						return 1;
					}

				Dialog_Show(playerid, Warrants, DIALOG_STYLE_LIST, "All Active Warrants", string, "Select", "Back");
    		}
			//case 7: //empty seperator
			case 8: //apb List
			{
				ShowAPBs(playerid);
			}
			case 9: //create new apb
			{
				Dialog_Show(playerid, CreateAPB, DIALOG_STYLE_INPUT, "Create APB", "Please enter the description of the subject:", "Confirm", "Back");
			}
			case 10: //delete APB
			{
				Dialog_Show(playerid, DeleteAPB, DIALOG_STYLE_INPUT, "Delete APB", "Enter the APB ID:", "Confirm", "Back");
			}
			//case 11: //empty seperator
			case 12: //911 calls
			{
				ShowNiners(playerid, NINER_POLICE);
			}
			case 13: //view 911 by cid
			{
				Dialog_Show(playerid, ViewNinerByCID, DIALOG_STYLE_INPUT, "View 911 Call Info", "Enter a call ID below:", "View", "Back");
			}
		}
	}
	return 1;
}

Dialog:ViewNinerByCID(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
		return 0;
	if(!response)
	{
		Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Person Information Search\nVehicle Information Search\n \nAdd Charges\nView Charges (previous & current)\n \nAll Active Warrants\n \nAPB List\nCreate New APB\nDelete APB\n \nRecent 911 Calls\nView 911 By CID", "Select", "Cancel");
		return 1;
	}
	if(response)
	{
		NinerInfo(playerid, strval(inputtext));
	}
	return 1;
}

Dialog:DeleteAPB(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
		return 0;
	if(!response)
	{
		Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Person Information Search\nVehicle Information Search\n \nAdd Charges\nView Charges (previous & current)\n \nAll Active Warrants\n \nAPB List\nCreate New APB\nDelete APB\n \nRecent 911 Calls\nView 911 By CID", "Select", "Cancel");
		return 1;
	}
	if(response)
	{
		APB_Delete(strval(inputtext));
		for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionType] == FACTION_POLICE)
		{
			SendFactionMessage(i, COLOR_RADIOCHAT, "An APB has been deleted by: %s", ReturnName(playerid, 0));
		}
		Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Person Information Search\nVehicle Information Search\n \nAdd Charges\nView Charges (previous & current)\n \nAll Active Warrants\n \nAPB List\nCreate New APB\nDelete APB\n \nRecent 911 Calls\nView 911 By CID", "Select", "Cancel");
	}
	return 1;
}

stock ShowNiners(playerid, type)
{
    new string[4090];
	new count;
	new status[12];
	status = "RECEIVED";

	string[0] = 0;

	format(string, sizeof(string), "ID\tSTATUS\tGPS LOCATION\tDETAILS\n");

	for (new i = MAX_911_CALLS - 1; i >= 0; i--) if (NinerData[i][ninerExists] && NinerData[i][ninerType] == type || NinerData[i][ninerExists] && NinerData[i][ninerType] == NINER_BOTH)
	{
	    format(string, sizeof(string), "%s%i \t%s\t%s\t%.54s\n", string, NinerData[i][ninerID], status, NinerData[i][ninerGPS], NinerData[i][ninerDesc]);
		NinerData[i][ninerListItem] = count;
		count++;
	}

	new Cache:result;
	new query[128];

	format(query, sizeof(query), "SELECT * FROM `911calls` WHERE status > 0 AND type = %d OR type = 3 ORDER BY `cid` DESC LIMIT 40", type);
    result = mysql_query(g_iHandle, query);

	new rows = cache_get_row_count();

	new cid, statusint, gpslocation[80], details[128];


	for(new i = 0; i < rows; i++)
	{
	    cid = cache_get_field_int(i, "cid");
		statusint = cache_get_field_int(i, "status");
		if(statusint == 1) status = "CLEARED";
		if(statusint == 2) status = "UN-ANSRD";

		cache_get_field_content(i, "gpsloc", gpslocation, g_iHandle, 80);
		cache_get_field_content(i, "descgiven", details, g_iHandle, 128);
		format(string, sizeof(string), "%s%i \t%s\t%s\t%.54s\n", string, cid, status, gpslocation, details);
	}
	Dialog_Show(playerid, NinerCalls, DIALOG_STYLE_TABLIST_HEADERS, "Recent 911 Calls", string, "Select", "Back");
	cache_delete(result);
	return 1;
}

Dialog:NinerCalls(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_MEDIC)
		return 0;
	if(!response)
	{
		if(GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_GOV)
			Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Person Information Search\nVehicle Information Search\n \nAdd Charges\nView Charges (previous & current)\n \nAll Active Warrants\n \nAPB List\nCreate New APB\nDelete APB\n \nRecent 911 Calls\nView 911 By Call ID", "Select", "Cancel");

		if(GetFactionType(playerid) == FACTION_MEDIC)
			Dialog_Show(playerid, FireMDC, DIALOG_STYLE_LIST, "Mobile Data Computer - FIRE", "Recent 911 Calls\nView 911 By Call ID", "Select", "Exit");

		return 1;
	}
	if(response)
	{
		new cid, unused[128];
		if(!sscanf(inputtext, "ds[128]", cid, unused))
			return SendErrorMessage(playerid, "MDC ERROR 1982");

		NinerInfo(playerid, cid);
	}
	return 1;
}

stock NinerInfo(playerid, cid)
{
	new query[128];
	new Cache:result;
	format(query, sizeof(query), "SELECT * FROM `911calls` WHERE `cid` = %d LIMIT 1", cid);
	result = mysql_query(g_iHandle, query);

	new rows = cache_get_row_count();

	if(!rows)
	{
		if(GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_GOV)
			Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Person Information Search\nVehicle Information Search\n \nAdd Charges\nView Charges (previous & current)\n \nAll Active Warrants\n \nAPB List\nCreate New APB\nDelete APB\n \nRecent 911 Calls\nView 911 By Call ID", "Select", "Cancel");

		if(GetFactionType(playerid) == FACTION_MEDIC)
			Dialog_Show(playerid, FireMDC, DIALOG_STYLE_LIST, "Mobile Data Computer - FIRE", "Recent 911 Calls\nView 911 By Call ID", "Select", "Exit");

		SendClientMessage(playerid, -1, "[MDC]: Call ID not found.");
		return 1;
	}

	new ninertype, ninertime[30], callername[40], callernum, callstatus, clearedby[40], gpsloc[80], locgiven[128], descgiven[128], copnotes[128];

	ninertype = cache_get_field_int(0, "type");
	cache_get_field_content(0, "time", ninertime, g_iHandle, 30);
	cache_get_field_content(0, "callername", callername, g_iHandle, 40);
	callernum = cache_get_field_int(0, "callernum");
	callstatus = cache_get_field_int(0, "status");
	cache_get_field_content(0, "clearedby", clearedby, g_iHandle, 40);
	cache_get_field_content(0, "gpsloc", gpsloc, g_iHandle, 80);
	cache_get_field_content(0, "locgiven", locgiven, g_iHandle, 128);
	cache_get_field_content(0, "descgiven", descgiven, g_iHandle, 128);
	cache_get_field_content(0, "copnotes", copnotes, g_iHandle, 128);

	new ninertypestring[60];
	if(ninertype == NINER_POLICE) ninertypestring = "POLICE";
	if(ninertype == NINER_MEDIC) ninertypestring = "FIRE";
	if(ninertype == NINER_BOTH) ninertypestring = "POLICE, FIRE";

	new callstatusstring[50];
	if(callstatus == NINER_UNCLEARED) callstatusstring = "{ebb859}RECEIVED{A9C4E4}";
	if(callstatus == NINER_CLEARED) callstatusstring = "{71ed68}CLEARED{A9C4E4}";
	if(callstatus == NINER_UNANSWERED) callstatusstring = "{ed6868}UNANSWERED{A9C4E4}";

	new string[1000];
	format(string, sizeof(string), "Caller Name:\t \t%s\n", callername);
	format(string, sizeof(string), "%sCaller Ph#:\t \t%d\n", string, callernum);
	format(string, sizeof(string), "%sCall Date:\t \t%s\n", string, ninertime);
	format(string, sizeof(string), "%sAgencies:\t \t%s\n \n", string, ninertypestring);

	format(string, sizeof(string), "%sGPS Location:\t \t%s\n", string, gpsloc);

	if(strlen(locgiven) > 64)
	{
		format(string, sizeof(string), "%sLocation Given:\t%.64s\n", string, locgiven);
		format(string, sizeof(string), "%s\t \t \t%s\n", string, locgiven[64]);
	}
	else
		format(string, sizeof(string), "%sLocation Given:\t%s\n", string, locgiven);

	if(strlen(descgiven) > 64)
	{
		format(string, sizeof(string), "%sDetails Given:\t \t%.64s\n", string, descgiven);
		format(string, sizeof(string), "%s\t \t \t%s\n \n", string, descgiven[64]);
	}
	else
		format(string, sizeof(string), "%sDetails Given:\t \t%s\n \n", string, descgiven);


	format(string, sizeof(string), "%sCall Status:\t \t%s\n", string, callstatusstring);
	if(callstatus == NINER_CLEARED)
	{
		format(string, sizeof(string), "%sCleared By:\t \t%s\n \n", string, clearedby);
	}
	else format(string, sizeof(string), "%s\n", string);


	if(strlen(copnotes) > 64)
	{
		format(string, sizeof(string), "%sAdditional Notes:\t%.64s\n", string, copnotes);
		format(string, sizeof(string), "%s\t \t \t%s", string, copnotes[64]);
	}
	else
		format(string, sizeof(string), "%sAdditional Notes:\t%s\n", string, copnotes);

	new titlestring[80];
	format(titlestring, sizeof(titlestring), "CALL ID: %d - More Info", cid);
	Dialog_Show(playerid, NinerMoreInfo, DIALOG_STYLE_MSGBOX, titlestring, string, "Options", "Back");
	MDCNinerID[playerid] = cid;
	cache_delete(result);
	return 1;
}

Dialog:NinerMoreInfo(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_MEDIC)
		return 0;

	if(!response)
	{
		if(GetFactionType(playerid) == FACTION_POLICE)
			return ShowNiners(playerid, NINER_POLICE);

		if(GetFactionType(playerid) == FACTION_MEDIC)
			return ShowNiners(playerid, NINER_MEDIC);
	}
	if(response)
	{
		new cid = MDCNinerID[playerid];
		new titlestring[80];
		format(titlestring, sizeof(titlestring), "CALL ID: %d - Options", cid);

		Dialog_Show(playerid, NinerOptions, DIALOG_STYLE_LIST, titlestring, "Clear Call\nEdit Additional Notes", "Select", "Back");
	}
	return 1;
}

Dialog:NinerOptions(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_MEDIC)
		return 0;

	if(!response)
		return NinerInfo(playerid, MDCNinerID[playerid]);

	if(response)
	{
		new cid = MDCNinerID[playerid];
		switch(listitem)
		{
			case 0:
			{
				new found;
				new factionid = PlayerData[playerid][pFaction];
				for(new i=0; i < MAX_911_CALLS; i++) if(NinerData[i][ninerExists])
				{
					if(NinerData[i][ninerID] == cid)
					{
						Niner_Clear(playerid, i);
						SendFactionMessage(factionid, COLOR_RADIOCHAT, "[Dispatch]: %s has cleared a 911 call (CID: %i) **", ReturnName(playerid, 0), cid);
						found = 1;
						break;
					}
				}
				new titlestring[80];
				format(titlestring, sizeof(titlestring), "CALL ID: %d - Options", cid);
				Dialog_Show(playerid, NinerOptions, DIALOG_STYLE_LIST, titlestring, "Clear Call\nEdit Additional Notes", "Select", "Back");
				if(found == 0)
				{
					SendClientMessage(playerid, -1, "[MDC]: Call is already cleared.");
				}
				return 1;
			}
			case 1:
			{
				new titlestring[80];
				format(titlestring, sizeof(titlestring), "CALL ID: %d - Additional Notes", cid);
				Dialog_Show(playerid, NinerEditNotes, DIALOG_STYLE_INPUT, titlestring, "Input notes below", "Confirm", "Back");
				return 1;
			}
		}
	}
	return 1;
}

Dialog:NinerEditNotes(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_MEDIC)
		return 0;

	if(!response)
		return NinerInfo(playerid, MDCNinerID[playerid]);

	if(response)
	{
		new id, found;
		new cid = MDCNinerID[playerid];

		for(new i=0; i < MAX_911_CALLS; i++) if(NinerData[i][ninerExists])
		{
			if(NinerData[i][ninerID] == cid)
			{
				id = i;
				found = 1;
				break;
			}
		}

		if(found == 1)
		{
			format(NinerData[id][ninerNotes], 128, "%s", inputtext);
		}
		new query[210];
		format(query, sizeof(query), "UPDATE `911calls` SET `copnotes` = '%s' WHERE `cid` = %d", SQL_ReturnEscaped(inputtext), cid);
		mysql_tquery(g_iHandle, query);
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIOCHAT, "[Dispatch]: %s has edited the additional notes for a 911 call. (cid: %d)", ReturnName(playerid, 0), cid);
		new titlestring[80];
		format(titlestring, sizeof(titlestring), "CALL ID: %d - Options", cid);
		Dialog_Show(playerid, NinerOptions, DIALOG_STYLE_LIST, titlestring, "Clear Call\nEdit Additional Notes", "Select", "Back");
	}
	return 1;
}

stock ShowAPBs(playerid)
{
    static
	    string[2048];

	new count;

	string[0] = 0;

	for (new i = 0; i < MAX_APBS; i ++) if (APBData[i][apbExists])
	{
	    format(string, sizeof(string), "%s(APB-ID:%d) %.64s\n", string, i, APBData[i][apbText]);
		APBData[i][apbListItem] = count;
		count++;
	}
	if (!strlen(string)) {
	    SendErrorMessage(playerid, "There are currently no active APBs.");
		Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Person Information Search\nVehicle Information Search\n \nAdd Charges\nView Charges (previous & current)\n \nAll Active Warrants\n \nAPB List\nCreate New APB\nDelete APB\n \nRecent 911 Calls\nView 911 By CID", "Select", "Cancel");
	}
	else Dialog_Show(playerid, APBList, DIALOG_STYLE_LIST, "APB List", string, "Select", "Back");
	return 1;
}

Dialog:APBList(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
		return 0;
	if(!response)
	{
		Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Person Information Search\nVehicle Information Search\n \nAdd Charges\nView Charges (previous & current)\n \nAll Active Warrants\n \nAPB List\nCreate New APB\nDelete APB\n \nRecent 911 Calls\nView 911 By CID", "Select", "Cancel");
		return 1;
	}
	if(response)
	{
		new id;
		for(new i = 0; i < MAX_APBS; i++) if(APBData[i][apbExists])
		{
			if(listitem == APBData[i][apbListItem])
			{
				id = i;
				break;
			}
		}
		new string[700];
		format(string, sizeof(string), "Submitted By:\t \t%s\n", APBData[id][apbCreatorName]);
		format(string, sizeof(string), "%sSubmit Date:\t \t%s\n", string, APBData[id][apbDate]);
		if(strlen(APBData[id][apbText]) > 64)
    	{
			format(string, sizeof(string), "%sDetails:\t \t \t%.64s\n", string, APBData[id][apbText]);
			format(string, sizeof(string), "%s\t \t \t%s\n", string, APBData[id][apbText][64]);
		}
		else
			format(string, sizeof(string), "%sDetails:\t \t \t%s\n", string, APBData[id][apbText]);

		new titlestring[80];
		format(titlestring, sizeof(titlestring), "APB ID: %d - More Info", id);
		Dialog_Show(playerid, APBMoreInfo, DIALOG_STYLE_MSGBOX, titlestring, string, "Back", "");
	}
	return 1;
}

Dialog:APBMoreInfo(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
		return 0;
	if(!response || response)
	{
		ShowAPBs(playerid);
		return 1;
	}
	return 1;
}

Dialog:CreateAPB(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
		return 0;
	if(!response)
	{
		Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Person Information Search\nVehicle Information Search\n \nAdd Charges\nView Charges (previous & current)\n \nAll Active Warrants\n \nAPB List\nCreate New APB\nDelete APB\n \nRecent 911 Calls\nView 911 By CID", "Select", "Cancel");
		return 1;
	}
	if (response)
	{
		APB_Create(playerid, inputtext);
		for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionType] == FACTION_POLICE)
		{
			SendFactionMessage(i, COLOR_RADIOCHAT, "A new APB has been submitted by: %s", ReturnName(playerid, 0));
		}
		Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Person Information Search\nVehicle Information Search\n \nAdd Charges\nView Charges (previous & current)\n \nAll Active Warrants\n \nAPB List\nCreate New APB\nDelete APB\n \nRecent 911 Calls\nView 911 By CID", "Select", "Cancel");
	}
	return 1;
}

Dialog:FightingStyles(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	        	PlayerData[playerid][pFightStyle] = 4;
		        SetPlayerFightingStyle(playerid, 4);

      			SendClientMessage(playerid, COLOR_ORANGE, "[TRAINING]: You have reset your fighting style. You are now fighting normally.");
    		}
    		case 1:
	        {
       			PlayerData[playerid][pFightStyle] = 5;
		        SetPlayerFightingStyle(playerid, 5);

      			SendClientMessage(playerid, COLOR_ORANGE, "[TRAINING]: You have successfully passed your training. Your new fighting style is: Boxing.");
      			GiveMoney(playerid, -1000);
    		}
			case 2:
	        {
	        	PlayerData[playerid][pFightStyle] = 6;
		        SetPlayerFightingStyle(playerid, 6);

      			SendClientMessage(playerid, COLOR_ORANGE, "[TRAINING]: You have successfully passed your training. Your new fighting style is: Kung Fu.");
                GiveMoney(playerid, -1000);
    		}
    		case 3:
	        {
	        	PlayerData[playerid][pFightStyle] = 7;
		        SetPlayerFightingStyle(playerid, 7);

      			SendClientMessage(playerid, COLOR_ORANGE, "[TRAINING]: You have successfully passed your training. Your new fighting style is: Knee Head.");
                GiveMoney(playerid, -1000);
    		}
    		case 4:
	        {
	        	PlayerData[playerid][pFightStyle] = 15;
		        SetPlayerFightingStyle(playerid, 15);

      			SendClientMessage(playerid, COLOR_ORANGE, "[TRAINING]: You have successfully passed your training. Your new fighting style is: Grab Kicking.");
                GiveMoney(playerid, -1000);
    		}
    		case 5:
	        {
	        	PlayerData[playerid][pFightStyle] = 16;
		        SetPlayerFightingStyle(playerid, 16);

      			SendClientMessage(playerid, COLOR_ORANGE, "[TRAINING]: You have successfully passed your training. Your new fighting style is: Elbow Master.");
                GiveMoney(playerid, -1000);
    		}
	    }
	}
	return 1;
}

Dialog:LicensesPurchase(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (Inventory_HasItem(playerid, "Car License") && PlayerData[playerid][pCarLicense] == 1)
	    			return SendErrorMessage(playerid, "You already have a Car License.");

				if(PlayerData[playerid][pCarLicense] == 0)
					return SendErrorMessage(playerid, "You don't have a car license in our system. You need to get one from the DMV.");

	        	if (!Inventory_HasItem(playerid, "Car License")) Inventory_Add(playerid, "Car License", 1581);
      			SendClientMessage(playerid, COLOR_ORANGE, "[LICENSE DEPARTMENT]: You have paid and received a copy of your car license.");
      			GiveMoney(playerid, -150);

				new query[128];
				format(query, sizeof(query), "UPDATE `characters` SET `CarLicense` = '1' WHERE `chara` = '%s'", ReturnName(playerid));
				mysql_tquery(g_iHandle, query);
				PlayerData[playerid][pCarLicense] = 1;
    		}
    		case 1:
	        {
	            if (Inventory_HasItem(playerid, "Truck License") && PlayerData[playerid][pTruckLicense] == 1)
	    			return SendErrorMessage(playerid, "You already have a Truck License.");

				if(PlayerData[playerid][pTruckLicense] == 0)
					return SendErrorMessage(playerid, "You don't have a truck license in our system. You need to get one from the DMV.");

       			if (!Inventory_HasItem(playerid, "Truck License")) Inventory_Add(playerid, "Truck License", 1581);
      			SendClientMessage(playerid, COLOR_ORANGE, "[LICENSE DEPARTMENT]: You have paid and received a copy of your trucking license.");
      			GiveMoney(playerid, -250);

				new query[128];
				format(query, sizeof(query), "UPDATE `characters` SET `TruckLicense` = '1' WHERE `chara` = '%s'", ReturnName(playerid));
				mysql_tquery(g_iHandle, query);
				PlayerData[playerid][pTruckLicense] = 1;
    		}
			case 2:
	        {
	            if (Inventory_HasItem(playerid, "Motorbike License") && PlayerData[playerid][pBikeLicense] == 1)
	    			return SendErrorMessage(playerid, "You already have a Motorbike License.");

				if(PlayerData[playerid][pBikeLicense] == 0)
					return SendErrorMessage(playerid, "You don't have a bike license in our system. You need to take the test at the DMV to get this license.");

	        	if (!Inventory_HasItem(playerid, "Motorbike License")) Inventory_Add(playerid, "Motorbike License", 1581);
      			SendClientMessage(playerid, COLOR_ORANGE, "[LICENSE DEPARTMENT]: You have paid and received a copy of your motorbike license.");
      			GiveMoney(playerid, -200);

				new query[128];
				format(query, sizeof(query), "UPDATE `characters` SET `MotorBikeLicense` = '1' WHERE `chara` = '%s'", ReturnName(playerid));
				mysql_tquery(g_iHandle, query);
				PlayerData[playerid][pBikeLicense] = 1;
    		}
    		case 3:
	        {
	            if (Inventory_HasItem(playerid, "Airplane License") && PlayerData[playerid][pAirLicense] == 1)
	    			return SendErrorMessage(playerid, "You already have an Airplane License.");

				if(PlayerData[playerid][pAirLicense] == 0)
					return SendErrorMessage(playerid, "You don't have an Airplane license in our system. You need to get one from the government licensing department. (/call 34245)");

	        	if (!Inventory_HasItem(playerid, "Airplane License")) Inventory_Add(playerid, "Airplane License", 1581);
      			SendClientMessage(playerid, COLOR_ORANGE, "[LICENSE DEPARTMENT]: You have paid and received a copy of your airplane license.");
      			GiveMoney(playerid, -1000);

				new query[128];
				format(query, sizeof(query), "UPDATE `characters` SET `AirplaneLicense` = '1' WHERE `chara` = '%s'", ReturnName(playerid));
				mysql_tquery(g_iHandle, query);
				PlayerData[playerid][pAirLicense] = 1;
    		}
    		case 4:
	        {
	            if (Inventory_HasItem(playerid, "Helicopter License") && PlayerData[playerid][pHeliLicense] == 1)
	    			return SendErrorMessage(playerid, "You already have a Helicopter License.");

				if(PlayerData[playerid][pHeliLicense] == 0)
					return SendErrorMessage(playerid, "You don't have a helicopter license in our system. You need to get one from the government licensing department. (/call 34245)");

	        	if (!Inventory_HasItem(playerid, "Helicopter License")) Inventory_Add(playerid, "Helicopter License", 1581);
      			SendClientMessage(playerid, COLOR_ORANGE, "[LICENSE DEPARTMENT]: You have paid and received a copy of your helicopter license.");
      			GiveMoney(playerid, -1000);

				new query[128];
				format(query, sizeof(query), "UPDATE `characters` SET `HelicopterLicense` = '1' WHERE `chara` = '%s'", ReturnName(playerid));
				mysql_tquery(g_iHandle, query);
				PlayerData[playerid][pHeliLicense] = 1;
    		}
	    }
	}
	return 1;
}

Dialog:ViewCharges(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
	    return 0;

	if (response)
	{
		if (isnull(inputtext) || strlen(inputtext) > 24)
		    return Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "View Charges", "Please enter the name or ID of the player:", "Submit", "Back");

		if (IsNumber(inputtext) && IsPlayerConnected(strval(inputtext))) {
	        ViewCharges(playerid, ReturnName(strval(inputtext)));
		}
	    else if (!IsNumber(inputtext)) {
	        ViewCharges(playerid, inputtext);
		}
		else {
		    Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "View Charges", "Error: Invalid user specified.\n\nPlease enter the name or ID of the player:", "Submit", "Back");
		}
	}
	else cmd_mdc(playerid, "\1");
	return 1;
}

Dialog:Locker(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1 || !IsNearFactionLocker(playerid))
		return 0;

	if (response)
	{
	    static
	        skins[18],
	        string[512];

		string[0] = 0;

	    if (FactionData[factionid][factionType] != FACTION_GANG_DRUGS && FactionData[factionid][factionType] != FACTION_GANG_GUNS)
	    {
	        switch (listitem)
	        {
	            case 0:
	            {
	                if (!PlayerData[playerid][pOnDuty])
	                {
	                    PlayerData[playerid][pOnDuty] = true;
	                    SetPlayerArmour(playerid, 100.0);

	                    SetFactionColor(playerid);
	                    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has clocked in and is now on duty.", ReturnName(playerid, 0));
	                    SendFactionMessage(factionid, COLOR_FACTIONCHAT, "[Dispatch]: %s %s is now On Duty.**", Faction_GetRank(playerid), ReturnName(playerid, 0));
	                }
	                else
	                {
	                    PlayerData[playerid][pOnDuty] = false;
	                    SetPlayerArmour(playerid, 0.0);

	                    SetPlayerColor(playerid, DEFAULT_COLOR);
	                    SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);

	                    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has clocked out and is now off duty.", ReturnName(playerid, 0));
	                    SendFactionMessage(factionid, COLOR_FACTIONCHAT, "[Dispatch]: %s %s is now Off Duty.**", Faction_GetRank(playerid), ReturnName(playerid, 0));
	                }
				}
				case 1:
				{
				    SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 99.0);
				    SendClientMessage(playerid, COLOR_WHITE, "You have filled your health (100.0) and armour (100.0). ");
				}
				case 2:
				{
					for (new i = 0; i < sizeof(skins); i ++)
					    skins[i] = (FactionData[factionid][factionSkins][i]) ? (FactionData[factionid][factionSkins][i]) : (19300);

					ShowModelSelectionMenu(playerid, "Choose Skin", MODEL_SELECTION_FACTION_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
				}
				case 3:
				{
				    for (new i = 0; i < 10; i ++)
					{
				        if (FactionData[factionid][factionWeapons][i])
							format(string, sizeof(string), "%sWeapon %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));

						else format(string, sizeof(string), "%sEmpty Slot\n", string);
				    }
				    Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Locker Weapons", string, "Select", "Cancel");
				}
			}
	    }
	    else
	    {
	        switch (listitem)
	        {
				case 0:
				{
					for (new i = 0; i < sizeof(skins); i ++)
					    skins[i] = (FactionData[factionid][factionSkins][i]) ? (FactionData[factionid][factionSkins][i]) : (19300);

					ShowModelSelectionMenu(playerid, "Choose Skin", MODEL_SELECTION_FACTION_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
				}
				case 1:
				{
				    for (new i = 0; i < 10; i ++)
					{
				        if (FactionData[factionid][factionWeapons][i] && GetFactionType(playerid) != FACTION_GANG_DRUGS && FactionData[factionid][factionWeapons][i] && GetFactionType(playerid) != FACTION_GANG_GUNS)
							format(string, sizeof(string), "%sWeapon %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));

						else if (FactionData[factionid][factionWeapons][i] && GetFactionType(playerid) == FACTION_GANG_DRUGS && FactionData[factionid][factionWeapons][i] && GetFactionType(playerid) == FACTION_GANG_GUNS)
							format(string, sizeof(string), "%sWeapon %d: %s (%d ammo)\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]), FactionData[factionid][factionAmmo][i]);

						else format(string, sizeof(string), "%sEmpty Slot\n", string);
				    }
				    Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Locker Weapons", string, "Select", "Cancel");
				}
			}
	    }
	}
	return 1;
}

Dialog:TrunkLocker(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1)
		return 0;

	if (response)
	{
	    static
	        string[512];

		string[0] = 0;

	    if (FactionData[factionid][factionType] != FACTION_GANG_DRUGS && FactionData[factionid][factionType] != FACTION_GANG_GUNS)
	    {
	        switch (listitem)
	        {
				case 0:
				{
				    SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 99.0);
				    SendClientMessage(playerid, COLOR_WHITE, "You have filled your health (100.0) and armour (100.0). ");
				}
				case 1:
				{
				    for (new i = 0; i < 10; i ++)
					{
				        if (FactionData[factionid][factionWeapons][i])
							format(string, sizeof(string), "%sWeapon %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));

						else format(string, sizeof(string), "%sEmpty Slot\n", string);
				    }
				    Dialog_Show(playerid, TrunkWeapons, DIALOG_STYLE_LIST, "Trunk Weapons", string, "Select", "Cancel");
				}
			}
	    }
	    else
	    {
	    }
	}
	return 1;
}

Dialog:TrunkWeapons(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1)
		return 0;

	if (response)
	{
	    new
	        weaponid = FactionData[factionid][factionWeapons][listitem],
	        ammo = FactionData[factionid][factionAmmo][listitem];

	    if (weaponid)
		{
	        if (PlayerHasWeapon(playerid, weaponid))
	            return SendErrorMessage(playerid, "You have this weapon equipped already.");

	        GiveWeaponToPlayer(playerid, weaponid, ammo);
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s reaches inside the trunk and grabs a %s.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));

			if (GetFactionType(playerid) == FACTION_GANG_DRUGS || GetFactionType(playerid) == FACTION_GANG_GUNS)
		    {
		        FactionData[factionid][factionWeapons][listitem] = 0;
		        FactionData[factionid][factionAmmo][listitem] = 0;

		        Faction_Save(factionid);
			}
		}
		else
		{
		    if (GetFactionType(playerid) == FACTION_GANG_DRUGS || GetFactionType(playerid) == FACTION_GANG_GUNS)
		    {
		        if ((weaponid = GetWeapon(playerid)) == 0)
		            return SendErrorMessage(playerid, "You are not holding any weapon.");

		        FactionData[factionid][factionWeapons][listitem] = weaponid;
		        FactionData[factionid][factionAmmo][listitem] = GetPlayerAmmo(playerid);

		        Faction_Save(factionid);

                ResetWeapon(playerid, weaponid);
		        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a %s and stores it inside the trunk.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
			}
			else
			{
			    SendErrorMessage(playerid, "The selected weapon slot is empty.");
			}
	    }
	}
	else {
	    cmd_locker(playerid, "\1");
	}
	return 1;
}

Dialog:LockerWeapons(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1 || !IsNearFactionLocker(playerid))
		return 0;

	if (response)
	{
	    new
	        weaponid = FactionData[factionid][factionWeapons][listitem],
	        ammo = FactionData[factionid][factionAmmo][listitem];

	    if (weaponid)
		{
	        if (PlayerHasWeapon(playerid, weaponid))
	            return SendErrorMessage(playerid, "You have this weapon equipped already.");

	        GiveWeaponToPlayer(playerid, weaponid, ammo);
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s reaches inside the locker and equips a %s.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));

			if (GetFactionType(playerid) == FACTION_GANG_DRUGS || GetFactionType(playerid) == FACTION_GANG_GUNS)
		    {
		        FactionData[factionid][factionWeapons][listitem] = 0;
		        FactionData[factionid][factionAmmo][listitem] = 0;

		        Faction_Save(factionid);
			}
		}
		else
		{
		    if (GetFactionType(playerid) == FACTION_GANG_DRUGS || GetFactionType(playerid) == FACTION_GANG_GUNS)
		    {
		        if ((weaponid = GetWeapon(playerid)) == 0)
		            return SendErrorMessage(playerid, "You are not holding any weapon.");

		        FactionData[factionid][factionWeapons][listitem] = weaponid;
		        FactionData[factionid][factionAmmo][listitem] = GetPlayerAmmo(playerid);

		        Faction_Save(factionid);

                ResetWeapon(playerid, weaponid);
		        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a %s and stores it in the locker.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
			}
			else
			{
			    SendErrorMessage(playerid, "The selected weapon slot is empty.");
			}
	    }
	}
	else {
	    cmd_locker(playerid, "\1");
	}
	return 1;
}

Dialog:FactionLocker(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
			    static
			        Float:x,
			        Float:y,
			        Float:z;

				GetPlayerPos(playerid, x, y, z);

				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][0] = x;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][1] = y;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][2] = z;

				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerInt] = GetPlayerInterior(playerid);
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerWorld] = GetPlayerVirtualWorld(playerid);

				Faction_Refresh(PlayerData[playerid][pFactionEdit]);
				Faction_Save(PlayerData[playerid][pFactionEdit]);
				SendServerMessage(playerid, "You have adjusted the locker position of faction ID: %d.", PlayerData[playerid][pFactionEdit]);
			}
			case 1:
			{
				static
				    string[512];

				string[0] = 0;

			    for (new i = 0; i < 10; i ++)
				{
			        if (FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][i])
						format(string, sizeof(string), "%sWeapon %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][i]));

					else format(string, sizeof(string), "%sEmpty Slot\n", string);
			    }
			    Dialog_Show(playerid, FactionWeapons, DIALOG_STYLE_LIST, "Locker Weapons", string, "Select", "Cancel");
			}
		}
	}
	return 1;
}

Dialog:FactionWeapons(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    PlayerData[playerid][pSelectedSlot] = listitem;
	    Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Edit Weapon", "Set Weapon (%d)\nSet Ammunition (%d)\nClear Slot", "Select", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);
	}
	return 1;
}

Dialog:FactionWeapon(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        	Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Set Weapon", "Current Weapon: %s (%d)\n\nPlease enter the new weapon ID for slot %d:", "Submit", "Cancel", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

			case 1:
	            Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Set Ammunition", "Current Ammo: %d\n\nPlease enter the new ammunition for the weapon in slot %d:", "Submit", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

			case 2:
			{
			    FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]] = 0;
				FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]] = 0;

				Faction_Save(PlayerData[playerid][pFactionEdit]);

				dialog_FactionLocker(playerid, 1, 1, "\1");
				SendServerMessage(playerid, "You have removed the weapon in slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
			}
	    }
	}
	else {
	    dialog_FactionLocker(playerid, 1, 1, "\1");
	}
	return 1;
}

Dialog:FactionWeaponID(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    new weaponid = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Set Weapon", "Current Weapon: %s (%d)\n\nPlease enter the new weapon ID for slot %d:", "Submit", "Cancel", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

		if (weaponid < 0 || weaponid > 46)
		    return Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Set Weapon", "Error: The weapon ID can't be below 0 or above 46.\n\nCurrent Weapon: %s (%d)\n\nPlease enter the new weapon ID for slot %d:", "Submit", "Cancel", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]] = weaponid;
        Faction_Save(PlayerData[playerid][pFactionEdit]);

		Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Edit Weapon", "Set Weapon (%d)\nSet Ammunition (%d)\nClear Slot", "Select", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);

	    if (weaponid) {
		    SendServerMessage(playerid, "You have set the weapon in slot %d to %s.", PlayerData[playerid][pSelectedSlot] + 1, ReturnWeaponName(weaponid));
		}
		else {
		    SendServerMessage(playerid, "You have removed the weapon in slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
		}
	}
	return 1;
}

Dialog:FactionWeaponAmmo(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    new ammo = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Set Ammunition", "Current Ammo: %d\n\nPlease enter the new ammunition for the weapon in slot %d:", "Submit", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

		if (ammo < 1 || ammo > 15000)
		    return Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Set Ammunition", "Error: The ammo can't be below 1 or above 15,000.\n\nCurrent Ammo: %d\n\nPlease enter the new ammunition for the weapon in slot %d:", "Submit", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]] = ammo;
        Faction_Save(PlayerData[playerid][pFactionEdit]);

		Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Edit Weapon", "Set Weapon (%d)\nSet Ammunition (%d)\nClear Slot", "Select", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);
		SendServerMessage(playerid, "You have set the ammunition in slot %d to %d.", PlayerData[playerid][pSelectedSlot] + 1, ammo);
	}
	return 1;
}

Dialog:FactionSkin(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    static
	        skins[311];

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Add by Model ID", "Please enter the model ID of the skin below (0-311):", "Add", "Cancel");

			case 1:
			{
			    for (new i = 0; i < sizeof(skins); i ++)
			        skins[i] = i + 1;

				ShowModelSelectionMenu(playerid, "Add Skin", MODEL_SELECTION_ADD_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
			}
			case 2:
			{
			    FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = 0;

			    Faction_Save(PlayerData[playerid][pFactionEdit]);
			    SendServerMessage(playerid, "You have removed the skin ID in slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
			}
		}
	}
	return 1;
}

Dialog:FactionModel(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if(response)
	{
	    new skin = strval(inputtext);

	    if(isnull(inputtext))
	        return Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Add by Model ID", "Please enter the model ID of the skin below (0-311):", "Add", "Cancel");

		if(skin < 0 || skin > 30000)
		    return Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Add by Model ID", "Error: The skin ID can't be below 0 or above 30000.\n\nPlease enter the model ID of the skin below (0-30000):", "Add", "Cancel");

        FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = skin;
		Faction_Save(PlayerData[playerid][pFactionEdit]);

		if(skin) 
		{
		    SendServerMessage(playerid, "You have set the skin ID in slot %d to %d.", PlayerData[playerid][pSelectedSlot] + 1, skin);
		}
		else
		{
		    SendServerMessage(playerid, "You have removed the skin ID in slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
		}
	}
	return 1;
}

Dialog:JobList(playerid, response, listitem, inputtext[])
{
	/*
	    case 1: str = "Courier";
		case 2: str = "Mechanic";
		case 3: str = "Taxi Driver";
		case 4: str = "Cargo Unloader";
		case 5: str = "Miner";
		case 6: str = "Food Vendor";
		case 7: str = "Garbage Man";
		case 8: str = "Weapon Smuggler";
	*/
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Courier Job", "{FFFFFF}The {FF6347}Courier{FFFFFF} job allows players to deliver products to businesses.\nUse {FF6347}/startdelivery{FFFFFF} to begin loading and {FF6347}/unload{FFFFFF} to unload the goods.", "Close", "Back");

			case 1:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Mechanic Job", "{FFFFFF}The {FF6347}Mechanic{FFFFFF} job allows players to repair totalled vehicles.\nUse {FF6347}/hood{FFFFFF} to open the hood and {FF6347}/repair{FFFFFF} to repair the vehicle.", "Close", "Back");

            case 2:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Taxi Driver Job", "{FFFFFF}The {FF6347}Taxi Driver{FFFFFF} job allows players to transport other players.\nUse {FF6347}/taxi{FFFFFF} whilst inside a taxi cab to go on taxi duty.", "Close", "Back");

            case 3:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Cargo Unloader Job", "{FFFFFF}The {FF6347}Cargo Unloader{FFFFFF} job allows players to operate a forklift to move crates.\nUse {FF6347}/loadcrate{FFFFFF} to load a crate and deliver it to the {FF6347}marker{FFFFFF}.", "Close", "Back");

            case 4:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Miner Job", "{FFFFFF}The {FF6347}Miner{FFFFFF} job allows players to mine rocks from the ground.\nUse {FF6347}/mine{FFFFFF} to begin mining and {FF6347}LMB{FFFFFF} to start digging.", "Close", "Back");

        	case 5:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Food Vendor Job", "{FFFFFF}The {FF6347}Food Vendor{FFFFFF} job allows players to sell food items to other players.\nUse {FF6347}/sellfood{FFFFFF} whilst inside a food truck to sell a food item.", "Close", "Back");

            case 6:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Garbage Man Job", "{FFFFFF}The {FF6347}Garbage Man{FFFFFF} job allows players to deliver trash in return for money.\nUse {FF6347}/takebag{FFFFFF} whilst near a garbage bin to load a bag of garbage.", "Close", "Back");

            case 7:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Package Sorter Job", "{FFFFFF}The {FF6347}Package Sorter{FFFFFF} job allows players to sort packages for money.\nUse {FF6347}/sorting{FFFFFF} at the required location to begin sorting.", "Close", "Back");

            case 8:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Weapon Smuggler Job", "{FFFFFF}The {FF6347}Weapon Smuggler{FFFFFF} job allows players to smuggle weapons from weapon crates.\nUse {FF6347}/craftparts{FFFFFF} whilst carrying a weapon crate to smuggle the parts.", "Close", "Back");

	       case 9:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Fisherman Job", "{FFFFFF}The {FF6347}Fisherman{FFFFFF} job allows players to catch fishes of different types.\nUse {FF6347}/fishing{FFFFFF} whilst having a fishing rod to begin.", "Close", "Back");

	    }
	}
	return 1;
}

Dialog:RestrictedFrequencies(playerid, response, listitem, inputtext[])
{
	/*
	    case 0: str = "PD";
		case 1: str = "FD";
		case 2: str = "GOV";
	*/
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            Dialog_Show(playerid, RestrictedFrequencies, DIALOG_STYLE_MSGBOX, "Police Department", "The Radio Frequency of the police department is 911. (912 for SWAT)", "Close", "Back");

			case 1:
	            Dialog_Show(playerid, RestrictedFrequencies, DIALOG_STYLE_MSGBOX, "Fire Department", "The Radio Frequency of the fire department is 913.", "Close", "Back");

   			case 2:
	            Dialog_Show(playerid, RestrictedFrequencies, DIALOG_STYLE_MSGBOX, "Government", "The Radio Frequency of the government is 914.", "Close", "Back");

	    }
	}
	return 1;
}

Dialog:ACC_POLICE(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            SetPlayerAttachedObject(playerid,1,19142,1,0.1,0.05,0.0,0.0,0.0,0.0),
		        SendClientMessage(playerid, COLOR_WHITE,"You have equiped your Kevlar Vest.");

			case 1:
			    SetPlayerAttachedObject(playerid,2,19141,2,0.11,0.0,0.0,0.0,0.0,0.0),
	            SendClientMessage(playerid, COLOR_WHITE,"You have equiped your Police Helmet.");

   			case 2:
   				SetPlayerAttachedObject(playerid,3,18637,13,0.35,0.0,0.0,0.0,0.0,180.0),
	            SendClientMessage(playerid, COLOR_WHITE,"You have equiped your Police Shield.");

			case 3:
				SetPlayerAttachedObject(playerid,4,18642,7,0.1,0.0,-0.11,0.0,-90.0,90.0),
				SendClientMessage(playerid, COLOR_WHITE,"You have equiped your Police Taser.");

            case 4:
            	SetPlayerAttachedObject(playerid,1,19515,1,0.1,0.05,0.0,0.0,0.0,0.0),
		        SendClientMessage(playerid, COLOR_WHITE,"You have equiped your Grey SWAT Vest.");

            case 5:
            	SetPlayerAttachedObject(playerid,2,19514,2,0.11,0.0,0.0,0.0,0.0,0.0),
		        SendClientMessage(playerid, COLOR_WHITE,"You have equiped your Grey SWAT Helmet");

	    }
	}
	return 1;
}

Dialog:JobHelp(playerid, response, listitem, inputtext[])
{
	if (!response) cmd_joblist(playerid, "\1");
	return 1;
}

Dialog:Crates(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pCarryCrate] != -1)
	        return SendErrorMessage(playerid, "You are already carrying a crate.");

	    new id = strfind(inputtext, "#");

	    if (id != -1) {
	        id = strval(inputtext[id + 1]);

	        CrateData[id][crateVehicle] = INVALID_VEHICLE_ID;
	        PlayerData[playerid][pCarryCrate] = id;

            SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.000000, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes a crate out of the vehicle.", ReturnName(playerid, 0));
			SendServerMessage(playerid, "You have taken a %s crate out of the vehicle.", Crate_GetType(CrateData[id][crateType]));
		}
	}
	return 1;
}

Dialog:AddVehicleModel(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
	        if (isnull(inputtext))
	            return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Add Vehicle", "Please enter the name or the ID of the vehicle model:", "Add", "Cancel");

			new model = GetVehicleModelByName(inputtext);

			if (!model)
			    return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Add Vehicle", "Error: Invalid model specified.\n\nPlease enter the name or the ID of the vehicle model:", "Add", "Cancel");

        	for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
			{
				if (DealershipCars[id][i][vehModel] == model)
	            	return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Add Vehicle", "Error: This model is already sold at this dealership.\n\nPlease enter the name or the ID of the vehicle model:", "Add", "Cancel");
			}
			PlayerData[playerid][pDealerCar] = model;
			Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Enter Price", "Please enter a price for '%s':", "Submit", "Cancel", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));
	    }
	}
	return 1;
}

Dialog:AddVehicle(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
			if (!listitem)
			{
				Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Add Vehicle", "Please enter the name or the ID of the vehicle model:", "Add", "Cancel");
			}
		    else
			{
				static
					cars[212];

				for (new i = 0; i < sizeof(cars); i ++)
  					cars[i] = i + 400;

				ShowModelSelectionMenu(playerid, "Add Vehicle", MODEL_SELECTION_DEALER_ADD, cars, sizeof(cars), -16.0, 0.0, -55.0);
			}
		}
	}
	return 1;
}

Dialog:EnterNumber(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    static
	        name[32],
			string[128];

		strunpack(name, PlayerData[playerid][pEditingItem]);

	    if (isnull(inputtext) || !IsNumber(inputtext))
	        return Dialog_Show(playerid, EnterNumber, DIALOG_STYLE_INPUT, "Contact Number", "Contact Name: %s\n\nPlease enter the phone number for this contact:", "Submit", "Back", name);

		for (new i = 0; i != MAX_CONTACTS; i ++)
		{
			if (!ContactData[playerid][i][contactExists])
			{
            	ContactData[playerid][i][contactExists] = true;
            	ContactData[playerid][i][contactNumber] = strval(inputtext);

				format(ContactData[playerid][i][contactName], 32, name);

				format(string, sizeof(string), "INSERT INTO `contacts` (`ID`, `contactName`, `contactNumber`) VALUES('%d', '%s', '%d')", PlayerData[playerid][pID], SQL_ReturnEscaped(name), ContactData[playerid][i][contactNumber]);
				mysql_tquery(g_iHandle, string, "OnContactAdd", "dd", playerid, i);

				SendServerMessage(playerid, "You have added \"%s\" to your contacts.", name);
                return 1;
			}
	    }
	    SendErrorMessage(playerid, "There is no room left for anymore contacts.");
	}
	else {
		ShowContacts(playerid);
	}
	return 1;
}

Dialog:NewContact(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "New Contact", "Error: Please enter a contact name.\n\nPlease enter the name of the contact below:", "Submit", "Back");

	    if (strlen(inputtext) > 32)
	        return Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "New Contact", "Error: The contact name can't exceed 32 characters.\n\nPlease enter the name of the contact below:", "Submit", "Back");

		strpack(PlayerData[playerid][pEditingItem], inputtext, 32);

	    Dialog_Show(playerid, EnterNumber, DIALOG_STYLE_INPUT, "Contact Number", "Contact Name: %s\n\nPlease enter the phone number for this contact:", "Submit", "Back", inputtext);
	}
	else {
		ShowContacts(playerid);
	}
	return 1;
}

Dialog:ContactInfo(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			id = PlayerData[playerid][pContact],
			string[72];

		switch (listitem)
		{
		    case 0:
		    {
		        format(string, 16, "%d", ContactData[playerid][id][contactNumber]);
				cmd_call(playerid, string);
		    }
		    case 1:
		    {
		    	new targetid = GetNumberOwner(ContactData[playerid][id][contactNumber]);

		    	if(targetid == INVALID_PLAYER_ID)
		    	{
		    		return SendErrorMessage(playerid, "This contact is not online.");
		    	}

				PlayerData[playerid][pContact] = targetid;
		    	Dialog_Show(playerid, TextMessage, DIALOG_STYLE_INPUT, "Text Message", "Please enter the message to send to %s:", "Send", "Back", ReturnName(targetid, 0));
		    }
		    case 2:
		    {
		        format(string, sizeof(string), "DELETE FROM `contacts` WHERE `ID` = '%d' AND `contactID` = '%d'", PlayerData[playerid][pID], ContactData[playerid][id][contactID]);
		        mysql_tquery(g_iHandle, string);

		        SendServerMessage(playerid, "You have deleted \"%s\" from your contacts.", ContactData[playerid][id][contactName]);

		        ContactData[playerid][id][contactExists] = false;
		        ContactData[playerid][id][contactNumber] = 0;
		        ContactData[playerid][id][contactID] = 0;

		        ShowContacts(playerid);
		    }
		}
	}
	else {
	    ShowContacts(playerid);
	}
	return 1;
}

Dialog:Contacts(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!listitem) {
	        Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "New Contact", "Please enter the name of the contact below:", "Submit", "Back");
	    }
	    else {
		    PlayerData[playerid][pContact] = ListedContacts[playerid][listitem - 1];

	        Dialog_Show(playerid, ContactInfo, DIALOG_STYLE_LIST, ContactData[playerid][PlayerData[playerid][pContact]][contactName], "Call Contact\nText Contact\nDelete Contact", "Select", "Back");
	    }
	}
	else {
		cmd_phone(playerid, "\1");
	}
	for (new i = 0; i != MAX_CONTACTS; i ++) {
	    ListedContacts[playerid][i] = -1;
	}
	return 1;
}

Dialog:DialNumber(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
	        string[16];

	    if (isnull(inputtext) || !IsNumber(inputtext))
	        return Dialog_Show(playerid, DialNumber, DIALOG_STYLE_INPUT, "Dial Number", "Please enter the number that you wish to dial below:", "Dial", "Back");

        format(string, 16, "%d", strval(inputtext));
		cmd_call(playerid, string);
	}
	else {
		cmd_phone(playerid, "\1");
	}
	return 1;
}

Dialog:SendText(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new number = strval(inputtext);

	    if (isnull(inputtext) || !IsNumber(inputtext))
	        return Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Send Text Message", "Please enter the number that you wish to send a text message to:", "Dial", "Back");

        if (GetNumberOwner(number) == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Send Text Message", "Error: That number is not online right now.\n\nPlease enter the number that you wish to send a text message to:", "Dial", "Back");

		PlayerData[playerid][pContact] = GetNumberOwner(number);
		Dialog_Show(playerid, TextMessage, DIALOG_STYLE_INPUT, "Text Message", "Please enter the message to send to %s:", "Send", "Back", ReturnName(PlayerData[playerid][pContact], 0));
	}
	else {
		cmd_phone(playerid, "\1");
	}
	return 1;
}

Dialog:TextMessage(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (isnull(inputtext))
			return Dialog_Show(playerid, TextMessage, DIALOG_STYLE_INPUT, "Text Message", "Error: Please enter a message to send.\n\nPlease enter the message to send to %s:", "Send", "Back", ReturnName(PlayerData[playerid][pContact], 0));

		new targetid = PlayerData[playerid][pContact];

		if (!IsPlayerConnected(targetid) || !PlayerData[targetid][pPhone])
		{
			RemovePlayerAttachedObject(playerid,4);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			SendErrorMessage(playerid, "The specified phone number went offline.");
			return 1;
		}

		GiveMoney(playerid, -1);
		ShowPlayerFooter(playerid, "You've been ~r~charged~w~ $1 to send a text.");

		SendClientMessageEx(targetid, COLOR_YELLOW, "[TEXT]: %s - %s (%d)", inputtext, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
		SendClientMessageEx(playerid, COLOR_YELLOW, "[TEXT]: %s - %s (%d)", inputtext, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);

        PlayerPlaySoundEx(targetid, 21001);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out their phone and sends a text.", ReturnName(playerid, 0));
		RemovePlayerAttachedObject(playerid,4);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	}
	else {
        Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Send Text Message", "Please enter the number that you wish to send a text message to:", "Submit", "Back");
	}
	return 1;
}

Dialog:MyPhone(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
		    case 0:
		    {
		        if (PlayerData[playerid][pPhoneOff])
		            return SendErrorMessage(playerid, "Your phone must be powered on.");

				Dialog_Show(playerid, DialNumber, DIALOG_STYLE_INPUT, "Dial Number", "Please enter the number that you wish to dial below:", "Dial", "Back");
			}
			case 1:
			{
			    if (PlayerData[playerid][pPhoneOff])
		            return SendErrorMessage(playerid, "Your phone must be powered on.");

			    ShowContacts(playerid);
			}
		    case 2:
		    {
		        if (PlayerData[playerid][pPhoneOff])
		            return SendErrorMessage(playerid, "Your phone must be powered on.");

		        Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Send Text Message", "Please enter the number that you wish to send a text message to:", "Dial", "Back");
			}
			case 3:
			{
			    if (!PlayerData[playerid][pPhoneOff])
			    {
           			if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID) {
			        	CancelCall(playerid);
					}
					PlayerData[playerid][pPhoneOff] = 1;
			        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has powered off their cellphone.", ReturnName(playerid, 0));
					RemovePlayerAttachedObject(playerid,4);
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
				}
				else
				{
				    PlayerData[playerid][pPhoneOff] = 0;
			        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has powered on their cellphone.", ReturnName(playerid, 0));
					RemovePlayerAttachedObject(playerid,4);
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
				}
			}
		}
	}
	else
	{
		RemovePlayerAttachedObject(playerid,4);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	}
	return 1;
}

Dialog:ListedFurniture(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = House_Inside(playerid);

	    if (id != -1 && House_IsOwner(playerid, id))
	    {
	        PlayerData[playerid][pEditFurniture] = ListedFurniture[playerid][listitem];

			Dialog_Show(playerid, FurnitureList, DIALOG_STYLE_LIST, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName], "Edit Position\nPickup Furniture\nDestroy Furniture", "Select", "Cancel");
	    }
	}
	for (new i = 0; i != MAX_FURNITURE; i ++) {
	    ListedFurniture[playerid][i] = -1;
	}
	return 1;
}

Dialog:FurnitureList(playerid, response, listitem, inputtext[])
{
	if (response)
	{
        new id = House_Inside(playerid);

	    if (id != -1 && House_IsOwner(playerid, id))
	    {
	   		switch (listitem)
		    {
		        case 0:
				{
					EditDynamicObject(playerid, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureObject]);
					SendServerMessage(playerid, "You are now editing the position of item \"%s\".", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);
				}
				case 1:
				{
				    new item = Inventory_Add(playerid, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName], FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureModel]);

				    if (item == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has picked up \"%s\".", ReturnName(playerid, 0), FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);
				    SendServerMessage(playerid, "You have picked up your \"%s\". The item was added to your inventory.", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);

				    Furniture_Delete(PlayerData[playerid][pEditFurniture]);
					CancelEdit(playerid);

				    PlayerData[playerid][pEditFurniture] = -1;
				}
				case 2:
				{
				    Furniture_Delete(PlayerData[playerid][pEditFurniture]);
				    SendServerMessage(playerid, "You have destroyed furniture \"%s\".", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);

				    CancelEdit(playerid);
				    PlayerData[playerid][pEditFurniture] = -1;
				}
			}
		}
		else {
			PlayerData[playerid][pEditFurniture] = -1;
		}
	}
	else {
	    PlayerData[playerid][pEditFurniture] = -1;
	}
	return 1;
}

Dialog:Trunk(playerid, response, listitem, inputtext[])
{
    new carid = Car_Nearest(playerid);

	if (CarData[carid][carImpounded] != -1)
    	return SendErrorMessage(playerid, "This vehicle is impounded and you can't use it.");

	if (carid != -1 && !CarData[carid][carLocked])
 	{
		if (response)
		{
			if (!CarData[carid][carWeapons][listitem])
			{
			    if (!GetWeapon(playerid))
			        return SendErrorMessage(playerid, "You aren't holding any weapon.");

       			if (GetWeapon(playerid) == 23 && PlayerData[playerid][pTazer])
	    			return SendErrorMessage(playerid, "You can't store a tazer into your trunk.");

                if (GetWeapon(playerid) == 25 && PlayerData[playerid][pBeanBag])
	    			return SendErrorMessage(playerid, "You can't store a beanbag shotgun into your trunk.");

	   			CarData[carid][carWeapons][listitem] = GetWeapon(playerid);
	            CarData[carid][carAmmo][listitem] = GetPlayerAmmo(playerid);

	            ResetWeapon(playerid, CarData[carid][carWeapons][listitem]);
	            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s stored a %s into the trunk.", ReturnName(playerid, 0), ReturnWeaponName(CarData[carid][carWeapons][listitem]));

	            Car_Save(carid);
				Car_WeaponStorage(playerid, carid);
			}
			else
			{
			    GiveWeaponToPlayer(playerid, CarData[carid][carWeapons][listitem], CarData[carid][carAmmo][listitem]);
	            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes a %s from the trunk.", ReturnName(playerid, 0), ReturnWeaponName(CarData[carid][carWeapons][listitem]));

	            CarData[carid][carWeapons][listitem] = 0;
	            CarData[carid][carAmmo][listitem] = 0;

	            Car_Save(carid);
	            Car_WeaponStorage(playerid, carid);
			}
	    }
		else {
		    Car_ShowTrunk(playerid, carid);
		}
	}
	return 1;
}

Dialog:ConfirmCarBuy(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			bizid = Business_Inside(playerid),
			carid = PlayerData[playerid][pDealerCar],
			price = DealershipCars[bizid][carid][vehPrice];




		if (bizid != -1 && BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 5)
		{
			if (GetMoney(playerid) < price)
			    return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

			if (Car_GetCount(playerid) >= MAX_OWNABLE_CARS)
			    return SendErrorMessage(playerid, "You already have %d vehicles (server limit).", MAX_OWNABLE_CARS);

			new id = Car_Create(PlayerData[playerid][pID], DealershipCars[bizid][carid][vehModel], BusinessData[bizid][bizSpawn][0], BusinessData[bizid][bizSpawn][1], BusinessData[bizid][bizSpawn][2], BusinessData[bizid][bizSpawn][3], 1, 1);

			if (id != -1)
			{
			    Tax_AddPercent(price);

				new vprice = price / 100 * 13;

			    BusinessData[bizid][bizVault] += vprice;
			    Business_Save(bizid);

				SendServerMessage(playerid, "You have bought a %s for %s!", ReturnVehicleModelName(DealershipCars[bizid][carid][vehModel]), FormatNumber(price));
				GiveMoney(playerid, -price);

				ShowPlayerFooter(playerid, "~w~Vehicle ~p~purchased!");
			}
		}
	}
	return 1;
}

Dialog:DealerCarPrice(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (isnull(inputtext) || strval(inputtext) < 1)
		        return Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Enter Price", "Please enter a price for '%s':", "Submit", "Cancel", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));

		    Business_AddVehicle(id, PlayerData[playerid][pDealerCar], strval(inputtext));
	        Business_EditCars(playerid, id);

		    SendServerMessage(playerid, "You have added a '%s' to the dealership.", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));
		    return 1;
		}
	}
	return 1;
}

Dialog:CarPrice(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (isnull(inputtext) || strval(inputtext) < 1)
		        return Dialog_Show(playerid, CarPrice, DIALOG_STYLE_INPUT, "Set Price", "The current price for '%s' is %s.\n\nPlease enter the new price for this vehicle model below:", "Submit", "Cancel", ReturnVehicleModelName(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));

			new
			    string[128];

			DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice] = strval(inputtext);

			format(string, sizeof(string), "UPDATE `dealervehicles` SET `vehPrice` = '%d' WHERE `ID` = '%d' AND `vehID` = '%d'", strval(inputtext), BusinessData[id][bizID], DealershipCars[id][PlayerData[playerid][pDealerCar]][vehID]);
			mysql_tquery(g_iHandle, string);

			SendServerMessage(playerid, "You have set the price of '%s' to %s.", ReturnVehicleModelName(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));
			Business_EditCars(playerid, id);
		}
		return 1;
	}
	return 1;
}

Dialog:CarOptions(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (listitem == 0)
		    {
		        Dialog_Show(playerid, CarPrice, DIALOG_STYLE_INPUT, "Set Price", "The current price for '%s' is %s.\n\nPlease enter the new price for this vehicle model below:", "Submit", "Cancel", ReturnVehicleModelName(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));
		    }
		    else if (listitem == 1)
		    {
			    new model = DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel];
			    Business_RemoveVehicle(id, model);

				SendServerMessage(playerid, "You have removed the '%s' from the dealership.", ReturnVehicleModelName(model));
				Business_EditCars(playerid, id);
			}
		}
	}
	return 1;
}

Dialog:BankAccount(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
				Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Withdraw funds", "Your bank account's balance: %s\n\nPlease enter the amount of money you wish to withdraw:", "Withdraw", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));
			}
	        case 1:
	        {
				Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Deposit funds", "Your bank account's balance: %s\n\nPlease enter the amount of money you wish to deposit:", "Deposit", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));
			}
			case 2:
			{
			    Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Make a transfer", "Your bank account's balance: %s\n\nPlease enter the name or ID of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));
			}
	    }
	}
	else
	{
	    Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "Bank Account", "Bank Balance: %s\nSavings Balance: %s", "Select", "Cancel", FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
	}
	return 1;
}

Dialog:Transfer(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    static
	        userid;

		if (sscanf(inputtext, "u", userid))
		    return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Make a transfer", "Your bank account's balance: %s\n\nPlease enter the name or ID of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (userid == INVALID_PLAYER_ID)
		    return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Make a transfer", "Error: Invalid player specified.\n\nYour bank account's balance: %s\n\nPlease enter the name or ID of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (userid == playerid)
		    return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Make a transfer", "Error: You can't transfer funds to yourself.\n\nYour bank account's balance: %s\n\nPlease enter the name or ID of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

		PlayerData[playerid][pTransfer] = userid;
		Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Make a transfer", "Your bank account's balance: %s\n\nPlease enter the amount of money to transfer to %s:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));
	}
    else {
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Bank Account", "Withdraw funds\nDeposit funds\nMake a transfer", "Select", "Back");
	}
	return 1;
}

Dialog:TransferCash(playerid, response, listitem, inputtext[])
{
	if(!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if(response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Make a transfer", "Your bank account's balance: %s\n\nPlease enter the amount of money to transfer to %s:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));

		if (amount < 1 || amount > PlayerData[playerid][pBankMoney])
			return Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Make a transfer", "Error: Insufficient funds!\n\nYour bank account's balance: %s\n\nPlease enter the amount of money to transfer to %s:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));

		if (!strcmp(PlayerData[playerid][pIP], PlayerData[PlayerData[playerid][pTransfer]][pIP])) {
		    SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s (%s) has transferred %s to %s (%s).", ReturnName(playerid, 0), PlayerData[playerid][pIP], FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer], 0), PlayerData[playerid][pIP]);
		}
		PlayerData[playerid][pBankMoney] -= amount;
		PlayerData[PlayerData[playerid][pTransfer]][pBankMoney] += amount;

	    SendServerMessage(playerid, "You have transferred %s to %s's bank account.", FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer], 0));
	    SendServerMessage(PlayerData[playerid][pTransfer], "%s has transferred %s into your bank account.", ReturnName(playerid, 0), FormatNumber(amount));

        Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Bank Account", "Withdraw funds\nDeposit funds\nMake a transfer", "Select", "Back");
	}
	else 
	{
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Bank Account", "Withdraw funds\nDeposit funds\nMake a transfer", "Select", "Back");
	}
	return 1;
}

Dialog:Savings(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
				Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Withdraw funds", "Your savings account's balance: %s\n\nPlease enter the amount of money you wish to withdraw:", "Withdraw", "Back", FormatNumber(PlayerData[playerid][pSavings]));
			}
	        case 1:
	        {
				Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Deposit funds", "Your savings account's balance: %s\n\nPlease enter the amount of money you wish to deposit:", "Deposit", "Back", FormatNumber(PlayerData[playerid][pSavings]));
			}
	    }
	}
	else
	{
	    Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "Bank Account", "Bank Balance: %s\nSavings Balance: %s", "Select", "Cancel", FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
	}
	return 1;
}

Dialog:Withdraw(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Withdraw funds", "Your bank account's balance: %s\n\nPlease enter the amount of money you wish to withdraw:", "Withdraw", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (amount < 1 || amount > PlayerData[playerid][pBankMoney])
			return Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Withdraw funds", "Error: Insufficient funds!\n\nYour bank account's balance: %s\n\nPlease enter the amount of money you wish to withdraw:", "Withdraw", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

		PlayerData[playerid][pBankMoney] -= amount;
	    GiveMoney(playerid, amount);

	    SendServerMessage(playerid, "You have withdrawn %s from your bank account.", FormatNumber(amount));
        Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Withdraw funds", "Your bank account's balance: %s\n\nPlease enter the amount of money you wish to withdraw:", "Withdraw", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));
	}
	else {
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Bank Account", "Withdraw funds\nDeposit funds\nMake a transfer", "Select", "Back");
	}
	return 1;
}

Dialog:Deposit(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Deposit funds", "Your bank account's balance: %s\n\nPlease enter the amount of money you wish to deposit:", "Deposit", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (amount < 1 || amount > GetMoney(playerid))
			return Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Deposit funds", "Error: You don't have that much.\n\nYour bank account's balance: %s\n\nPlease enter the amount of money you wish to deposit:", "Deposit", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

		PlayerData[playerid][pBankMoney] += amount;
	    GiveMoney(playerid, -amount);

	    SendServerMessage(playerid, "You have deposited %s into your bank account.", FormatNumber(amount));
        Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Deposit funds", "Your bank account's balance: %s\n\nPlease enter the amount of money you wish to deposit:", "Deposit", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));
	}
	else {
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Bank Account", "Withdraw funds\nDeposit funds\nMake a transfer", "Select", "Back");
	}
	return 1;
}

Dialog:SavingsWithdraw(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Withdraw funds", "Your savings account's balance: %s\n\nPlease enter the amount of money you wish to withdraw:", "Withdraw", "Back", FormatNumber(PlayerData[playerid][pSavings]));

		if (amount < 1 || amount > PlayerData[playerid][pSavings])
			return Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Withdraw funds", "Error: Insufficient funds!\n\nYour savings account's balance: %s\n\nPlease enter the amount of money you wish to withdraw:", "Withdraw", "Back", FormatNumber(PlayerData[playerid][pSavings]));

		PlayerData[playerid][pSavings] -= amount;
	    GiveMoney(playerid, amount);

	    SendServerMessage(playerid, "You have withdrawn %s from your savings account.", FormatNumber(amount));
        Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Withdraw funds", "Your savings account's balance: %s\n\nPlease enter the amount of money you wish to withdraw:", "Withdraw", "Back", FormatNumber(PlayerData[playerid][pSavings]));
	}
	else {
	    Dialog_Show(playerid, Savings, DIALOG_STYLE_LIST, "Savings Account", "Withdraw funds\nDeposit funds", "Select", "Back");
	}
	return 1;
}

Dialog:SavingsDeposit(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Deposit funds", "Your savings account's balance: %s\n\nPlease enter the amount of money you wish to deposit:", "Deposit", "Back", FormatNumber(PlayerData[playerid][pSavings]));

		if (amount < 1 || amount > GetMoney(playerid))
			return Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Deposit funds", "Error: You don't have that much.\n\nYour savings account's balance: %s\n\nPlease enter the amount of money you wish to deposit:", "Deposit", "Back", FormatNumber(PlayerData[playerid][pSavings]));

		PlayerData[playerid][pSavings] += amount;
	    GiveMoney(playerid, -amount);

	    SendServerMessage(playerid, "You have deposited %s into your savings account.", FormatNumber(amount));
        Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Deposit funds", "Your savings account's balance: %s\n\nPlease enter the amount of money you wish to deposit:", "Deposit", "Back", FormatNumber(PlayerData[playerid][pSavings]));
	}
	else {
	    Dialog_Show(playerid, Savings, DIALOG_STYLE_LIST, "Savings Account", "Withdraw funds\nDeposit funds", "Select", "Back");
	}
	return 1;
}
Dialog:Bank(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
				Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Bank Account", "Withdraw funds\nDeposit funds\nMake a transfer", "Select", "Back");
			}
			case 1:
			{
				Dialog_Show(playerid, Savings, DIALOG_STYLE_LIST, "Savings Account", "Withdraw funds\nDeposit funds", "Select", "Back");
			}
		}
	}
	return 1;
}

Dialog:FAQ1(playerid, response, listitem, inputtext[])
{
	if (!response)
		cmd_faq(playerid, "\1");

	return 1;
}

Dialog:FAQ(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
		    case 0:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}You can enter and exit a building by pressing the {FFFF00}'F'{FFFFFF} key.", "Okay", "Back");
			}
            case 1:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}You can access your inventory by pressing the {FFFF00}'Y'{FFFFFF} key.\nYou can also type {FFFF00}/inventory{FFFFFF} to access your inventory.", "OK", "Back");
			}
			case 2:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}You can pickup dropped items by pressing the {FFFF00}'N'{FFFFFF} key.\nYou must be crouched and close to the item.", "Okay", "Back");
			}
			case 3:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}The icons on the right side of your screen are as follows:\n\n{FFFF00}Pizza Icon:{FFFFFF} This icon represents hunger. The number beside is the percentage of hunger.\n{FFFF00}Bottle Icon:{FFFFFF} This icon represents thirst. The number beside is the percentage of thirst.\n\nIf you have an armored vest, it will also show along with the icons.", "Okay", "Back");
			}
			case 4:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}You can refill your hunger by cooking food and eating it, or from a {FFFF00}Fast Food{FFFFFF} business.\nTo cook food, type {FFFF00}/cook{FFFFFF}. You can purchase frozen food at any {FFFF00}Retail Store{FFFFFF}.\n\nTo refill your thirst, you can purchase drinks from any {FFFF00}Retail Store{FFFFFF}.\nAdditionally, you can also purchase beverages at a fast food business.", "Okay", "Back");
			}
			case 5:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}You can search for certain areas around the map using a {FFFF00}GPS System{FFFFFF}.\nYou can purchase a GPS System at any {FFFF00}Retail Store{FFFFFF} around the map.", "Okay", "Back");
			}
			case 6:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}You can type {FFFF00}/disablecp{FFFFFF} to stop your current job.\nIf you are loading crates into a truck, use {FFFF00}/stoploading{FFFFFF} to stop loading.", "Okay", "Back");
			}
			case 7:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}You must select a weapon from your inventory and press {FFFF00}Use Item.\n{FFFFFF}Once you are holding a weapon, you must use a magazine to load it.\n\nYou can purchase magazines at any {FFFF00}Weapon Shop for your weapon.\n{FFFFFF}You can also press {FFFF00}'N'{FFFFFF} to put away the weapon you are holding.", "Okay", "Back");
			}
			case 8:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Any furniture that you've purchased will appear inside your inventory.\nPress {FFFF00}'Y'{FFFFFF}, select the furniture item and press {FFFF00}Use Item{FFFFFF} to deploy it.\n\nIf you wish to edit existing furniture, type {FFFF00}/furniture{FFFFFF} inside your house.\nSimply select the item of choice to edit the position or destroy the item.", "Okay", "Back");
			}
			case 9:
			{
			    Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}The {FFFF00}'F'{FFFFFF} key will allow you to interact with a lot of things in the server.\nThese things include vendors, weapon and drug crates, gates and entrances.\n\nTo enter a house or business, simply press the {FFFF00}'F'{FFFFFF} key near the door.\nYou can open your inventory with {FFFF00}'Y'{FFFFFF} and pickup items using {FFFF00}'N'{FFFFFF}.", "Okay", "Back");
			}
		}
	}
	return 1;
}

Dialog:TeleportInterior(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    SetPlayerInterior(playerid, g_arrInteriorData[listitem][e_InteriorID]);
	    SetCameraBehindPlayer(playerid);
	    SetPlayerPosEx(playerid, g_arrInteriorData[listitem][e_InteriorX], g_arrInteriorData[listitem][e_InteriorY], g_arrInteriorData[listitem][e_InteriorZ]);
	}
	return 1;
}

Dialog:LeaveTest(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    CancelDrivingTest(playerid);

	    SendErrorMessage(playerid, "You have failed the driving test since you quit.");
	}
	else
	{
	    PutPlayerInVehicle(playerid, PlayerData[playerid][pTestCar], 0);
	}
	return 1;
}

Dialog:Inventory(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			itemid = PlayerData[playerid][pInventoryItem],
			string[64];

	    strunpack(string, InventoryData[playerid][itemid][invItem]);

	    switch (listitem)
	    {
	        case 0:
	        {
		        CallLocalFunction("OnPlayerUseItem", "dds", playerid, itemid, string);
	        }
	        case 1:
	        {
				PlayerData[playerid][pInventoryItem] = itemid;
				Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Give Item", "Please enter the name or the ID of the player:", "Submit", "Cancel");
	        }
	        case 2:
	        {
	            new id = -1;

	            if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawned(playerid))
	                return SendErrorMessage(playerid, "You can't drop items right now.");

				else if (!strcmp(string, "Backpack"))
					return cmd_dropbackpack(playerid, "\1");

				else if (!strcmp(string, "Car License") || !strcmp(string, "Truck License") || !strcmp(string, "Motorbike License") || !strcmp(string, "Airplane License") || !strcmp(string, "Helicopter License") || !strcmp(string, "Firearm License"))
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "This item has been destroyed as it cannot be picked up by other players. Note your license is still in the...");
						SendClientMessage(playerid, COLOR_LIGHTRED, "...DMV system, you can buy a new copy at City Hall. Additionally, cops will be able to see it in their MDC. (check /mylicenses)");
						Inventory_Remove(playerid, string);
						return 1;
					}
				else if ((id = Garbage_Nearest(playerid)) != -1)
				{
				    if (GarbageData[id][garbageCapacity] >= 20)
				        return SendErrorMessage(playerid, "This garbage bin is full of trash.");

                    GarbageData[id][garbageCapacity]++;
                    Garbage_Save(id);

					Inventory_Remove(playerid, string);
                    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s throws a \"%s\" into the garbage bin.", ReturnName(playerid, 0), string);

                    format(string, sizeof(string), "[Garbage %d]\n{FFFFFF}Trash Capacity: %d/20", id, GarbageData[id][garbageCapacity]);
                    UpdateDynamic3DTextLabelText(GarbageData[id][garbageText3D], COLOR_DEPARTMENT, string);
				}
				else if (InventoryData[playerid][itemid][invQuantity] == 1)
					DropPlayerItem(playerid, itemid);

				else
					Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Drop Item", "Item: %s - Quantity: %d\n\nPlease specify how much of this item you wish to drop:", "Drop", "Cancel", string, InventoryData[playerid][itemid][invQuantity]);
	        }
	    }
	}
	return 1;
}

Dialog:DropItem(playerid, response, listitem, inputtext[])
{
	new
	    itemid = PlayerData[playerid][pInventoryItem],
	    string[32];

	strunpack(string, InventoryData[playerid][itemid][invItem]);

	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Drop Item", "Item: %s - Quantity: %d\n\nPlease specify how much of this item you wish to drop:", "Drop", "Cancel", string, InventoryData[playerid][itemid][invQuantity]);

		if (strval(inputtext) < 1 || strval(inputtext) > InventoryData[playerid][itemid][invQuantity])
		    return Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Drop Item", "Error: Insufficient amount specified.\n\nItem: %s - Quantity: %d\n\nPlease specify how much of this item you wish to drop:", "Drop", "Cancel", string, InventoryData[playerid][itemid][invQuantity]);

		DropPlayerItem(playerid, itemid, strval(inputtext));
	}
	return 1;
}

Dialog:BusinessBuy(playerid, response, listitem, inputtext[])
{
	static
	    bizid = -1,
		price,
		string[64];

    if ((bizid = Business_Inside(playerid)) != -1 && response)
    {
        price = BusinessData[bizid][bizPrices][listitem];

        if (GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

		if (BusinessData[bizid][bizProducts] < 1)
		    return SendErrorMessage(playerid, "This business is out of stock.");

		if (BusinessData[bizid][bizType] == 1 || BusinessData[bizid][bizType] == 6)
		{
		    switch (listitem)
		    {
		        case 0:
		        {
		            if (Inventory_HasItem(playerid, "Cellphone"))
		                return SendErrorMessage(playerid, "You have a cellphone already.");

					new id = Inventory_Add(playerid, "Cellphone", 330);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					PlayerData[playerid][pPhone] = random(90000) + 10000;

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a cellphone.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);

					format(string, sizeof(string), "Your new number is ~p~%d.", PlayerData[playerid][pPhone]);
					ShowPlayerFooter(playerid, string);

					SendServerMessage(playerid, "Your new number is %d.", PlayerData[playerid][pPhone]);
				}
				case 1:
		        {
		            if (Inventory_HasItem(playerid, "GPS System"))
		                return SendErrorMessage(playerid, "You have a GPS system already.");

					new id = Inventory_Add(playerid, "GPS System", 18875);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a GPS System.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 2:
		        {
		            if (Inventory_Count(playerid, "Spray Can") >= 3)
		                return SendErrorMessage(playerid, "You have 3 spray cans, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Spray Can", 365);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a can of spray paint.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 3:
			    {
			        if (Inventory_HasItem(playerid, "Backpack"))
		                return SendErrorMessage(playerid, "You have this item already.");

					new id = Inventory_Add(playerid, "Backpack", 3026);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					if (Backpack_Create(playerid) == -1)
					    return SendErrorMessage(playerid, "The server has reached the internal limit for backpacks.");

					SetAccessories(playerid);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a backpack.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 4:
		        {
		            if (Inventory_Count(playerid, "Water Bottle") >= 10)
		                return SendErrorMessage(playerid, "You have 10 bottles of water, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Water Bottle", 2958);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a bottle of water.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 5:
		        {
              		if (Inventory_Count(playerid, "Soda") >= 5)
		                return SendErrorMessage(playerid, "You have 5 bottles of soda, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Soda", 1543);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a bottle of soda.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 6:
				{
				    if (PlayerData[playerid][pLottery])
				        return SendErrorMessage(playerid, "You have a lottery ticket already.");

					Dialog_Show(playerid, LotteryNumber, DIALOG_STYLE_INPUT, "Lottery Number", "Please enter your desired lottery number below (from 1-60):", "Submit", "Cancel");
				}
				case 7:
		        {
		            if (Inventory_HasItem(playerid, "Portable Radio"))
		                return SendErrorMessage(playerid, "You have this item already.");

					new id = Inventory_Add(playerid, "Portable Radio", 18868);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a portable radio.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 8:
		        {
		            if (Inventory_Count(playerid, "Fuel Can") >= 3)
		                return SendErrorMessage(playerid, "You have 3 cans of fuel, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Fuel Can", 1650);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a can of fuel.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 9:
		        {
		            if (Inventory_HasItem(playerid, "Crowbar"))
		                return SendErrorMessage(playerid, "You have a crowbar already.");

					new id = Inventory_Add(playerid, "Crowbar", 18634);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a crowbar.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 10:
		        {
		            if (Inventory_HasItem(playerid, "Boombox"))
		                return SendErrorMessage(playerid, "You have a boombox already.");

					new id = Inventory_Add(playerid, "Boombox", 2226);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a boombox.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 11:
		        {
		            if (Inventory_HasItem(playerid, "Mask"))
		                return SendErrorMessage(playerid, "You have a mask already.");

					if (PlayerData[playerid][pPlayingHours] < 5)
					    return SendErrorMessage(playerid, "You must have at least 5 playing hours.");

					new id = Inventory_Add(playerid, "Mask", 19036);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a mask.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 12:
		        {
		            if (Inventory_Count(playerid, "First Aid") >= 3)
		                return SendErrorMessage(playerid, "You have 3 first aid kits, you can't buy anymore.");

					new id = Inventory_Add(playerid, "First Aid", 1580);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a first aid kit.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 13:
		        {
		            if (Inventory_Count(playerid, "Repair Kit") >= 3)
		                return SendErrorMessage(playerid, "You have 3 repair kits, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Repair Kit", 920);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a repair kit.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 14:
		        {
		            if (Inventory_Count(playerid, "NOS Canister") >= 5)
		                return SendErrorMessage(playerid, "You have 5 canisters, you can't buy anymore.");

					new id = Inventory_Add(playerid, "NOS Canister", 1010);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a NOS canister.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 15:
		        {
		            if (PlayerHasWeapon(playerid, 5))
		                return SendErrorMessage(playerid, "You have this item already.");

					GiveWeaponToPlayer(playerid, 5, 1);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a baseball bat.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 16:
		        {
		            if (Inventory_Count(playerid, "Frozen Pizza") >= 3)
		                return SendErrorMessage(playerid, "You have 3 frozen pizzas, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Frozen Pizza", 2814);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a box of frozen pizza.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 17:
		        {
		            if (Inventory_Count(playerid, "Frozen Burger") >= 5)
		                return SendErrorMessage(playerid, "You have 5 frozen burgers, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Frozen Burger", 2768);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a frozen burger.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 18:
		        {
		            if (Inventory_Count(playerid, "Lighter") >= 3)
		                return SendErrorMessage(playerid, "You have 3 lighters, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Lighter", 19998);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a black lighter.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 19:
			    {
              		if (Inventory_Count(playerid, "Cigar") >= 5)
		                return SendErrorMessage(playerid, "You have 5 packs of cigarette, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Cigar", 3044);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a pack of cigarette.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 20:
			    {
              		if (Inventory_Count(playerid, "Painkiller") >= 8)
		                return SendErrorMessage(playerid, "You already have 8 painkillers, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Painkiller", 2709);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a bottle of painkillers.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			}
		}
		else if (BusinessData[bizid][bizType] == 2)
		{
		    switch (listitem)
	    	{
		        case 0:
		        {
		            if(!PlayerData[playerid][pWeaponLicense])
		                return SendErrorMessage(playerid, "You are not allowed to purchase from here without a firearm license.");

		            if (Inventory_Count(playerid, "Magazine") >= 30)
		                return SendErrorMessage(playerid, "You have 30 magazines, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Magazine", 2039);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a weapon magazine.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
                case 1:
		        {
		            if(!PlayerData[playerid][pWeaponLicense])
		                return SendErrorMessage(playerid, "This store only sells to people with a valid firearm license.");

		            if (Inventory_Count(playerid, "Ammo Cartridge") >= 30)
		                return SendErrorMessage(playerid, "You have 30 ammo cartridges, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Ammo Cartridge", 2358);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received an ammo cartridge.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 2:
		        {
              		if(!PlayerData[playerid][pWeaponLicense])
		                return SendErrorMessage(playerid, "You are not allowed to purchase from here without a Firearm License.");

		            if (Inventory_Count(playerid, "Armored Vest") >= 3)
		                return SendErrorMessage(playerid, "You have 3 armored vests, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Armored Vest", 19142);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received an armored vest.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 3:
				{
				    if(!PlayerData[playerid][pWeaponLicense])
				        return SendErrorMessage(playerid, "A valid firearm license is required to purchase a Glock-17.");

				    if (PlayerData[playerid][pPlayingHours] < 5)
				        return SendErrorMessage(playerid, "You need at least 5 playing hours.");

                    if (Inventory_Count(playerid, "Glock-17") > 5)
					    return SendErrorMessage(playerid, "You can't carry anymore of this weapon.");

					new Serial = 10000 + random(1000000);
					Inventory_Add(playerid, "Glock-17", 348);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a Glock-17.", ReturnName(playerid, 0), FormatNumber(price));
     				format(string, sizeof(string), "The weapon has been registered. Serial Number: [%i].", Serial);
					SendClientMessage(playerid, COLOR_WHITE, string);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 4:
				{
				    if(!PlayerData[playerid][pWeaponLicense])
				        return SendErrorMessage(playerid, "A valid firearm license is required to purchase a Shotgun.");

				    if (PlayerData[playerid][pPlayingHours] < 5)
				        return SendErrorMessage(playerid, "You need at least 5 playing hours.");

                    if (Inventory_Count(playerid, "Shotgun") > 5)
					    return SendErrorMessage(playerid, "You can't carry anymore of this weapon.");

					new Serial = 10000 + random(1000000);
					Inventory_Add(playerid, "Shotgun", 349);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a Remington 870.", ReturnName(playerid, 0), FormatNumber(price));
					format(string, sizeof(string), "The weapon has been registered. Serial Number: [%i].", Serial);
					SendClientMessage(playerid, COLOR_WHITE, string);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 5:
				{
				    if(!PlayerData[playerid][pWeaponLicense])
				        return SendErrorMessage(playerid, "A valid firearm license is required to purchase a Rifle.");

				    if (PlayerData[playerid][pPlayingHours] < 5)
				        return SendErrorMessage(playerid, "You need at least 5 playing hours.");

					if (Inventory_Count(playerid, "Rifle") > 5)
					    return SendErrorMessage(playerid, "You can't carry anymore of this weapon.");

                    new Serial = 10000 + random(1000000);
					Inventory_Add(playerid, "Rifle", 357);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a M14 Rifle.", ReturnName(playerid, 0), FormatNumber(price));
     				format(string, sizeof(string), "The weapon has been registered. Serial Number: [%i].", Serial);
					SendClientMessage(playerid, COLOR_WHITE, string);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 6:
				{
				    if(!PlayerData[playerid][pWeaponLicense])
				        return SendErrorMessage(playerid, "A valid firearm license is required to purchase a Glock-17.");

				    if (PlayerData[playerid][pPlayingHours] < 5)
				        return SendErrorMessage(playerid, "You need at least 5 playing hours.");

                    if (Inventory_Count(playerid, "Colt 45") > 5)
					    return SendErrorMessage(playerid, "You can't carry anymore of this weapon.");

					new Serial = 10000 + random(1000000);
					Inventory_Add(playerid, "Colt 45", 346);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a Colt 45.", ReturnName(playerid, 0), FormatNumber(price));
     				format(string, sizeof(string), "The weapon has been registered. Serial Number: [%i].", Serial);
					SendClientMessage(playerid, COLOR_WHITE, string);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 7:
				{
				    if(!PlayerData[playerid][pWeaponLicense])
				        return SendErrorMessage(playerid, "A valid firearm license is required to purchase a MP5");

				    if (PlayerData[playerid][pPlayingHours] < 5)
				        return SendErrorMessage(playerid, "You need at least 5 playing hours.");

					if (Inventory_Count(playerid, "MP5") > 5)
					    return SendErrorMessage(playerid, "You can't carry anymore of this weapon.");

                    new Serial = 10000 + random(1000000);
					Inventory_Add(playerid, "MP5", 353);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a MP5.", ReturnName(playerid, 0), FormatNumber(price));
     				format(string, sizeof(string), "The weapon has been registered. Serial Number: [%i].", Serial);
					SendClientMessage(playerid, COLOR_WHITE, string);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
		    }
		}
		else if (BusinessData[bizid][bizType] == 3)
		{
		    switch (listitem)
		    {
		        case 0:
				{
				    PlayerData[playerid][pClothesType] = 1;

					switch (PlayerData[playerid][pGender])
                    {
                        case 1:
                        	ShowModelSelectionMenu(playerid, "Clothes", MODEL_SELECTION_CLOTHES, g_aMaleSkins, sizeof(g_aMaleSkins), -16.0, 0.0, -55.0);

						case 2:
                       		ShowModelSelectionMenu(playerid, "Clothes", MODEL_SELECTION_CLOTHES, g_aFemaleSkins, sizeof(g_aFemaleSkins), -16.0, 0.0, -55.0);
                    }
				}
		        case 1:
				{
				    PlayerData[playerid][pClothesType] = 2;
					ShowModelSelectionMenu(playerid, "Glasses", MODEL_SELECTION_CLOTHES, {19006, 19007, 19008, 19009, 19010, 19011, 19012, 19013, 19014, 19015, 19016, 19017, 19018, 19019, 19020, 19021, 19022, 19023, 19024, 19025, 19026, 19027, 19028, 19029, 19030, 19031, 19032, 19033, 19034, 19035}, 30, 0.0, 0.0, 90.0);
				}
			    case 2:
				{
				    PlayerData[playerid][pClothesType] = 3;
					ShowModelSelectionMenu(playerid, "Hats", MODEL_SELECTION_CLOTHES, {18926, 18927, 18928, 18929, 18930, 18931, 18932, 18933, 18934, 18935, 18944, 18945, 18946, 18947, 18948, 18949, 18950, 18951, 18636, 18638, 19554, 19553, 19099}, 23, -20.0, -90.0, 0.0);
				}
				case 3:
				{
				    PlayerData[playerid][pClothesType] = 4;
					ShowModelSelectionMenu(playerid, "Bandanas", MODEL_SELECTION_CLOTHES, {18911, 18912, 18913, 18914, 18915, 18916, 18917, 18918, 18919, 18920, 19801}, 11, 80.0, -173.0, 0.0);
				}
		    }
		}
		else if (BusinessData[bizid][bizType] == 4)
		{
			switch (listitem)
			{
			    case 0:
			    {
			        if (PlayerData[playerid][pThirst] > 99)
			            return SendErrorMessage(playerid, "You are not thirsty right now.");

					PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 55 > 100) ? (100) : (PlayerData[playerid][pThirst] + 55);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received some water.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 1:
			    {
			        if (PlayerData[playerid][pThirst] > 99)
			            return SendErrorMessage(playerid, "You are not thirsty right now.");

					PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 44 > 100) ? (100) : (PlayerData[playerid][pThirst] + 44);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received some soda.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 2:
			    {
			        if (PlayerData[playerid][pHunger] > 99)
			            return SendErrorMessage(playerid, "You are not hungry right now.");

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 30 > 100) ? (100) : (PlayerData[playerid][pHunger] + 30);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received some french fries.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 3:
			    {
			        if (PlayerData[playerid][pHunger] > 99)
			            return SendErrorMessage(playerid, "You are not hungry right now.");

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 40 > 100) ? (100) : (PlayerData[playerid][pHunger] + 40);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a cheeseburger.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 4:
			    {
			        if (PlayerData[playerid][pHunger] > 99)
			            return SendErrorMessage(playerid, "You are not hungry right now.");

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 40 > 100) ? (100) : (PlayerData[playerid][pHunger] + 40);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a chicken burger.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 5:
			    {
			        if (PlayerData[playerid][pHunger] > 99)
			            return SendErrorMessage(playerid, "You are not hungry right now.");

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 35 > 100) ? (100) : (PlayerData[playerid][pHunger] + 35);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received some chicken nuggets.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 6:
			    {
			        if (PlayerData[playerid][pHunger] > 99)
			            return SendErrorMessage(playerid, "You are not hungry right now.");

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 20 > 100) ? (100) : (PlayerData[playerid][pHunger] + 20);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a salad.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			}
		}
		else if (BusinessData[bizid][bizType] == 7)
		{
		    new
				items[50] = {-1, ...},
				count;

		    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (g_aFurnitureData[i][e_FurnitureType] == listitem + 1) {
				items[count++] = g_aFurnitureData[i][e_FurnitureModel];
		    }
		    PlayerData[playerid][pFurnitureType] = listitem;

			if (listitem == 3) {
				ShowModelSelectionMenu(playerid, "Furniture", MODEL_SELECTION_FURNITURE, items, count, -12.0, 0.0, 0.0);
			}
			else {
			    ShowModelSelectionMenu(playerid, "Furniture", MODEL_SELECTION_FURNITURE, items, count);
			}
		}
		else if (BusinessData[bizid][bizType] == 8)
		{
		    switch (listitem)
	    	{
		        case 0:
		        {
              		if (Inventory_Count(playerid, "Screwdriver") >= 3)
		                return SendErrorMessage(playerid, "You have 3 screwdrivers, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Screwdriver", 18644);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a metal screwdriver.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 1:
		        {
		            if (PlayerHasWeapon(playerid, 46))
		                return SendErrorMessage(playerid, "You have this item already.");

					GiveWeaponToPlayer(playerid, 46, 1);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a Parachute.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 2:
		        {
		            if (PlayerHasWeapon(playerid, 1))
		                return SendErrorMessage(playerid, "You have this item already.");

					GiveWeaponToPlayer(playerid, 1, 1);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received Brass Knuckles.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 3:
		        {
		            if (Inventory_Count(playerid, "Golf Club") >= 3)
		                return SendErrorMessage(playerid, "You have 3 Golf Clubs, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Golf Club", 333);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a Golf Club.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 4:
		        {
		            if (PlayerHasWeapon(playerid, 3))
		                return SendErrorMessage(playerid, "You have this item already.");

					GiveWeaponToPlayer(playerid, 3, 1);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a Nightstick.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 5:
		        {
		            if (Inventory_Count(playerid, "Pocket Knife") >= 3)
		                return SendErrorMessage(playerid, "You have 3 Knives, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Pocket Knife", 335);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a pocket knife.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 6:
		        {
		            if (Inventory_Count(playerid, "Shovel") >= 3)
		                return SendErrorMessage(playerid, "You have 3 Shovels, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Shovel", 337);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a Shovel.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 7:
		        {
		            if (PlayerHasWeapon(playerid, 7))
		                return SendErrorMessage(playerid, "You have this item already.");

					GiveWeaponToPlayer(playerid, 7, 1);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a Pool Cue.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 8:
		        {
		            if (PlayerHasWeapon(playerid, 43))
		                return SendErrorMessage(playerid, "You have this item already.");

					GiveWeaponToPlayer(playerid, 43, 50);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a Camera.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 9:
		        {
		            if (PlayerHasWeapon(playerid, 41))
		                return SendErrorMessage(playerid, "You have this item already.");

					GiveWeaponToPlayer(playerid, 41, 500);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a Spray Can.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 10:
		        {
		            if (PlayerHasWeapon(playerid, 5))
		                return SendErrorMessage(playerid, "You have this item already.");

					GiveWeaponToPlayer(playerid, 5, 1);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a Baseball Bat.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
		    }
		}
		else if (BusinessData[bizid][bizType] == 9)
		{
		    switch (listitem)
	    	{
		        case 0:
		        {
		            if (Inventory_Count(playerid, "Sale Documents") >= 5)
		                return SendErrorMessage(playerid, "You have 5 Sale Documents, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Sale Documents", 19805);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a sale document.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
                case 1:
		        {
		            if (Inventory_Count(playerid, "Pen") >= 2)
		                return SendErrorMessage(playerid, "You have 2 pens, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Pen", 322);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a pen.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
		    }
		}
		else if (BusinessData[bizid][bizType] == 10)
		{
		    switch (listitem)
	    	{
		        case 0:
		        {
		            if (Inventory_Count(playerid, "Bait") >= 50)
		                return SendErrorMessage(playerid, "You already have 50 bags of bait. You cannot hold more");

					new id = Inventory_Add(playerid, "Bait", 1265, 5);

					if (!Inventory_HasItem(playerid, "Backpack"))
					    return SendErrorMessage(playerid, "Sorry this job doesn't work with backpacks, please drop it and try again.");

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a bag of bait.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
                case 1:
		        {
		            if (Inventory_Count(playerid, "Fishing Rod") == 1)
		                return SendErrorMessage(playerid, "You already have a fishing rod.");

					new id = Inventory_Add(playerid, "Fishing Rod", 18632);

					if (id == -1)
        				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a fishing rod.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
		    }
		}
	}
    return 1;
}

Dialog:LotteryNumber(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new bizid = Business_Inside(playerid);

	    if (bizid != -1)
	    {
	        if (isnull(inputtext) || (strval(inputtext) < 1 || strval(inputtext) > 60)) {
	            return Dialog_Show(playerid, LotteryNumber, DIALOG_STYLE_INPUT, "Lottery Number", "Please enter your desired lottery number below (from 1-60):", "Submit", "Cancel");
			}
	        PlayerData[playerid][pLottery] = strval(inputtext);
	        PlayerData[playerid][pLotteryB] = 1;

		    GiveMoney(playerid, -BusinessData[bizid][bizPrices][6]);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has paid %s and received a lottery ticket.", ReturnName(playerid, 0), FormatNumber(BusinessData[bizid][bizPrices][6]));

			BusinessData[bizid][bizProducts]--;
			BusinessData[bizid][bizVault] += Tax_Percent(BusinessData[bizid][bizPrices][6]);

			Business_Save(bizid);
			Tax_AddPercent(BusinessData[bizid][bizPrices][6]);
		}
	}
	return 1;
}

Dialog:EditProduct(playerid, response, listitem, inputtext[])
{
	if ((Business_Inside(playerid)) != -1 && PlayerData[playerid][pAdmin] > 5)
	{
		if (response)
		{
		    static
		        item[24];

		    strmid(item, inputtext, 0, strfind(inputtext, "-") - 1);
		    strpack(PlayerData[playerid][pEditingItem], item, 32 char);

            PlayerData[playerid][pProductModify] = listitem;
      		Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Business: Set Price", "Please enter the new product price for \"%s\":", "Modify", "Back", item);
		}
	}
	return 1;
}

Dialog:PriceSet(playerid, response, listitem, inputtext[])
{
    static
	    bizid = -1,
		item[32];

	if ((bizid = Business_Inside(playerid)) != -1 && PlayerData[playerid][pAdmin] > 5)
	{
		if (response)
		{
		    strunpack(item, PlayerData[playerid][pEditingItem]);

			if (isnull(inputtext))
			    return Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Business: Set Price", "Please enter the new product price for \"%s\":", "Modify", "Back", item);

			if (strval(inputtext) < 1 || strval(inputtext) > 100000)
			    return Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Business: Set Price", "Please enter the new product price for \"%s\" ($1 to $100,000):", "Modify", "Back", item);

			BusinessData[bizid][bizPrices][PlayerData[playerid][pProductModify]] = strval(inputtext);
			Business_Save(bizid);

			SendServerMessage(playerid, "You have adjusted the price of \"%s\" to: %s!", item, FormatNumber(strval(inputtext)));
			Business_ProductMenu(playerid, bizid);
		}
		else
		{
		    Business_ProductMenu(playerid, bizid);
		}
	}
	return 1;
}

Dialog:CarDeposit(playerid, response, listitem, inputtext[])
{
	static
	    carid = -1,
	    string[32];

    if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
	    strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
			    return Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Car Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

			Car_AddItem(carid, string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
			Inventory_Remove(playerid, string, amount);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has stored a \"%s\" into the trunk.", ReturnName(playerid, 0), string);
			Car_ShowTrunk(playerid, carid);
		}
		else Car_ShowTrunk(playerid, carid);
	}
	return 1;
}

Dialog:CarTake(playerid, response, listitem, inputtext[])
{
	static
	    carid = -1,
	    string[32];

    if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
	    strunpack(string, CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemName]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemQuantity])
			    return Dialog_Show(playerid, CarTake, DIALOG_STYLE_INPUT, "Car Take", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to take for this item:", "Take", "Back", string, CarStorage[carid][PlayerData[playerid][pInventoryItem]][cItemQuantity]);

			new id = Inventory_Add(playerid, string, CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemModel], amount);

			if (id == -1)
				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

			Car_RemoveItem(carid, string, amount);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has taken a \"%s\" from the trunk.", ReturnName(playerid, 0), string);
			Car_ShowTrunk(playerid, carid);
		}
		else Car_ShowTrunk(playerid, carid);
	}
	return 1;
}

Dialog:CarStorage(playerid, response, listitem, inputtext[])
{
	static
	    carid = -1,
		string[64];

	if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
		if (response)
		{
		    if (listitem == MAX_CAR_STORAGE) {
    			Car_WeaponStorage(playerid, carid);
		    }
		    else if (CarStorage[carid][listitem][cItemExists])
			{
   				PlayerData[playerid][pStorageItem] = listitem;
   				PlayerData[playerid][pInventoryItem] = listitem;

				strunpack(string, CarStorage[carid][listitem][cItemName]);

				format(string, sizeof(string), "%s (Quantity: %d)", string, CarStorage[carid][listitem][cItemQuantity]);
				Dialog_Show(playerid, TrunkOptions, DIALOG_STYLE_LIST, string, "Take Item\nStore Item", "Select", "Back");
			}
			else {
   				OpenInventory(playerid);

				PlayerData[playerid][pStorageSelect] = 2;
			}
		}
	}
	return 1;
}

Dialog:TrunkOptions(playerid, response, listitem, inputtext[])
{
    static
	    carid = -1,
		itemid = -1,
		backpack = -1,
		string[32];

	if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
	    itemid = PlayerData[playerid][pStorageItem];

	    strunpack(string, CarStorage[carid][itemid][cItemName]);

		if (response)
		{
			switch (listitem)
			{
			    case 0:
			    {
			        if (CarStorage[carid][itemid][cItemQuantity] == 1)
			        {
			            if (!strcmp(string, "Backpack") && Inventory_HasItem(playerid, "Backpack"))
			                return SendErrorMessage(playerid, "You already have a backpack in your inventory.");

			            new id = Inventory_Add(playerid, string, CarStorage[carid][itemid][cItemModel], 1);

						if (id == -1)
        					return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                        if (!strcmp(string, "Backpack") && (backpack = GetVehicleBackpack(carid)) != -1)
						{
						    BackpackData[backpack][backpackVehicle] = 0;
						    BackpackData[backpack][backpackPlayer] = PlayerData[playerid][pID];

						    Backpack_Save(backpack);
						    SetAccessories(playerid);
						}
			            Car_RemoveItem(carid, string);

			            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has taken a \"%s\" from the trunk.", ReturnName(playerid, 0), string);
						Car_ShowTrunk(playerid, carid);
			        }
			        else
			        {
			            Dialog_Show(playerid, CarTake, DIALOG_STYLE_INPUT, "Car Take", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to take for this item:", "Take", "Back", string, CarStorage[carid][itemid][cItemQuantity]);
			        }
			    }
				case 1:
				{
					new id = Inventory_GetItemID(playerid, string);

					if (!strcmp(string, "Backpack")) {
					    Car_ShowTrunk(playerid, carid);

						return SendErrorMessage(playerid, "You can only store one backpack in your trunk.");
					}
					else if (id == -1) {
						Car_ShowTrunk(playerid, carid);

						return SendErrorMessage(playerid, "You don't have anymore of this item to store!");
					}
					else if (InventoryData[playerid][id][invQuantity] == 1)
					{
					    Car_AddItem(carid, string, InventoryData[playerid][id][invModel], 1);
						Inventory_Remove(playerid, string);

						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has stored a \"%s\" into the trunk.", ReturnName(playerid, 0), string);
						Car_ShowTrunk(playerid, carid);
					}
					else if (InventoryData[playerid][id][invQuantity] > 1) {
					    PlayerData[playerid][pInventoryItem] = id;

                        Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Car Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", string, InventoryData[playerid][id][invQuantity]);
					}
				}
			}
		}
		else
		{
		    Car_ShowTrunk(playerid, carid);
		}
	}
	return 1;
}

Dialog:HouseWeapons(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1;

    if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
		if (response)
		{
		    if (HouseData[houseid][houseWeapons][listitem] != 0)
		    {
				GiveWeaponToPlayer(playerid, HouseData[houseid][houseWeapons][listitem], HouseData[houseid][houseAmmo][listitem]);

				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has taken a \"%s\" from their weapon storage.", ReturnName(playerid, 0), ReturnWeaponName(HouseData[houseid][houseWeapons][listitem]));

				HouseData[houseid][houseWeapons][listitem] = 0;
				HouseData[houseid][houseAmmo][listitem] = 0;

				House_Save(houseid);
				House_WeaponStorage(playerid, houseid);
			}
			else
			{
			    new
					weaponid = GetWeapon(playerid),
					ammo = GetPlayerAmmo(playerid);

			    if (!weaponid)
			        return SendErrorMessage(playerid, "You are not holding any weapon!");

       			if (weaponid == 23 && PlayerData[playerid][pTazer])
	    			return SendErrorMessage(playerid, "You can't store a tazer into your safe.");

                if (weaponid == 25 && PlayerData[playerid][pBeanBag])
	    			return SendErrorMessage(playerid, "You can't store a beanbag shotgun into your safe.");

                ResetWeapon(playerid, weaponid);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has stored a \"%s\" into their weapon storage.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));

				HouseData[houseid][houseWeapons][listitem] = weaponid;
				HouseData[houseid][houseAmmo][listitem] = ammo;

				House_Save(houseid);
				House_WeaponStorage(playerid, houseid);
			}
		}
		else
		{
		    House_OpenStorage(playerid, houseid);
		}
	}
	return 1;
}

Dialog:HouseDeposit(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1,
	    string[32];

    if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
	    strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
			    return Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "House Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

			House_AddItem(houseid, string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
			Inventory_Remove(playerid, string, amount);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has stored a \"%s\" into their house storage.", ReturnName(playerid, 0), string);
			House_ShowItems(playerid, houseid);
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseTake(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1,
	    string[32];

    if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
	    strunpack(string, HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemName]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemQuantity])
			    return Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "House Take", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to take for this item:", "Take", "Back", string, HouseStorage[houseid][PlayerData[playerid][pInventoryItem]][hItemQuantity]);

			new id = Inventory_Add(playerid, string, HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemModel], amount);

			if (id == -1)
				return SendErrorMessage(playerid, "You don't have any inventory slots left.");

			House_RemoveItem(houseid, string, amount);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has taken a \"%s\" from their house storage.", ReturnName(playerid, 0), string);

			House_ShowItems(playerid, houseid);
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseWithdrawCash(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if (response)
		{
		    new amount = strval(inputtext);

		    if (isnull(inputtext))
		        return Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Withdraw from safe", "Safe Balance: %s\n\nPlease enter how much money you wish to withdraw from the safe:", "Withdraw", "Back", FormatNumber(HouseData[houseid][houseMoney]));

			if (amount < 1 || amount > HouseData[houseid][houseMoney])
			    return Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Withdraw from safe", "Error: Insufficient funds.\n\nSafe Balance: %s\n\nPlease enter how much money you wish to withdraw from the safe:", "Withdraw", "Back", FormatNumber(HouseData[houseid][houseMoney]));

			HouseData[houseid][houseMoney] -= amount;
			GiveMoney(playerid, amount);

			House_Save(houseid);
			House_OpenStorage(playerid, houseid);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has withdrawn %s from their house safe.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Money Safe", "Withdraw from safe\nDeposit into safe", "Select", "Back");
	}
	return 1;
}

Dialog:HouseDepositCash(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if (response)
		{
		    new amount = strval(inputtext);

		    if (isnull(inputtext))
		        return Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Deposit into safe", "Safe Balance: %s\n\nPlease enter how much money you wish to deposit into the safe:", "Withdraw", "Back", FormatNumber(HouseData[houseid][houseMoney]));

			if (amount < 1 || amount > GetMoney(playerid))
			    return Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Deposit into safe", "Error: Insufficient funds.\n\nSafe Balance: %s\n\nPlease enter how much money you wish to deposit into the safe:", "Withdraw", "Back", FormatNumber(HouseData[houseid][houseMoney]));

			HouseData[houseid][houseMoney] += amount;
			GiveMoney(playerid, -amount);

			House_Save(houseid);
			House_OpenStorage(playerid, houseid);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has deposited %s into their house safe.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Money Safe", "Withdraw from safe\nDeposit into safe", "Select", "Back");
	}
	return 1;
}

Dialog:HouseMoney(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if (response)
		{
			switch (listitem)
			{
			    case 0: {
					Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Withdraw from safe", "Safe Balance: %s\n\nPlease enter how much money you wish to withdraw from the safe:", "Withdraw", "Back", FormatNumber(HouseData[houseid][houseMoney]));
				}
				case 1: {
				    Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Deposit into safe", "Safe Balance: %s\n\nPlease enter how much money you wish to deposit into the safe:", "Withdraw", "Back", FormatNumber(HouseData[houseid][houseMoney]));
				}
			}
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseItems(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1,
		string[64];

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
		if (response)
		{
    		if (HouseStorage[houseid][listitem][hItemExists])
			{
   				PlayerData[playerid][pStorageItem] = listitem;
   				PlayerData[playerid][pInventoryItem] = listitem;

				strunpack(string, HouseStorage[houseid][listitem][hItemName]);

				format(string, sizeof(string), "%s (Quantity: %d)", string, HouseStorage[houseid][listitem][hItemQuantity]);
				Dialog_Show(playerid, StorageOptions, DIALOG_STYLE_LIST, string, "Take Item\nStore Item", "Select", "Back");
			}
			else {
   				OpenInventory(playerid);

				PlayerData[playerid][pStorageSelect] = 1;
			}
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseStorage(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
		if (response)
		{
		    if (listitem == 0) {
		        House_ShowItems(playerid, houseid);
		    }
      		else if (listitem == 1) {
				House_WeaponStorage(playerid, houseid);
		    }
		    else if (listitem == 2) {
		        Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Money Safe", "Withdraw from safe\nDeposit into safe", "Select", "Back");
			}
		}
	}
	return 1;
}

Dialog:StorageOptions(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1,
		itemid = -1,
		backpack = -1,
		string[32];

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
	    itemid = PlayerData[playerid][pStorageItem];

	    strunpack(string, HouseStorage[houseid][itemid][hItemName]);

		if (response)
		{
			switch (listitem)
			{
			    case 0:
			    {
			        if (HouseStorage[houseid][itemid][hItemQuantity] == 1)
			        {
			            if (!strcmp(string, "Backpack") && Inventory_HasItem(playerid, "Backpack"))
           					return SendErrorMessage(playerid, "You already have a backpack in your inventory.");

			            new id = Inventory_Add(playerid, string, HouseStorage[houseid][itemid][hItemModel], 1);

						if (id == -1)
        					return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                        if (!strcmp(string, "Backpack") && (backpack = GetHouseBackpack(houseid)) != -1)
						{
						    BackpackData[backpack][backpackHouse] = 0;
						    BackpackData[backpack][backpackPlayer] = PlayerData[playerid][pID];

						    Backpack_Save(backpack);
						    SetAccessories(playerid);
						}
			            House_RemoveItem(houseid, string);
			            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has taken a \"%s\" from their house storage.", ReturnName(playerid, 0), string);

						House_ShowItems(playerid, houseid);
			        }
			        else
			        {
			            Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "House Take", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to take for this item:", "Take", "Back", string, HouseStorage[houseid][itemid][hItemQuantity]);
			        }
			    }
				case 1:
				{
					new id = Inventory_GetItemID(playerid, string);

					if (!strcmp(string, "Backpack")) {
					    House_ShowItems(playerid, houseid);

						return SendErrorMessage(playerid, "You can only store one backpack in your house.");
					}
					else if (id == -1) {
						House_ShowItems(playerid, houseid);

						return SendErrorMessage(playerid, "You don't have anymore of this item to store!");
					}
					else if (InventoryData[playerid][id][invQuantity] == 1)
					{
					    House_AddItem(houseid, string, InventoryData[playerid][id][invModel]);
						Inventory_Remove(playerid, string);

						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has stored a \"%s\" into their house storage.", ReturnName(playerid, 0), string);
						House_ShowItems(playerid, houseid);
					}
					else if (InventoryData[playerid][id][invQuantity] > 1) {
					    PlayerData[playerid][pInventoryItem] = id;

                        Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "House Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", string, InventoryData[playerid][id][invQuantity]);
					}
				}
			}
		}
		else
		{
		    House_ShowItems(playerid, houseid);
		}
	}
	return 1;
}

Dialog:EditGlasses(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!IsPlayerAttachedObjectSlotUsed(playerid, 0))
	            {
	                PlayerData[playerid][pToggleGlasses] = 0;
	                SetPlayerAttachedObject(playerid, 0, PlayerData[playerid][pGlasses], 2, AccessoryData[playerid][0][0], AccessoryData[playerid][0][1], AccessoryData[playerid][0][2], AccessoryData[playerid][0][3], AccessoryData[playerid][0][4], AccessoryData[playerid][0][5], AccessoryData[playerid][0][6], AccessoryData[playerid][0][7], AccessoryData[playerid][0][8]);
					ShowPlayerFooter(playerid, "You have ~g~attached~w~ your glasses.");
				}
				else
				{
				    PlayerData[playerid][pToggleGlasses] = 1;
	                RemovePlayerAttachedObject(playerid, 0);
					ShowPlayerFooter(playerid, "You have ~r~detached~w~ your glasses.");
				}
			}
			case 1:
			{
			    PlayerData[playerid][pToggleGlasses] = 0;
       			SetPlayerAttachedObject(playerid, 0, PlayerData[playerid][pGlasses], 2, AccessoryData[playerid][0][0], AccessoryData[playerid][0][1], AccessoryData[playerid][0][2], AccessoryData[playerid][0][3], AccessoryData[playerid][0][4], AccessoryData[playerid][0][5], AccessoryData[playerid][0][6], AccessoryData[playerid][0][7], AccessoryData[playerid][0][8]);

			    EditAttachedObject(playerid, 0);
			    PlayerData[playerid][pEditType] = 1;
			}
			case 2:
			{
			    RemovePlayerAttachedObject(playerid, 0);
			    PlayerData[playerid][pGlasses] = 0;
			    SendServerMessage(playerid, "You have deleted your glasses.");
			}
		}
	}
	return 1;
}

Dialog:EditHat(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!IsPlayerAttachedObjectSlotUsed(playerid, 1))
            	{
	                PlayerData[playerid][pToggleHat] = 0;
	                SetPlayerAttachedObject(playerid, 1, PlayerData[playerid][pHat], 2, AccessoryData[playerid][1][0], AccessoryData[playerid][1][1], AccessoryData[playerid][1][2], AccessoryData[playerid][1][3], AccessoryData[playerid][1][4], AccessoryData[playerid][1][5], AccessoryData[playerid][1][6], AccessoryData[playerid][1][7], AccessoryData[playerid][1][8]);
					ShowPlayerFooter(playerid, "You have ~g~attached~w~ your hat.");
				}
				else
				{
				    PlayerData[playerid][pToggleHat] = 1;
	                RemovePlayerAttachedObject(playerid, 1);
					ShowPlayerFooter(playerid, "You have ~r~detached~w~ your hat.");
				}
			}
			case 1:
			{
			    PlayerData[playerid][pToggleHat] = 0;
	            SetPlayerAttachedObject(playerid, 1, PlayerData[playerid][pHat], 2, AccessoryData[playerid][1][0], AccessoryData[playerid][1][1], AccessoryData[playerid][1][2], AccessoryData[playerid][1][3], AccessoryData[playerid][1][4], AccessoryData[playerid][1][5], AccessoryData[playerid][1][6], AccessoryData[playerid][1][7], AccessoryData[playerid][1][8]);

			    EditAttachedObject(playerid, 1);
			    PlayerData[playerid][pEditType] = 2;
			}
			case 2:
			{
			    RemovePlayerAttachedObject(playerid, 1);
			    PlayerData[playerid][pHat] = 0;
			    SendServerMessage(playerid, "You have deleted your hat.");
			}
		}
	}
	return 1;
}

Dialog:EditBandana(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!IsPlayerAttachedObjectSlotUsed(playerid, 2))
	            {
	                PlayerData[playerid][pToggleBandana] = 0;
	                SetPlayerAttachedObject(playerid, 2, PlayerData[playerid][pBandana], 2, AccessoryData[playerid][2][0], AccessoryData[playerid][2][1], AccessoryData[playerid][2][2], AccessoryData[playerid][2][3], AccessoryData[playerid][2][4], AccessoryData[playerid][2][5], AccessoryData[playerid][2][6], AccessoryData[playerid][2][7], AccessoryData[playerid][2][8]);
					ShowPlayerFooter(playerid, "You have ~g~attached~w~ your bandana.");
				}
				else
				{
				    PlayerData[playerid][pToggleBandana] = 1;
	                RemovePlayerAttachedObject(playerid, 2);
					ShowPlayerFooter(playerid, "You have ~r~detached~w~ your bandana.");
				}
			}
			case 1:
			{
			    PlayerData[playerid][pToggleBandana] = 0;
       			SetPlayerAttachedObject(playerid, 2, PlayerData[playerid][pBandana], 2, AccessoryData[playerid][2][0], AccessoryData[playerid][2][1], AccessoryData[playerid][2][2], AccessoryData[playerid][2][3], AccessoryData[playerid][2][4], AccessoryData[playerid][2][5], AccessoryData[playerid][2][6], AccessoryData[playerid][2][7], AccessoryData[playerid][2][8]);

			    EditAttachedObject(playerid, 2);
			    PlayerData[playerid][pEditType] = 3;
			}
			case 2:
			{
			    RemovePlayerAttachedObject(playerid, 2);
			    PlayerData[playerid][pBandana] = 0;
			    SendServerMessage(playerid, "You have deleted your bandana.");
			}
		}
	}
	return 1;
}

Dialog:Accessory(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!PlayerData[playerid][pGlasses])
	                return SendErrorMessage(playerid, "You don't own a pair of glasses.");

	            Dialog_Show(playerid, EditGlasses, DIALOG_STYLE_LIST, "Glasses", "Toggle Glasses\nEdit Glasses\nDelete Glasses", "Select", "Cancel");
			}
			case 1:
			{
			    if (!PlayerData[playerid][pHat])
	                return SendErrorMessage(playerid, "You don't own a hat.");

			    Dialog_Show(playerid, EditHat, DIALOG_STYLE_LIST, "Hat", "Toggle Hat\nEdit Hat\nDelete Hat", "Select", "Cancel");
			}
			case 2:
			{
			    if (!PlayerData[playerid][pBandana])
	                return SendErrorMessage(playerid, "You don't own a bandana.");

			    Dialog_Show(playerid, EditBandana, DIALOG_STYLE_LIST, "Bandana", "Toggle Bandana\nEdit Bandana\nDelete Bandana", "Select", "Cancel");
			}
		}
	}
	return 1;
}

Dialog:CharList(playerid, response, listitem, inputtext[])
{
    SetTimerEx("SelectTD", 200, false, "d", playerid);

	if (response)
	{
		if (!PlayerCharacters[playerid][listitem][0])
		    return SendErrorMessage(playerid, "The selected character slot is empty.");

		new
		    string[160];

		format(string, sizeof(string), "SELECT `Admin`, `skin`, `CreateDate`, `LastLogin` FROM `characters` WHERE `Username` = '%s' AND `chara` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][listitem]);
		mysql_tquery(g_iHandle, string, "OnCharacterLookup", "dds", playerid, listitem + 1, PlayerCharacters[playerid][listitem]);
	}
	return 1;
}

Dialog:RegisterScreen(playerid, response, listitem, inputtext[])
{
	if (!response)
		return Kick(playerid);

	else if (isnull(inputtext))
	    return Dialog_Show(playerid, RegisterScreen, DIALOG_STYLE_PASSWORD, "Account Registration", "Welcome to Vice City Roleplay, %s.\n\nNotice: Your account is not registered yet. Please enter your desired password:", "Register", "Cancel", ReturnName(playerid)); // edit here please

	else
	{
		SQL_CreateAccount(PlayerData[playerid][pUsername], inputtext, playerid);


		SendServerMessage(playerid, "Your account has been created and saved successfully.");
		Dialog_Show(playerid, EmailRegistration, DIALOG_STYLE_INPUT, "Email Registration", "A valid email is required for UCP integration.\n\n Enter your email below.", "Continue", "");
	}
	return 1;
}

Dialog:EmailRegistration(playerid, response, listitem, inputtext[])
{
	if(!response)
		return Dialog_Show(playerid, EmailRegistration, DIALOG_STYLE_INPUT, "Email Registration", "A valid email is required for UCP integration.\n\n Enter your email below.", "Continue", "");

	else if (isnull(inputtext))
		return Dialog_Show(playerid, EmailRegistration, DIALOG_STYLE_INPUT, "Email Registration", "A valid email is required for UCP integration.\n\n Enter your email below.", "Continue", "");

	else if (!IsCorrectMail(inputtext))
		return Dialog_Show(playerid, EmailRegistration, DIALOG_STYLE_INPUT, "Email Registration", "A valid email is required for UCP integration.\n\n {eb4034}Not a valid email format\n{FFFFFF} Enter your email below.", "Continue", "");

	else
	{
		new name[MAX_PLAYER_NAME + 1];
		new query[200];

		GetPlayerName(playerid, name, sizeof(name));

		format(query, sizeof(query), "UPDATE `accounts` SET `email` = '%s' WHERE `Username` = '%s'", inputtext, name);
		mysql_tquery(g_iHandle, query);

		SendServerMessage(playerid, "Email set to: %s", inputtext);

		ShowCharacterMenu(playerid);
	}
	return 1;
}

Dialog:LoginScreen(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return Kick(playerid);

	else if (isnull(inputtext))
	    return Dialog_Show(playerid, LoginScreen, DIALOG_STYLE_PASSWORD, "Account Login", "Welcome back to Vice City Roleplay!\n\nPlease enter your password below to login to your account:", "Login", "Cancel", PlayerData[playerid][pLoginDate]);

	else
	{
	    SQL_AttemptLogin(playerid, inputtext);
	}
	return 1;
}

Dialog:LoginIntoChar(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
		ShowCharacterMenu(playerid);
	}
	else
	{
		switch(listitem)
		{
			case 0: SelectCharacter(playerid, 1);
			case 1: SelectCharacter(playerid, 2);
			case 2: SelectCharacter(playerid, 3);
		}
	}
	return 1;
}

Dialog:DeleteChar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		ShowCharacterMenu(playerid);
		SendClientMessage(playerid, -1, "If you would like to delete a character contact an administrator on the next steps.");
	    /*new query[128];

	    format(query, sizeof(query), "DELETE FROM `characters` WHERE `Username` = '%s' AND `chara` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][PlayerData[playerid][pCharacter] - 1]);
		mysql_tquery(g_iHandle, query);

		SendServerMessage(playerid, "You have deleted \"%s\" from your account.", PlayerCharacters[playerid][PlayerData[playerid][pCharacter] - 1]);
        PlayerCharacters[playerid][PlayerData[playerid][pCharacter] - 1][0] = 0;

        ShowCharacterMenu(playerid);*/
	}
	return 1;
}

Dialog:DeleteCharacter(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		SendClientMessage(playerid, -1, "If you would like to delete a character contact an administrator on the next steps.");
		return 1;
	    /*new query[128];

	    format(query, sizeof(query), "DELETE FROM `characters` WHERE `Username` = '%s' AND `chara` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1]);
		mysql_tquery(g_iHandle, query);

		SendServerMessage(playerid, "You have deleted \"%s\" from your account.", PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1]);
        PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1][0] = 0;

        for (new i = 50; i < 58; i ++) {
        	PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		PlayerData[playerid][pDisplayStats] = false;
		CancelSelectTextDraw(playerid);*/
	}
	return 1;
}

Dialog:CreateChar(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return PlayerData[playerid][pCharacter] = 0;

	else if (isnull(inputtext) || strlen(inputtext) > 20)
        return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Create Character", "Please enter the name of your new character below:\n\nWarning: Your name must be in the Firstname_Lastname format and not exceed 20 characters.", "Create", "Cancel");

	else if (!IsValidRoleplayName(inputtext))
	    return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Create Character", "Error: You have entered an invalid roleplay name.\n\nPlease enter the name of your new character below:\n\nWarning: Your name must be in the Firstname_Lastname format and not exceed 20 characters.", "Create", "Cancel");

	else
	{
	    static
	        query[128];

		format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `chara` = '%s'", inputtext);
		mysql_tquery(g_iHandle, query, "OnCharacterCheck", "ds", playerid, inputtext);
	}
	return 1;
}

Dialog:Gender(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    PlayerData[playerid][pGender] = listitem + 1;

	    switch (listitem) {
	        case 0: {
				PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][16], "~r~Gender:~w~ Male");
				PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][13], 98);

				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][13]);
				PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][13]);
			}
	        case 1: {
				PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][16], "~r~Gender:~w~ Female");
				PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][13], 233);

				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][13]);
				PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][13]);
			}
		}
		PlayerData[playerid][pSkin] = (listitem) ? (233) : (98);
		SetTimerEx("SelectTD", 200, false, "d", playerid);
	}
	else SetTimerEx("SelectTD", 200, false, "d", playerid);
	return 1;
}

Dialog:DateBirth(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			iDay,
			iMonth,
			iYear,
			str[64];

	    static const
	        arrMonthDays[] = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

	    if (sscanf(inputtext, "p</>ddd", iDay, iMonth, iYear)) {
	        Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Date of Birth", "Error: Invalid format specified!\n\nPlease enter your date of birth below (DD/MM/YYYY):", "Submit", "Cancel");
		}
		else if (iYear < 1900 || iYear > 2014) {
		    Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Date of Birth", "Error: Invalid year specified!\n\nPlease enter your date of birth below (DD/MM/YYYY):", "Submit", "Cancel");
		}
		else if (iMonth < 1 || iMonth > 12) {
		    Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Date of Birth", "Error: Invalid month specified!\n\nPlease enter your date of birth below (DD/MM/YYYY):", "Submit", "Cancel");
		}
		else if (iDay < 1 || iDay > arrMonthDays[iMonth - 1]) {
		    Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Date of Birth", "Error: Invalid day specified!\n\nPlease enter your date of birth below (DD/MM/YYYY):", "Submit", "Cancel");
		}
		else {
		    format(PlayerData[playerid][pBirthdate], 24, inputtext);

		    format(str, sizeof(str), "~r~Date of Birth:~w~ %s", inputtext);
		    PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][15], str);
		}
	}
	return 1;
}

Dialog:Origin(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new str[64];

	    if (isnull(inputtext) || strlen(inputtext) > 32) {
	        Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Origin", "Please enter the geographical origin of your character below:", "Submit", "Cancel");
		}
		else for (new i = 0, len = strlen(inputtext); i != len; i ++) {
		    if ((inputtext[i] >= 'A' && inputtext[i] <= 'Z') || (inputtext[i] >= 'a' && inputtext[i] <= 'z') || (inputtext[i] >= '0' && inputtext[i] <= '9') || (inputtext[i] == ' ') || (inputtext[i] == ',') || (inputtext[i] == '.'))
				continue;

			else return Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Origin", "Error: Only letters and numbers are accepted in the origin.\n\nPlease enter the geographical origin of your character below:", "Submit", "Cancel");
		}
		format(PlayerData[playerid][pOrigin], 32, inputtext);

  		format(str, sizeof(str), "~r~Origin:~w~ %s", inputtext);
  		PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][17], str);
	}
	return 1;
}

Dialog:NewPass(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, NewPass, DIALOG_STYLE_PASSWORD, "Enter New Password", "Please enter your new password below.\n\nNote: Please use a strong and safe password for additional security.", "Change", "Cancel");

		static
		    buffer[129],
		    query[256];

		WP_Hash(buffer, sizeof(buffer), inputtext);
		inputtext[0] = '\0';

		format(query, sizeof(query), "UPDATE `accounts` SET `Password` = '%s' WHERE `Username` = '%s'", buffer, PlayerData[playerid][pUsername]);
		mysql_tquery(g_iHandle, query);

		SendServerMessage(playerid, "You have changed your password.");
	}
	return 1;
}

Dialog:ChangePassword(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
	        return cmd_debug_changepass(playerid, "\1");

		static
		    buffer[129],
			query[256];

		WP_Hash(buffer, sizeof(buffer), inputtext);
		inputtext[0] = '\0';

		format(query, sizeof(query), "SELECT `Password` FROM `accounts` WHERE `Username` = '%s' AND `Password` = '%s'", PlayerData[playerid][pUsername], buffer);
		mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_VERIFY_PASS);
	}
	return 1;
}


CMD:clearniner(playerid, params[])
{
	new cid, found;
	new factionid = PlayerData[playerid][pFaction];

	if(GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "You must be a deputy to use this command.");

	if(sscanf(params, "i", cid))
		return SendSyntaxMessage(playerid, "/clearniner <cid> (temp cmd)");

	for(new i=0; i < MAX_911_CALLS; i++) if(NinerData[i][ninerExists])
	{
		if(NinerData[i][ninerID] == cid)
		{
			Niner_Clear(playerid, i);
			SendFactionMessage(factionid, COLOR_FACTIONCHAT, "[Dispatch]: %s has cleared a 911 call (CID: %i) **", ReturnName(playerid, 0), cid);
			found = 1;
			break;
		}
	}
	if(found == 0)
		return SendErrorMessage(playerid, "911 Call ID not found.");

	return 1;
}

CMD:searchtrunk(playerid, params[])
{
    new
        id = -1;
    if (GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You must be a police officer.");

    if ((id = Car_Nearest(playerid)) != -1)
    {
        if (IsVehicleImpounded(CarData[id][carVehicle]))
            return SendErrorMessage(playerid, "This vehicle is impounded and you can't use it.");

        if (IsPlayerInAnyVehicle(playerid))
            return SendErrorMessage(playerid, "You must exit the vehicle first.");

        if (!IsDoorVehicle(CarData[id][carVehicle]))
            return SendErrorMessage(playerid, "This vehicle doesn't have a trunk.");

        if (CarData[id][carLocked])
            return SendErrorMessage(playerid, "The vehicle's trunk is locked, use (/vbreach).");

        Car_ShowTrunk(playerid, id);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s looks inside the vehicle's trunk.", ReturnName(playerid, 0));
    }
    else SendErrorMessage(playerid, "You aren't next to any vehicle.");
    return 1;
}

CMD:vbreach(playerid, params[])
{
    new
        id = -1;
    if (GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You must be a police officer.");

    if ((id = Car_Nearest(playerid)) != -1)
    {
        if (IsPlayerInAnyVehicle(playerid))
            return SendErrorMessage(playerid, "You must exit the vehicle first.");

        if (!IsDoorVehicle(CarData[id][carVehicle]))
            return SendErrorMessage(playerid, "You cannot /vbreach this vehicle.");

        if (!CarData[id][carLocked])
            return SendErrorMessage(playerid, "This vehicle isn't locked.");

        CarData[id][carLocked] = false;
		static
	        engine,
	        lights,
	        alarm,
	        doors,
	        bonnet,
	        boot,
	        objective;

	    GetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 0, bonnet, boot, objective);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s breaks the vehicle's window and unlocks it from inside.", ReturnName(playerid, 0));
    }
    else SendErrorMessage(playerid, "You aren't next to any vehicle.");
    return 1;
}

CMD:playpool(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 505.1944,-83.9310,998.9609)) return SendErrorMessage(playerid, "You must be at the pool table to use this command.");
	if(!PlayingPool[playerid])
	{
		PlayingPool[playerid] = 1;
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		GiveWeaponToPlayer(playerid, 7, 1);
		PoolScore[playerid] = 0;
		if(!PoolStarted)
		{
			PoolStarted = 1;
			RespawnPoolBalls(1);
		}
		SendServerMessage(playerid, "You have started playing pool. Use /poolhelp to learn how to play.");
	}
	else
	{
		if(PoolAimer != playerid)
		{
			PlayingPool[playerid] = 0;
			ResetWeapon(playerid, 7);
			new
				count = GetPoolPlayersCount();
			if(count <= 0)
			{
				PoolStarted = 0;
				RespawnPoolBalls(0);
			}
		}
		SendServerMessage(playerid, "You have stopped playing pool.");
	}
	return 1;
}

CMD:poolhelp(playerid)
{
	SendClientMessage(playerid, COLOR_NEWBLUE, "[Pool]: {FFFFFF}Press F to chalk your pool cue (just for RP purposes, has no effect on the game)");
	SendClientMessage(playerid, COLOR_NEWBLUE, "[Pool] {FFFFFF}Press LMB near the white ball to begin aiming. Also press LMB to stop aiming.");
	SendClientMessage(playerid, COLOR_NEWBLUE, "[Pool]: {FFFFFF}Hold RMB to begin shooting.");
	SendClientMessage(playerid, COLOR_NEWBLUE, "[Pool]: {FFFFFF}Press SHIFT while aiming to change your camera.");
	SendClientMessage(playerid, COLOR_NEWBLUE, "[Pool]: {FFFFFF}Type /resetpool to reset the balls.");
	return 1;
}

CMD:resetpool(playerid, params[])
{
	new initv;
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 505.1944,-83.9310,998.9609)) return SendErrorMessage(playerid, "You must be at the pool table to use this command.");
	if(sscanf(params, "d", initv)) return SendSyntaxMessage(playerid, "/resetpool <init> 1 to keep playing, 0 to reset the entire game (debugging purposes)");
	RespawnPoolBalls(initv);
	SendNearbyMessage(playerid, 30.0, COLOR_GREY, "* %s has reset the pool game. (%d)", ReturnName(playerid, 0), initv);
	return 1;
}

CMD:fixcar(playerid, params[])
{
    if(PlayerData[playerid][pUnableToRepair] == 1) return SendErrorMessage(playerid, "You can only use this command once every 15 minutes.");

    new Float:vehhp, costamount, Float:costamountf, Float:damagemult, conf[10];
    GetVehicleHealth(GetPlayerVehicleID(playerid), vehhp);

    if(!IsPlayerInRangeOfPoint(playerid, 5, -99.9014, 1108.1683, 19.7422) && !IsPlayerInRangeOfPoint(playerid, 5, -1420.9614,2593.8865,55.7561))    return SendErrorMessage(playerid, "You are not at of the repair center.");
    if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "You must be in vehicle to use this command.");
    if(vehhp == 1000) return SendErrorMessage(playerid, "Your car doesn't need to be repaired.");

	damagemult = 1.0;
	if(vehhp < 950) damagemult = 1.07;
	if(vehhp < 900) damagemult = 1.12;
	if(vehhp < 850) damagemult = 1.18;
	if(vehhp < 800) damagemult = 1.23;
	if(vehhp < 750) damagemult = 1.28;
	if(vehhp < 700) damagemult = 1.35;
	if(vehhp < 650) damagemult = 1.45;
	if(vehhp < 600) damagemult = 1.53;
	if(vehhp < 550) damagemult = 1.60;
	if(vehhp < 500) damagemult = 1.68;
	if(vehhp < 450) damagemult = 1.74;
	if(vehhp < 400) damagemult = 1.80;
	if(vehhp < 350) damagemult = 1.86;
	if(vehhp < 300) damagemult = 1.91;

	if(IsHighCostRepair(GetPlayerVehicleID(playerid))) costamountf = 7000 * damagemult;
	else if(IsMidCostRepair(GetPlayerVehicleID(playerid))) costamountf = 3700 * damagemult;
	else costamountf = 650 * damagemult;

	costamount = floatround(costamountf, floatround_ceil);

	if(sscanf(params, "s", conf)) return SendServerMessage(playerid, "Repairing this vehicle will cost: $%d - Type \"/fixcar confirm\" to repair.", costamount);

	if (!strcmp(conf, "confirm", true))
	{
		if(PlayerData[playerid][pMoney] < costamount) return SendErrorMessage(playerid, "You don't have enough money to repair your vehicle.");
		PlayerData[playerid][pRepairTimer] = SetTimerEx("OnPlayerRepairTimer", 800000, false, "d", playerid);
		PlayerData[playerid][pUnableToRepair] = 1;
		RepairVehicle(GetPlayerVehicleID(playerid));
		GiveMoney(playerid, costamount * -1);
		SendErrorMessage(playerid, "You paid $%d to repair your vehicle.", costamount);

		PlayerPlaySound(playerid, 1133, 0, 0, 0);
	}
	return 1;
}

CMD:elm(playerid, params[])
{

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_MEDIC)
		return SendErrorMessage(playerid, "You are not allowed to use this command.");

	if (!IsACruiser(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "You must be inside a vehicle that can use ELM.");

	new vehid = GetPlayerVehicleID(playerid);

	if(CoreVehicles[vehid][vehELM] == 0)
	{
		SetLightStatus(vehid, true);
		FlashTime[vehid] = SetTimerEx("OnLightFlash", 110, true, "d", vehid);
		CoreVehicles[vehid][vehELM] = 1;
		SendClientMessage(playerid, -1, "You have turned your vehicle's ELM {32a852}ON{FFFFFF}.");
		return 1;
	}
	if(CoreVehicles[vehid][vehELM] == 1)
	{
		new panels, doors, lights, tires;
		KillTimer(FlashTime[vehid]);
		GetVehicleDamageStatus(vehid, panels, doors, lights, tires);
		UpdateVehicleDamageStatus(vehid, panels, doors, 0, tires);
		CoreVehicles[vehid][vehELM] = 0;
		SendClientMessage(playerid, -1, "You have turned your vehicle's ELM {a83232}OFF{FFFFFF}.");
		return 1;
	}
	return 1;
}

CMD:addvehcomp(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] >= 4)
	{

	}
}

CMD:x(playerid, params[])
{
	new Float:x, Float:y, Float:z, Float:npos;
	if(PlayerData[playerid][pAdmin] >= 2)
	{
		if(sscanf(params, "f", npos)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE: /x [Cordinate]");
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x+npos, y, z);
		return 1;
	}
	else return SendErrorMessage(playerid, "You're not authorized.");
}

COMMAND:y(playerid, params[])
{
	new Float:x, Float:y, Float:z, Float:npos;
	if(PlayerData[playerid][pAdmin] >= 2)
	{
		if(sscanf(params, "f", npos)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE: /y [Cordinate]");
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y+npos, z);
		return 1;
	}
	else return SendErrorMessage(playerid, "You're not authorized.");
}

COMMAND:z(playerid, params[])
{
	new Float:x, Float:y, Float:z, Float:npos;
	if(PlayerData[playerid][pAdmin] >= 2)
	{
		if(sscanf(params, "f", npos)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE: /z [Cordinate]");
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y, z+npos);
		return 1;
	}
	else return SendErrorMessage(playerid, "You're not authorized.");
}

CMD:callsign(playerid, params[])
{
    new vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
	new string[32];
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "You're not in a vehicle.");
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_NEWS && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_SECURITY)
		return SendErrorMessage(playerid, "You are not authorized to use this command.");
	if (!IsACruiser(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "You must be inside a police cruiser.");
	if(vehiclecallsign[GetPlayerVehicleID(playerid)] == 1)
	{
 		Delete3DTextLabel(vehicle3Dtext[vehicleid]);
	    vehiclecallsign[vehicleid] = 0;
	    SendClientMessage(playerid, COLOR_RED, "Callsign removed.");
	    return 1;
	}
	if(sscanf(params, "s[32]",string)) return SendErrorMessage(playerid, "You must enter a callsign.");
	if(vehiclecallsign[GetPlayerVehicleID(playerid)] == 0)
	{
		vehicle3Dtext[vehicleid] = Create3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.0, 10.0, 0, 1);
		Attach3DTextLabelToVehicle(vehicle3Dtext[vehicleid], vehicleid, 0.0, -2.8, 0.0);
		vehiclecallsign[vehicleid] = 1;
	}
	return 1;
}

CMD:setforsale(playerid, params[])
{
    new
    	carid = GetPlayerVehicleID(playerid);

	if (!carid)
	    return SendErrorMessage(playerid, "You must be inside your vehicle.");

    if (!Inventory_HasItem(playerid, "Sale Documents"))
    	return SendErrorMessage(playerid, "You need sale documents to write on, get them from the Post Office.");

    if (!Inventory_HasItem(playerid, "Pen"))
    	return SendErrorMessage(playerid, "You need a pen to write down your sale information. Buy one from a Post Office.");

    new vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
	new string[32];
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "You're not in a vehicle.");
	if(vehiclecallsign[GetPlayerVehicleID(playerid)] == 1)
	{
 		Delete3DTextLabel(vehicle3Dtext[vehicleid]);
	    vehiclecallsign[vehicleid] = 0;
	    SendClientMessage(playerid, COLOR_RED, "Sign has been removed.");
	    return 1;
	}
	if(sscanf(params, "s[32]",string)) return SendErrorMessage(playerid, "You must write down the sale information.");
	if(vehiclecallsign[GetPlayerVehicleID(playerid)] == 0)
	{
		vehicle3Dtext[vehicleid] = Create3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.0, 10.0, 0, 1);
		Attach3DTextLabelToVehicle(vehicle3Dtext[vehicleid], vehicleid, 0.0, -1.5, 0.6);
		vehiclecallsign[vehicleid] = 1;
		Inventory_Remove(playerid, "Sale Documents");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s filled the sale information document and put it on the back window.", ReturnName(playerid, 0));
	}
	return 1;
}


CMD:aremovecall(playerid, params[])
{
	new vehicleid;
	if (PlayerData[playerid][pAdmin] < 1)
		return SendErrorMessage(playerid, "You must be an administrator.");
	if(sscanf(params, "i", vehicleid)) return SendErrorMessage(playerid, "/aremovecall [VEHICLE ID]");
    if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");
	Delete3DTextLabel(vehicle3Dtext[vehicleid]);
	return 1;
}

/*
CMD:rules(playerid, params[])
{
		new string [2048];
        strcat(string, "{2E8B57}A.{FFFFFF} You are not allowed to use any illegal mods or hacks\n");
        strcat(string, "{FF0000}*{FFFFFF} This is not a place to test your mods or hacks\n");
        strcat(string, "{2E8B57}B.{FFFFFF} Driveby, Ninjajack, Spawnkill, Deathmatching is prohibited\n");
        strcat(string, "{2E8B57}C.{FFFFFF} Metagaming and Powergaming will result in an immediate punishment\n");
        strcat(string, "{2E8B57}D.{FFFFFF} Bunny-Hop and Chicken-Run is not allowed\n");
        strcat(string, "{2E8B57}E.{FFFFFF} Revengekill and KillonSight is also restricted at EL:RP\n");
        strcat(string, "{2E8B57}F.{FFFFFF} Bug-Abuse is not allowed at any cost, it must be reported at the forum\n");
        strcat(string, "{2E8B57}G.{FFFFFF} Spamming and Intimidating in OOC is strictly prohibited\n");
        strcat(string, "{2E8B57}H.{FFFFFF} Although we tolerate minor offences, but it's best to refrain from it\n");
        strcat(string, "{2E8B57}I.{FFFFFF} The staff team is always busy, do not contact unless immediate help required\n");
        strcat(string, "{2E8B57}J.{FFFFFF} Do not disrupt the roleplay environment in any way, this may include:\n");
        strcat(string, "{2E8B57}*{FFFFFF} Lagging, High Ping, AFK in the roleplay environment, etc\n");
        strcat(string, "{2E8B57}K.{FFFFFF} Spamming and other related acts are disallowed no matter what.\n");
        strcat(string, "\n\n");
        strcat(string, "{FF0000}NOTE:{FFFFFF} These are just the shorter version of the rules list on the forums\n");
        strcat(string, "{FF0000}NOTE2:{FFFFFF} Make sure, you check out the longer rules list on forums before breaking one\n\n");
        strcat(string, "\n\n");
        SendClientMessage(playerid, -1, "{FF0000}[RULES]: {FFFFFF}By clicking accept, you agree to abide the server as well as additional rules on forums");
        ShowPlayerDialog(playerid, 998, DIALOG_STYLE_MSGBOX, "Server Rules", string, "Accept", "");
        return 1;
}
*/

CMD:rules(playerid, params[])
{
	ShowPlayerDialog(playerid, 998, DIALOG_STYLE_MSGBOX, "Server Rules", "Find the server rules on our UCP \n"SERVER_URL"", "Ok", "");
	return 1;
}

/*CMD:b(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/b [local OOC]");

	if(PlayerData[playerid][pBChatDisabled] == 1)
		return SendErrorMessage(playerid, "You have /b chat disabled, enable it with /tog bchat.");

	if (strlen(params) > 64)
	{
	    if(PlayerData[playerid][pAdminDuty] == 1)
	    {
	        SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "{3AB3ED}%s{FFFFFF} [%d]: (( %.64s", ReturnName(playerid, 0), playerid, params);
	    	SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "...%s ))", params[64]);
	        return 1;
		}
	    SendNearbyBMessage(playerid, 20.0, COLOR_WHITE, "%s [%d]: (( %.64s", ReturnName(playerid, 0), playerid, params);
	    SendNearbyBMessage(playerid, 20.0, COLOR_WHITE, "...%s ))", params[64]);
	}
	else
	{
	    if(PlayerData[playerid][pAdminDuty] == 1)
	    {
	        SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "{3AB3ED}%s{FFFFFF} [%d]: (( %s ))", ReturnName(playerid, 0), playerid, params);
			return 1;
		}
	    SendNearbyBMessage(playerid, 20.0, COLOR_WHITE, "%s [%d]: (( %s ))", ReturnName(playerid, 0), playerid, params);
	}
	return 1;
}*/

CMD:b(playerid, params[])
{
    if (isnull(params))
        return SendSyntaxMessage(playerid, "/b [local OOC]");

    if(PlayerData[playerid][pBChatDisabled] == 1)
		return SendErrorMessage(playerid, "You have /b chat disabled, enable it with /tog bchat.");

    if (strlen(params) > 64)
    {
        if(PlayerData[playerid][pAdminDuty] == 1)
        {
            SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "(( {FF7400}%s {FFFFFF}(%d): %.64s )) ", ReturnName(playerid, 2), playerid, params);
            SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "...%s ))", params[64]);
            return 1;
        }
		if(PlayerData[playerid][pMaskOn] == 1)
		{
			SendNearbyBMessage(playerid, 20.0, COLOR_WHITE, "%s: (( %.64s", ReturnName(playerid, 2), params);
	    	SendNearbyBMessage(playerid, 20.0, COLOR_WHITE, "...%s ))", params[64]);
			return 1;
		}
        SendNearbyBMessage(playerid, 20.0, COLOR_WHITE, "(( %s (%d): %.64s ))", ReturnName(playerid, 2), playerid, params);
        SendNearbyBMessage(playerid, 20.0, COLOR_WHITE, "...%s ))", params[64]);
    }
    else
    {
        if(PlayerData[playerid][pAdminDuty] == 1)
        {
            SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "(( {FF7400}%s {FFFFFF}(%d): %.64s )) ", ReturnName(playerid, 2), playerid, params);
            return 1;
        }
		if(PlayerData[playerid][pMaskOn] == 1)
		{
		 	SendNearbyBMessage(playerid, 20.0, COLOR_WHITE, "(( %s: %s ))", ReturnName(playerid, 2), params);
			return 1;
		}
        SendNearbyBMessage(playerid, 20.0, COLOR_WHITE, "(( %s (%d):  %s ))", ReturnName(playerid, 2), playerid, params);
    }
    //format(string, sizeof(string), "(( %s ))", params);
    //SetPlayerChatBubble(playerid, string, COLOR_WHITE, 10.0, 6000);
    return 1;
}

CMD:me(playerid, params[])
{

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/me [action]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s %.64s", ReturnName(playerid, 2), params);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "...%s", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s %s", ReturnName(playerid, 2), params);
	}
	return 1;
}

CMD:do(playerid, params[])
{
	if(isnull(params))
	    return SendSyntaxMessage(playerid, "/do [description]");

	if(strlen(params) > 64) {
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %.64s", params);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "...%s (( %s ))", params[64], ReturnName(playerid, 2));
	}
	else
	{
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s (( %s ))", params, ReturnName(playerid, 2));
	}
	return 1;
}

/*
CMD:alog(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");
	new targetname[40], fstring[128];
	if(sscanf(params, "s[40]", targetname)) return SendSyntaxMessage(playerid, "/alog <character name> (case sensitive)");

	if(!fexist(fstring)) return SendClientMessageEx(playerid, -1, "[ALOG]: Logs for: %s do not exist.", targetname);
	new File:rflh = fopen(fstring, io_read);
	if(rflh)
	{
		new lines, id, str[256], diastring[4000];
		while___loop(fread(rflh, str))
		{
			lines++;
		}

		id = lines - 50;
		lines = 0;
		fseek(rflh);
		while___loop(fread(rflh, str))
		{
			if(++lines <= id) continue;
			format(diastring, sizeof(diastring), "%s%s", diastring, str);
		}
		new diatitle[128];
		format(diatitle, sizeof(diatitle), "Action Logs: %s", targetname);
		SendClientMessageEx(playerid, COLOR_WHITE, "Action Log: Last 50 actions from player: %s | TIME NOW: %s", targetname, ReturnDate());
		Dialog_Show(playerid, DIALOG_A_LOG, DIALOG_STYLE_MSGBOX, diatitle, diastring, "Close", "");
		fclose(rflh);
	}
	return 1;
}*/

CMD:unholster(playerid, params[])
{
	new slot;
	if(sscanf(params, "%d", slot)) return SendSyntaxMessage(playerid, "/unholster <slot 1-3>");
	switch(slot)
	{
		case 1:
		{
			PlayerData[playerid][pAttachedGun1] = -1;
			RemovePlayerAttachedObject(playerid, 6);
		}
		case 2:
		{
			PlayerData[playerid][pAttachedGun2] = -1;
			RemovePlayerAttachedObject(playerid, 7);
		}
		case 3:
		{
			PlayerData[playerid][pAttachedGun3] = -1;
			RemovePlayerAttachedObject(playerid, 8);
		}
		default: SendErrorMessage(playerid, "Invalid slot number.");
	}
	return 1;
}

CMD:boneids(playerid, params[])
{
	Dialog_Show(playerid, BONEIDS, DIALOG_STYLE_MSGBOX, "SA:MP Bone IDs", "1: Spine\n2: Head\n3: Left upper arm\n4: Right upper arm\n5: Left hand\n6: Right hand\n7: Left thigh\n8: Right thigh\n9: Left foot\n10: Right foot\n11: Right calf\n12: Left calf\n13: Left forearm\n14: Right forearm\n15: Left clavicle (shoulder)\n16: Right clavicle (shoulder)\n17: Neck\n18: Jaw", "Close", "");

	return 1;
}

CMD:removeobj(playerid, params[])
{
	new slotid;
	if(sscanf(params, "d", slotid)) return SendSyntaxMessage(playerid, "/removeobj <slot 1/2>");
	if(slotid != 1 && slotid != 2) return SendErrorMessage(playerid, "Invalid slot ID.");

	if(slotid == 1) slotid = 9;
	if(slotid == 2) slotid = 5;

	RemovePlayerAttachedObject(playerid, slotid);

	AccessoryInfo[playerid][slotid][0] = 0;
	return 1;
}

CMD:object(playerid, params[])
{
	new slotid, objid, boneid;
	if(sscanf(params, "ddd", slotid, objid, boneid)) {
		SendClientMessage(playerid, -1, "--------------------------------------------------------------------------------------");
		SendSyntaxMessage(playerid, "/object <slot id 1 or 2> <model id> <boneid> (/boneids to see SA:MP bone ids)");
		SendClientMessage(playerid, -1, "We're giving you a lot of freedom with this command, don't abuse it or you will be ajailed. (/removeobj to remove)");
		SendClientMessage(playerid, -1, "--------------------------------------------------------------------------------------");
		return 1;
	}
	if(slotid != 1 && slotid != 2) return SendErrorMessage(playerid, "Invalid slot ID.");
	if(objid == INVALID_OBJECT_ID) return SendErrorMessage(playerid, "Invalid object ID.");
	if(1 > boneid > 18) return SendErrorMessage(playerid, "Invalid bone ID.");

	if(slotid == 1) slotid = 9;
	if(slotid == 2) slotid = 5;

	PlayerData[playerid][pEditObject] = 1;
	SetPlayerAttachedObject(playerid, slotid, objid, boneid, 0, 0, 0, 0, 0, 0);
	EditAttachedObject(playerid, slotid);

	return 1;
}

CMD:holster(playerid, params[])
{
	new gun = GetPlayerWeapon(playerid);
	new gunmodel = GetWeaponModel(gun);
	new boneid;

	if(gun == 0) return SendErrorMessage(playerid, "You are not holding a gun.");

	if(sscanf(params, "d", boneid)) return SendSyntaxMessage(playerid, "/holster {boneid} (/boneids to see SA:MP bone ids)");

	if(PlayerData[playerid][pAttachedGun1] == -1)
	{
		RemovePlayerAttachedObject(playerid, 6);
		SetPlayerAttachedObject(playerid, 6, gunmodel, boneid, 0, 0, 0, 0, 0, 0);
		EditAttachedObject(playerid, 6);
		PlayerData[playerid][pEditGun] = 1;
		PlayerData[playerid][pAttachedGun1] = gun;
		PlayerData[playerid][pAttachedGun1Bone] = boneid;
		SendServerMessage(playerid, "Use /unholster to unholster this weapon. (SLOT: 1)");
		return 1;
	}
	else if(PlayerData[playerid][pAttachedGun2] == -1)
	{
		RemovePlayerAttachedObject(playerid, 7);
		SetPlayerAttachedObject(playerid, 7, gunmodel, boneid, 0, 0, 0, 0, 0, 0);
		EditAttachedObject(playerid, 7);
		PlayerData[playerid][pEditGun] = 2;
		PlayerData[playerid][pAttachedGun2] = gun;
		PlayerData[playerid][pAttachedGun2Bone] = boneid;
		SendServerMessage(playerid, "Use /unholster to unholster this weapon. (SLOT: 2)");
		return 1;
	}
	else if(PlayerData[playerid][pAttachedGun3] == -1)
	{
		RemovePlayerAttachedObject(playerid, 8);
		SetPlayerAttachedObject(playerid, 8, gunmodel, boneid, 0, 0, 0, 0, 0, 0);
		EditAttachedObject(playerid, 8);
		PlayerData[playerid][pEditGun] = 3;
		PlayerData[playerid][pAttachedGun3] = gun;
		PlayerData[playerid][pAttachedGun3Bone] = boneid;
		SendServerMessage(playerid, "Use /unholster to unholster this weapon. (SLOT: 3)");
		return 1;
	}
	else SendErrorMessage(playerid, "All of your holster slots are currently in use. Use /unholster to clear a slot.");
	return 1;
}

CMD:ame(playerid, params[])
{
	static
	    string[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ame [action]");

	format(string, sizeof(string), "* %s %s", ReturnName(playerid, 2), params);
 	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);

 	SendClientMessageEx(playerid, COLOR_PURPLE, "* %s %s", ReturnName(playerid, 2), params);
	return 1;
}

CMD:ado(playerid, params[])
{
    static
	    string[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ado [description]");

	format(string, sizeof(string), "* %s (( %s ))", params, ReturnName(playerid, 2));
 	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);

 	SendClientMessageEx(playerid, COLOR_PURPLE, "* %s (( %s ))", params, ReturnName(playerid, 2));
	return 1;
}

CMD:s(playerid, params[])
{

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(s)hout [shout text]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "%s shouts: %.64s", ReturnName(playerid, 2), params);
	    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "...%s", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "%s shouts: %s", ReturnName(playerid, 2), params);
	}
 	//format(string, sizeof(string), "shouts: %s", params);
	//SetPlayerChatBubble(playerid, string, COLOR_WHITE, 30.0, 6000);
	return 1;
}

CMD:pilotm(playerid, params[])
{

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/pilotm [plane megaphone]");

    if (!IsAPlane(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "You must be in a plane in order to use the intercom.");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 30.0, COLOR_INTERCOM, "[Pilot Megaphone] %s says: %.64s", ReturnName(playerid, 2), params);
	    SendNearbyMessage(playerid, 30.0, COLOR_INTERCOM, "...%s", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_INTERCOM, "[Pilot Megaphone] %s says: %s", ReturnName(playerid, 2), params);
	}
	return 1;
}

CMD:l(playerid, params[])
{

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(l)ow [low text]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "[low] %s says: %.64s", ReturnName(playerid, 2), params);
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "...%s", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "[low] %s says: %s", ReturnName(playerid, 2), params);
	}
 	//format(string, sizeof(string), "[low] says: %s", params);
	//SetPlayerChatBubble(playerid, string, COLOR_WHITE, 5.0, 6000);
	return 1;
}

/*
CMD:kill(playerid, params[])
{
	if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pJailTime] > 0 || PlayerData[playerid][pDrivingTest] || PlayerData[playerid][pBikeTest] || PlayerData[playerid][pTruckTest])
	    return SendErrorMessage(playerid, "You can't kill yourself at the moment.");

	SetPlayerHealth(playerid, 0.0);
	return 1;
}
*/

CMD:ooc(playerid, params[])
{
	if (!g_StatusOOC && PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "An administrator has disabled global OOC chat.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/o [ooc chat]");

	if (PlayerData[playerid][pDisableOOC])
	    return SendErrorMessage(playerid, "You must enable OOC chat first.");

    if (strlen(params) > 64)
	{
        foreach (new i : Player) if (!PlayerData[i][pDisableOOC] && PlayerData[i][pCreated]) {
		    SendClientMessageEx(i, 0xADC3E7FF, "[OOC] %s (%i): %.64s", ReturnName(playerid, 0), playerid, params);
		    SendClientMessageEx(i, 0xADC3E7FF, "...%s", params[64]);
		}
	}
	else
	{
        foreach (new i : Player) if (!PlayerData[i][pDisableOOC] && PlayerData[i][pCreated]) {
		    SendClientMessageEx(i, 0xADC3E7FF, "[OOC] %s (%i): %s", ReturnName(playerid, 0), playerid, params);
		}
	}
	return 1;
}

CMD:settings(playerid, params[])
{
	Player_Settings(playerid);
	return 1;
}

Player_Settings(playerid)
{
	new chat[64];
	if(PlayerData[playerid][pToggleChatAnim] == 0)
	{
		chat = "{42D43D}ON";
	}
	else if(PlayerData[playerid][pToggleChatAnim] == 1)
	{
		chat = "{FF2121}OFF";
	}

	new togpms[64];
	if(PlayerData[playerid][pDisablePM] == 1)
	{
		togpms = "{FF2121}OFF";
	}
	else if(PlayerData[playerid][pDisablePM] == 0)
	{
		togpms = "{42D43D}ON";
	}

	new btog[64];
	if(PlayerData[playerid][pBChatDisabled] == 0)
	{
		btog = "{42D43D}ON";
	}
	else if(PlayerData[playerid][pBChatDisabled] == 1)
	{
		btog = "{FF2121}OFF";
	}

	new string1[150];
	new string2[220];
	new string3[250];
	new string4[285];
	new string5[325];
	new string6[400];
//	new string[225]; string =  "{FFFFFF}Option\t{FFFFFF}Status\n";
    format(string1, sizeof(string1), "{FFFFFF}Forum username\t%s\n", PlayerData[playerid][pForumName]);
	format(string2, sizeof(string2), "%s{FFFFFF}Master account password\t\n", string1);
	format(string3, sizeof(string3), "%s{FFFFFF}View all characters\t\n", string2);
    format(string4, sizeof(string4), "%s{FFFFFF}Chat animation\t%s\n", string3, chat);
    format(string5, sizeof(string5), "%s{FFFFFF}Private messages\t%s\n", string4, togpms);
    format(string6, sizeof(string6), "%s{FFFFFF}Local OOC (/b)\t%s\n", string5, btog); //characters
    Dialog_Show(playerid, PlayerSettings, DIALOG_STYLE_TABLIST, "Character Settings", string6, "Change", "Close");
	return 1;
}

Dialog:PlayerSettings(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: // forumname change
			{
				Dialog_Show(playerid, ForumName, DIALOG_STYLE_INPUT, "Forum username", "Please enter your forum username below:", "Change", "Back");
			}
			case 1: // master account password
			{
				return cmd_debug_changepass(playerid, "\1");
			}
			case 2: // view all chars
			{
				return cmd_characters(playerid, "\1");
			}
			case 3: // chat anim
			{
				return cmd_debug_togchatanim(playerid, "\1");
			}
			case 4: // pms
			{
				return cmd_tog(playerid, "debug_pm");
			}
			case 5: // tog /b
			{
				return cmd_tog(playerid, "debug_bchat");
			}
		}
	}
	return 1;
}

Dialog:ForumName(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(strlen(inputtext) > 30)
			return Dialog_Show(playerid, ForumName, DIALOG_STYLE_INPUT, "Forum username", "Please enter your forum username\nwhich does not exceed a length of 30 characters.", "Change", "Back");

		format(PlayerData[playerid][pForumName], 30, "%s", inputtext);

		new msg[120];
		format(msg, sizeof(msg), "[Admin]: {FFFFFF}%s(%i) has updated their forum name to '%s'.", ReturnName(playerid, 0), playerid, PlayerData[playerid][pForumName]);
		SendAdminAlert(COLOR_LIGHTRED, msg);
	}
	if(!response)
	{
		Player_Settings(playerid);
	}
	return 1;
}

CMD:nitrous(playerid, params[])
{
	SendClientMessage(playerid, -1, "This command has been removed.");
	return 1;
}

CMD:o(playerid, params[])
	return cmd_ooc(playerid, params);

CMD:radio(playerid, params[])
	return cmd_r(playerid, params);

//CMD:o(playerid, params[])
//	return cmd_o(playerid, params);

CMD:ah(playerid, params[])
	return cmd_ahelp(playerid, params);

CMD:adminhelp(playerid, params[])
return cmd_ahelp(playerid, params);

CMD:sa(playerid, params[])
	return cmd_stopanim(playerid, params);

CMD:spec(playerid, params[])
	return cmd_spectate(playerid, params);

CMD:megaphone(playerid, params[])
	return cmd_m(playerid, params);

CMD:shout(playerid, params[])
	return cmd_s(playerid, params);

CMD:low(playerid, params[])
	return cmd_l(playerid, params);

CMD:admin(playerid, params[])
	return cmd_a(playerid, params);

CMD:w(playerid, params[])
	return cmd_whisper(playerid, params);

CMD:help(playerid, params[])
{
	new string [2048];
	strcat(string, "{FF6347}[Help]: {FFFFFF}/settings, /lastlogged, /username, /properties, /support, /cancelsupport, /tog, /stats, /report, /acc.\n");
	strcat(string, "{FF6347}[Help]: {FFFFFF}/inventory, /switch, /search, /searchbp, /approve, /faq, /sell, /paint, /drink, /bank, /cook, /vest, /ammo, /unequip.\n");
	strcat(string, "{FF6347}[Help]: {FFFFFF}/usekit, /id, /drop, /flist, /crates, /fill, /pay, /gps, /open, /usedrug, /breakcuffs, /backpack, /invoices, /tickets..\n");
	strcat(string, "{FF6347}[Help]: {FFFFFF}/boombox, /disablecp, /shakehand, /showlicenses, /frisk, /toghud, /passwep, /setradio, /picklock, /resetvw.\n");
	strcat(string, "{FF6347}[Help]: {FFFFFF}/buyfstyle, /admins, /bomb, /plantbomb, /detonate, /mywarnings, /holster, /unholster\n");
	strcat(string, "{FF6347}[Help]: {FFFFFF}/myclothes, /changeclothes, /buyclothes, /myaccent, /tabbed.\n");
	strcat(string, "{FF6347}[Help]: {FFFFFF}/ooc, /b, /w, /s, /f, /l, /pilotm, /lcc (local chat clear).\n");
	strcat(string, "{FF6347}[Help]: {FFFFFF}/phone, /call, /pickup, /hangup, /text.\n");
	strcat(string, "{FF6347}[Help]: {FFFFFF}/r, /channel, /bank, /atm, /registercard\n");
	strcat(string, "[Sections]: {FFFFFF}/help, /factionhelp, /jobhelp, /animhelp, /premiumhelp, /propertyhelp, /carhelp\n");
	ShowPlayerDialog(playerid, 998, DIALOG_STYLE_MSGBOX, "Animations", string, "Accept", "");
	return 1;
}

CMD:howto(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN, "[Guide]: {FFFFFF}Crouch (press 'c') and press {08B200}'N'{FFFFFF} to pickup items.");
    SendClientMessage(playerid, COLOR_GREEN, "[Guide]: {FFFFFF}Press {08B200}'F'{FFFFFF} as a shortcut as /enter or /exit.");
	return 1;
}

CMD:carhelp(playerid, params[])
{
	SendClientMessage(playerid, COLOR_LIGHTRED, "[Car Help]: {FFFFFF}/park, /lock, /abandon, /windows, /window, /refuel, /unmod, /trunk, /listcars, /engine, /lights, /hood, /tow, /spawncars.");
	return 1;
}

CMD:propertyhelp(playerid, params[])
{
	SendClientMessage(playerid, COLOR_LIGHTRED, "[House Help]: {FFFFFF}/buy, /abandon, /lock, /storage, /furniture, /buyrack, /gunrack, /deleterack.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "[House Help]: {FFFFFF}/doorbell, /switch.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "[Business Help]: {FFFFFF}/buy, /abandon, /lock, /vault, /products, /binfo, /bname, /bmessage, /bshipment.");
	return 1;
}

CMD:premiumhelp(playerid, params[])
{
    if(PlayerData[playerid][pDonator] != 0)
    {
    	SendClientMessage(playerid, COLOR_LIGHTRED, "Premium Subscription Help: {FFFFFF}/toggold /dooc /tog(donator).");
	}
	else SendClientMessage(playerid, COLOR_GREY, DonatorOnly);
	return 1;
}

CMD:factionhelp(playerid, params[])
{
    if (PlayerData[playerid][pFaction] == -1) return SendErrorMessage(playerid, "You are not authorized to use this command");

	new string [2048];
	strcat(string, "{FF6347}[Help]: {FFFFFF}/settings, /lastlogged, /username, /properties, /support, /cancelsupport, /tog, /stats, /report, /acc.\n");

    if (GetFactionType(playerid) == FACTION_POLICE)
    {
		strcat(string, "{FF6347}[Law Enforcement]: {FFFFFF}/taser, /cuff, /uncuff, /drag, /detain, /mdc, /jail, /radio, /dept, /seizeplant.\n");
		strcat(string, "{FF6347}[Law Enforcement]: {FFFFFF}/ticket, /undercover, /fingerprint, /impound, /revokeweplic, /grantweplic, /vbreach, /searchtrunk\n");
		strcat(string, "{FF6347}[Law Enforcement]: {FFFFFF}/taser, /cuff, /uncuff, /drag, /detain, /mdc, /jail, /radio, /dept, /seizeplant.\n");
		strcat(string, "{FF6347}[Law Enforcement]: {FFFFFF}/taser, /cuff, /uncuff, /drag, /detain, /mdc, /jail, /radio, /dept, /seizeplant.\n");
		strcat(string, "{FF6347}[Law Enforcement]: {FFFFFF}/taser, /cuff, /uncuff, /drag, /detain, /mdc, /jail, /radio, /dept, /seizeplant.\n");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Law Enforcement]: {FFFFFF}/ticket, /undercover, /fingerprint, /impound, /revokeweplic, /grantweplic, /vbreach, /searchtrunk");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Law Enforcement]: {FFFFFF}/take, /kickdoor, /siren, /traffic /beanbag, /callsign, /taclight, /revokelicense, /trace.");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Law Enforcement]: {FFFFFF}/checkvehicles, /checkproperties, /equip, /spike, /crb, /rallrb, /rrb, /backup, /cancelbackup");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Law Enforcement]: {FFFFFF}/bomb, /defuse, /spawndrone, /despawndrone, /setswat, /swat");
	}
	else if (GetFactionType(playerid) == FACTION_NEWS) {
 		SendClientMessage(playerid, COLOR_LIGHTRED, "[News]:{FFFFFF} /radio, /callsign, /broadcast, /bc, /inviteguest, /removeguest.");
	}
	else if (GetFactionType(playerid) == FACTION_MEDIC) {
 		SendClientMessage(playerid, COLOR_LIGHTRED, "[Fire & Medical]:{FFFFFF} /radio, /dept, /callsign, /siren, /bandage, /loadinjured, /dropinjured.");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Fire & Medical]:{FFFFFF} /crb, /rallrb, /rrb, /traffic, /mdc, /placefire, /killfire");
	}
	else if (GetFactionType(playerid) == FACTION_GOV) {
 		SendClientMessage(playerid, COLOR_LIGHTRED, "[Government]:{FFFFFF} /radio, /dept, /twithdraw, /callsign, /tdeposit, /siren, /offerloan.");
   		SendClientMessage(playerid, COLOR_LIGHTRED, "[Government]:{FFFFFF} /checkvehicles, /checkproperties, /crb, /rallrb, /rrb, /grantlicense, /revokelicense, /traffic.");
	}
	else if (GetFactionType(playerid) == FACTION_SECURITY) {
 		SendClientMessage(playerid, COLOR_LIGHTRED, "[Security]:{FFFFFF} /cuff, /uncuff, /crb, /rrb, /rallrb, /invoice, /taser, /callsign, /traffic.");
	}
	else if (GetFactionType(playerid) == FACTION_GANG_DRUGS || GetFactionType(playerid) == FACTION_GANG_GUNS) {
 		SendClientMessage(playerid, COLOR_LIGHTRED, "[IIlegal Faction]:{FFFFFF} /graffiti, /blackmarket, /bomb, /plantbomb, /detonate.");
	}
	SendClientMessage(playerid, COLOR_LIGHTRED, "[Faction]: {FFFFFF}/factionmembers, /f, /factionleave, /locker.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "[Leadership]: {FFFFFF}/gov, /factionalert, /managefaction, /factioname, /factrunk, /factionrc.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "[Leadership]: {FFFFFF}/factioninvite, /factionkick, /factionrank, /factiondiv");
	ShowPlayerDialog(playerid, 998, DIALOG_STYLE_MSGBOX, "Animations", string, "Accept", "");
	return 1;
}

CMD:jobhelp(playerid, params[])
{
	switch(PlayerData[playerid][pJob])
	{
		case 0: SendErrorMessage(playerid, "You are unemployed at the moment.");
		case 1:
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "[Courier]:{FFFFFF} Use /shipments or /loadcrate to begin. (You get more money from shipments)");
			SendClientMessage(playerid, COLOR_LIGHTRED, "[Courier]:{FFFFFF} /shipments /loadcrate, /stoploading, /unload");
		}
		case 2: SendClientMessage(playerid, COLOR_LIGHTRED, "[Mechanic]:{FFFFFF} /repair, /nitrous.");
		case 3: SendClientMessage(playerid, COLOR_LIGHTRED, "[Taxi Driver]:{FFFFFF} /taxi, /acceptcall.");
		case 4: SendClientMessage(playerid, COLOR_LIGHTRED, "[Cargo Unloader]:{FFFFFF} /loadcrate.");
		case 5: SendClientMessage(playerid, COLOR_LIGHTRED, "[Miner]:{FFFFFF} /mine.");
		case 7: SendClientMessage(playerid, COLOR_LIGHTRED, "[Garbage]:{FFFFFF} /takebag, /dumpgarbage, /findgarbage.");
		case 8: SendClientMessage(playerid, COLOR_LIGHTRED, "[Package Sorter]:{FFFFFF} /sorting.");
		case 10: SendClientMessage(playerid, COLOR_LIGHTRED, "[Fisher]:{FFFFFF} /fishing, /sellfish, /myfishes.");
	}
	return 1;
}

CMD:animhelp(playerid, params[])
{
		new string [2048];
        strcat(string, "{FF6347}[Animation]:{FFFFFF} /dance, /handsup, /bat, /slap, /bar, /wash, /lay, /workout, /blowjob, /bomb.\n");
        strcat(string, "{FF6347}[Animation]:{FFFFFF} /carry, /crack, /sleep, /jump, /deal, /dancing, /eating, /puke, /gsign, /chat.\n");
        strcat(string, "{FF6347}[Animation]:{FFFFFF} /goggles, /spray, /throw, /swipe, /office, /kiss, /knife, /cpr, /scratch, /point.\n");
        strcat(string, "{FF6347}[Animation]:{FFFFFF} /cheer, /wave, /strip, /smoke, /reload, /taichi, /wank, /cower, /skate, /drunk.\n");
        strcat(string, "{FF6347}[Animation]:{FFFFFF} /cry, /tired, /sit, /crossarms, /fucku, /walk, /piss, /lean, /relax, /fall\n");
        strcat(string, "{FF6347}[Animation]:{FFFFFF} /smoke, /what, /injured, /stopanim.\n");
        ShowPlayerDialog(playerid, 998, DIALOG_STYLE_MSGBOX, "Animations", string, "Accept", "");
        return 1;
}

CMD:injured(playerid, params[])
{
	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    switch(strval(params))
    {
        case 1: ApplyAnimationEx(playerid, "SWAT", "gnstwall_injurd", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "SWEET", "Sweet_injuredloop", 4.1, 1, 0, 0, 0, 0);
        default: SendSyntaxMessage(playerid, "/injured [1-2]");
    }
    return 1;
}

CMD:smoke(playerid, params[])
{
	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    switch(strval(params))
    {
        case 1: ApplyAnimationEx(playerid, "SMOKING", "M_smklean_loop", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "SMOKING", "M_smk_in", 4.1, 1, 0, 0, 0, 0);
        default: SendSyntaxMessage(playerid, "/smoke [1-2]");
    }

    return 1;
}

CMD:what(playerid, params[])
{
	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    ApplyAnimationEx(playerid, "RIOT", "RIOT_ANGRY", 4.1, 0, 0, 0, 0, 0);
    return 1;
}

CMD:debug_changepass(playerid, params[])
{
	Dialog_Show(playerid, ChangePassword, DIALOG_STYLE_PASSWORD, "Change Password", "Please enter your existing password below:", "Submit", "Cancel");
	return 1;
}

CMD:lastlogged(playerid, params[])
{
	if (isnull(params) || strlen(params) > 24)
	    return SendSyntaxMessage(playerid, "/lastlogged [username] (username not character name. Use /username to get a character's username)");

	static
	    query[128];

	format(query, sizeof(query), "SELECT `LoginDate` FROM `accounts` WHERE `Username` = '%s'", SQL_ReturnEscaped(params));
	mysql_tquery(g_iHandle, query, "OnLoginDate", "ds", playerid, params);

 	return 1;
}

CMD:seatbelt(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid) == 0)
	{
        SendErrorMessage(playerid, "You are not in any vehicle.");
        return 1;
    }
    if(IsPlayerInAnyVehicle(playerid) && Seatbelt[playerid] == 0)
	{
        Seatbelt[playerid] = 1;
        if(IsABike(GetPlayerVehicleID(playerid)))
		{
			new string[128];
			format(string, sizeof(string), "* %s puts a helmet on.", ReturnName(playerid, 2));
			SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
			SendClientMessageEx(playerid, COLOR_PURPLE, string);
            SendClientMessageEx(playerid, COLOR_WHITE, "You have put on your helmet.");
            ShowPlayerFooter(playerid, "You have ~g~equipped~w~ your helmet!");
            SetPlayerAttachedObject(playerid,3 , 18977, 2, 0.07, 0.017, 0, 88, 75, 0);
        }
        else
		{
			new string[128];
			format(string, sizeof(string), "* %s puts their seatbelt on.", ReturnName(playerid, 2));
			SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
			SendClientMessageEx(playerid, COLOR_PURPLE, string);
            SendClientMessageEx(playerid, COLOR_WHITE, "You have put on your seatbelt.");
            ShowPlayerFooter(playerid, "You have ~g~buckled~w~ your seatbelt!");
        }

    }
    else if(IsPlayerInAnyVehicle(playerid) && Seatbelt[playerid] == 1)
	{
        Seatbelt[playerid] = 0;
        if(IsABike(GetPlayerVehicleID(playerid)))
		{
			new string[128];
			format(string, sizeof(string), "* %s takes their helmet off.", ReturnName(playerid, 2));
			SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
            SendClientMessageEx(playerid, COLOR_WHITE, "You have taken off your helmet.");
            ShowPlayerFooter(playerid, "You have ~r~removed~w~ your helmet!");
            RemovePlayerAttachedObject(playerid, 3);
        }
        else
		{
			new string[128];
			format(string, sizeof(string), "* %s takes their seatbelt off.", ReturnName(playerid, 2));
			SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
            SendClientMessageEx(playerid, COLOR_WHITE, "You have taken off your seatbelt.");
            ShowPlayerFooter(playerid, "You have ~r~removed~w~ your seatbelt!");
        }
    }
    return 1;
}

CMD:sb(playerid, params[]) return cmd_seatbelt(playerid, params);

CMD:engine(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsEngineVehicle(vehicleid))
		return SendErrorMessage(playerid, "You are not in any vehicle.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "You can't do this as you're not the driver.");

	new id = Car_GetID(vehicleid);

	if (CoreVehicles[vehicleid][vehFuel] < 1)
	    return SendErrorMessage(playerid, "The fuel tank is empty.");

	if (ReturnVehicleHealth(vehicleid) <= 300)
	    return SendErrorMessage(playerid, "This vehicle is totalled and can't be started.");

	if (id == -1)
	{
		switch (GetEngineStatus(vehicleid))
		{
			case false:
			{
				new string[128];
				SetEngineStatus(vehicleid, true);
				ShowPlayerFooter(playerid, "You have ~g~started~w~ the engine!");
				format(string, sizeof(string), "* %s turns on their vehicle's engine.", ReturnName(playerid, 2));
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
				SendClientMessageEx(playerid, COLOR_PURPLE, string);
			}
			case true:
			{
				new string[128];
				SetEngineStatus(vehicleid, false);
				ShowPlayerFooter(playerid, "You have ~r~stopped~w~ the engine!");
				format(string, sizeof(string), "* %s turns off their vehicle's engine.", ReturnName(playerid, 2));
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
				SendClientMessageEx(playerid, COLOR_PURPLE, string);
			}
		}
		return 1;
	}

	if (Car_IsOwner(playerid, id) || CarData[id][carFaction] == GetFactionType(playerid) && CarData[id][carFaction] != 0 || PlayerData[playerid][pJob] == CarData[id][carJob] && CarData[id][carJob] != 0)
	{
		switch (GetEngineStatus(vehicleid))
		{
			case false:
			{
				new string[128];
				SetEngineStatus(vehicleid, true);
				ShowPlayerFooter(playerid, "You have ~g~started~w~ the engine!");
				format(string, sizeof(string), "* %s turns on their vehicle's engine.", ReturnName(playerid, 2));
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
				SendClientMessageEx(playerid, COLOR_PURPLE, string);
			}
			case true:
			{
				new string[128];
				SetEngineStatus(vehicleid, false);
				ShowPlayerFooter(playerid, "You have ~r~stopped~w~ the engine!");
				format(string, sizeof(string), "* %s turns off their vehicle's engine.", ReturnName(playerid, 2));
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
				SendClientMessageEx(playerid, COLOR_PURPLE, string);
			}
		}
	}
	else return SendErrorMessage(playerid, "You do not have the keys to this vehicle.");
	return 1;
}

forward Hotwired(playerid, vehicleid);
public Hotwired(playerid, vehicleid)
{
	SetEngineStatus(vehicleid, true);
	ShowPlayerFooter(playerid, "You have ~g~started~w~ the engine!");
	new bubstring[128];
	format(bubstring, sizeof(bubstring), "* %s has successfully hotwired the vehicle.", ReturnName(playerid, 2));
	SendClientMessageEx(playerid, COLOR_PURPLE, "* %s has successfully hotwired the vehicle.", ReturnName(playerid, 2));
	SetPlayerChatBubble(playerid, bubstring, COLOR_PURPLE, 30.0, 3000);
	TogglePlayerControllable(playerid, 1);
	return 1;
}

CMD:hotwire(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
    if (!IsEngineVehicle(vehicleid))
        return SendErrorMessage(playerid, "You are not in any vehicle.");

    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        return SendErrorMessage(playerid, "You can't do this as you're not the driver.");

  	new id = Car_GetID(vehicleid);

	if(Car_IsOwner(playerid, id))
        return SendErrorMessage(playerid, "You own this vehicle, you can't hotwire it!");

    if (CoreVehicles[vehicleid][vehFuel] < 1)
        return SendErrorMessage(playerid, "The fuel tank is empty.");

    if (!Inventory_HasItem(playerid, "Screwdriver"))
        return SendErrorMessage(playerid, "You do not have a screwdriver.");

    if (!GetEngineStatus(vehicleid))
    {
		SetTimerEx("Hotwired", 10000, false, "ii", playerid, vehicleid);
		new bubstring[128];
		format(bubstring, sizeof(bubstring), "* %s is hotwiring the vehicle.", ReturnName(playerid, 2));
		SetPlayerChatBubble(playerid, bubstring, COLOR_PURPLE, 30.0, 10000);
		TogglePlayerControllable(playerid, 0);
        SendNearbyMessage(playerid, 80.0, COLOR_PURPLE, "* You would hear a nearby vehicle's alarm.");
		SendClientMessageEx(playerid, COLOR_PURPLE, "* %s begins to hotwire the vehicle.", ReturnName(playerid, 2));
    }
    else
    {
        SendErrorMessage(playerid, "The engine is already on.");
    }
    return 1;
}

CMD:lights(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsEngineVehicle(vehicleid))
		return SendErrorMessage(playerid, "You are not in any vehicle.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "You can't do this as you're not the driver.");

	switch (GetLightStatus(vehicleid))
	{
	    case false:
	    {
	        SetLightStatus(vehicleid, true);
	        ShowPlayerFooter(playerid, "You have ~g~turned on~w~ the lights!");
		}
		case true:
		{
		    SetLightStatus(vehicleid, false);
		    ShowPlayerFooter(playerid, "You have ~r~turned off~w~ the lights!");
		}
	}
	return 1;
}

CMD:hood(playerid, params[])
{
	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
	    if (!IsDoorVehicle(i))
	        return SendErrorMessage(playerid, "This vehicle doesn't have a hood.");

	    if (!GetHoodStatus(i))
		{
	        SetHoodStatus(i, true);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has opened the hood of the vehicle.", ReturnName(playerid, 2));
	        ShowPlayerFooter(playerid, "You have ~g~opened~w~ the hood!");
		}
		else
		{
			SetHoodStatus(i, false);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has closed the hood of the vehicle.", ReturnName(playerid, 2));
	        ShowPlayerFooter(playerid, "You have ~g~closed~w~ the hood!");
		}
	    return 1;
	}
	SendErrorMessage(playerid, "You are not in range of any vehicle.");
	return 1;
}

CMD:windows(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsWindowedVehicle(vehicleid))
		return SendErrorMessage(playerid, "You are not in any vehicle with windows.");

	switch (CoreVehicles[vehicleid][vehWindowsDown])
	{
	    case false:
	    {
	        CoreVehicles[vehicleid][vehWindowsDown] = true;
	        ShowPlayerFooter(playerid, "You have ~g~rolled down~w~ the windows!");
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s presses a button and rolls down the windows.", ReturnName(playerid, 2));
			SetVehicleParamsCarWindows(vehicleid, 0, 0, 0, 0);
		}
		case true:
		{
		    CoreVehicles[vehicleid][vehWindowsDown] = false;
		    ShowPlayerFooter(playerid, "You have ~r~rolled up~w~ the windows!");
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s presses a button and rolls up the windows.", ReturnName(playerid, 2));
			SetVehicleParamsCarWindows(vehicleid, 1, 1, 1, 1);
		}
	}
	return 1;
}

CMD:window(playerid,params[])
{
		if(GetPlayerState(playerid) != 2)
		return SendErrorMessage(playerid, "You are not in any vehicle with windows.");
        if(sscanf(params, "d", params[0]))
        {
                SendClientMessage(playerid,-1,"/window [1-2-3-4]");
                SendClientMessage(playerid,-1,"1 - Driver window | 2 - Passenger window | 3 - Rear-left window | 4 - Rear-right window");
                return 1;
        }
        if(params[0] > 4 || params[0] < 1) return SendClientMessage(playerid,-1,"1 - Driver window | 2 - Passenger window | 3 - Rear-left window | 4 - Rear-right window");
        new driver, passenger, backleft, backright;
        GetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), driver, passenger, backleft, backright);
        switch(params[0])
        {
            case 1: driver = !driver ? (1) : (0);
            case 2: passenger = !passenger ? (1) : (0);
            case 3: backleft = !backleft ? (1) : (0);
            case 4: backright = !backright ? (1) : (0);
        }
		switch(params[0])
		{
			case 1:
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s presses a button and rolls the front-left window.", ReturnName(playerid, 2));
	        case 2:
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s presses a button and rolls the front-right window.", ReturnName(playerid, 2));
	        case 3:
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s presses a button and rolls the rear-left window.", ReturnName(playerid, 2));
	        case 4:
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s presses a button and rolls the rear-right window.", ReturnName(playerid, 2));
		}
		if(driver == 0 || passenger == 0 || backleft == 0 || backright == 0) CoreVehicles[GetPlayerVehicleID(playerid)][vehWindowsDown] = true;
		else CoreVehicles[GetPlayerVehicleID(playerid)][vehWindowsDown] = false;
        SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), driver, passenger, backleft, backright);
        return 1;
}

CMD:setaccent(playerid, params[])
{
	static
		userid,
	    accent;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ud", userid, accent))
	{
		SendSyntaxMessage(playerid, "/setaccent [playerid/name] [Accent]");
		SendClientMessageEx(playerid, COLOR_PURPLE, "[ACCENTS]: {FFFFFF}0: None | 1: American | 2: Russian | 3: British | 4: Italian");
		SendClientMessageEx(playerid, COLOR_PURPLE, "[ACCENTS]: {FFFFFF}5: Indian | 6: African | 7: Australian | 8: Chinese 9: Mexican");
		return 1;
	}

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (accent < 0 || accent > 9)
	    return SendErrorMessage(playerid, "Invalid accent number. Accent's range from 1 to 9.");

	PlayerData[userid][pAccent] = accent;
	SendAdminAction(userid, "%s has set your accent to [%s].", ReturnName(playerid, 0), GetAccent(userid));
	SendAdminAction(playerid, "You have changed %s's accent to [%s].", ReturnName(playerid, 0), GetAccent(userid));
	return 1;
}

CMD:myaccent(playerid, params[])
{
	static
		userid,
	    accent;

	if (sscanf(params, "d", accent))
	{
		SendSyntaxMessage(playerid, "/myaccent [Accent]");
		SendClientMessageEx(playerid, COLOR_PURPLE, "[ACCENTS]: {FFFFFF}0: None | 1: American | 2: Russian | 3: British | 4: Italian");
		SendClientMessageEx(playerid, COLOR_PURPLE, "[ACCENTS]: {FFFFFF}5: Indian | 6: African | 7: Australian | 8: Chinese 9: Mexican");
		return 1;
	}

	if (accent == PlayerData[playerid][pAccent])
	    return SendErrorMessage(playerid, "You already have this accent.");

	if (accent < 0 || accent > 9)
	    return SendErrorMessage(playerid, "Invalid accent number. Accent's range from 1 to 9.");

	PlayerData[playerid][pAccent] = accent;
	SendServerMessage(playerid, "You have changed your accent to [%s].", GetAccent(userid));
	return 1;
}

//	format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `chara` = '%s'", SQL_ReturnEscaped(newname));
//	mysql_tquery(g_iHandle, query, "OnNameChange", "dds", playerid, userid, newname);


CMD:omakeadmin(playerid, params[])
{
	static
		charname[40],
	    level,
		rows,
		query[200];


	new Cache:result;

	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "sd", charname, level))
		return SendSyntaxMessage(playerid, "/omakeadmin [master account] [level]");

	if (level < 0 || level > 8)
	    return SendErrorMessage(playerid, "Invalid admin level. Levels range from 0 to 8.");

	format(query, sizeof(query), "SELECT * FROM `accounts` WHERE `username` = '%s'", charname);
	result = mysql_query(g_iHandle, query);
	rows = cache_get_row_count();
 	if(rows != 1) return SendErrorMessage(playerid, "Master account does not exist. (Use ''/username'' to help you find their master account)");

	format(query, sizeof(query), "UPDATE `accounts` SET `Admin` = '%d' WHERE `username` = '%s'", level, charname);
	result = mysql_query(g_iHandle, query);

	SendAdminAction(playerid, "You have set %s's admin rank to: %d (database only, if they are online will have no effect)", charname, level);
	cache_delete(result);
	return 1;
}

CMD:omakehelper(playerid, params[])
{
	static
		charname[40],
	    level,
		rows,
		query[200];


	new Cache:result;

	if (PlayerData[playerid][pAdmin] < 4 && PlayerData[playerid][pHelper] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "s[40]d", charname, level))
		return SendSyntaxMessage(playerid, "/omakehelper [master account] [level] (database only, if they are online will have no effect)");

	if (level < 0 || level > 3)
	    return SendErrorMessage(playerid, "Invalid helper level. Levels range from 0 to 3.");

	format(query, sizeof(query), "SELECT * FROM `accounts` WHERE `username` = '%s'", charname);
	result = mysql_query(g_iHandle, query);
	rows = cache_get_row_count();
 	if(rows != 1) return SendErrorMessage(playerid, "Master account does not exist. (Use ''/username'' to help you find their master account)");

	format(query, sizeof(query), "UPDATE `accounts` SET `Helper` = '%d' WHERE `username` = '%s'", level, charname);
	result = mysql_query(g_iHandle, query);

	SendHelperAlert(COLOR_NEWGREEN, "[Helper] %s has offline set %s's helper rank to: %d", ReturnName(playerid, 0), charname, level);
	cache_delete(result);
	return 1;
}

CMD:stretcher(playerid) // To spawn a stretcher inside an ambulance
{
	new Float:X, Float:Y, Float:Z, msg[100];

	if(Stretcher[playerid] != -1) GetObjectPos(Stretcher[playerid], X, Y, Z);
	if(Loaded2Stretcher[playerid] == true) return SendErrorMessage(playerid, "You can't do that while being on a stretcher.");

	new vehid = GetNearestVehicle(playerid, 10.0);
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "You cannot use this command while inside a vehicle.");
	if(GetVehicleModel(vehid) != 416) return SendClientMessage(playerid, -1, "You are not near an Ambulance. (or it's not the closest vehicle to you)");
	new Float:vx, Float:vy, Float:vz, Float:va;
	GetVehiclePos(vehid, vx, vy, vz);
	GetVehicleZAngle(vehid, va);

	va = va < 180.0 ? va + 180.0 : va - 180.0;
	vx += floatsin(-va, degrees) * 4.5;
	vy += floatcos(-va, degrees) * 4.5;

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, vx, vy, vz)) return SendClientMessageEx(playerid, -1, "You're not near the back of an Ambulance.");

	if(StretcherSpawned[playerid] == false && UsingStretcher[playerid] == false)
	{
		TogglePlayerControllable(playerid, 0);
		GetVehicleZAngle(vehid, va);
		SetPlayerFacingAngle(playerid, va+180.0);
		SetTimerEx("SpawnStretcher", 1000, false, "i", playerid);
		GameTextForPlayer(playerid, "Stretcher pulled out", 200, 1);
		GetPlayerName(playerid, msg, sizeof(msg));
		format(msg, sizeof(msg), " * %s pulls a stretcher out from the back of the ambulance.", msg);
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, msg);
		return 1;

	}
	else if(UsingStretcher[playerid] == false && StretcherSpawned[playerid] == true && StretcherLoaded[playerid] == true)
	{
		DestroyObject(Stretcher[playerid]);
		if(IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) == 0) return SendErrorMessage(playerid, "The stretcher is too far from you.");

		PutPlayerInVehicle(PatientID[playerid], vehid, 3);
		TogglePlayerControllable(PatientID[playerid], 1);
		StretcherLoaded[playerid] = false; // sets all the variables to false
		UsingStretcher[playerid] = false;
		GameTextForPlayer(PatientID[playerid], "You have been loaded into the ambulance", 200, 1);
		MedicID[PatientID[playerid]] = -1;
		MedicID[playerid] = -1;
		Stretcher[playerid] = -1;
		Loaded2Stretcher[PatientID[playerid]] = false;
		Loaded2Stretcher[playerid] = false;
		PatientID[playerid] = -1;
		StretcherSpawned[playerid] = false;
		GameTextForPlayer(playerid, "Stretcher and patient loaded into Ambulance", 200, 1);
		format(msg, sizeof(msg), " * %s put the stretcher and the patient in the ambulance.", msg);
		SendNearbyMessage(playerid, 10.00, 0xC2A2DAAA, msg);
		return 1;
	}
	else if(UsingStretcher[playerid] == false && StretcherSpawned[playerid] == true && StretcherLoaded[playerid] == false)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) == 0) return SendErrorMessage(playerid, "The stretcher is too far from you.");
		DestroyObject(Stretcher[playerid]);
		GameTextForPlayer(playerid, "Stretcher loaded into Ambulance", 200, 1);
		StretcherLoaded[playerid] = false;
		UsingStretcher[playerid] = false;
		Stretcher[playerid] = -1;
		Loaded2Stretcher[playerid] = false;
		StretcherSpawned[playerid] = false;
	}
	else return SendErrorMessage(playerid, "Use /dropstretcher first.");
	return 1;
}

forward SpawnStretcher(playerid);
public SpawnStretcher(playerid) // USED FOR: Spawning a stretcher after a Timed delay
{
	new Float:X, Float:Y, Float:Z;
	//new Float:R;
	GetPlayerPos(playerid, X, Y, Z);
	//GetPlayerFacingAngle(playerid, R);
	//SetPlayerFacingAngle(playerid, R + 180); // To face the player opposite from the Ambulance
	Stretcher[playerid] = CreateObject(1997, X, Y, Z, 0, 0, 0, 75.0); // Creating an object to attach
	AttachObjectToPlayer(Stretcher[playerid], playerid, 0.00, 1.40, -0.95, 0.0, 0.0, 180.0);
	UsingStretcher[playerid] = true; // Setting variables that I can check later
	StretcherSpawned[playerid] = true;
	TogglePlayerControllable(playerid, 1);
	return 1;
}

CMD:dropstretcher(playerid) // to stop controlling a stretcher
{
    new Float:X, Float:Y, Float:Z, Float:R;
    if(Loaded2Stretcher[playerid] == true) return SendErrorMessage(playerid, "You can't do that while being on a stretcher.");
   	if(UsingStretcher[playerid] == false) return SendErrorMessage(playerid, "You are not using a stretcher.");
    GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, R);
	DestroyObject(Stretcher[playerid]); // Destroys the attached object
	if(StretcherLoaded[playerid] == false)
	{
	    GetXYInFrontOfPlayer(playerid, X, Y, 1.40);
		Stretcher[playerid] = CreateObject(1997, X, Y, Z - 0.95, 0, 0, R+180.0, 75.0); // Creates a new object on the last known co-ords.
        UsingStretcher[playerid] = false; // Sets a condition that the player is not pushing the stretcher
	}
	else // If there's a patient on it and it's being pulled, not pushed.
	{
		GetXYInFrontOfPlayer(playerid, X, Y, 1.40);
	    //GetXYBehindThePlayer(playerid, X, Y, 1.40);
	    Stretcher[playerid] = CreateObject(1997, X, Y, Z - 0.95, 0, 0, R+180.0, 75.0);

	    UsingStretcher[playerid] = false; // Sets a condition that the player is not pushing the stretcher

		TogglePlayerControllable(PatientID[playerid], 1);
		ClearAnimations(PatientID[playerid]);
		GetXYInFrontOfPlayer(playerid, X, Y, 1.65);
		SetPlayerPos(PatientID[playerid], X, Y, Z + 0.70);
		SetPlayerFacingAngle(PatientID[playerid], R);
		SetCameraBehindPlayer(PatientID[playerid]);
		ApplyAnimationEx(PatientID[playerid], "BEACH", "bather", 4.1, 1, 0, 0, 1, 0, 1);
	}
	return 1;
}

CMD:pickupstretcher(playerid)
{
    new Float:X, Float:Y, Float:Z;
    if(Loaded2Stretcher[playerid] == true) return SendErrorMessage(playerid, "You can't do that while being on a stretcher.");
    if(UsingStretcher[playerid] == true) return SendErrorMessage(playerid, "You can't use anymore stretchers (/dropstretcher)");
    for___loop(new i=0; i < MAX_PLAYERS; i++) // to take someone else's stretcher
    {
    	GetObjectPos(Stretcher[i], X, Y, Z);
    	if(IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) && UsingStretcher[playerid] == false && UsingStretcher[i] == false)
    	{
			if(StretcherLoaded[i] == true && i != playerid) // if there's a patient on the stretchers
			{
				DestroyObject(Stretcher[i]);
        		UsingStretcher[playerid] = true; // change the variables to another player
        		StretcherSpawned[playerid] = true;
        		MedicID[PatientID[i]] = playerid;
        		PatientID[playerid] = PatientID[i];
          		PatientID[i] = -1;
        		StretcherSpawned[i] = false;
        		StretcherLoaded[i] = false;
				StretcherLoaded[playerid] = true;
          		Stretcher[i] = -1;
				Stretcher[playerid] = CreateObject(1997, X, Y, Z, 0, 0, 0, 75.0); // Creating an object to attach
        		AttachObjectToPlayer(Stretcher[playerid], playerid, 0.00, 1.40, -0.95, 0.0, 0.0, 180.0);
        		return 1;

        	}
        	else if(StretcherLoaded[i] == false && i != playerid) // if it's empty
        	{
				DestroyObject(Stretcher[i]);
	 			UsingStretcher[playerid] = true; // change the variables to another player
	 			StretcherSpawned[playerid] = true;
        		StretcherSpawned[i] = false;
        		StretcherLoaded[i] = false;
				Stretcher[playerid] = CreateObject(1997, X, Y, Z, 0, 0, 0, 75.0); // Creating an object to attach
        		AttachObjectToPlayer(Stretcher[playerid], playerid, 0.00, 1.40, -0.95, 0.0, 0.0, 180.0);
        		Stretcher[i] = -1;
        		return 1;
        	}
        	// added
        	// if you're picking up your own stretcher, not someone elses
        	else if(StretcherLoaded[i] == true && i == playerid) // if there's a patient on the stretchers
			{
        		UsingStretcher[playerid] = true;
        		AttachObjectToPlayer(Stretcher[playerid], playerid, 0.00, 1.40, -0.95, 0.0, 0.0, 180.0);
        		return 1;
        	}
        	else if(StretcherLoaded[i] == false && i == playerid) // if it's empty
        	{
	 			UsingStretcher[playerid] = true;
        		AttachObjectToPlayer(Stretcher[playerid], playerid, 0.00, 1.40, -0.95, 0.0, 0.0, 180.0);
        		return 1;
        	}
    	}
    }
    return SendErrorMessage(playerid, "You are not near a stretcher.");
}

CMD:loadstretcher(playerid, params[])
{
	new id, Float:X, Float:Y, Float:Z, msg[100], msg2[30];
	if(Loaded2Stretcher[playerid] == true) return SendErrorMessage(playerid, "You can't do that while being on a stretcher");
	if(sscanf(params, "i", id)) return SendSyntaxMessage(playerid, "/loadstretcher [user/id]");
	if(id == playerid) return SendErrorMessage(playerid, "You can't load yourself onto the stretcher");
	if(StretcherLoaded[playerid] == true) return SendErrorMessage(playerid, "You already have a person loaded onto the strether");
	if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "That player is not connected");
	if(UsingStretcher[playerid] == false || StretcherSpawned[playerid] == false) return SendErrorMessage(playerid, "You don't have a stretcher, or you are not using it");

	GetPlayerPos(id, X, Y, Z);
	if(IsPlayerInRangeOfPoint(playerid, 7.0, X, Y, Z))
    {
        if(IsPlayerInAnyVehicle(id) == 1) return SendErrorMessage(playerid, "That player is in a vehicle");
        StretcherLoaded[playerid] = true;
        MedicID[id] = playerid;
		PatientID[playerid] = id;
		TogglePlayerControllable(id, 0);
		Loaded2Stretcher[id] = true;

		//DestroyObject(Stretcher[playerid]);
		GetPlayerPos(playerid, X, Y, Z);
		//Stretcher[playerid] = CreateObject(1997, X, Y, Z - 0.50, 0, 0, 0, 75.0);
        //AttachObjectToPlayer(Stretcher[playerid], playerid, 0.00, -1.70, -0.50, 0.0, 0.0, 0.0);
        GetPlayerName(playerid, msg, sizeof(msg));
        format(msg, sizeof(msg), " * %s put %s on the stretcher.", msg, GetPlayerName(PatientID[playerid], msg2, sizeof(msg2)));
   		SendNearbyMessage(playerid, 10.0, 0xC2A2DAAA, msg);
        return 1;
    }
    else return SendErrorMessage(playerid, "That player is too far to be loaded onto the stretcher");
}

CMD:removestretcher(playerid)
{
	new Float:X, Float:Y, Float:Z;
	if(Loaded2Stretcher[playerid] == true) return SendErrorMessage(playerid, "Can't do that while being on a stretcher");
    if(UsingStretcher[playerid] == true) return SendErrorMessage(playerid, "You can't remove a stretcher while using it (/dropstretcher)");
    for___loop(new i=0; i < MAX_PLAYERS; i++) // to take someone else's stretcher
    {
    	GetObjectPos(Stretcher[i], X, Y, Z);
    	if(StretcherLoaded[i] == true) return SendErrorMessage(playerid, "You can't remove a stretcher with a patient on it (/unloadstretcher)");
    	if(IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z) && UsingStretcher[playerid] == false && UsingStretcher[i] == false)
    	{
			DestroyObject(Stretcher[i]);
			Stretcher[i] = -1;
			StretcherSpawned[i] = false;
			GameTextForPlayer(playerid, "Stretchers removed", 200, 1);
			return 1;
		}
	}
	return 1;
}

CMD:unloadstretcher(playerid)
{
	new Float:X, Float:Y, Float:Z, Float:R, msg[100], msg2[30];
	if(Loaded2Stretcher[playerid] == true) return SendErrorMessage(playerid, "You can't do that while being on a stretcher");
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, R);
	GetXYInFrontOfPlayer(playerid, X, Y, 3);
    SetPlayerPos(PatientID[playerid], X, Y, Z + 1.80);
    SetPlayerFacingAngle(PatientID[playerid], R);
    TogglePlayerControllable(PatientID[playerid], 1);
    GetPlayerName(PatientID[playerid], msg, sizeof(msg));
    format(msg, sizeof(msg), "You have removed %s from the stretcher.", msg);
    SendClientMessage(playerid, 0xFFFFFF, msg);
    GetPlayerName(playerid, msg, sizeof(msg));
    format(msg, sizeof(msg), "You have been removed from the stretcher by %s.", msg);
    SendClientMessage(PatientID[playerid], 0xFFFFFF, msg);
    format(msg, sizeof(msg), " * %s removed %s from the stretcher.", msg, GetPlayerName(PatientID[playerid], msg2, sizeof(msg2)));
   	SendNearbyMessage(playerid, 10.0, 0xC2A2DAAA, msg);
	Loaded2Stretcher[PatientID[playerid]] = false;
	StretcherLoaded[playerid] = false;
	MedicID[PatientID[playerid]] = -1;
	PatientID[playerid] = -1;
	return 1;
}

CMD:getoffstretcher(playerid)
{
	if(Loaded2Stretcher[playerid] == true)
	{
		new Float:X, Float:Y, Float:Z, Float:R, msg[100];
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, R);
		GetXYInFrontOfPlayer(playerid, X, Y, 3);
    	SetPlayerPos(playerid, X, Y, Z + 1.80);
    	SetPlayerFacingAngle(PatientID[playerid], R);
    	TogglePlayerControllable(playerid, 1);

    	GetPlayerName(playerid, msg, sizeof(msg));
    	format(msg, sizeof(msg), " * %s got off from the stretcher.", msg);
    	SendNearbyMessage(playerid, 10.0, 0xC2A2DAAA, msg);

    	SendClientMessage(playerid, 0xFFFFFF, "You got off from the stretcher.");

		Loaded2Stretcher[playerid] = false;
		StretcherLoaded[MedicID[playerid]] = false;
		PatientID[MedicID[playerid]] = -1;
		MedicID[playerid] = -1;
		return 1;
	}
	else return SendErrorMessage(playerid, "You are not on a stretcher.");

}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);
	if (GetPlayerVehicleID(playerid))
	{
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

stock GetXYBehindThePlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);
	if (GetPlayerVehicleID(playerid))
	{
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x -= (distance * floatsin(-a, degrees));
	y -= (distance * floatcos(-a, degrees));
}

stock VehicleStop(playerid)
{
   new Float:x, Float:y, Float:z;
   GetPlayerPos(playerid, x, y, z);
   SetPlayerPos(playerid,x,y,z);
}


CMD:makeadmin(playerid, params[])
{
	static
		userid,
	    level;

	if(PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if(sscanf(params, "ud", userid, level))
		return SendSyntaxMessage(playerid, "/makeadmin [playerid/name] [level]");

	if(userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if(level < 0 || level > 8)
	    return SendErrorMessage(playerid, "Invalid admin level. Levels range from 0 to 8.");

    if(level > PlayerData[userid][pAdmin])
	{
	    SendAdminAction(playerid, "You have promoted %s. Their new admin level is [%d].", ReturnName(userid, 0), level);
	    SendAdminAction(userid, "%s has promoted you. Your new admin level is [%d].", ReturnName(playerid, 0), level);
	}
	else
	{
	    SendAdminAction(playerid, "You have demoted %s. Their new admin level is [%d].", ReturnName(userid, 0), level);
	    SendAdminAction(userid, "%s has demoted you. Your new admin level is [%d].", ReturnName(playerid, 0), level);
	}
	new query[128];
	format(query, sizeof(query), "UPDATE `accounts` SET Admin = %i WHERE username = %s", level, PlayerData[userid][pUsername]);
	mysql_tquery(g_iHandle, query);

	PlayerData[userid][pAdmin] = level;
	return 1;
}

CMD:makehelper(playerid, params[])
{
	static
		userid,
	    level;

	if (PlayerData[playerid][pAdmin] < 4 && PlayerData[playerid][pHelper] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ud", userid, level))
		return SendSyntaxMessage(playerid, "/makehelper [playerid/name] [level]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (level < 0 || level > 3)
	    return SendErrorMessage(playerid, "Invalid helper level. Levels range from 0 to 3.");

    if (level > PlayerData[userid][pAdmin])
	{
	    SendAdminAction(playerid, "You have promoted %s. Their new helper level is [%d].", ReturnName(userid, 0), level);
	    SendAdminAction(userid, "%s has promoted you. Your new helper level is [%d].", ReturnName(playerid, 0), level);
	}
	else
	{
	    SendAdminAction(playerid, "You have demoted %s. Their new helper level is [%d].", ReturnName(userid, 0), level);
	    SendAdminAction(userid, "%s has demoted you. Your helper level is [%d].", ReturnName(playerid, 0), level);
	}

	new query[128];
	format(query, sizeof(query), "UPDATE `accounts` SET Helper = %i WHERE username = %s", level, PlayerData[userid][pUsername]);
	mysql_tquery(g_iHandle, query);

	PlayerData[userid][pHelper] = level;
	return 1;
}

CMD:setdonator(playerid, params[])
{
	static
		userid,
	    level;

	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ud", userid, level))
		return SendSyntaxMessage(playerid, "/setdonator [playerid/name] [level]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (level < 0 || level > 3)
	    return SendErrorMessage(playerid, "Invalid donator level. Levels range from 0 to 3.");

    if (level > PlayerData[userid][pDonator])
	{
	    SendAdminAction(playerid, "You have set %s's donator level to [%d].", ReturnName(userid, 0), level);
	    SendAdminAction(userid, "%s has set your donator level to [%d].", ReturnName(playerid, 0), level);
	}
	else
	{
	    SendAdminAction(playerid, "You have set %s's donator level to [%d].", ReturnName(userid, 0), level);
     	SendAdminAction(userid, "%s has set your donator level to [%d].", ReturnName(playerid, 0), level);
	}
	PlayerData[userid][pDonator] = level;
	return 1;
}

CMD:a(playerid, params[])
{
	if (!PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "You are not an administrator.");

    if (!PlayerData[playerid][pForumName])
	    return SendErrorMessage(playerid, "You don't have an admin name assigned. Use /settings to assign one.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/a [admin text]");

    SendAdminAlert(COLOR_ANTICHEAT, "[Admin] %s %s (%i):{FFFFFF} %s", AdminRankName(playerid), ReturnName(playerid, 0), playerid, params);
	return 1;
}

CMD:staff(playerid, params[])
{
	if (!PlayerData[playerid][pAdmin] && !PlayerData[playerid][pHelper])
	    return SendErrorMessage(playerid, "You are not authorized to use this command.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/staff [staff team chat]");

    SendHelperAlert(COLOR_NEWGREEN, "[Staff] %s %s (%i):{FFFFFF} %s", HelperRankName(playerid), ReturnName(playerid, 0), playerid, params);
	return 1;
}

CMD:aduty(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (!PlayerData[playerid][pAdminDuty])
	{
		SetPlayerColor(playerid, 0xC50E0FFF);
 		SetPlayerHealth(playerid, 999999);
		PlayerData[playerid][pAdminDuty] = 1;
		SetPlayerHealth(playerid, 9999);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s %s is now on admin duty. ", AdminRankName(playerid), ReturnName(playerid, 0), params);
	}
	else
	{
	    SetPlayerColor(playerid, DEFAULT_COLOR);
        SetPlayerHealth(playerid, 99);
		PlayerData[playerid][pAdminDuty] = 0;
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s %s is no longer on admin duty. ", AdminRankName(playerid), ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:hhelp(playerid, params[])
{
    if (PlayerData[playerid][pHelper] >= 1)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "[Helper]: {FFFFFF}/staff, /asshelp, /assist, /assistances, /ac, /endsupport, /goto, /warn, /send");
	}
	return 1;
}

CMD:ahelp(playerid, params[])
{
	if (!PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "You don't have the authorization to use this command.");

	if (PlayerData[playerid][pAdmin] >= 1)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[Moderator]:{FFFFFF} /a, /reports, /spectate, /ajail, /release, /kick, /mute, /unmute, /freeze, /unfreeze, /atalk, /warn, /alog");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[Moderator]:{FFFFFF} /aduty, /ban, /setskin, /goto, /aremovecall, /ar, /dr, /aslap, /acceptname, /declinename, /vw, /disarm.");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[Moderator]:{FFFFFF} /jetpack, /resf, /aojail, /asshelp, /sethealth, /flipcar, /staff");
	}
	if (PlayerData[playerid][pAdmin] >= 2)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[Trial Admin]:{FFFFFF} /respawn, /checkstats, /aproperties,  /shooter, /gethere, /setinterior, /setvw.");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[Trial Admin]:{FFFFFF} /sendto, /clearchat, /gotopos, /refill, /revive, /aslap, /x /y /z.");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[Trial Admin]:{FFFFFF} /masked, /listguns, /respawncar, /respawncars, /respawnnear, /healall, /getcar, /gotocar.");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Trial Admin]:{FFFFFF} /send, /setaccent, /clearsupports");
 	}
	if (PlayerData[playerid][pAdmin] >= 3)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[Admin]:{FFFFFF} /unban, /blacklist, /getip, /togooc, /setarmor, /arepair, /listwarns, /setfstyle, /removefstyle, /setweather");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[Admin]:{FFFFFF} /entercar, /veh, /destroyveh, /near, /healall, /checknumber, /anos, /listcars.");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[Admin]:{FFFFFF} /atune, /acolorcar, /apaintjob, /placefire, /killfire, /randomfire, /adestroybox, /baninfo, /givegun, /whois");
	}
	if (PlayerData[playerid][pAdmin] >= 4)
	{
        SendClientMessage(playerid, COLOR_LIGHTRED, "[Senior Admin]:{FFFFFF} /setname, /asetfaction, /asetrank, /asetdiv, /setitem, /ahide, /makehelper.");
        SendClientMessage(playerid, COLOR_LIGHTRED, "[Senior Admin]:{FFFFFF} /asellhouse, /asellbiz, /setfuel, /setcarhp, /spawnitem, /agrantlicense, /arevokelicense.");
        SendClientMessage(playerid, COLOR_LIGHTRED, "[Senior Admin]:{FFFFFF} /setquantity, /destroyitem, /setplayer, /setleader, /setinventory, /givecar");
	}
	if (PlayerData[playerid][pAdmin] >= 5)
	{
        SendClientMessage(playerid, COLOR_LIGHTRED, "[Lead Admin]:{FFFFFF} /dynamichelp, /givecash, /clearinventory, /clearwarns, /saveall, /restart, /destroyplant.");
        SendClientMessage(playerid, COLOR_LIGHTRED, "[Lead Admin]:{FFFFFF} /setfuel, /setcarhp, /resetbizprices");
	}
	if (PlayerData[playerid][pAdmin] >= 6)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[Server Manager]:{FFFFFF} /makeadmin, /deleteaccount, /deletechar, /factionmod, /propertymod, /setdonator.");
	}
	if (PlayerData[playerid][pAdmin] >= 7)
	{
	    //SendClientMessage(playerid, COLOR_LIGHTRED, "[Server Leader]:{FFFFFF}.");
	}
	if(PlayerData[playerid][pFactionMod])
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Faction Management]:{FFFFFF} /createfaction, /editfaction, /destroyfaction, /setleader.");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Faction Management]:{FFFFFF} /asetrank, /asetfaction, /asetdiv.");
	}
	if (PlayerData[playerid][pPropertyMod])
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Property Manager]:{FFFFFF} /dynamichelp.");
	}
	return 1;
}

CMD:dynamichelp(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	SendClientMessage(playerid, COLOR_CLIENT, "BUSSINESS:{FFFFFF} /createbiz, /editbiz, destroybiz, /bizstate.");
    SendClientMessage(playerid, COLOR_CLIENT, "HOUSE:{FFFFFF} /createhouse, /destroyhouse, /edithouse.");
	SendClientMessage(playerid, COLOR_CLIENT, "PUMP:{FFFFFF} /createpump, /setpump, /destroypump.");
	SendClientMessage(playerid, COLOR_CLIENT, "ATM:{FFFFFF} /createatm, /editatm, /destroyatm.");
	SendClientMessage(playerid, COLOR_CLIENT, "DETECTOR:{FFFFFF} /createdetector, /destroydetector.");
	SendClientMessage(playerid, COLOR_CLIENT, "ARREST:{FFFFFF} /createarrest, /destroyarrest.");
	SendClientMessage(playerid, COLOR_CLIENT, "BILLBOARD:{FFFFFF} /createbillboard, /destroybillboard, /editbillboard.");
	SendClientMessage(playerid, COLOR_CLIENT, "ENTRANCE:{FFFFFF} /createentrance, /editentrance, /destroyentrance.");
	SendClientMessage(playerid, COLOR_CLIENT, "CRATE:{FFFFFF} /createcrate, /destroycrate.");
	SendClientMessage(playerid, COLOR_CLIENT, "GATE:{FFFFFF} /creategate, /editgate, /destroygate.");
	SendClientMessage(playerid, COLOR_CLIENT, "CAR:{FFFFFF} /createcar, /destroycar, /editcar.");
	SendClientMessage(playerid, COLOR_CLIENT, "FACTION:{FFFFFF} /createfaction, /editfaction, /destroyfaction.");
	SendClientMessage(playerid, COLOR_CLIENT, "EVENDOR:{FFFFFF} /createvendor, /destroyvendor.");
	SendClientMessage(playerid, COLOR_CLIENT, "GARBAGE:{FFFFFF} /creategarbage, /destroygarbage.");
	SendClientMessage(playerid, COLOR_CLIENT, "GUNRACK:{FFFFFF} /createrack, /editrack, /destroyrack.");
	SendClientMessage(playerid, COLOR_CLIENT, "JOB:{FFFFFF} /createjob, /destroyjob, /editjob.");
	SendClientMessage(playerid, COLOR_CLIENT, "IMPOUND:{FFFFFF} /createimpound, /destroyimpound, /editimpound.");
	SendClientMessage(playerid, COLOR_CLIENT, "GRAFFITI:{FFFFFF} /creategraffiti, /editgraffiti, /destroygraffiti.");
	SendClientMessage(playerid, COLOR_CLIENT, "SPEEDCAMERA:{FFFFFF} /createspeed, /destroyspeed.");
	SendClientMessage(playerid, COLOR_CLIENT, "FIND DYNAMIC IDS USING ''/near''.");
	return 1;
}

CMD:mywarnings(playerid, params[])
{
	new string[512];
	SendClientMessage(playerid, COLOR_ANTICHEAT, "----------WARNINGS----------");
	format(string, sizeof(string), "Warning[1]: %s", Player_Warn1(playerid));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Warning[2]: %s", Player_Warn2(playerid));
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:myclothes(playerid, params[])
{
	new string[64];
	SendClientMessage(playerid, COLOR_ORANGE, "----------Inventory Clothes----------");
	format(string, sizeof(string), "Clothes Slot [1]: %d", PlayerData[playerid][pClothes1]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Clothes Slot [2]: %d", PlayerData[playerid][pClothes2]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Clothes Slot [3]: %d", PlayerData[playerid][pClothes3]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:changeclothes(playerid, params[])
{
	static
	    type[16],
	    string[32];

 	if (sscanf(params, "s()", type))
	{
	    SendSyntaxMessage(playerid, "/changeclothes [slot] [SLOTS: 1-2-3]");
	    return 1;
	}
	if (!strcmp(type, "1", true))
	{
		if(PlayerData[playerid][pClothes1] == -1) return SendErrorMessage(playerid, "You do not have clothes in that slot. Use: /buyclothes");
		SetPlayerSkin(playerid, PlayerData[playerid][pClothes1]);
		format(string, sizeof(string), "You have changed your clothes");
    	ShowPlayerFooter(playerid, string);
    	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s changes their clothes.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "2", true))
	{
		if(PlayerData[playerid][pClothes2] == -1) return SendErrorMessage(playerid, "You do not have clothes in that slot. Use: /buyclothes");
		SetPlayerSkin(playerid, PlayerData[playerid][pClothes2]);
		format(string, sizeof(string), "You have changed your clothes");
    	ShowPlayerFooter(playerid, string);
    	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s changes their clothes.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "3", true))
	{
		if(PlayerData[playerid][pClothes3] == -1) return SendErrorMessage(playerid, "You do not have clothes in that slot. Use: /buyclothes");
		SetPlayerSkin(playerid, PlayerData[playerid][pClothes3]);
		format(string, sizeof(string), "You have changed your clothes");
    	ShowPlayerFooter(playerid, string);
    	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s changes their clothes.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:buyclothes(playerid, params[])
{
	if(PlayerData[playerid][pMoney] >= 25)
	{
		if(IsPlayerInRangeOfPoint(playerid, 18, 161.4801,-96.5368,1001.8047) || IsPlayerInRangeOfPoint(playerid, 5.0, 207.8768,-101.4137,1005.2578))
		{
  			new id, slot, string[128];
			if(sscanf(params, "dd", id, slot)) return SendClientMessage(playerid, COLOR_GREY, "Usage: /buyclothes [skin ID] [slot 1-3]");
			{
   				if(id == 280 || id == 281 || id == 282 || id == 283 || id == 288 || id == 284 || id == 285 || id == 286 || id == 287)return SendClientMessage(playerid, COLOR_GREY, "This skin is restricted, therefore you can't use it.");
				if(id == 277 || id == 278 || id == 279 || id == 274 || id == 275 || id == 276)return SendClientMessage(playerid, COLOR_GREY, "This skin is restricted, therefore you can't use it.");
				if(id == 300 || id == 301 || id == 302 || id == 306 || id == 307 || id == 308 || id == 309 || id == 310 || id == 311)return SendClientMessage(playerid, COLOR_GREY, "This skin is restricted, therefore you can't use it.");
    			if(slot == 1)PlayerData[playerid][pClothes1] = id;
			    else if(slot == 2)PlayerData[playerid][pClothes2] = id;
			    else if(slot == 3)PlayerData[playerid][pClothes3] = id;
			    else return SendClientMessage(playerid, COLOR_GREY, "Clothes slots are from 1 - .");

			    format(string, sizeof(string), "[Clothes]: You have purchased the skin ID: %d and it has cost you $25, it was stored into clothes slot %d.", id, slot);
			    SendClientMessage(playerid, COLOR_WHITE, string);
			    PlayerData[playerid][pMoney] -= 25;
			}
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You must be inside of a clothing store to purchase use this command.");
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "You must have a total of $25{FFFFFF} to purchase some clothing.");
	return 1;
}

/*
CMD:aforumname(playerid, params[])
{
	if (!PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "You are not an Administrator.");

	new name[30];
	if(sscanf(params, "s[30]", name))
		return SendSyntaxMessage(playerid, "/aforumname [forum name]");

	if(strlen(name) > 30)
		return SendClientMessage(playerid, COLOR_GREY, "You have to choose a forum name which does not exceed a length of 30 characters.");

	new msg[120];
	format(PlayerData[playerid][pForumName], 30, "%s", name);
	if(PlayerData[playerid][pAdmin] > 0)
	{
		format(msg, sizeof(msg), "[Admin]: {FFFFFF}%s %s has updated their forum name to '%s'.", AdminRankName(playerid), ReturnName(playerid, 0), PlayerData[playerid][pForumName]);
		SendAdminAlert(COLOR_LIGHTRED, msg);

	}
	return 1;
}
*/

CMD:report(playerid, params[])
{
	new reportid = -1;

	static
		userid,
		reason[128];

	if(sscanf(params, "us[128]", userid, reason))
	{
		SendSyntaxMessage(playerid, "/report [playerid] [reason]");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[Alert]:{FFFFFF} Please only use this command for valid purposes only.");
		return 1;
	}

	if(userid == INVALID_PLAYER_ID || IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(PlayerData[userid][pHelper] || PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Report staff members to management.");

	if(Report_GetCount(playerid) > 5)
	    return SendErrorMessage(playerid, "You already have 5 active reports!");

	if(PlayerData[playerid][pReportTime] >= gettime())
	    return SendErrorMessage(playerid, "You must wait %d seconds before sending another report.", PlayerData[playerid][pReportTime] - gettime());

	new reportstring[150];
	format(reportstring, sizeof(reportstring), "%s(%i) for %s", ReturnName(userid, 0), userid, reason);

	if((reportid = Report_Add(playerid, reportstring)) != -1)
	{
		ShowPlayerFooter(playerid, "Your ~g~report~w~ has been sent!");

		foreach (new i : Player)
		{
			if(PlayerData[i][pAdmin] > 0) {
				SendClientMessageEx(i, COLOR_LIGHTYELLOW, "[Report %d]: %s(%d) reports: %s", reportid, ReturnName(playerid, 0), playerid, reportstring);
			}
		}
		PlayerData[playerid][pReportTime] = gettime() + 15;
		SendServerMessage(playerid, "Your report has been sent to the staff team.");
	}
	else
	{
	    SendErrorMessage(playerid, "The report list is full. Please wait for a while.");
	}
	return 1;
}

CMD:reports(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	new
		count,
		text[128];

	SendClientMessage(playerid, COLOR_LIGHTYELLOW, "----------- REPORTS -----------");

	for (new i = 0; i != MAX_REPORTS; i ++)
	{
	    if (!ReportData[i][rExists])
			continue;

		strunpack(text, ReportData[i][rText]);
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "[Report %d] %s (%d) reported: %s", i, ReturnName(ReportData[i][rPlayer]), ReportData[i][rPlayer], text);
		count++;
	}
	if (!count)
	    return SendErrorMessage(playerid, "There are no active reports to display.");
	SendClientMessage(playerid, -1, "Use \"/ar [reportid]\" or \"/dr [reportid]\" to accept or deny a report.");
	return 1;
}

CMD:supports(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
		return SendErrorMessage(playerid, "You don't have permission to use this command.");
	{
		new count = 0, string[1024], request[128];
		for___loop(new i = 0; i < MAX_ASSISTANCES; i++)
		{
			if (!AssistanceData[i][aExists])
				continue;

			strunpack(request, AssistanceData[i][aText]);

        	format(string, sizeof(string), "%s%d: %s: %s\n", string, AssistanceData[i][aPlayer], ReturnName(AssistanceData[i][aPlayer], 0), request);
			count++;
	    }
		if(count == 0)SendClientMessage(playerid, COLOR_CLIENT, "There are no support requests waiting at the moment.");
		else Dialog_Show(playerid, AssistanceRequests, DIALOG_STYLE_LIST, "Support Requests", string, "Assist", "Close");
	}
	return 1;
}

CMD:clearsupports(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 2)
		return SendErrorMessage(playerid, "You don't have permission to use this command.");

	for___loop(new i = 0; i < MAX_ASSISTANCES; i++)
	{
		AssistanceData[i][aExists] = 0;
	}
	SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has cleared all assistance requests.", ReturnName(playerid, 0));
	return 1;
}

CMD:ar(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ar [report id] (/reports for a list)");

	new
		reportid = strval(params),
		string[64];

	if ((reportid < 0 || reportid >= MAX_REPORTS) || !ReportData[reportid][rExists])
	    return SendErrorMessage(playerid, "Invalid report ID. Reports list from 0 to %d.", MAX_REPORTS);

	format(string, sizeof(string), "You have ~g~accepted~w~ report ID: %d.", reportid);
	ShowPlayerFooter(playerid, string);

	SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) has accepted your report.", ReturnName(playerid, 0), playerid);
	SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has accepted %s's report.", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));

	Report_Remove(reportid);
	return 1;
}

CMD:dr(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/dr [report id] (/reports for a list)");

	new
		reportid = strval(params),
		string[64];

	if ((reportid < 0 || reportid >= MAX_REPORTS) || !ReportData[reportid][rExists])
	    return SendErrorMessage(playerid, "Invalid report ID. Reports list from 0 to %d.", MAX_REPORTS);

	format(string, sizeof(string), "You have ~r~denied~w~ report ID: %d.", reportid);
	ShowPlayerFooter(playerid, string);

	SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) has denied your report.", ReturnName(playerid, 0), playerid);
    SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has denied %s's report.", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));

    Report_Remove(reportid);
	return 1;
}

CMD:spectate(playerid, params[])
{
	new userid;

	if(PlayerData[playerid][pAdmin] < 1)
	{
		return SendErrorMessage(playerid, "You don't have permission to use this command.");
	}

	if(!isnull(params) && !strcmp(params, "off", true))
 	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
			return SendErrorMessage(playerid, "You are not spectating any player.");

	    PlayerSpectatePlayer(playerid, INVALID_PLAYER_ID);
	    PlayerSpectateVehicle(playerid, INVALID_VEHICLE_ID);

	    SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2], PlayerData[playerid][pPos][3], 0, 0, 0, 0, 0, 0);
	    TogglePlayerSpectating(playerid, false);
		PlayerData[playerid][pSpectator] = INVALID_PLAYER_ID;

	    return SendServerMessage(playerid, "You are no longer in spectator mode.");
	}

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/spectate [playerid/name] - Type \"/spectate off\" to stop spectating.");

	if(userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

		PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
		PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
	}

	SetPlayerInterior(playerid, GetPlayerInterior(userid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(userid));

	TogglePlayerSpectating(playerid, 1);

	if(IsPlayerInAnyVehicle(userid))
	    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(userid));

	else
		PlayerSpectatePlayer(playerid, userid);

	SendServerMessage(playerid, "You are now spectating %s (ID: %d).", ReturnName(userid, 0), userid);
	PlayerData[playerid][pSpectator] = userid;

	return 1;
}

CMD:ajail(playerid, params[])
{
	static
		userid,
		minutes,
		reason[128];

	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "uds[128]", userid, minutes, reason))
	    return SendSyntaxMessage(playerid, "/ajail [playerid/name] [minutes] [reason]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (minutes < 1)
		return SendErrorMessage(playerid, "You can't jail a player for under 0 minutes.");

	ClearAnimations(userid);
	PlayerTextDrawShow(userid, PlayerData[userid][pTextdraws][70]);

    SetPlayerPos(userid, 197.6346, 175.3765, 1003.0234);
    SetPlayerInterior(userid, 3);

	SetPlayerVirtualWorld(userid, (playerid + 100));
 	SetPlayerFacingAngle(userid, 0.0);

	SetCameraBehindPlayer(userid);
	ResetWeapons(userid);

	ResetPlayer(userid);

	PlayerData[userid][pJailTime] = minutes * 60;
	PlayerData[userid][pPrisoned] = 0;

	SendAdminAction(playerid, "You have jailed %s for %d minutes (%s).", ReturnName(userid, 0), minutes, reason);
	SendAdminAction(userid, "%s has jailed you for %d minutes (%s).", ReturnName(playerid, 0), minutes, reason);

	SendClientMessageToAllEx(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has jailed %s for %d minutes for: %s", ReturnName(playerid, 0), ReturnName(userid, 0), minutes, reason);
	return 1;
}

CMD:release(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/release [playerid/name]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (!PlayerData[userid][pJailTime])
	    return SendErrorMessage(playerid, "You can't release a player that's not in jail.");

	PlayerData[userid][pJailTime] = 1;

	SendAdminAction(playerid, "You have released %s from jail.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s has released you from jail.", ReturnName(playerid, 0));
	return 1;
}

CMD:bleeding(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/bleeding [playerid/name]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	switch (PlayerData[userid][pBleeding])
	{
	    case 0:
	    {
	        PlayerData[userid][pBleeding] = 1;
	        PlayerData[userid][pBleedTime] = 10;

            //CreateBlood(userid);
			SetTimerEx("HidePlayerBox", 500, false, "dd", userid, _:ShowPlayerBox(userid, 0xFF000066));

			SendServerMessage(playerid, "You have enabled bleeding mode for %s. (this function has been removed)", ReturnName(userid, 0));
		}
		case 1:
	    {
	        PlayerData[userid][pBleeding] = 0;
	        PlayerData[userid][pBleedTime] = 0;

			SendServerMessage(playerid, "You have disabled bleeding mode for %s.", ReturnName(userid, 0));
		}
	}
	return 1;
}

CMD:aslap(playerid, params[])
{
	static
	    userid;

	new strength = 2;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "uU", userid, strength))
	    return SendSyntaxMessage(playerid, "/aslap <playerid/name> <strength (optional)>");

	if(1 > strength > 10)
		return SendErrorMessage(playerid, "Strength must be 1-10");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	static
	    Float:x,
	    Float:y,
	    Float:z;

    GetPlayerPos(userid, x, y, z);
	SetPlayerPos(userid, x, y, z + strength);

	PlayerPlaySound(userid, 1130, 0.0, 0.0, 0.0);
	SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has slapped %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:kick(playerid, params[])
{
	static
	    userid,
	    reason[128];

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "us[128]", userid, reason))
	    return SendSyntaxMessage(playerid, "/kick [playerid/name] [reason]");

	if (userid == INVALID_PLAYER_ID || (IsPlayerConnected(userid) && PlayerData[userid][pKicked]))
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "The specified player has higher authority.");

	SendClientMessageToAllEx(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has kicked %s for: %s.", ReturnName(playerid, 0), ReturnName(userid, 0), reason);

	KickEx(userid);
	return 1;
}

CMD:asshelp(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	SendClientMessage(playerid, COLOR_CLIENT, "[Support Ticket Help]");
	SendClientMessage(playerid, COLOR_CLIENT,"/assist - Accepting a support ticket.");
	SendClientMessage(playerid, COLOR_CLIENT,"/supports - Checking all opened support tickets.");
	SendClientMessage(playerid, COLOR_CLIENT,"/ask - Chat with the person you are assisting.");
	SendClientMessage(playerid, COLOR_CLIENT,"/closesupport - Ending the currenct assistance.");
	SendClientMessage(playerid, COLOR_CLIENT,"====================================================================================================");
	return 1;
}

CMD:support(playerid, params[])
{
	if(AssistanceNeeded[playerid] == 0)
	{
		ShowPlayerDialog(playerid, 12211, DIALOG_STYLE_INPUT, "Support Request", "Please input in the box below the reason that you would like help.", "OK", "Cancel");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "You already have a help request waiting. Please use /cancelsupport to cancel it.");
	return 1;
}

CMD:assist(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");
	{
 		new id, string[128];
		if(sscanf(params, "u", id)) return SendSyntaxMessage(playerid, "/assist [playerid/name]");
  		{
			if(AssistanceNeeded[id] == 0)return SendClientMessage(playerid, COLOR_WHITE, "That player doesn't need help.");

			AssistanceNeeded[id] = 0;
			Assisted[id] = playerid;
			Assisted[playerid] = id;
			//SetPlayerHealth(playerid, 999999);
			//GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			//SendPlayerToPlayer(playerid, id);
			for___loop(new i = 0; i < MAX_ASSISTANCES; i++)
			{
				if(!AssistanceData[i][aExists])
					continue;
				if(AssistanceData[i][aPlayer] == id) Assistance_Remove(i);
			}

			new query[128];
			format(query, sizeof(query), "UPDATE `characters` SET `PlayersAssisted` = PlayersAssisted + 1 WHERE `chara` = '%s'", ReturnName(playerid));
			mysql_tquery(g_iHandle, query);

			PlayerData[playerid][pPlayersAssisted]++;

			format(string, sizeof(string), "%s is looking into your support ticket. Please use /ask to chat with the staff member.", ReturnName(playerid, 0), playerid);
			SendClientMessage(id, COLOR_ANTICHEAT, string);
			format(string, sizeof(string), "[Staff]: {FFFFFF}%s is now assisting %s.", ReturnName(playerid, 0), ReturnName(id, 0));
			SendHelperAlert(COLOR_NEWGREEN, string);
			format(string, sizeof(string), "You are now helping %s. Use /ask to chat with them. (Your Total Assists: %d)", ReturnName(id, 0), PlayerData[playerid][pPlayersAssisted]);
			SendClientMessage(playerid, COLOR_NEWGREEN, string);
   		}
	}
	return 1;
}

CMD:endsupport(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");
	{
		new id, reason[56], string[128];
		if(sscanf(params, "us[56]", id, reason)) return SendSyntaxMessage(playerid, "/endsupport [playerid/name] [reason]");
  		{
   			if(Assisted[id] != playerid)return SendClientMessage(playerid, COLOR_WHITE, "That player isn't being helped by you.");
	    	format(string, sizeof(string), "%s has closed your support ticket. [reason: %s]", ReturnName(playerid, 0), reason);
	    	SendClientMessage(id, COLOR_ANTICHEAT, string);
	    	//format(string, sizeof(string), "You have ended %s's Help session. [Reason: %s]", ReturnName(id, 0), reason);
	    	//SendClientMessage(playerid, COLOR_NEWGREEN, string);
	    	Assisted[id] = -1;
			Assisted[playerid] = -1;
			//SetPlayerHealth(playerid, 99.00);
			//SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			format(string, sizeof(string), "[Staff]: {FFFFFF}%s has concluded %s's support ticket. [reason: %s]", ReturnName(playerid, 0), ReturnName(id, 0), reason);
			SendHelperAlert(COLOR_NEWGREEN, string);
		}
	}
	return 1;
}

CMD:ask(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1 && Assisted[playerid] == -1)
		return SendErrorMessage(playerid, "You currently don't have a support ticket opened.");
	{
		new msg[128], string[150];
		if(Assisted[playerid] == -1) return SendClientMessage(playerid, COLOR_WHITE, "You are not assisting anybody at the moment.");
		if(sscanf(params, "s[128]", msg)) return SendSyntaxMessage(playerid, "/ask [text]");
		{
			format(string, sizeof(string), "[Ask] %s (%d): %s", ReturnName(playerid, 0), playerid, msg);
			SendClientMessage(playerid, COLOR_CLIENT, string);
			SendClientMessage(Assisted[playerid], COLOR_CLIENT, string);
		}
	}
	return 1;
}

CMD:cancelsupport(playerid, params[])
{
	if(AssistanceNeeded[playerid] == 1)
	{
		new string[128];
 		SendClientMessage(playerid, COLOR_NEWBLUE, "You have cancelled your assistance request.");
   		AssistanceNeeded[playerid] = 0;
		format(string, sizeof(string), "[STAFF]: {FFFFFF}%s has closed his support ticket.", ReturnName(playerid, 0));
		SendHelperAlert(COLOR_NEWGREEN, string);


		for___loop(new i = 0; i < MAX_ASSISTANCES; i++)
		{
			if(!AssistanceData[i][aExists])
				continue;
			if(AssistanceData[i][aPlayer] == playerid) Assistance_Remove(i);
		}
	}
	else SendClientMessage(playerid, COLOR_WHITE, "You do not have an open assistance request.");
	return 1;
}


CMD:mute(playerid, params[])
{
    static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/mute [playerid/name]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "You can't mute yourself!");

	if (PlayerData[userid][pMuted])
	    return SendErrorMessage(playerid, "The player you're attempting to mute is muted already.");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "The specified player has higher authority.");

	PlayerData[userid][pMuted] = 1;

	SendAdminAction(playerid, "You have muted %s from using text and commands.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s has muted you from using text and commands.", ReturnName(playerid, 0));

	return 1;
}

CMD:unmute(playerid, params[])
{
    static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/unmute [playerid/name]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (!PlayerData[userid][pMuted])
	    return SendErrorMessage(playerid, "The player you're attempting to unmute is not muted.");

	PlayerData[userid][pMuted] = 0;

	SendAdminAction(playerid, "You have unmuted %s from using text and commands.", ReturnName(userid, 0));
	SendAdminAction(userid, "You have been unmuted by %s.", ReturnName(playerid, 0));

	return 1;
}

CMD:freeze(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/freeze [playerid/name]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	TogglePlayerControllable(userid, 0);
	SendAdminAction(playerid, "You have frozen %s's movements.", ReturnName(userid, 0));
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/unfreeze [playerid/name]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

    PlayerData[playerid][pFreeze] = 0;

	TogglePlayerControllable(userid, 1);
	SendAdminAction(playerid, "You have unfrozen %s's movements.", ReturnName(userid, 0));
	return 1;
}

CMD:revive(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/revive [playerid/name]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (!PlayerData[userid][pInjured])
	    return SendErrorMessage(playerid, "You can't revive a player that's not injured.");

	PlayerData[userid][pInjured] = 0;

	ClearAnimations(userid);
	TextDrawHideForPlayer(userid, gServerTextdraws[2]);

	SendAdminAction(playerid, "You have revived %s's character.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s has revived your character.", ReturnName(playerid, 0));
	return 1;
}

CMD:respawn(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/respawn [playerid/name]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (!IsPlayerSpawned(userid))
	    return SendErrorMessage(playerid, "You can't respawn a player that's not spawned.");

	RespawnPlayer(userid);

	SendAdminAction(playerid, "You have respawned %s.", ReturnName(userid, 0));
	SendAdminAction(userid, "You have been respawned by %s.", ReturnName(playerid, 0));

	return 1;
}

CMD:refill(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/refill [playerid/name]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	PlayerData[userid][pHunger] = 100;
	PlayerData[userid][pThirst] = 100;

	SendAdminAction(playerid, "You have refilled %s's hunger and thirst.", ReturnName(userid, 0));
	SendAdminAction(userid, "Your hunger and thirst was refilled by %s.", ReturnName(playerid, 0));

	return 1;
}

CMD:setskin(playerid, params[])
{
	static
	    userid,
		skinid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ud", userid, skinid))
	    return SendSyntaxMessage(playerid, "/setskin [playerid/name] [skin id]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (skinid < 0 || skinid > 30000)
	    return SendErrorMessage(playerid, "Invalid skin ID. Skins range from 0 to 30000.");

	SetPlayerSkin(userid, skinid);
	PlayerData[userid][pSkin] = skinid;

	SendAdminAction(playerid, "You have set %s's skin to ID: %d.", ReturnName(userid, 0), skinid);
	SendAdminAction(userid, "Administrator %s has set your skin to ID: %d.", ReturnName(playerid, 0), skinid);
	return 1;
}

CMD:setclothes(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	static
	    userid,
	    type[16],
	    skinid[512];

	if (sscanf(params, "ud", userid, type, skinid))
 	{
	 	SendSyntaxMessage(playerid, "/setclothes [playerid/name] [name] [skin ID]");
	 	SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} clothes1, clothes2, clothes3.");
		return 1;
	}
	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (!strcmp(type, "clothes1", true))
	{
	    if (isnull(skinid))
	        return SendSyntaxMessage(playerid, "/setclothes [playerid/name] [name] [skin ID]");

		PlayerData[userid][pClothes1] = strval(skinid);
		SendAdminAction(playerid, "You have set %s's Clothes Slot 1 to %s.", ReturnName(userid, 0), skinid);
		SendAdminAction(userid, "Administrator %s has set your Clothes Slot 1 to ID: %d.", ReturnName(playerid, 0), skinid);
	}
	else if (!strcmp(type, "clothes2", true))
	{
	    if (isnull(skinid))
	        return SendSyntaxMessage(playerid, "/setclothes [playerid/name] [name] [skin ID]");

		PlayerData[userid][pClothes2] = strval(skinid);
		SendAdminAction(playerid, "You have set %s's Clothes Slot 2 to %s.", ReturnName(userid, 0), skinid);
		SendAdminAction(userid, "Administrator %s has set your Clothes Slot 2 to ID: %d.", ReturnName(playerid, 0), skinid);
	}
	else if (!strcmp(type, "clothes3", true))
	{
	    if (isnull(skinid))
	        return SendSyntaxMessage(playerid, "/setclothes [playerid/name] [name] [skin ID]");

		PlayerData[userid][pClothes3] = strval(skinid);
		SendAdminAction(playerid, "You have set %s's Clothes Slot 3 to %s.", ReturnName(userid, 0), skinid);
		SendAdminAction(userid, "Administrator %s has set your Clothes Slot 3 to ID: %d.", ReturnName(playerid, 0), skinid);
	}
	return 1;
}

forward SpawnCars(playerid);
public SpawnCars(playerid)
{
	static
	    rows,
	    fields,
		str[128];

	cache_get_data(rows, fields, g_iHandle);

	new id;

	for (new i = 0; i < rows; i ++)
	{
		for(new g=0; g < MAX_DYNAMIC_CARS; g++) if (CarData[g][carExists] == 0)
		{
			id = g;
			break;
		}

		CarData[id][carExists] = true;
	    CarData[id][carID] = cache_get_field_int(i, "carID");
		CarData[id][carModel] = cache_get_field_int(i, "carModel");
	    CarData[id][carOwner] = cache_get_field_int(i, "carOwner");
	    CarData[id][carPos][0] = cache_get_field_float(i, "carPosX");
	    CarData[id][carPos][1] = cache_get_field_float(i, "carPosY");
	    CarData[id][carPos][2] = cache_get_field_float(i, "carPosZ");
	    CarData[id][carPos][3] = cache_get_field_float(i, "carPosR");
		CarData[id][carHP] = cache_get_field_float(i, "carHP");
		CarData[id][carPanelsDmg] = cache_get_field_int(i, "carPanels");
		CarData[id][carDoorsDmg] = cache_get_field_int(i, "carDoors");
		CarData[id][carLightsDmg] = cache_get_field_int(i, "carLights");
		CarData[id][carTiresDmg] = cache_get_field_int(i, "carTires");
	    CarData[id][carColor1] = cache_get_field_int(i, "carColor1");
	    CarData[id][carColor2] = cache_get_field_int(i, "carColor2");
	    CarData[id][carPaintjob] = cache_get_field_int(i, "carPaintjob");
	    CarData[id][carLocked] = cache_get_field_int(i, "carLocked");
	    CarData[id][carImpounded] = cache_get_field_int(i, "carImpounded");
	    CarData[id][carImpoundPrice] = cache_get_field_int(i, "carImpoundPrice");
        CarData[id][carFaction] = cache_get_field_int(i, "carFaction");
        CarData[id][carJob] = cache_get_field_int(i, "carJob");
        CarData[id][carSiren] = cache_get_field_int(i, "carSiren");
		CarData[id][carRadio] = cache_get_field_int(i, "carRadio");
		cache_get_field_content(i, "carPlate", CarData[id][carPlate], g_iHandle, 15);

		for (new j = 0; j < 14; j ++)
		{
		    if (j < 5)
		    {
		        format(str, sizeof(str), "carWeapon%d", j + 1);
		        CarData[id][carWeapons][j] = cache_get_field_int(i, str);

		        format(str, sizeof(str), "carAmmo%d", j + 1);
		        CarData[id][carAmmo][j] = cache_get_field_int(i, str);
	        }
	        format(str, sizeof(str), "carMod%d", j + 1);
	        CarData[id][carMods][j] = cache_get_field_int(i, str);
	    }

		if(isnull(CarData[id][carPlate]) == true)
		{
			GenPlate(CarData[id][carPlate], 7);
			Car_Save(id);
		}

	    Car_Spawn(id);

		format(str, sizeof(str), "SELECT * FROM `carstorage` WHERE `ID` = '%d'", CarData[id][carID]);
		mysql_tquery(g_iHandle, str, "OnLoadCarStorage", "d", id);

		format(str, sizeof(str), "UPDATE `cars` SET carSpawned = 1 WHERE carID = %d", CarData[id][carID]);
		mysql_tquery(g_iHandle, str);
	}
	if(rows > 0)
	{
		format(str, sizeof(str), "[Cars Spawned]: %d", rows);
		SendClientMessage(playerid, -1, str);
	}
	else SendClientMessage(playerid, -1, "You do not have any vehicles that need to be spawned.");

	return 1;
}

CMD:spawncars(playerid, params[])
{
	new query[128];
	format(query, sizeof(query), "SELECT * FROM `cars` WHERE carOwner = '%d' AND carSpawned = 0", PlayerData[playerid][pID]);
	mysql_tquery(g_iHandle, query, "SpawnCars", "d", playerid);
	return 1;
}

CMD:agrantlicense(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	static
	    userid,
	    type[16];

	if (sscanf(params, "us[16]S()[32]", userid, type))
 	{
	 	SendSyntaxMessage(playerid, "/agrantlicense [playerid/name] [name]");
	 	SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} car, firearm, motorbike, truck, airplane, helicopter. ");
		return 1;
	}
	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (!strcmp(type, "car", true))
	{
	    if (Inventory_HasItem(userid, "Car License") && PlayerData[userid][pCarLicense] == 1)
	    	return SendErrorMessage(playerid, "That player already has a Car license.");

		Inventory_Add(userid, "Car License", 1581);
		SendAdminAction(playerid, "You have given %s a Car license.", ReturnName(userid, 0));
		SendAdminAction(userid, "Administrator %s has given you a Car license.", ReturnName(playerid, 0));

		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `CarLicense` = '1' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pCarLicense] = 1;
	}
	else if (!strcmp(type, "firearm", true))
	{
	    if (Inventory_HasItem(userid, "Firearm License") && PlayerData[userid][pWeaponLicense] == 1)
 			return SendErrorMessage(playerid, "That player already has a Firearm License.");

		Inventory_Add(userid, "Firearm License", 1581);
		SendAdminAction(playerid, "You have given %s a Firearm License.", ReturnName(userid, 0));
		SendAdminAction(userid, "Administrator %s has given you a Firearm License.", ReturnName(playerid, 0));

		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `WeaponLicense` = '1' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pWeaponLicense] = 1;
	}
	else if (!strcmp(type, "motorbike", true))
	{
	    if (Inventory_HasItem(userid, "Motorbike License") && PlayerData[userid][pBikeLicense] == 1)
 			return SendErrorMessage(playerid, "That player already has a Motorbike license.");

		Inventory_Add(userid, "Motorbike License", 1581);
		SendAdminAction(playerid, "You have given %s a Motorbike license.", ReturnName(userid, 0));
		SendAdminAction(userid, "Administrator %s has given you a Motorbike license.", ReturnName(playerid, 0));

		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `MotorBikeLicense` = '1' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pBikeLicense] = 1;
	}
	else if (!strcmp(type, "truck", true))
	{
	    if (Inventory_HasItem(userid, "Truck License") && PlayerData[userid][pTruckLicense] == 1)
 			return SendErrorMessage(playerid, "That player already has a Truck license.");

		Inventory_Add(userid, "Truck License", 1581);
		SendAdminAction(playerid, "You have given %s a Truck license.", ReturnName(userid, 0));
		SendAdminAction(userid, "Administrator %s has given you a Truck license.", ReturnName(playerid, 0));

		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `TruckLicense` = '1' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pTruckLicense] = 1;
	}
	else if (!strcmp(type, "airplane", true))
	{
	    if (Inventory_HasItem(userid, "Airplane License") && PlayerData[userid][pAirLicense] == 1)
 			return SendErrorMessage(playerid, "That player already has an Airplane license.");

		Inventory_Add(userid, "Airplane License", 1581);
		SendAdminAction(playerid, "You have given %s a Airplane license.", ReturnName(userid, 0));
		SendAdminAction(userid, "Administrator %s has given you a Airplane license.", ReturnName(playerid, 0));

		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `AirplaneLicense` = '1' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pAirLicense] = 1;
	}
	else if (!strcmp(type, "helicopter", true))
	{
	    if (Inventory_HasItem(userid, "Helicopter License") && PlayerData[userid][pHeliLicense] == 1)
 			return SendErrorMessage(playerid, "That player already has a Helicopter license.");

		Inventory_Add(userid, "Helicopter License", 1581);
		SendAdminAction(playerid, "You have given %s a Helicopter license.", ReturnName(userid, 0));
		SendAdminAction(userid, "Administrator %s has given you a Helicopter license.", ReturnName(playerid, 0));

		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `HelicopterLicense` = '1' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pHeliLicense] = 1;
	}
	return 1;
}

CMD:arevokelicense(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	static
	    userid,
	    type[16];

	if (sscanf(params, "us[16]S()[32]", userid, type))
 	{
	 	SendSyntaxMessage(playerid, "/arevokelicense [playerid/name] [name]");
	 	SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} car, firearm, motorbike, truck, airplane, helicopter. ");
		return 1;
	}
	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (!strcmp(type, "car", true))
	{
		Inventory_Remove(userid, "Car License");
		SendAdminAction(playerid, "You have revoked %s's Car license.", ReturnName(userid, 0));
		SendAdminAction(userid, "Your Car license has been revoked by Administrator %s.", ReturnName(playerid, 0));

		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `CarLicense` = '0' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pCarLicense] = 0;
	}
	else if (!strcmp(type, "firearm", true))
	{
		Inventory_Remove(userid, "Firearm License");
		SendAdminAction(playerid, "You have revoked %s's Firearm License.", ReturnName(userid, 0));
		SendAdminAction(userid, "Your Firearm License has been revoked by Administrator %s.", ReturnName(playerid, 0));

		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `WeaponLicense` = '0' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pWeaponLicense] = 0;
	}
	else if (!strcmp(type, "motorbike", true))
	{
		Inventory_Remove(userid, "Motorbike License");
		SendAdminAction(playerid, "You have revoked %s's Motorbike license.", ReturnName(userid, 0));
		SendAdminAction(userid, "Your Motorbike license has been revoked by Administrator %s.", ReturnName(playerid, 0));

		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `MotorBikeLicense` = '0' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pBikeLicense] = 0;
	}
	else if (!strcmp(type, "truck", true))
	{
		Inventory_Remove(userid, "Truck License");
		SendAdminAction(playerid, "You have revoked %s's Truck license.", ReturnName(userid, 0));
		SendAdminAction(userid, "Your Truck license has been revoked by Administrator %s.", ReturnName(playerid, 0));

		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `TruckLicense` = '0' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pTruckLicense] = 0;
	}
	else if (!strcmp(type, "airplane", true))
	{
		Inventory_Remove(userid, "Airplane License");
		SendAdminAction(playerid, "You have revoked %s's Airplane license.", ReturnName(userid, 0));
		SendAdminAction(userid, "Your Airplane license has been revoked by Administrator %s.", ReturnName(playerid, 0));

		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `AirplaneLicense` = '0' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pAirLicense] = 0;
	}
	else if (!strcmp(type, "helicopter", true))
	{
		Inventory_Remove(userid, "Helicopter License");
		SendAdminAction(playerid, "You have revoked %s's Helicopter license.", ReturnName(userid, 0));
		SendAdminAction(userid, "Your Helicopter license has been revoked by Administrator %s.", ReturnName(playerid, 0));

		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `HelicopterLicense` = '0' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pHeliLicense] = 0;
	}
	return 1;
}

CMD:removefstyle(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 3) return SendErrorMessage(playerid, "You don't have permission to use this command.");
	{
	    new id, string[128];
	    if(sscanf(params, "ud", id))
		{
			SendSyntaxMessage(playerid, "/removefstyle [player id or name]");
		}
		else
		{
		    PlayerData[id][pFightStyle] = 4;
      		SetPlayerFightingStyle(id, 4);
      		format(string, sizeof(string), "Administrator %s has removed your fighting style.", ReturnName(playerid, 0));
        	SendClientMessage(id, COLOR_ORANGE, string);
		}
	}
	return 1;
}

CMD:setfstyle(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 3) return SendErrorMessage(playerid, "You don't have permission to use this command.");
	{
 		new id, style, string[128];
		if(sscanf(params, "ud", id, style))
		{
			SendSyntaxMessage(playerid, "/setfightstyle [player id or name] [style]");
			SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} 1 - Normal 2 - Boxing 3 - Kung Fu 4 - Kneehead 5 - Grab kick 6 - Elbow");
		}
		else
		{
			switch(style)
			{
   				case 0:
			    {
	     			SendSyntaxMessage(playerid, "/setfightstyle [player id or name] [style]");
					SendClientMessage(playerid, COLOR_WHITE, "Styles: 1 - Normal 2 - Boxing 3 - Kung Fu 4 - Kneehead 5 - Grab kick 6 - Elbow");
  				}
		    	case 1:
			    {
       				PlayerData[id][pFightStyle] = 4;
			        SetPlayerFightingStyle(id, 4);

					format(string, sizeof(string), "You have set %s's fight style to Normal.", ReturnName(id, 0));
     				SendClientMessage(playerid, COLOR_WHITE, string);
	        		format(string, sizeof(string), "Administrator %s has set your fighting style to Normal.", ReturnName(playerid, 0));
			        SendClientMessage(id, COLOR_WHITE, string);
	    		}
			    case 2:
			    {
       				PlayerData[id][pFightStyle] = 5;
			        SetPlayerFightingStyle(id, 5);

					format(string, sizeof(string), "You have set %s's fight style to Boxing.", ReturnName(id, 0));
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "Administrator %s has set your fighting style to Boxing.", ReturnName(playerid, 0));
					SendClientMessage(id, COLOR_WHITE, string);
	    		}
			    case 3:
			    {
			        PlayerData[id][pFightStyle] = 6;
			        SetPlayerFightingStyle(id, 6);

					format(string, sizeof(string), "You have set %s's fight style to Kung Fu.", ReturnName(id, 0));
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "Administrator %s has set your fighting style to Kung Fu.", ReturnName(playerid, 0));
					SendClientMessage(id, COLOR_WHITE, string);
	    		}
			    case 4:
			    {
			        PlayerData[id][pFightStyle] = 7;
			        SetPlayerFightingStyle(id, 7);

					format(string, sizeof(string), "You have set %s's fight style to Knee Head.", ReturnName(id, 0));
					SendClientMessage(playerid, COLOR_WHITE, string);
     				format(string, sizeof(string), "Administrator %s has set your fighting style to Knee Head.", ReturnName(playerid, 0));
     				SendClientMessage(id, COLOR_WHITE, string);
  				}
		    	case 5:
			    {
					PlayerData[id][pFightStyle] = 15;
			        SetPlayerFightingStyle(id, 15);

					format(string, sizeof(string), "You have set %s's fight style to Grab Kick.", ReturnName(id, 0));
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "Administrator %s has set your fighting style to Grab Kick.", ReturnName(playerid, 0));
					SendClientMessage(id, COLOR_WHITE, string);
	    		}
			    case 6:
			    {
       				PlayerData[id][pFightStyle] = 16;
			        SetPlayerFightingStyle(id, 16);

					format(string, sizeof(string), "You have set %s's fight style to Elbow.", ReturnName(id, 0));
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "Administrator %s has set your fighting style to Elbow.", ReturnName(playerid, 0));
					SendClientMessage(id, COLOR_WHITE, string);
	    		}
			    default:
			    {
       				SendSyntaxMessage(playerid, "/setfightstyle [player id or name] [style]");
					SendClientMessage(playerid, COLOR_WHITE, "Styles: 1 - Normal 2 - Boxing 3 - Kung Fu 4 - Kneehead 5 - Grab kick 6 - Elbow");
					return SetPlayerFightingStyle(id, pFightStyle);
	    		}
			}
		}
	}
	return 1;
}

CMD:ban(playerid, params[])
{
	static
	    userid,
		reason[128];

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "us[128]", userid, reason))
	    return SendSyntaxMessage(playerid, "/ban [playerid/name] [reason]");

    if (userid == INVALID_PLAYER_ID || (IsPlayerConnected(userid) && PlayerData[userid][pKicked]))
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "You can't ban yourself from the server.");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "The specified player has higher authority.");

 	foreach (new i : Player) {
		if (!strcmp(PlayerData[i][pIP], PlayerData[userid][pIP]) && i != userid) {
		    KickEx(i);
		}
	}
	Dialog_Show(userid, ShowOnly, DIALOG_STYLE_MSGBOX, "Banned", "Your account has been banned by the server.\n\nUsername: %s\nReason: %s\nAdmin who banned you: %s\n\nPress F8 to take a screenshot and request a ban appeal on our forums.", "Close", "", PlayerData[userid][pUsername], reason, ReturnName(playerid, 0));

	SendClientMessageToAllEx(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s was banned by %s for: %s.", ReturnName(userid, 0), ReturnName(playerid, 0), reason);

	Blacklist_Add(PlayerData[userid][pIP], PlayerData[userid][pUsername], PlayerData[playerid][pUsername], reason);
	KickEx(userid);

	return 1;
}

CMD:tempban(playerid, params[])
{
	static
	    userid,
		reason[128],
		hours;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "uds[128]", userid, hours, reason))
	    return SendSyntaxMessage(playerid, "/tempban [playerid/name] [hours] [reason]");

    if (userid == INVALID_PLAYER_ID || (IsPlayerConnected(userid) && PlayerData[userid][pKicked]))
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if(hours == 0 || hours > 9999)
		return SendErrorMessage(playerid, "You can only tempban for 1-9999 hours");

	//if (userid == playerid)
	//    return SendErrorMessage(playerid, "You can't ban yourself from the server.");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "The specified player has higher authority.");

 	foreach (new i : Player) {
		if (!strcmp(PlayerData[i][pIP], PlayerData[userid][pIP]) && i != userid) {
		    KickEx(i);
		}
	}
	Dialog_Show(userid, ShowOnly, DIALOG_STYLE_MSGBOX, "Banned", "Your account has been temporarily banned.\n\nUsername: %s\nReason: %s\nAdmin who banned you: %s\nHours: %d\n\nPress F8 to take a screenshot and request a ban appeal on our forums.", "Close", "", PlayerData[userid][pUsername], reason, ReturnName(playerid, 0), hours);

	SendClientMessageToAllEx(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s was temp banned for %d hour(s) by %s. Reason: %s.", ReturnName(userid, 0), hours, ReturnName(playerid, 0), reason);

	Blacklist_Add_TempBan(PlayerData[userid][pIP], PlayerData[userid][pUsername], PlayerData[playerid][pUsername], reason, hours);

	new query[190];
	format(query, sizeof(query), "DROP EVENT IF EXISTS `%s_tempban_unban_blacklist`", PlayerData[userid][pUsername]);
	mysql_tquery(g_iHandle, query);

	format(query, sizeof(query), "CREATE EVENT `%s_tempban_unban_blacklist` ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL %d HOUR DO DELETE FROM `blacklist` WHERE `Username` = '%s'", PlayerData[userid][pUsername], hours, PlayerData[userid][pUsername]);
	mysql_tquery(g_iHandle, query);

	new eventstring[50];
	format(eventstring, sizeof(eventstring), "%s_tempban_unban_accounts", PlayerData[userid][pUsername]);

	format(query, sizeof(query), "CREATE EVENT `%s` ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL %d HOUR DO UPDATE `accounts` SET `banned` = 0 WHERE `username` = '%s'", eventstring, hours, PlayerData[userid][pUsername]);
	mysql_tquery(g_iHandle, query);

	KickEx(userid);

	return 1;
}



CMD:username(playerid, params[])
{
	if (isnull(params) || strlen(params) > 24)
		return SendSyntaxMessage(playerid, "/username [character name]");

	static
	    query[128];

	format(query, sizeof(query), "SELECT `Username` FROM `characters` WHERE `chara` = '%s'", SQL_ReturnEscaped(params));
	mysql_tquery(g_iHandle, query, "OnResolveUsername", "ds", playerid, params);

	return 1;
}

CMD:stats(playerid, params[])
{
	ShowStatsForPlayer(playerid, playerid);
	return 1;
}

/*CMD:stats(playerid, params[])
{
	ShowStats(playerid, playerid);
	return 1;
}*/

CMD:characters(playerid, params[])
{
	new string[128];
    format(string, sizeof(string), "%s\n%s\n%s", (!PlayerCharacters[playerid][0][0]) ? ("Empty Slot") : (PlayerCharacters[playerid][0]), (!PlayerCharacters[playerid][1][0]) ? ("Empty Slot") : (PlayerCharacters[playerid][1]), (!PlayerCharacters[playerid][2][0]) ? ("Empty Slot") : (PlayerCharacters[playerid][2]));
	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "My Characters", string, "Select", "Cancel");
	return 1;
}

CMD:aproperties(playerid, params[])
{
	new count;

	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/aproperties [playerid/name]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter])
	    return SendErrorMessage(playerid, "That player is not logged in yet.");

	for (new i = 0; i < MAX_HOUSES; i ++) if (House_IsOwner(userid, i)) {
	    SendClientMessageEx(playerid, COLOR_LIGHTGREEN, "** House ID: %d | Address: %s | Location: %s", i, HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]));

	    count++;
	}
	for (new i = 0; i < MAX_BUSINESSES; i ++) if (Business_IsOwner(userid, i) && BusinessData[i][bizOwner] != 99999999) {
	    SendClientMessageEx(playerid, COLOR_DEPARTMENT, "** Business ID: %d | Name: %s | Location: %s", i, BusinessData[i][bizName], GetLocation(BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]));

	    count++;
	}
	if (!count)
	    return SendErrorMessage(playerid, "That player doesn't own any properties.");

	return 1;
}

CMD:checkstats(playerid, params[])
{
    static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/checkstats [playerid/name]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter])
	    return SendErrorMessage(playerid, "That player is not logged in yet.");

	//ShowStats(playerid, userid);
    ShowStatsForPlayer(playerid, userid);
	return 1;
}

CMD:acc(playerid, params[])
{
	new
	    string[128];

	format(string, sizeof(string), "Glasses: %s\nHat: %s\nBandana: %s", (PlayerData[playerid][pGlasses]) ? ("Yes") : ("No"), (PlayerData[playerid][pHat]) ? ("Yes") : ("No"), (PlayerData[playerid][pBandana]) ? ("Yes") : ("No"));
	Dialog_Show(playerid, Accessory, DIALOG_STYLE_LIST, "Accessories", string, "Select", "Cancel");

	return 1;
}

CMD:shooter(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/shooter [playerid/name]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (PlayerData[userid][pLastShot] == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "That player hasn't been shot since they joined.");

    SendServerMessage(playerid, "%s was last shot by %s (%s).", ReturnName(userid, 0), ReturnName(PlayerData[userid][pLastShot]), GetDuration(gettime() - PlayerData[userid][pShotTime]));
    return 1;
}

CMD:gotoco(playerid,params[])
{
	new
	  Float:posx,
	  Float:posy,
	  Float:posz,
	  int;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if(sscanf(params,"P<,>fffd", posx, posy, posz, int)) return SendServerMessage(playerid,"USAGE: /gotoco [x] [y] [z] [int]");
	if(IsPlayerInAnyVehicle(playerid))
	{
		SetVehiclePos(GetPlayerVehicleID(playerid), posx, posy, posz);
		LinkVehicleToInterior(GetPlayerVehicleID(playerid), int);
	}
  	else
  	{
		SetPlayerPos(playerid, posx, posy, posz);
		SetPlayerInterior(playerid, int);
	}
  	return 1;
}

CMD:goto(playerid, params[])
{
	static
	    id,
	    type[24],
		string[64];

	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", id))
 	{
	 	SendSyntaxMessage(playerid, "/goto [player or name]");
		SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} spawn, police, fire, airport, elq, bigear, prison, house, business, entrance, job, gate, interior, billboard");
		return 1;
	}
    if (id == INVALID_PLAYER_ID)
	{
	    if (sscanf(params, "s[24]S()[64]", type, string))
		{
		    SendSyntaxMessage(playerid, "/goto [player or name]");
			SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} spawn, police, airport, elq, bigear, prison, house, business, entrance, job, gate, interior, billboard");
			return 1;
	    }
	    if (!strcmp(type, "spawn", true)) {
	        SetDefaultSpawn(playerid);

	        return SendServerMessage(playerid, "You have teleported to the default spawn.");
		}
		else if (!strcmp(type, "prison", true))
		{
	        SetPlayerPos(playerid, 283.5930, 1413.3511, 10.4078);
	        SetPlayerFacingAngle(playerid, 180.0000);

	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);

	        return SendServerMessage(playerid, "You have teleported to the prison facility.");
		}
		else if (!strcmp(type, "police", true))
		{
	        SetPlayerPos(playerid, 631.4896, -571.5195, 16.3359);
	        SetPlayerFacingAngle(playerid, 265.6865);

	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);

	        return SendServerMessage(playerid, "You have teleported to Police Station.");
		}
		else if (!strcmp(type, "fire", true))
		{
	        SetPlayerPos(playerid, 1225.3438, 309.2205, 19.7578);
	        SetPlayerFacingAngle(playerid, 154.7790);

	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);

	        return SendServerMessage(playerid, "You have teleported to Police Station.");
		}
		else if (!strcmp(type, "airport", true))
		{
	        SetPlayerPos(playerid, -3.8237,2362.1448,23.7152);

	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);

	        return SendServerMessage(playerid, "You have teleported to Airport.");
		}
		else if (!strcmp(type, "elq", true))
		{
	        SetPlayerPos(playerid, -1433.5298,2609.9983,55.4027);

	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);

	        return SendServerMessage(playerid, "You have teleported to El Q.");
		}
		else if (!strcmp(type, "bigear", true))
		{
	        SetPlayerPos(playerid, -312.6314,1507.9425,75.1206);

	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);

	        return SendServerMessage(playerid, "You have teleported to Big Ear.");
		}
		else if (!strcmp(type, "sfnews", true))
		{
	        SetPlayerPos(playerid, -2515.6768, -611.6651, 132.5625);

	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);

	        return SendServerMessage(playerid, "You have teleported to San Fierro News HQ.");
		}
		//
		else if (!strcmp(type, "billboard", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/goto [billboard] [billboard ID]");

			if ((id < 0 || id >= MAX_BILLBOARDS) || !BillBoardData[id][bbExists])
			    return SendErrorMessage(playerid, "You have specified an invalid billboard ID.");

		    SetPlayerPos(playerid, BillBoardData[id][bbPos][0], BillBoardData[id][bbPos][1], BillBoardData[id][bbPos][2]);
		    SendServerMessage(playerid, "You have teleported to billboard ID: %d.", id);
		    return 1;
		}
		//
		else if (!strcmp(type, "house", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/goto [house] [house ID]");

			if ((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
			    return SendErrorMessage(playerid, "You have specified an invalid house ID.");

		    SetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
		    SetPlayerInterior(playerid, HouseData[id][houseExterior]);

			SetPlayerVirtualWorld(playerid, HouseData[id][houseExteriorVW]);
		    SendServerMessage(playerid, "You have teleported to house ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "business", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/goto [business] [business ID]");

			if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
			    return SendErrorMessage(playerid, "You have specified an invalid business ID.");

		    SetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
		    SetPlayerInterior(playerid, BusinessData[id][bizExterior]);

			SetPlayerVirtualWorld(playerid, BusinessData[id][bizExteriorVW]);
		    SendServerMessage(playerid, "You have teleported to business ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "entrance", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/goto [entrance] [entrance ID]");

			if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
			    return SendErrorMessage(playerid, "You have specified an invalid entrance ID.");

		    SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
		    SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);

			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);
		    SendServerMessage(playerid, "You have teleported to entrance ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "job", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/goto [job] [job ID]");

			if ((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
			    return SendErrorMessage(playerid, "You have specified an invalid job ID.");

		    SetPlayerPos(playerid, JobData[id][jobPos][0], JobData[id][jobPos][1], JobData[id][jobPos][2]);
		    SetPlayerInterior(playerid, JobData[id][jobInterior]);

			SetPlayerVirtualWorld(playerid, JobData[id][jobWorld]);
		    SendServerMessage(playerid, "You have teleported to job ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "gate", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/goto [gate] [gate ID]");

			if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
			    return SendErrorMessage(playerid, "You have specified an invalid gate ID.");

		    SetPlayerPos(playerid, GateData[id][gatePos][0] - (2.5 * floatsin(-GateData[id][gatePos][3], degrees)), GateData[id][gatePos][1] - (2.5 * floatcos(-GateData[id][gatePos][3], degrees)), GateData[id][gatePos][2]);
		    SetPlayerInterior(playerid, GateData[id][gateInterior]);

			SetPlayerVirtualWorld(playerid, GateData[id][gateWorld]);
		    SendServerMessage(playerid, "You have teleported to gate ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "interior", true))
		{
		    static
		        str[1536];

			str[0] = '\0';

			for (new i = 0; i < sizeof(g_arrInteriorData); i ++) {
			    strcat(str, g_arrInteriorData[i][e_InteriorName]);
			    strcat(str, "\n");
		    }
		    Dialog_Show(playerid, TeleportInterior, DIALOG_STYLE_LIST, "Teleport: Interior List", str, "Select", "Cancel");
		    return 1;
		}
	    else return SendErrorMessage(playerid, "You have specified an invalid player.");
	}
	if (!IsPlayerSpawned(id))
		return SendErrorMessage(playerid, "You can't teleport to a player that's not spawned.");

	SendPlayerToPlayer(playerid, id);

	format(string, sizeof(string), "You have ~y~teleported~w~ to %s.", ReturnName(id, 0));
	ShowPlayerFooter(playerid, string);

	return 1;
}

CMD:send(playerid, params[])
{
	static
	    userid,
	    type[24];

	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "us[32]", userid, type))
 	{
	 	SendSyntaxMessage(playerid, "/send [player] [name]");
		SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} spawn, police, airport, elq, bigear, sfnews, prison");
		return 1;
	}
    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

 	if (!strcmp(type, "spawn", true))
	{
  		SetDefaultSpawn(userid);

		SendServerMessage(playerid, "You have teleported %s to the default spawn.", ReturnName(userid, 0));
		SendServerMessage(userid, "%s has teleported you to the default spawn.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "police", true))
	{
        SetPlayerPos(userid, -203.6221,984.8093,19.3532);

        SetPlayerInterior(userid, 0);
        SetPlayerVirtualWorld(userid, 0);

        SendServerMessage(playerid, "You have teleported %s to the Police Station.", ReturnName(userid, 0));
		SendServerMessage(userid, "%s has teleported you to the Police Station.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "airport", true))
	{
        SetPlayerPos(userid, -3.8237,2362.1448,23.7152);

        SetPlayerInterior(userid, 0);
        SetPlayerVirtualWorld(userid, 0);

        SendServerMessage(playerid, "You have teleported %s to the Airport.", ReturnName(userid, 0));
		SendServerMessage(userid, "%s has teleported you to the Airport.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "elq", true))
	{
        SetPlayerPos(userid, -1433.5298,2609.9983,55.4027);

        SetPlayerInterior(userid, 0);
        SetPlayerVirtualWorld(userid, 0);

        SendServerMessage(playerid, "You have teleported %s to El Q.", ReturnName(userid, 0));
		SendServerMessage(userid, "%s has teleported you to El Q.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "bigear", true))
	{
        SetPlayerPos(userid, -312.6314,1507.9425,75.1206);

        SetPlayerInterior(userid, 0);
        SetPlayerVirtualWorld(userid, 0);

        SendServerMessage(playerid, "You have teleported %s to Big Ear.", ReturnName(userid, 0));
		SendServerMessage(userid, "%s has teleported you to the Big Ear.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "sfnews", true))
	{
        SetPlayerPos(userid, -2515.6768, -611.6651, 132.5625);

        SetPlayerInterior(userid, 0);
        SetPlayerVirtualWorld(userid, 0);

        SendServerMessage(playerid, "You have teleported %s to San Fierro News HQ.", ReturnName(userid, 0));
		SendServerMessage(userid, "%s has teleported you to the San Fierro News HQ.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "prison", true))
	{
		SetPlayerPos(userid, 283.5930, 1413.3511, 10.4078);
  		SetPlayerFacingAngle(userid, 180.0000);

		SetPlayerInterior(userid, 0);
  		SetPlayerVirtualWorld(userid, 0);

		SendServerMessage(playerid, "You have teleported %s to the prison facility.", ReturnName(userid, 0));
		SendServerMessage(userid, "%s has teleported you to the prison facility.", ReturnName(playerid, 0));
	}
	return 1;
}

/*CMD:gotopos(playerid, params[])
{
	new Float:x, Float:y, Float:z;
	if(PlayerData[playerid][pAdmin] < 4)
		return SendErrorMessage(playerid,"Unauthorized.");
	if(sscanf(params, "fff", x,y,z))
		return SendSyntaxMessage(playerid,"/gotopos [X] [Y] [Z]");

	SetPlayerPos(playerid, x, y, z);
	return 1;
}*/

CMD:gethere(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/gethere [playerid/name]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (!IsPlayerSpawned(userid))
		return SendErrorMessage(playerid, "You can't teleport a player that's not spawned.");

	if(PlayerData[playerid][pAdmin] < PlayerData[userid][pAdmin])
		return SendErrorMessage(playerid, "You can't teleport a higher ranked admin then you.");

	SendPlayerToPlayer(userid, playerid);
	SendServerMessage(playerid, "You have teleported %s to you.", ReturnName(userid, 0));
	return 1;
}

CMD:inventory(playerid, params[])
{
	if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "You can't open your inventory right now.");

	if (PlayerData[playerid][pJailTime] > 0)
		return SendErrorMessage(playerid, "You can't open your inventory whilst jailed.");

	OpenInventory(playerid);
	return 1;
}

CMD:setinterior(playerid, params[])
{
	static
		userid,
	    interior;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ud", userid, interior))
		return SendSyntaxMessage(playerid, "/setinterior [playerid/name] [interior]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	SetPlayerInterior(userid, interior);
	PlayerData[userid][pInterior] = interior;

	SendServerMessage(playerid, "You have set %s's interior to %d.", ReturnName(userid, 0), interior);
	return 1;
}

CMD:setvw(playerid, params[])
{
	static
		userid,
	    world;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ud", userid, world))
		return SendSyntaxMessage(playerid, "/setvw [playerid/name] [world]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	SetPlayerVirtualWorld(userid, world);
	PlayerData[userid][pWorld] = world;

	SendServerMessage(playerid, "You have set %s's virtual world to %d.", ReturnName(userid, 0), world);
	return 1;
}

CMD:atalk(playerid, params[])
{
	static
	    userid,
	    text[128];

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "us[128]", userid, text))
		return SendSyntaxMessage(playerid, "/atalk [playerid/name] [message]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	SendClientMessageEx(userid, COLOR_YELLOW, "[Admin]: {FFFFFF}%s says: %s", ReturnName(playerid, 0), text);

	if (playerid != userid) {
		SendClientMessageEx(playerid, COLOR_YELLOW, "[Admin]: {FFFFFF}%s says: %s", ReturnName(playerid, 0), text);
	}
	return 1;
}

CMD:sendto(playerid, params[])
{
	static
	    userid,
	    targetid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "uu", userid, targetid))
	    return SendSyntaxMessage(playerid, "/sendto [playerid/name] [playerid/name]");

	if (userid == INVALID_PLAYER_ID || targetid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "The specified user(s) are not connected.");

	SendPlayerToPlayer(userid, targetid);

	SendServerMessage(playerid, "You have teleported %s to %s.", ReturnName(userid, 0), ReturnName(targetid));
	SendServerMessage(userid, "%s has teleported you to %s.", ReturnName(playerid, 0), ReturnName(targetid));
	return 1;
}

CMD:unban(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (isnull(params) || strlen(params) > 24)
	{
		SendSyntaxMessage(playerid, "/unban [username]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[NOTE]:{FFFFFF} Type \"/username\" to resolve the master account from a character's name.");
	}
	else
	{
	    Blacklist_Remove(params);

	    SendServerMessage(playerid, "You have unbanned \"%s\" successfully.", params);
	    SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has unbanned account \"%s\".", ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:blacklist(playerid, params[])
{
	static
		type[24];

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "s[24]s[128]", type, params))
 	{
	 	SendSyntaxMessage(playerid, "/blacklist [name] [parameter]");
	 	SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} ban, banip, unbanip");
	 	return 1;
	}
	if (!strcmp(type, "ban", true))
	{
	    if (!IsValidPlayerName(params))
	        return SendErrorMessage(playerid, "The name you've entered is not in the correct format.");

		foreach (new i : Player) if (!strcmp(PlayerData[i][pUsername], params) || !strcmp(ReturnName(i), params, true)) {
		    KickEx(i);
		}
		Blacklist_Add("0.0.0.0", params, PlayerData[playerid][pUsername], "Name Ban (/blacklist)");

	    SendServerMessage(playerid, "You have banned \"%s\" successfully.", params);
	    SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has banned \"%s\".", ReturnName(playerid, 0), params);
	}
	else if (!strcmp(type, "banip", true))
	{
	    if (!IsAnIP(params))
	        return SendErrorMessage(playerid, "The IP address you've entered is not in the correct format.");

		foreach (new i : Player) if (!strcmp(PlayerData[i][pIP], params)) {
		    KickEx(i);
		}
		Blacklist_Add(params, "", PlayerData[playerid][pUsername], "IP Ban (/blacklist)");

	    SendServerMessage(playerid, "You have banned IP \"%s\" successfully.", params);
	    SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has banned IP \"%s\".", ReturnName(playerid, 0), params);
	}
	else if (!strcmp(type, "unbanip", true))
	{
	    if (!IsAnIP(params))
	        return SendErrorMessage(playerid, "The IP address you've entered is not in the correct format.");

		Blacklist_RemoveIP(params);

	    SendServerMessage(playerid, "You have unbanned IP \"%s\" successfully.", params);
	    SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has unbanned IP \"%s\".", ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:getip(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/getip [playerid/name]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	SendServerMessage(playerid, "%s's IP address is %s.", ReturnName(userid, 0), PlayerData[userid][pIP]);
	return 1;
}

CMD:oban(playerid, params[])
{
	static
		charname[40],
		userip[32],
		query[128],
		masteracc[40];

	new Cache:result1;
	new Cache:result2;


	if (PlayerData[playerid][pAdmin] < 3)
		return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "s[40]", charname))
		return SendSyntaxMessage(playerid, "/oban [character name]");

	format(query, sizeof(query), "SELECT * FROM `characters` WHERE `chara` = '%s'", charname);
	result1 = mysql_query(g_iHandle, query);
	new rows = cache_get_row_count();
	if(rows != 1)
	{
		SendErrorMessage(playerid, "Character name does not exist.");
		cache_delete(result1);
		return 1;
	}

	cache_get_field_content(0, "username", masteracc);

	format(query, sizeof(query), "SELECT * FROM `accounts` WHERE `username` = '%s'", masteracc);
	result1 = mysql_query(g_iHandle, query);
	if(rows != 1)
	{
		SendErrorMessage(playerid, "Username does not exist. [DB ERROR]");
		cache_delete(result2);
		return 1;
	}

	cache_get_field_content(0, "IP", userip);

	Blacklist_Add(userip, masteracc, PlayerData[playerid][pUsername], "/oban");
	SendClientMessageToAllEx(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s (%s) was offline banned by %s.", charname, masteracc, ReturnName(playerid, 0));

	foreach (new i : Player) {
		if (!strcmp(PlayerData[i][pIP], userip)) {
		    KickEx(i);
		}
	}

	cache_delete(result1);
	cache_delete(result2);
	return 1;
}

CMD:whois(playerid, params[])
{
	static
	    userid;

	new isp[128], city[128], country[128], region[128], timezone[128], zipcode[128];

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/whois [playerid/name]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	GetPlayerCountry(userid, country);
	GetPlayerRegion(userid, region);
	GetPlayerCity(userid, city);
	GetPlayerISP(userid, isp);
	GetPlayerTimezone(userid, timezone);
	GetPlayerZipcode(userid, zipcode);

	SendServerMessage(playerid, "%s's IP address is %s.", ReturnName(userid, 0), PlayerData[userid][pIP]);
	SendServerMessage(playerid, "%s's country is %s.", ReturnName(userid, 0), country);
	SendServerMessage(playerid, "%s's region is %s.", ReturnName(userid, 0), region);
	SendServerMessage(playerid, "%s's city is %s.", ReturnName(userid, 0), city);
	SendServerMessage(playerid, "%s's ISP is %s.", ReturnName(userid, 0), isp);
	return 1;
}

CMD:togooc(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (g_StatusOOC)
	{
	    SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has disabled OOC chat.", ReturnName(playerid, 0));
	    g_StatusOOC = false;
	}
	else
	{
	    SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has enabled OOC chat.", ReturnName(playerid, 0));
	    g_StatusOOC = true;
	}
	return 1;
}

/*
CMD:compliment(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 2)
		return SendErrorMessage(playerid, "You are not authorized to use this command.");

	new targetid, reason[128], str[200];
	if(sscanf(params, "us[128]", targetid, reason)) return SendSyntaxMessage(playerid, "/compliment <id> <reason>");

	PlayerData[targetid][pCompliments]++;

	SendClientMessageToAllEx(COLOR_LIGHTBLUE, "[COMPLIMENT] %s has complimented %s on their: %s", ReturnName(playerid, 0), ReturnName(targetid, 0), reason);
	format(str, sizeof(str), "An admin has complimented you! Congratulations! You now have a total of: %d compliments!", PlayerData[targetid][pCompliments]);
	Dialog_Show(targetid, COMPLIMENTD, DIALOG_STYLE_MSGBOX, "Compliment Recieved!", str, "YAY!", "K");
	return 1;
}
*/

CMD:debug_togchatanim(playerid, params[])
{
	if(PlayerData[playerid][pToggleChatAnim] == 0)
	{
		PlayerData[playerid][pToggleChatAnim] = 1;
		//SendClientMessage(playerid, COLOR_GREY, "You have toggled your chat animations to OFF.");
		Player_Settings(playerid);
		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `ChatAnim` = '1' WHERE `chara` = '%s'", ReturnName(playerid));
		mysql_tquery(g_iHandle, query);
	}
	else
	{
		PlayerData[playerid][pToggleChatAnim] = 0;
		//SendClientMessage(playerid, COLOR_GREY, "You have toggled your chat animations to ON.");
		Player_Settings(playerid);
		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `ChatAnim` = '0' WHERE `chara` = '%s'", ReturnName(playerid));
		mysql_tquery(g_iHandle, query);
	}
	return 1;
}

CMD:toggold(playerid, params[])
{
	if(PlayerData[playerid][pDonator] >= 2)
	{
		if(GoldName[playerid] == 0)
		{
			GoldName[playerid] = 1;
			SetPlayerColor(playerid, COLOR_DONATOR);
			SendClientMessage(playerid, COLOR_GREY, "You have toggled your Gold Name to ON.");
		}
		else
		{
  			GoldName[playerid] = 0;
			SetPlayerColor(playerid, DEFAULT_COLOR);
			SendClientMessage(playerid, COLOR_GREY, "You have toggled your Gold Name to OFF.");
		}
	}
	else return SendClientMessage(playerid, COLOR_GREY, DonatorOnly);
	return 1;
}

/*CMD:dooc(playerid, params[])
{
	if (PlayerData[playerid][pDonator] < 1)
	    return SendClientMessage(playerid, COLOR_GREY, DonatorOnly);

    if(PlayerData[playerid][pDisableDonator] == 0)
    {
		if (isnull(params))
		    return SendSyntaxMessage(playerid, "/dooc [message]");
	    foreach (new i : Player)
	    {
			if (strlen(params) > 64)
			{
			    SendDonatorAlert(COLOR_DONATORCHAT, "* %s %s: %.64s", DonatorRankName(i), ReturnName(playerid, 0), params);
			    SendDonatorAlert(COLOR_DONATORCHAT, "...%s **", params[64]);
			}
			else
			{
			    SendAdminAlert(COLOR_DONATORCHAT, "* %s %s: %s **", DonatorRankName(i), ReturnName(playerid, 0), params);
			}
		}
	}
	return 1;
}*/

CMD:dooc(playerid, params[])
{
	if (PlayerData[playerid][pDonator] < 1)
	    return SendClientMessage(playerid, COLOR_GREY, DonatorOnly);

	if (isnull(params))
 		return SendSyntaxMessage(playerid, "/dooc [message]");
    if(PlayerData[playerid][pDisableDonator] == 0)
    {
    	SendDonatorAlert(COLOR_DONATORCHAT, "[DONATOR CHAT] %s %s: %s", DonatorRankName(playerid), ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:sethealth(playerid, params[])
{
	static
		userid,
	    Float:amount;

	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "uf", userid, amount))
		return SendSyntaxMessage(playerid, "/sethealth [playerid/name] [amount]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (amount > 99.00)
	    return SendErrorMessage(playerid, "The maximum health you can set is 99.00.");

	SetPlayerHealth(userid, amount);
	SendAdminAction(playerid, "You have set %s's health to %.2f.", ReturnName(userid, 0), amount);
	SendAdminAction(userid, "Administrator %s has set your health to %.2f.", ReturnName(playerid, 0), amount);
	return 1;
}

CMD:swat(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "You must be a police officer.");

    if (PlayerData[playerid][pSwatMember])
	{
		SetPlayerArmour(playerid, 200.0);
		SetPlayerHealth(playerid, 99.0);
	  	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s gears up with his SWAT equipment.", ReturnName(playerid, 0));
	   	SendFactionMessage(factionid, COLOR_FACTIONCHAT, "[Dispatch]: %s %s is now on SWAT Duty.**", Faction_GetRank(playerid), ReturnName(playerid, 0));
	}
	else return SendErrorMessage(playerid, "You are not authorized to go on S.W.A.T duty.");
	return 1;
}

CMD:bomb(playerid, params[])
{
	new
		idx,
		szParameters[2][128 - 6];

	szParameters[0] = strtok(params, idx);

	if(isnull(szParameters[0]))
	{
		SendClientMessage(playerid, COLOR_GREY, "USAGE: /bomb [Parameter]");
		SendClientMessage(playerid, COLOR_GREY, "Available parameters: {E6E6E6}put{AFAFAF}, {E6E6E6}activate{AFAFAF}");

        if(PlayerData[playerid][pSwatMember])
		{
			SendClientMessage(playerid, COLOR_FACTIONCHAT, "[SWAT]: {E6E6E6}check{AFAFAF}, {E6E6E6}disarm{AFAFAF}");
		}

		return 1;
	}

	szParameters[1] = strtok(params, idx);

	if(!strcmp(szParameters[0], "put", true, 4))
	{
		new
			BombTimerID = GetPVarInt(playerid, "PuttingBomb"),
			szSetting[20],
			iTimer;

		if(BombTimerID)
		{
			KillTimer(BombTimerID);
			DeletePVar(playerid, "PuttingBomb");
			GameTextForPlayer(playerid, "~r~Stopped arming bomb", 2000, 3);
			TogglePlayerControllable(playerid, 1);
			return 1;
		}

		if (!Inventory_HasItem(playerid, "Bomb"))
    		return SendErrorMessage(playerid, "You dont have a Bomb. Visit the blackmaret and buy one or contact an illegal member.");

		szSetting = strtok(params, idx);
		iTimer = strval(strtok(params, idx));

		if(isnull(szParameters[1]))
		{
			SendClientMessage(playerid, COLOR_GREY, "USAGE: /bomb put [{E6E6E6}Vehicle ID{AFAFAF}] [{E6E6E6}Setting{AFAFAF}] [{E6E6E6}Timer (Seconds){AFAFAF}]");
			SendClientMessage(playerid, COLOR_WHITE, "Available settings: {E6E6E6}Ignition, timer, speed, remote"),
			SendClientMessage(playerid, COLOR_GREY, "NOTE: Use \"{E6E6E6}/bomb put help{AFAFAF}\" for explinations of use.");
			return 1;
		}

		if(!strcmp(szParameters[1], "help", true, 5))
		{
			SendClientMessage(playerid, COLOR_WHITE, "[ BOMB PUT MANUAL ]");
			SendClientMessage(playerid, COLOR_WHITE, "Setting 1: IGNITION {AAAAAA}- Activates the bomb timer after the {E6E6E6}vehicle's ignition{AAAAAA} is activated.");
			SendClientMessage(playerid, COLOR_WHITE, "Setting 2: TIMER {AAAAAA}- {E6E6E6}Immediately{AAAAAA} activates the bomb timer.");
			SendClientMessage(playerid, COLOR_WHITE, "Setting 3: SPEED {AAAAAA}- The bomb will explode as soon as the {E6E6E6}vehicle speed{AAAAAA}");
			SendClientMessage(playerid, COLOR_WHITE, "drops under {E6E6E6}40{AAAAAA} km/h. It is activated {E6E6E6}as soon as the vehicle is started{AAAAAA}.");
			SendClientMessage(playerid, COLOR_WHITE, "Setting 4: REMOTE {AAAAAA}- Bomb is activated with \"{E6E6E6}/bomb activate{AAAAAA}\". Note that the {E6E6E6}remote range is limited{AAAAAA}.");
			SendClientMessage(playerid, COLOR_WHITE, "The timer: {AAAAAA}- Decides how long it takes for the bomb to {E6E6E6}detonate{AAAAAA} from the moment it is activated.");
			SendClientMessage(playerid, COLOR_WHITE, "You can get the {E6E6E6}ID{AAAAAA} of the vehicle by using the \"{E6E6E6}/dl{AAAAAA}\" command.");
			SendClientMessage(playerid, COLOR_WHITE, "[ END OF BOMB PUT MANUAL ]");
			return 1;
		}

		if( !GetVehicleModel( strval( szParameters[1] ) ) ) // The car isn't spawned
		{
			SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid vehicle ID.");
			SendClientMessage(playerid, COLOR_GREY, "TIP: You can use \"{E6E6E6}/dl{AFAFAF}\" to see the IDs of nearby vehicles.");
			return 1;
		}

		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "ERROR: You need to stand close to the vehicle, not in it.");
			return 1;
		}

		new
					iVehicleID = strval(szParameters[1]),
			Float: 	f_Pos[3];

		GetVehiclePos(iVehicleID, f_Pos[0], f_Pos[1], f_Pos[2]);

		if(!IsPlayerInRangeOfPoint(playerid, BOMB_USE_DISTANCE, f_Pos[0], f_Pos[1], f_Pos[2]))
		{
			SendClientMessage(playerid, COLOR_GREY, "ERROR: You are not close enough to this vehicle.");
			return 1;
		}

		new
			iSetting;

		if(!strcmp(szSetting, "ignition", true, 9))
		{
			if(iTimer < 1 || iTimer > 60)
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid timer input. Must be between {E6E6E6}1{AFAFAF} and {E6E6E6}60{AFAFAF} seconds.");
				return 1;
			}
			iSetting = VEHICLE_BOMB_TYPE_IGNITION;
			Inventory_Remove(playerid, "Bomb");
		}

		else if(!strcmp(szSetting, "timer", true, 6))
		{
			if(iTimer < 10 || iTimer > 120)
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid timer input. Must be between {E6E6E6}10{AFAFAF} and {E6E6E6}120{AFAFAF} seconds.");
				return 1;
			}
			iSetting = VEHICLE_BOMB_TYPE_TIMER;
			Inventory_Remove(playerid, "Bomb");
		}

		else if(!strcmp(szSetting, "speed", true, 6))
		{
			if(iTimer < 15 || iTimer > 60)
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid timer input. Must be between {E6E6E6}15{AFAFAF} and {E6E6E6}60{AFAFAF} seconds.");
				return 1;
			}
			iSetting = VEHICLE_BOMB_TYPE_SPEED;
			Inventory_Remove(playerid, "Bomb");
		}

		else if(!strcmp(szSetting, "remote", true, 6))
		{
			if(iTimer < 1 || iTimer > 60)
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid timer input. Must be between {E6E6E6}1{AFAFAF} and {E6E6E6}60{AFAFAF} seconds.");
				return 1;
			}
			iSetting = VEHICLE_BOMB_TYPE_REMOTE;
			Inventory_Remove(playerid, "Bomb");
		}

		else
		{
			SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid setting. Please refer to manual: \"{E6E6E6}/bomb put help{AFAFAF}\".");
			return 1;
		}

		ResetBombInfo(iVehicleID);

		ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 2.0, 0, 0, 0, 0, BOMB_ARMTIME * 1100, 0);

		SetPVarInt(playerid, "PuttingBomb", SetTimerEx("PlayerPutBombInVehicle", 0, 0, "ddddd", BOMB_ARMTIME, playerid, iVehicleID, iSetting, iTimer));

		return 1;

	}

	if(!strcmp(szParameters[0], "activate", true, 4))
	{
		new
			Float: 	f_vPos[3],
					iHasAnyRemoteBombs;

		for___loop(new i; i < MAX_VEHICLES; i++)
		{
			if(g_Bomb_Vehicles[i][bv_i_ArmedType] == VEHICLE_BOMB_TYPE_REMOTE && g_Bomb_Vehicles[i][bv_i_BombOwner] == playerid)
			{
				iHasAnyRemoteBombs = 1;
				GetVehiclePos(i, f_vPos[0], f_vPos[1], f_vPos[2]);
				if(IsPlayerInRangeOfPoint(playerid, 100.0, f_vPos[0], f_vPos[1], f_vPos[2]))
				{
					g_Bomb_Vehicles[i][bv_i_BombOwner] = INVALID_PLAYER_ID;
					BombActivated(i);
				}
			}
		}

		if(!iHasAnyRemoteBombs)
		{
			SendClientMessage(playerid, COLOR_GREY, "ERROR: You haven't planted any bombs.");
			return 1;
		}

		new
			Float:	f_Pos[3];

		GetPlayerPos(playerid, f_Pos[0], f_Pos[1], f_Pos[2]);

		PlayerPlaySound(playerid, 6400, f_Pos[0], f_Pos[1], f_Pos[2]);

		SendClientMessage(playerid, COLOR_ORANGE, "You pressed the trigger on your remote to active your bomb(s).");
		SendClientMessage(playerid, COLOR_GREY, "NOTE: The distance for the remote is limited.");

		return 1;
	}

	if(PlayerData[playerid][pSwatMember])
	{
		if(!strcmp(szParameters[0], "check", true, 4))
		{
			new
				BombCheckingTimerID = GetPVarInt(playerid, "CheckingForBombs");

			if(BombCheckingTimerID)
			{
				KillTimer(BombCheckingTimerID);
				DeletePVar(playerid, "CheckingForBombs");
				GameTextForPlayer(playerid, "~r~Stopped looking for bombs", 2000, 3);
				return 1;
			}

			if(GetPVarInt(playerid, "DisarmingBomb"))
			{
				SendClientMessage(playerid, COLOR_GREY, "You are busy disarming the bomb.");
				return 1;
			}

			if(isnull(szParameters[1]))
			{
				SendClientMessage(playerid, COLOR_GREY, "USAGE: /bomb check [Vehicle ID]");
				return 1;
			}

			new
				iVehicleID = strval(szParameters[1]);

			if(!GetVehicleModel(iVehicleID))
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid vehicle ID.");
				SendClientMessage(playerid, COLOR_GREY, "TIP: You can use \"{E6E6E6}/dl{AFAFAF}\" to see the IDs of nearby vehicles.");
				return 1;
			}

			if(IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: You need to stand close to the vehicle, not in it.");
				return 1;
			}

			new
				Float: f_vPos[3];

			GetVehiclePos(iVehicleID, f_vPos[0], f_vPos[1], f_vPos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, BOMB_USE_DISTANCE, f_vPos[0], f_vPos[1], f_vPos[2]))
			{
				SendClientMessage(playerid, COLOR_GREY, "You are not close enough to the vehicle.");
				return 1;
			}

			GameTextForPlayer(playerid, "~g~Checking for bombs... ~n~ ~y~Type ~r~/bomb check~y~ again to stop.", BOMB_CHECKTIME * 1100, 3);

			ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 2.0, 0, 0, 0, 0, BOMB_CHECKTIME * 1100, 0);

			SetPVarInt(playerid, "CheckingForBombs", SetTimerEx("CheckForBombs", BOMB_CHECKTIME * 1000, 0, "dd", playerid, iVehicleID));

			return 1;
		}

		if(!strcmp(szParameters[0], "disarm", true, 4))
		{
			new
				DisarmingBombTimerID = GetPVarInt(playerid, "DisarmingBomb");

			if(DisarmingBombTimerID)
			{
				KillTimer(DisarmingBombTimerID);
				DeletePVar(playerid, "DisarmingBomb");
				GameTextForPlayer(playerid, "~r~Stopped disarming the bomb", 2000, 3);
				return 1;
			}

			if(GetPVarInt(playerid, "CheckingForBombs"))
			{
				SendClientMessage(playerid, COLOR_GREY, "You are busy checking for bombs.");
				return 1;
			}

			if(isnull(szParameters[1]))
			{
				SendClientMessage(playerid, COLOR_GREY, "USAGE: /bomb disarm [Vehicle ID]");
				SendClientMessage(playerid, COLOR_GREY, "TIP: You can use \"{E6E6E6}/dl{AFAFAF}\" to see the IDs of nearby vehicles.");
				return 1;
			}

			new
				iVehicleID = strval(szParameters[1]);

			if(!GetVehicleModel(iVehicleID))
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid vehicle ID.");
				SendClientMessage(playerid, COLOR_GREY, "TIP: You can use \"{E6E6E6}/dl{AFAFAF}\" to see the IDs of nearby vehicles.");
				return 1;
			}

			if(IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: You need to stand close to the vehicle, not in it.");
				return 1;
			}

			new
				Float: f_vPos[3];

			GetVehiclePos(iVehicleID, f_vPos[0], f_vPos[1], f_vPos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, BOMB_USE_DISTANCE, f_vPos[0], f_vPos[1], f_vPos[2]))
			{
				SendClientMessage(playerid, COLOR_GREY, "You are not close enough to the vehicle.");
				return 1;
			}

			if(GetPVarInt(playerid, "CheckedCarForBombs") != iVehicleID)
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: You haven't checked this car for bombs yet, you need to see where it is first.");
				return 1;
			}

			if(GetPVarInt(playerid, "FoundBombInCar") != iVehicleID)
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: You haven't found any bombs on this vehicle.");
				return 1;
			}

			GameTextForPlayer(playerid, "~g~Disarming bomb...~n~ ~y~Type ~r~/bomb disarm~y~ again to stop.", BOMB_DISARMTIME * 1000, 3);

			ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 2.0, 0, 0, 0, 0, BOMB_DISARMTIME * 1100, 0);

			SetPVarInt(playerid, "DisarmingBomb", SetTimerEx("DisarmBomb", BOMB_DISARMTIME * 1000, 0, "dd", playerid, iVehicleID));

			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid parameter. For a full list of available parameters, type \"/bomb\".");
	return 1;
}

CMD:plantbomb(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "Bomb"))
    		return SendErrorMessage(playerid, "You dont have a Bomb. Visit the blackmaret and buy one or contact an illegal member.");

	if(checkPlayerExplosives(playerid) < MAX_EXPLOSIVES_PER_PLAYER) // can the player use more C4 or have they reached the limit defined above?
	{
		new slotToUse 		= findExplosiveSlot();
		new individualSlot 	= checkPlayerExplosives(playerid);
		new labelText[128];
		new pName[MAX_PLAYER_NAME];

		GetPlayerName(playerid, pName, sizeof(pName));

		format(labelText, sizeof(labelText), "Planted C4.\nID: %i", individualSlot);

		explosiveData[slotToUse][explosiveOwner] = playerid;
		explosiveData[slotToUse][explosiveSlot] = individualSlot;
		GetPlayerPos(playerid, explosiveData[slotToUse][explosivePosition][0], explosiveData[slotToUse][explosivePosition][1], explosiveData[slotToUse][explosivePosition][2]);
		explosiveData[slotToUse][explosiveObject] = CreateDynamicObject(1654, explosiveData[slotToUse][explosivePosition][0], explosiveData[slotToUse][explosivePosition][1], (explosiveData[slotToUse][explosivePosition][2] - 0.6), 0, 0.00000, 0);
		explosiveData[slotToUse][explosiveLabel] = Create3DTextLabel(labelText, COLOR_YELLOW, explosiveData[slotToUse][explosivePosition][0], explosiveData[slotToUse][explosivePosition][1], (explosiveData[slotToUse][explosivePosition][2] - 0.5), 30, GetPlayerVirtualWorld(playerid), 0);

		SendClientMessage(playerid, COLOR_RED, "Your C4 has been planted! To detonate, use /detonate [slot]");
		Inventory_Remove(playerid, "Bomb");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You cannot place anymore explosives, try detonating one.");
	}

	return 1;
}

CMD:detonate(playerid, params[])
{
	new explosivesID, count = 0;
	if(!sscanf(params, "i", explosivesID))
	{
		for___loop(new i = 0; i < MAX_EXPLOSIVES; i++)
		{
			if(explosiveData[i][explosiveOwner] == playerid)
			{
				if(explosiveData[i][explosiveSlot] == explosivesID)
				{
					detonateExplosive(playerid, explosivesID);
					count++;
				}
			}
		}
	}
	else
	{
		return SendSyntaxMessage(playerid, "/detonate [slot]");
	}

	return 1;
}

CMD:defuse(playerid, params[])
{
    if (PlayerData[playerid][pSwatMember])
    {
		new bool:anyLocated = false;
		for___loop(new i = 0; i < MAX_EXPLOSIVES; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, explosiveData[i][explosivePosition][0], explosiveData[i][explosivePosition][1], explosiveData[i][explosivePosition][2]))
			{
				SendClientMessage(playerid, COLOR_WHITE, "You are now trying to defuse the C4. Please be patient and watch the wires.");
				ApplyAnimation(playerid, "BOMBER", "BOM_PLANT_LOOP", 4.0, 1, 0, 0, 0, -1);

				SetTimerEx("DefuseC4", 3000, false, "ii", playerid, i);
				anyLocated = true;

				break;
			}
		}

		if(!anyLocated)
		{
			return SendClientMessage(playerid, COLOR_ORANGE, "You are not in the proximity of any C4.");
		}
	}
	return 1;
}

CMD:setarmor(playerid, params[])
{
	static
		userid,
	    Float:amount;

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "uf", userid, amount))
		return SendSyntaxMessage(playerid, "/setarmor [playerid/name] [amount]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

    SetPlayerArmour(userid, amount);
	SendAdminAction(playerid, "You have set %s's armour to %.2f.", ReturnName(userid, 0), amount);
	SendAdminAction(userid, "Administrator %s has set your armour to %.2f.", ReturnName(playerid, 0), amount);
	return 1;
}

CMD:disarm(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/disarm [playerid/name]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	ResetWeapons(userid);
	SendAdminAction(playerid, "You have reset %s's weapons.", ReturnName(userid, 0));
	SendAdminAction(userid, "Administrator %s has reset your weapons.", ReturnName(playerid, 0));

	return 1;
}

CMD:arepair(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (vehicleid > 0 && isnull(params))
	{
		RepairVehicle(vehicleid);
		SendServerMessage(playerid, "You have repaired your current vehicle.");
	}
	else
	{
		if (sscanf(params, "d", vehicleid))
	    	return SendSyntaxMessage(playerid, "/arepair [vehicle ID]");

		else if (!IsValidVehicle(vehicleid))
	    	return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

		RepairVehicle(vehicleid);
		SendServerMessage(playerid, "You have repaired vehicle ID: %d.", vehicleid);
	}
	return 1;
}

CMD:anos(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	AddComponent(vehicleid, 1010);
	SendServerMessage(playerid, "You have added 10x NOS to your vehicle.");
	return 1;
}

CMD:aremovenos(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

    if (PlayerData[playerid][pAdmin] < 3)
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

    RemoveComponent(vehicleid, 1008);
	RemoveComponent(vehicleid, 1009);
	RemoveComponent(vehicleid, 1010);
    SendServerMessage(playerid, "You've removed the NOS from the vehicle.");
    return 1;
}

CMD:getcar(playerid, params[])
{
	new vehicleid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/getcar [VEHICLE ID]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

	static
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(vehicleid, x + 2, y - 2, z);

 	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	return 1;
}

CMD:entercar(playerid, params[])
{
	new vehicleid, seatid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/entercar [veh]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

	seatid = GetAvailableSeat(vehicleid, 0);

	if (seatid == -1)
	    return SendErrorMessage(playerid, "There are no seats left to enter.");

	PutPlayerInVehicle(playerid, vehicleid, seatid);
	return 1;
}

CMD:gotocar(playerid, params[])
{
	new vehicleid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/gotocar [veh]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

	static
	    Float:x,
	    Float:y,
	    Float:z;

	GetVehiclePos(vehicleid, x, y, z);
	SetPlayerPos(playerid, x, y - 2, z + 2);

	return 1;
}

CMD:respawncar(playerid, params[])
{
	new vehicleid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/respawncar [veh]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

	RespawnVehicle(vehicleid);
	SendServerMessage(playerid, "You have respawned vehicle ID: %d.", vehicleid);

	return 1;
}

CMD:factionrc(playerid, params[])
{
	new vehicleid;

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/factionrc [vehicleid (/dl)]");

    if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

    new id = Car_GetID(vehicleid);

	if (CarData[id][carFaction] > 0 && GetFactionType(playerid) != CarData[id][carFaction])
	    return SendErrorMessage(playerid, "You don't have the keys to this vehicle.");

	if(CarData[id][carJob] > 0 && PlayerData[playerid][pJob] != CarData[id][carJob])
	    return SendErrorMessage(playerid, "You don't have the keys to this vehicle.");

	RespawnVehicle(vehicleid);
	SendServerMessage(playerid, "You have respawned vehicle ID: %d.", vehicleid);

	return 1;
}

/*
CMD:factionrac(playerid, params[])
{
	if(PlayerData[playerid][pFaction] == -1)
		return SendErrorMessage(playerid, "You are not in a faction.");

    if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3);

	new count, id;
	new fac = GetFactionType(playerid);

	for (new i = 0; i != MAX_DYNAMIC_CARS - 1; i++)
	{
	    if(!CarData[i][carExists]) continue;
		if(CarData[i][carFaction] != fac) continue;

		id = CarData[i][carVehicle];
		if(GetVehicleDriver(id) != INVALID_PLAYER_ID) continue;

		RespawnVehicle(id);
		count++;
	}
	SendServerMessage(playerid, "You have respawned %d unoccupied faction vehicles.", count);
	return 1;
}
*/

/*
CMD:rconrespawncars(params[])
{
	new count;

	for (new i = 1; i != MAX_VEHICLES; i ++)
	{
	    if (IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID)
	    {
	        RespawnVehicle(i);
			count++;
		}
	}
	new str[128];
	format(str, sizeof(str), "A UCP Admin has respawned %d unoccupied vehicles.", count);
	SendClientMessageToAll(-1, str);
	return 1;
}
*/

CMD:respawncars(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	new count;

	for (new i = 1; i != MAX_VEHICLES; i ++)
	{
	    if (IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID)
	    {
	        RespawnVehicle(i);
			count++;
		}
	}
	if (!count)
	    return SendErrorMessage(playerid, "There are no vehicles to respawn.");

	new str[128];
	format(str, sizeof(str), "Admin %s has respawned %d unoccupied vehicles.", ReturnName(playerid, 0), count);
	SendClientMessageToAll(-1, str);
	return 1;
}

CMD:respawnnear(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	new count;

	for (new i = 1; i != MAX_VEHICLES; i ++)
	{
	    static
	        Float:fX,
	        Float:fY,
	        Float:fZ;

	    if (IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID)
		{
			GetVehiclePos(i, fX, fY, fZ);

			if (IsPlayerInRangeOfPoint(playerid, 50.0, fX, fY, fZ))
			{
		        RespawnVehicle(i);
				count++;
			}
		}
	}
	if (!count)
	    return SendErrorMessage(playerid, "There are no closest vehicles to respawn.");

	SendServerMessage(playerid, "You have respawned the %d closest vehicles.", count);
	return 1;
}

CMD:veh(playerid, params[])
{
	static
	    model[32],
		color1,
		color2;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "s[32]I(-1)I(-1)", model, color1, color2))
	    return SendSyntaxMessage(playerid, "/veh [model id/name] <color 1> <color 2>");

	if ((model[0] = GetVehicleModelByName(model)) == 0)
	    return SendErrorMessage(playerid, "Invalid model ID.");

	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:a,
		vehicleid;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	vehicleid = CreateVehicle(model[0], x, y + 2, z, a, color1, color2, 0);

	if (GetPlayerInterior(playerid) != 0)
	    LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	if (GetPlayerVirtualWorld(playerid) != 0)
		SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));

	//if (IsABoat(vehicleid) || IsAPlane(vehicleid) || IsAHelicopter(vehicleid))
 	PutPlayerInVehicle(playerid, vehicleid, 0);

	ResetVehicle(vehicleid);

    SetEngineStatus(vehicleid, true);
	CoreVehicles[vehicleid][vehTemporary] = true;
	SendServerMessage(playerid, "You have spawned a %s (%d, %d).", ReturnVehicleModelName(model[0]), color1, color2);
	return 1;
}

CMD:spawndrone(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

    if (PlayerData[playerid][pSwatMember])
	{
	 	static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:a,
			vehicleid;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		vehicleid = CreateVehicle(465, x, y + 2, z, a, 0, 0, 0);

		if (GetPlayerInterior(playerid) != 0)
		    LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

		if (GetPlayerVirtualWorld(playerid) != 0)
			SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));

	 	PutPlayerInVehicle(playerid, vehicleid, 0);

		ResetVehicle(vehicleid);

	    SetEngineStatus(vehicleid, true);
		CoreVehicles[vehicleid][vehTemporary] = true;
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s uses the remote to start the engine of the SWAT drone.", ReturnName(playerid, 0));
		SendFactionMessage(factionid, COLOR_FACTIONCHAT, "[Dispatch]: %s %s is now controlling a SWAT drone.**", Faction_GetRank(playerid), ReturnName(playerid, 0));
	}
	else return SendErrorMessage(playerid, "You are not authorized to spawn a drone due to the fact you are not part of the SWAT team.");
	return 1;
}

CMD:despawndrone(playerid, params[])
{
    if (PlayerData[playerid][pSwatMember])
    {
		if (IsPlayerInAnyVehicle(playerid))
		{
		    new vehicleid = GetPlayerVehicleID(playerid);

		    if (CoreVehicles[vehicleid][vehTemporary])
			{
		        CoreVehicles[vehicleid][vehTemporary] = false;
		        DestroyVehicle(vehicleid);

		        ResetVehicle(vehicleid);
		        SendServerMessage(playerid, "You have despawned the drone and you are now back to your previous position.");
			}
		}
	}
	else return SendErrorMessage(playerid, "You are not authorized to despawn a drone due to the fact you are not part of the SWAT team.");
	return 1;
}

CMD:destroyveh(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (!isnull(params) && !strcmp(params, "all", true))
	{
	    for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && CoreVehicles[i][vehTemporary])
		{
	        CoreVehicles[i][vehTemporary] = false;

	        DestroyVehicle(i);
	        ResetVehicle(i);
	    }
	    SendServerMessage(playerid, "You have destroyed the temporary vehicles.");
	    return 1;
	}
	else if (IsPlayerInAnyVehicle(playerid))
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

	    if (CoreVehicles[vehicleid][vehTemporary])
		{
	        CoreVehicles[vehicleid][vehTemporary] = false;
	        DestroyVehicle(vehicleid);

	        ResetVehicle(vehicleid);
	        SendServerMessage(playerid, "You have destroyed this admin vehicle.");
		}
		else
		{
		    SendErrorMessage(playerid, "You cannot destroy a non-temporary vehicle.");
		}
	}
	return 1;
}

CMD:givegun(playerid, params[])
{
	static
	    userid,
	    weaponid,
	    ammo;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "uiI(500)", userid, weaponid, ammo))
	{
	    SendSyntaxMessage(playerid, "/givegun [playerid/name] [weaponid] [ammo]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[IDs]:{FFFFFF} BrassKnuckles(1), Golf(2), Nightstick(3), Knife(4), Baseball Bat(5), Shovel(6), Parachute(46)");
		SendClientMessage(playerid, COLOR_ORANGE, "[IDs]:{FFFFFF} Pool Cue(7), Katana(8), Chainsaw(9), Dildo(10), Dildo2(11), Vibrator(12), Vibrator2(13)");
		SendClientMessage(playerid, COLOR_ORANGE, "[IDs]:{FFFFFF} Flower(14), Cane(15), Grenade(16), TearGas(17), Molotov(18), 9mm(22), Silenced 9mm(23)");
		SendClientMessage(playerid, COLOR_ORANGE, "[IDs]:{FFFFFF} Desert.Eagle(24), Shotgun(25), Sawn-off(26), Combat Shotgun(27), Uzi(28), MP5(29), AK-47(30)");
		SendClientMessage(playerid, COLOR_ORANGE, "[IDs]:{FFFFFF} M4(31), Tec9(32), Rifle(33), Sniper Rifle(34), RPG(35), HS Rocket(36), FlameThrower(37)");
		SendClientMessage(playerid, COLOR_ORANGE, "[IDs]:{FFFFFF} Minigun(38), Satchel Charge(39), Detonator(40), Spraycan(41), Fire.Extinguiser(42),Camera(43)");
		return 1;
	}

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You cannot give weapons to disconnected players.");

	if (!IsPlayerSpawned(userid))
	    return SendErrorMessage(playerid, "You cannot give weapons to unspawned players.");

	if (weaponid < 0 || weaponid > 47)
		return SendErrorMessage(playerid, "Please specify a valid weapon ID.");


	GiveWeaponToPlayer(userid, weaponid, ammo);
	SendAdminAction(playerid, "You have gave %s a %s with %d ammo.", ReturnName(userid, 0), ReturnWeaponName(weaponid), ammo);
	SendAdminAction(userid, "Administrator %s has given you a %s with %d ammo.", ReturnName(playerid, 0), ReturnWeaponName(weaponid), ammo);
	return 1;
}

CMD:setplayer(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	static
	    userid,
	    type[16],
	    amount[32];

	if (sscanf(params, "us[16]S()[32]", userid, type, amount))
 	{
	 	SendSyntaxMessage(playerid, "/setplayer [playerid/name] [name]");
	 	SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} gender, birthdate, origin, bank, savings, hunger, thirst, playinghours, phonenum");
		SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} job, warrants, channel, channel2, channel3, channel4, clothes1, clothes2, clothes3.");
		return 1;
	}
	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (!strcmp(type, "gender", true))
	{
	    if (isnull(amount) || strval(amount) < 1 || strval(amount) > 2)
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [gender] [1: male - 2: female]");

		PlayerData[userid][pGender] = strval(amount);

		if (PlayerData[userid][pGender] == 1)
			SendAdminAction(playerid, "You have set %s's gender to male.", ReturnName(userid, 0));

		else if (PlayerData[userid][pGender] == 2)
			SendAdminAction(playerid, "You have set %s's gender to female.", ReturnName(userid, 0));
	}
	else if (!strcmp(type, "phonenum", true))
	{
	    if (isnull(amount) || strval(amount) > 100000 || strval(amount) < 10000)
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [phonenum] [10000-100000]");

		PlayerData[userid][pPhone] = strval(amount);
		SendAdminAction(playerid, "You have set %s's phone number to \"%d\".", ReturnName(userid, 0), strval(amount));
	}
	else if (!strcmp(type, "birthdate", true))
	{
	    if (isnull(amount) || strlen(amount) > 24)
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [birthdate] [birth date]");

		format(PlayerData[userid][pBirthdate], 24, amount);
		SendAdminAction(playerid, "You have set %s's birthdate to \"%s\".", ReturnName(userid, 0), amount);
	}
	else if (!strcmp(type, "origin", true))
	{
	    if (isnull(amount) || strlen(amount) > 32)
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [origin] [new origin]");

		format(PlayerData[userid][pOrigin], 32, amount);
		SendAdminAction(playerid, "You have set %s's origin to \"%s\".", ReturnName(userid, 0), amount);
	}
	else if (!strcmp(type, "bank", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [bank] [bank funds]");

		PlayerData[userid][pBankMoney] = strval(amount);
		SendAdminAction(playerid, "You have set %s's bank money to %s.", ReturnName(userid, 0), FormatNumber(strval(amount)));
	}
	else if (!strcmp(type, "savings", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [savings] [savings funds]");

		PlayerData[userid][pSavings] = strval(amount);
		SendAdminAction(playerid, "You have set %s's savings to %s.", ReturnName(userid, 0), FormatNumber(strval(amount)));
	}
	else if (!strcmp(type, "hunger", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [hunger] [amount]");

		if (strval(amount) < 0 || strval(amount) > 1000)
		    return SendErrorMessage(playerid, "You can't specify an amount below 0 or above 1,000.");

		PlayerData[userid][pHunger] = strval(amount);
		SendAdminAction(playerid, "You have set %s's hunger to %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "thirst", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [thirst] [amount]");

        if (strval(amount) < 0 || strval(amount) > 1000)
		    return SendErrorMessage(playerid, "You can't specify an amount below 0 or above 1,000.");

		PlayerData[userid][pThirst] = strval(amount);
		SendAdminAction(playerid, "You have set %s's thirst to %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "playinghours", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [playinghours] [amount]");

		PlayerData[userid][pPlayingHours] = strval(amount);
		SendAdminAction(playerid, "You have set %s's playing hours to %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
    else if (!strcmp(type, "job", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [job] [amount]");

		if (strval(amount) < 0 || strval(amount) > 10)
		    return SendErrorMessage(playerid, "You have specified an invalid job ID.");

		PlayerData[userid][pJob] = strval(amount);
		SendAdminAction(playerid, "You have set %s's job to %s.", ReturnName(userid, 0), Job_GetName(PlayerData[userid][pJob]));
	}
    else if (!strcmp(type, "warrants", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [warrants] [amount]");

		PlayerData[userid][pWarrants] = strval(amount);
		SendAdminAction(playerid, "You have set %s's warrants to %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "channel", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [channel] [radio channel]");

		PlayerData[userid][pChannel] = strval(amount);
		SendAdminAction(playerid, "You have set %s's radio channel to %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "channel2", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [channel2] [radio channel]");

		PlayerData[userid][pChannel2] = strval(amount);
		SendAdminAction(playerid, "You have set %s's radio channel (slot 2) to %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "channel3", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [channel3] [radio channel]");

		PlayerData[userid][pChannel3] = strval(amount);
		SendAdminAction(playerid, "You have set %s's radio channel (slot 3) to %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "channel4", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [channel4] [radio channel]");

		PlayerData[userid][pChannel4] = strval(amount);
		SendAdminAction(playerid, "You have set %s's radio channel (slot 4) to %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "clothes1", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [clothes1] [skin ID]");

		PlayerData[userid][pClothes1] = strval(amount);
		SendAdminAction(playerid, "You have set %s's Clothes Slot 1 to %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "clothes2", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [clothes2] [skin ID]");

		PlayerData[userid][pClothes2] = strval(amount);
		SendAdminAction(playerid, "You have set %s's Clothes Slot 2 to %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "clothes3", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [clothes3] [skin ID]");

		PlayerData[userid][pClothes3] = strval(amount);
		SendAdminAction(playerid, "You have set %s's Clothes Slot 3 to %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	return 1;
}

CMD:baninfo(playerid, params[])
{
    static
		string[128];

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (isnull(params) || strlen(params) > 24)
	{
		SendSyntaxMessage(playerid, "/baninfo [username]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[NOTE]:{FFFFFF} Type \"/username\" to resolve the username from a character's name.");
	}
	else
	{
	    format(string, sizeof(string), "SELECT * FROM `blacklist` WHERE `Username` = '%s'", SQL_ReturnEscaped(params));
	    mysql_tquery(g_iHandle, string, "OnBanLookup", "ds", playerid, params);
	}
	return 1;
}

CMD:factionmod(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 6)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/factionmod [playerid/name]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (PlayerData[userid][pFactionMod])
	{
	    PlayerData[userid][pFactionMod] = false;
	    SendAdminAction(playerid, "You have taken away %s's faction management status.", ReturnName(userid, 0));
		SendAdminAction(userid, "%s has kicked you from the faction management team.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[userid][pFactionMod] = true;

        SendAdminAction(playerid, "You have invited %s to the faction management team.", ReturnName(userid, 0));
		SendAdminAction(userid, "%s has invited you to the faction management team.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:propertymod(playerid, params[])
{
	static
	    userid;

    if(PlayerData[playerid][pAdmin] < 6)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if(sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/propertymod [playerid/name]");

	if(userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if(PlayerData[userid][pPropertyMod])
	{
	    PlayerData[userid][pPropertyMod] = false;
	    SendAdminAction(playerid, "You have taken away %s's property management status.", ReturnName(userid, 0));
		SendAdminAction(userid, "%s has kicked you from the property management team.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[userid][pPropertyMod] = true;

        SendAdminAction(playerid, "You have invited %s to the property management team.", ReturnName(userid, 0));
		SendAdminAction(userid, "%s has invited you to the property management team.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:setname(playerid, params[])
{
	static
	    userid,
	    newname[24],
		query[128];

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "us[24]", userid, newname))
	    return SendSyntaxMessage(playerid, "/setname [playerid/name] [new name]");

	if (userid == INVALID_PLAYER_ID)
		return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter])
	    return SendErrorMessage(playerid, "That player hasn't set a character yet.");

	if (!IsValidPlayerName(newname))
	    return SendErrorMessage(playerid, "You have specified an invalid name format.");

	foreach (new i : Player) if (!strcmp(ReturnName(i), newname)) {
	    return SendErrorMessage(playerid, "The specified name is in use.");
	}
	format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `chara` = '%s'", SQL_ReturnEscaped(newname));
	mysql_tquery(g_iHandle, query, "OnNameChange", "dds", playerid, userid, newname);

	return 1;
}

CMD:clearchat(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	for (new i = 0; i < 100; i ++) {
	    SendClientMessageToAll(-1, "");
	}
	return 1;
}

CMD:lcc(playerid, params[])
{
	for (new i = 0; i < 100; i ++) {
	    SendClientMessage(playerid, -1, "");
	}
    SendServerMessage(playerid, "You have cleared your local chat.");
	return 1;
}

CMD:gotopos(playerid, params[])
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
		interior;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "dfff", interior, x, y, z))
	    return SendSyntaxMessage(playerid, "/gotopos [interior] [x] [y] [z]");

	SetPlayerPos(playerid, x, y, z);
	SetPlayerInterior(playerid, interior);

	return 1;
}

CMD:createhouse(playerid, params[])
{
	static
	    price,
	    id,
	    address[32];

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ds[32]", price, address))
	    return SendSyntaxMessage(playerid, "/createhouse [price] [address]");

	for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && !strcmp(HouseData[i][houseAddress], address, true)) {
	    return SendErrorMessage(playerid, "The address \"%s\" is already in use (ID: %d).", address, i);
	}
	id = House_Create(playerid, address, price);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for houses.");

	SendServerMessage(playerid, "You have successfully created house ID: %d.", id);
	return 1;
}

CMD:destroyhouse(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyhouse [house id]");

	if ((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
	    return SendErrorMessage(playerid, "You have specified an invalid house ID.");

	House_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed house ID: %d.", id);
	return 1;
}

CMD:bizcmds(playerid, params[])
{
	SendClientMessage(playerid, COLOR_CLIENT, "BUSINESSES:{FFFFFF} /buy, /abandon, /lock, /vault, /products, /binfo, /bname, /bmessage, /bshipment.");
	return 1;
}

CMD:propertycmds(playerid, params[])
{
	SendClientMessage(playerid, COLOR_CLIENT, "PROPERTY:{FFFFFF} /buy, /abandon, /lock, /storage, /furniture, /buyrack, /gunrack, /deleterack.");
	SendClientMessage(playerid, COLOR_CLIENT, "PROPERTY:{FFFFFF} /doorbell, /switch.");
	return 1;
}

CMD:buy(playerid, params[])
{
	static
		id = -1;

	if ((id = House_Nearest(playerid)) != -1)
	{
		if (House_GetCount(playerid) >= MAX_OWNABLE_HOUSES)
			return SendErrorMessage(playerid, "You can only own %d houses at a time.", MAX_OWNABLE_HOUSES);

		if (HouseData[id][houseOwner] != 0)
		    return SendErrorMessage(playerid, "This house is already owned at the moment.");

		if (HouseData[id][housePrice] > GetMoney(playerid))
		    return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

	    HouseData[id][houseOwner] = GetPlayerSQLID(playerid);

		House_Refresh(id);
		House_Save(id);

	    GiveMoney(playerid, -HouseData[id][housePrice]);
	    SendServerMessage(playerid, "You have purchased \"%s\" for %s!", HouseData[id][houseAddress], FormatNumber(HouseData[id][housePrice]));

		ShowPlayerFooter(playerid, "You have ~g~purchased~w~ a house!");
	}
	else if ((id = Business_Nearest(playerid)) != -1)
	{
	    if (Business_GetCount(playerid) >= MAX_OWNABLE_BUSINESSES && PlayerData[playerid][pAdmin] == 0)
			return SendErrorMessage(playerid, "You can only own %d businesses at a time.", MAX_OWNABLE_BUSINESSES);

		if (BusinessData[id][bizOwner] != 0)
		    return SendErrorMessage(playerid, "This business is already owned at the moment.");

		if (BusinessData[id][bizPrice] > GetMoney(playerid))
		    return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

	    BusinessData[id][bizOwner] = GetPlayerSQLID(playerid);
		BusinessData[id][bizVault] = 0;

		Business_Refresh(id);
		Business_Save(id);

	    GiveMoney(playerid, -BusinessData[id][bizPrice]);
	    SendServerMessage(playerid, "You have purchased \"%s\" for %s!", BusinessData[id][bizName], FormatNumber(BusinessData[id][bizPrice]));

		ShowPlayerFooter(playerid, "You have ~g~purchased~w~ a business!");
	}
	else if ((id = Business_Inside(playerid)) != -1)
	{
		if (BusinessData[id][bizLocked] != 0 || !BusinessData[id][bizOwner])
		    return SendErrorMessage(playerid, "This business is closed!");

		if (BusinessData[id][bizType] == 5) {
		    Business_CarMenu(playerid, id);
		} else {
			Business_PurchaseMenu(playerid, id);
		}
	}
	return 1;
}

CMD:abandon(playerid, params[])
{
	static
	    id = -1;

    if (!IsPlayerInAnyVehicle(playerid) && (id = House_Nearest(playerid)) != -1 && House_IsOwner(playerid, id))
	{
	    if (isnull(params) || (!isnull(params) && strcmp(params, "confirm", true) != 0))
	    {
	        SendSyntaxMessage(playerid, "/abandon [confirm]");
	        SendClientMessage(playerid, COLOR_LIGHTRED, "[Alert]:{FFFFFF} You are about to abandon your house with no refund.");
		}
		else if (!strcmp(params, "confirm", true))
		{
			HouseData[id][houseOwner] = 0;

			House_Refresh(id);
			House_Save(id);

			SendServerMessage(playerid, "You have abandoned your house: %s.", HouseData[id][houseAddress]);
		}
	}
	else if (!IsPlayerInAnyVehicle(playerid) && (id = Business_Nearest(playerid)) != -1 && Business_IsOwner(playerid, id))
	{
	    if (isnull(params) || (!isnull(params) && strcmp(params, "confirm", true) != 0))
	    {
	        SendSyntaxMessage(playerid, "/abandon [confirm]");
	        SendClientMessage(playerid, COLOR_LIGHTRED, "[Alert]:{FFFFFF} You are about to abandon your business with no refund.");
		}
		else if (!strcmp(params, "confirm", true))
		{
			BusinessData[id][bizOwner] = 0;

			Business_Refresh(id);
			Business_Save(id);

			SendServerMessage(playerid, "You have abandoned your business: %s.", BusinessData[id][bizName]);
		}
	}
	else if ((id = Car_Inside(playerid)) != -1 && Car_IsOwner(playerid, id))
	{
	    if (isnull(params) || (!isnull(params) && strcmp(params, "confirm", true) != 0))
	    {
	        SendSyntaxMessage(playerid, "/abandon [confirm]");
	        SendClientMessage(playerid, COLOR_LIGHTRED, "[Alert]:{FFFFFF} You are about to abandon your vehicle with no refund.");
		}
		else if (CarData[id][carImpounded] != -1)
    		return SendErrorMessage(playerid, "This vehicle is impounded and you can't use it.");

		else if (!strcmp(params, "confirm", true))
		{
			new
			    model = CarData[id][carModel];

			Car_Delete(id);

			SendServerMessage(playerid, "You have abandoned your %s.", ReturnVehicleModelName(model));
		}
	}
	else SendErrorMessage(playerid, "You are not in range of anything you can abandon.");
	return 1;
}

CMD:switch(playerid, params[])
{
	static
	    id = -1;

	if ((id = House_Inside(playerid)) != -1)
	{
		if (!HouseData[id][houseLights])
		{
		    foreach (new i : Player) if (House_Inside(i) == id) {
		        PlayerTextDrawHide(i, PlayerData[i][pTextdraws][62]);
		    }
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s flicks the light switch on.", ReturnName(playerid, 0));
		    HouseData[id][houseLights] = true;
		}
		else
		{
		    foreach (new i : Player) if (House_Inside(i) == id) {
		        PlayerTextDrawShow(i, PlayerData[i][pTextdraws][62]);
		    }
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s flicks the light switch off.", ReturnName(playerid, 0));
		    HouseData[id][houseLights] = false;
		}
	}
	else {
	    SendErrorMessage(playerid, "You must be in a house to use the lights.");
	}
	return 1;
}

CMD:lock(playerid, params[])
{
	static
	    id = -1,
		string[128];

	if (!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1 && House_IsOwner(playerid, id))
	{
		if (!HouseData[id][houseLocked])
		{
			HouseData[id][houseLocked] = true;
			House_Save(id);

			ShowPlayerFooter(playerid, "You have ~r~locked~w~ your house!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s has locked their house.", ReturnName(playerid, 2));
			SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
			SendClientMessageEx(playerid, COLOR_PURPLE, string);
		}
		else
		{
			HouseData[id][houseLocked] = false;
			House_Save(id);

			ShowPlayerFooter(playerid, "You have ~g~unlocked~w~ your house!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s has unlocked their house.", ReturnName(playerid, 2));
			SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
			SendClientMessageEx(playerid, COLOR_PURPLE, string);
		}
	}
	else if (!IsPlayerInAnyVehicle(playerid) && (id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
	{
		if (Business_IsOwner(playerid, id))
		{
			if (!BusinessData[id][bizLocked])
			{
				BusinessData[id][bizLocked] = true;

				Business_Refresh(id);
				Business_Save(id);

				ShowPlayerFooter(playerid, "You have ~r~locked~w~ the business!");
				format(string, sizeof(string), "* %s has locked their business.", ReturnName(playerid, 2));
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
				SendClientMessageEx(playerid, COLOR_PURPLE, string);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
  			else
			{
				BusinessData[id][bizLocked] = false;

				Business_Refresh(id);
				Business_Save(id);

				ShowPlayerFooter(playerid, "You have ~g~unlocked~w~ the business!");
				format(string, sizeof(string), "* %s has unlocked their business.", ReturnName(playerid, 2));
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
				SendClientMessageEx(playerid, COLOR_PURPLE, string);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
		}
	}
	else if (!IsPlayerInAnyVehicle(playerid) && (id = (Entrance_Inside(playerid) == -1) ? (Entrance_Nearest(playerid)) : (Entrance_Inside(playerid))) != -1)
	{
		if (strlen(EntranceData[id][entrancePass]))
		{
			Dialog_Show(playerid, EntrancePass, DIALOG_STYLE_INPUT, "Entrance Pass", "Please enter the password for this entrance:", "Submit", "Cancel");
		}
	}
	else if ((id = Car_Nearest(playerid)) != -1)
	{
	    static
	        engine,
	        lights,
	        alarm,
	        doors,
	        bonnet,
	        boot,
	        objective;

	    GetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);

	    if (Car_IsOwner(playerid, id) || CarData[id][carFaction] == GetFactionType(playerid) && CarData[id][carFaction] != 0 || PlayerData[playerid][pJob] == CarData[id][carJob] && CarData[id][carJob] != 0 || CoreVehicles[CarData[id][carVehicle]][vehWindowsDown] == 1)
	    {
			if (!CarData[id][carLocked])
			{
				CarData[id][carLocked] = true;
				Car_Save(id);

				ShowPlayerFooter(playerid, "You have ~r~locked~w~ the vehicle!");
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "* %s has locked their vehicle.", ReturnName(playerid, 2));
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
				SendClientMessageEx(playerid, COLOR_PURPLE, string);
				SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
			}
			else
			{
				CarData[id][carLocked] = false;
				Car_Save(id);

				ShowPlayerFooter(playerid, "You have ~g~unlocked~w~ the vehicle!");
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "* %s has unlocked their vehicle.", ReturnName(playerid, 2));
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
				SendClientMessageEx(playerid, COLOR_PURPLE, string);
				SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 0, bonnet, boot, objective);
			}
		}
	}
	else SendErrorMessage(playerid, "You are not in range of anything you can lock.");
	return 1;
}

CMD:debugcar(playerid, params[])
{
	new id = Car_Nearest(playerid);
	SendClientMessageEx(playerid, -1, "cowner:%i || cardatafac:%i = playerfactype:%i || playerjob:%i = carjob:%i", Car_IsOwner(playerid, id), CarData[id][carFaction], GetFactionType(playerid), PlayerData[playerid][pJob], CarData[id][carJob]);
	return 1;
}

CMD:sell(playerid, params[])
{
	static
	    targetid,
	    type[24],
	    string[128];

	if(PlayerData[playerid][pPlayingHours] < 3)
		return SendErrorMessage(playerid, "You must be at least level 3 to use /sell.");

	if (sscanf(params, "us[24]S()[128]", targetid, type, string))
	{
	    SendSyntaxMessage(playerid, "/sell [playerid/name] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} house, business, vehicle");
	    return 1;
	}
	if (targetid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, targetid, 5.0))
	{
		SendErrorMessage(playerid, "The player is disconnected or not near you.");
		return 1;
	}
	if (targetid == playerid)
	{
		SendErrorMessage(playerid, "You cannot sell to yourself.");
		return 1;
	}
	if (!strcmp(type, "house", true))
	{
		static
		    price,
			houseid = -1;

		if (sscanf(string, "d", price))
			return SendSyntaxMessage(playerid, "/sell [playerid/name] [house] [price]");

		if (price < 1)
		    return SendErrorMessage(playerid, "The price you've entered cannot below the value of $1.");

		if ((houseid = House_Nearest(playerid)) != -1 && House_IsOwner(playerid, houseid)) {
			PlayerData[targetid][pHouseSeller] = playerid;
			PlayerData[targetid][pHouseOffered] = houseid;
			PlayerData[targetid][pHouseValue] = price;

		    SendServerMessage(playerid, "You have requested %s to purchase your house (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendServerMessage(targetid, "%s has offered you their house for %s (type \"/approve house\" to accept).", ReturnName(playerid, 0), FormatNumber(price));
		}
		else SendErrorMessage(playerid, "You are not in range of any of your houses.");
	}
	else if (!strcmp(type, "business", true))
	{
		static
		    price,
			bizid = -1;

		if (sscanf(string, "d", price))
			return SendSyntaxMessage(playerid, "/sell [playerid/name] [business] [price]");

		if (price < 1)
		    return SendErrorMessage(playerid, "The price you've entered cannot below the value of $1.");

		if ((bizid = Business_Nearest(playerid)) != -1 && Business_IsOwner(playerid, bizid)) {
			PlayerData[targetid][pBusinessSeller] = playerid;
			PlayerData[targetid][pBusinessOffered] = bizid;
			PlayerData[targetid][pBusinessValue] = price;

		    SendServerMessage(playerid, "You have requested %s to purchase your business (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendServerMessage(targetid, "%s has offered you their business for %s (type \"/approve business\" to accept).", ReturnName(playerid, 0), FormatNumber(price));
		}
		else SendErrorMessage(playerid, "You are not in range of any of your businesses.");
	}
	else if (!strcmp(type, "vehicle", true))
	{
		static
		    price,
			carid = -1;

		if (sscanf(string, "d", price))
			return SendSyntaxMessage(playerid, "/sell [playerid/name] [veh] [price]");

		if (price < 1)
		    return SendErrorMessage(playerid, "The price you've entered cannot below the value of $1.");

		if ((carid = Car_Inside(playerid)) != -1 && Car_IsOwner(playerid, carid)) {
			PlayerData[targetid][pCarSeller] = playerid;
			PlayerData[targetid][pCarOffered] = carid;
			PlayerData[targetid][pCarValue] = price;

		    SendServerMessage(playerid, "You have requested %s to purchase your %s (%s).", ReturnName(targetid, 0), ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(price));
            SendServerMessage(targetid, "%s has offered you their %s for %s (type \"/approve car\" to accept).", ReturnName(playerid, 0), ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(price));
		}
		else SendErrorMessage(playerid, "You are not inside any of your vehicles.");
	}
	return 1;
}

CMD:approve(playerid, params[])
{
	if (isnull(params))
 	{
	 	SendSyntaxMessage(playerid, "/approve [name]");
		SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} house, business, car, food, faction, greet, frisk, loan");
		return 1;
	}
	if (!strcmp(params, "house", true) && PlayerData[playerid][pHouseSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pHouseSeller],
	        houseid = PlayerData[playerid][pHouseOffered],
	        price = PlayerData[playerid][pHouseValue];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "You are not near that player.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "You have insufficient funds to purchase this house.");

		if (House_Nearest(playerid) != houseid)
		    return SendErrorMessage(playerid, "You must be near the house to purchase it.");

		if (!House_IsOwner(sellerid, houseid))
		    return SendErrorMessage(playerid, "This house offer is no longer valid.");

		SendServerMessage(playerid, "You have successfully purchased %s's house for %s.", ReturnName(sellerid, 0), FormatNumber(price));
		SendServerMessage(sellerid, "%s has successfully purchased your house for %s.", ReturnName(playerid, 0), FormatNumber(price));

		HouseData[houseid][houseOwner] = GetPlayerSQLID(playerid);
		House_Save(houseid);

		GiveMoney(playerid, -price);
		GiveMoney(sellerid, price);

		PlayerData[playerid][pHouseSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pHouseOffered] = -1;
		PlayerData[playerid][pHouseValue] = 0;
	}
	if (!strcmp(params, "business", true) && PlayerData[playerid][pBusinessSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pBusinessSeller],
	        bizid = PlayerData[playerid][pBusinessOffered],
	        price = PlayerData[playerid][pBusinessValue];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "You are not near that player.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "You have insufficient funds to purchase this business.");

		if (Business_Nearest(playerid) != bizid)
		    return SendErrorMessage(playerid, "You must be near the business to purchase it.");

		if (!Business_IsOwner(sellerid, bizid))
		    return SendErrorMessage(playerid, "This business offer is no longer valid.");

		SendServerMessage(playerid, "You have successfully purchased %s's business for %s.", ReturnName(sellerid, 0), FormatNumber(price));
		SendServerMessage(sellerid, "%s has successfully purchased your business for %s.", ReturnName(playerid, 0), FormatNumber(price));

		BusinessData[bizid][bizOwner] = GetPlayerSQLID(playerid);
		Business_Save(bizid);

		GiveMoney(playerid, -price);
		GiveMoney(sellerid, price);

		PlayerData[playerid][pBusinessSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pBusinessOffered] = -1;
		PlayerData[playerid][pBusinessValue] = 0;
	}
	if (!strcmp(params, "car", true) && PlayerData[playerid][pCarSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pCarSeller],
	        carid = PlayerData[playerid][pCarOffered],
	        price = PlayerData[playerid][pCarValue];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "You are not near that player.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "You have insufficient funds to purchase this vehicle.");

		if (Car_Nearest(playerid) != carid)
		    return SendErrorMessage(playerid, "You must be near the vehicle to purchase it.");

		if (!Car_IsOwner(sellerid, carid))
		    return SendErrorMessage(playerid, "This vehicle offer is no longer valid.");

		SendServerMessage(playerid, "You have successfully purchased %s's %s for %s.", ReturnName(sellerid, 0), ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(price));
		SendServerMessage(sellerid, "%s has successfully purchased your %s for %s.", ReturnName(playerid, 0), ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(price));

		CarData[carid][carOwner] = GetPlayerSQLID(playerid);
		Car_Save(carid);

		GiveMoney(playerid, -price);
		GiveMoney(sellerid, price);

		PlayerData[playerid][pCarSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pCarOffered] = -1;
		PlayerData[playerid][pCarValue] = 0;
	}
	if (!strcmp(params, "food", true) && PlayerData[playerid][pFoodSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pFoodSeller],
			type = PlayerData[playerid][pFoodType],
	        price = PlayerData[playerid][pFoodPrice];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "You are not near that player.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "You have insufficient funds for the food.");

		switch (type)
		{
		    case 1:
		    {
				new id = Inventory_Add(playerid, "Water Bottle", 2958);

				if (id == -1)
				    return SendErrorMessage(playerid, "You don't have anymore room in your inventory.");

		        SendServerMessage(playerid, "You have purchased some water from %s for $%d (added to inventory).", ReturnName(sellerid, 2), price);
		        SendServerMessage(sellerid, "%s has accepted the water for $%d.", ReturnName(playerid, 2), price);
		        GiveMoney(playerid, -price);
				GiveMoney(sellerid, price);
			}
			case 2:
		    {
				new id = Inventory_Add(playerid, "Soda", 1543);

				if (id == -1)
				    return SendErrorMessage(playerid, "You don't have anymore room in your inventory.");

		        SendServerMessage(playerid, "You have purchased a soda from %s for $%d (added to inventory).", ReturnName(sellerid, 2), price);
		        SendServerMessage(sellerid, "%s has accepted the soda for $%d.", ReturnName(playerid, 2), price);
		        GiveMoney(playerid, -price);
				GiveMoney(sellerid, price);
			}
			case 3:
		    {
				new id = Inventory_Add(playerid, "Cooked Burger", 2703);

				if (id == -1)
				    return SendErrorMessage(playerid, "You don't have anymore room in your inventory.");

		        SendServerMessage(playerid, "You have purchased a burger from %s for $%d (added to inventory).", ReturnName(sellerid, 2), price);
		        SendServerMessage(sellerid, "%s has accepted the burger for $%d.", ReturnName(playerid, 2), price);
		        GiveMoney(playerid, -price);
				GiveMoney(sellerid, price);
			}
			case 4:
		    {
				new id = Inventory_Add(playerid, "Cooked Pizza", 2702);

				if (id == -1)
				    return SendErrorMessage(playerid, "You don't have anymore room in your inventory.");

		        SendServerMessage(playerid, "You have purchased a slice of pizza from %s for $%d (added to inventory).", ReturnName(sellerid, 2), price);
		        SendServerMessage(sellerid, "%s has accepted the slice of pizza for $%d.", ReturnName(playerid, 2), price);
		        GiveMoney(playerid, -price);
				GiveMoney(sellerid, price);
			}
			case 5:
		    {
				new id = Inventory_Add(playerid, "Chicken", 2663);

				if (id == -1)
				    return SendErrorMessage(playerid, "You don't have anymore room in your inventory.");

		        SendServerMessage(playerid, "You have purchased some chicken from %s for $%d (added to inventory).", ReturnName(sellerid, 2), price);
		        SendServerMessage(sellerid, "%s has accepted the chicken for $%d.", ReturnName(playerid, 2), price);
		        GiveMoney(playerid, -price);
				GiveMoney(sellerid, price);
			}
		}
		PlayerData[playerid][pFoodSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pFoodType] = 0;
		PlayerData[playerid][pFoodPrice] = 0;
	}
	if (!strcmp(params, "faction", true) && PlayerData[playerid][pFactionOffer] != INVALID_PLAYER_ID)
	{
	    new
	        targetid = PlayerData[playerid][pFactionOffer],
	        factionid = PlayerData[playerid][pFactionOffered];

		if (!FactionData[factionid][factionExists] || PlayerData[targetid][pFactionRank] < FactionData[PlayerData[targetid][pFaction]][factionRanks] - 5)
	   	 	return SendErrorMessage(playerid, "The faction offer is no longer available.");

		SetFaction(playerid, factionid);
		PlayerData[playerid][pFactionRank] = 1;
		PlayerData[playerid][pFactionDivision] = 1;

		SendServerMessage(playerid, "You have accepted %s's offer to join \"%s\".", ReturnName(targetid, 0), Faction_GetName(targetid));
		SendServerMessage(targetid, "%s has accepted your offer to join \"%s\".", ReturnName(playerid, 0), Faction_GetName(targetid));

        PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
        PlayerData[playerid][pFactionOffered] = -1;
	}
	if (!strcmp(params, "greet", true) && PlayerData[playerid][pShakeOffer] != INVALID_PLAYER_ID)
	{
	    new
	        targetid = PlayerData[playerid][pShakeOffer],
	        type = PlayerData[playerid][pShakeType];

        if (!IsPlayerNearPlayer(playerid, targetid, 6.0))
		    return SendErrorMessage(playerid, "You are not near that player.");

		SetPlayerToFacePlayer(playerid, targetid);
		SetPlayerToFacePlayer(targetid, playerid);

		PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
		PlayerData[playerid][pShakeType] = 0;

		switch (type)
		{
		    case 1:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 3:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 4:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 5:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 6:
			{
			    ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
			    ApplyAnimation(targetid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
			}
	    }
	    SendServerMessage(playerid, "You have accepted %s's handshake.", ReturnName(targetid, 2));
	    SendServerMessage(targetid, "%s has accepted your handshake.", ReturnName(playerid, 2));
	}
	if (!strcmp(params, "frisk", true) && PlayerData[playerid][pFriskOffer] != INVALID_PLAYER_ID)
	{
	    new
			targetid = PlayerData[playerid][pFriskOffer];

	    if (!IsPlayerNearPlayer(playerid, targetid, 6.0))
		    return SendErrorMessage(playerid, "You are not near that player.");

		new
		    models[MAX_INVENTORY],
		    amount[MAX_INVENTORY];

        SendServerMessage(playerid, "You have accepted %s's frisk.", ReturnName(targetid, 2));
	    SendServerMessage(targetid, "%s has accepted your frisk.", ReturnName(playerid, 2));

		for (new i = 0; i < PlayerData[playerid][pCapacity]; i ++)
		{
	 		if (InventoryData[playerid][i][invExists]) {
	   			models[i] = InventoryData[playerid][i][invModel];
	   			amount[i] = InventoryData[playerid][i][invQuantity];
			}
			else {
			    models[i] = -1;
			    amount[i] = -1;
			}
		}
		PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
		ShowModelSelectionMenu(targetid, ReturnName(playerid), MODEL_SELECTION_FRISK, models, sizeof(models), 0.0, 0.0, 0.0, 1.0, -1, true, amount);
	}
	if (!strcmp(params, "loan", true) && PlayerData[playerid][pLoanOffer] != INVALID_PLAYER_ID)
	{
	    new
	        targetid = PlayerData[playerid][pLoanOffer];

		PlayerData[playerid][pLoan] = 1;

		SendServerMessage(playerid, "You have signed %s's loan contract.", ReturnName(targetid, 0));
		SendServerMessage(targetid, "%s has signed the contract you have offered to him.", ReturnName(playerid, 0));

        PlayerData[playerid][pLoanOffer] = INVALID_PLAYER_ID;
        PlayerData[playerid][pLoanOffered] = -1;

	}
	return 1;
}

CMD:storage(playerid, params[])
{
	static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE)) {
	    House_OpenStorage(playerid, houseid);
	}
	else SendErrorMessage(playerid, "You are not in range of your house interior.");
	return 1;
}

CMD:edithouse(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/edithouse [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} location, interior, price, address, type");
		return 1;
	}
	if ((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
	    return SendErrorMessage(playerid, "You have specified an invalid house ID.");

	if (!strcmp(type, "location", true))
	{
		GetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
		GetPlayerFacingAngle(playerid, HouseData[id][housePos][3]);

		HouseData[id][houseExterior] = GetPlayerInterior(playerid);
		HouseData[id][houseExteriorVW] = GetPlayerVirtualWorld(playerid);

		House_Refresh(id);
		House_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the location of house ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "interior", true))
	{
	    GetPlayerPos(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
		GetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);

		HouseData[id][houseInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
		{
			if (PlayerData[i][pHouse] == HouseData[id][houseID])
			{
				SetPlayerPos(i, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
				SetPlayerFacingAngle(i, HouseData[id][houseInt][3]);

				SetPlayerInterior(i, HouseData[id][houseInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		House_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the interior spawn of house ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "price", true))
	{
	    new price;

	    if (sscanf(string, "d", price))
	        return SendSyntaxMessage(playerid, "/edithouse [id] [price] [new price]");

	    HouseData[id][housePrice] = price;

	    House_Refresh(id);
	    House_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the price of house ID: %d to %s.", ReturnName(playerid, 0), id, FormatNumber(price));
	}
	else if (!strcmp(type, "address", true))
	{
	    new address[32];

	    if (sscanf(string, "s[32]", address))
	        return SendSyntaxMessage(playerid, "/edithouse [id] [address] [new address]");

	    format(HouseData[id][houseAddress], 32, address);

	    House_Refresh(id);
	    House_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the address of house ID: %d to \"%s\".", ReturnName(playerid, 0), id, address);
	}
	else if (!strcmp(type, "type", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	        return SendSyntaxMessage(playerid, "/edithouse [id] [type] [interior type]");

		if (typeint < 1 || typeint > sizeof(arrHouseInteriors))
			return SendErrorMessage(playerid, "The specified type must be between 1 and %d.", sizeof(arrHouseInteriors));

	    HouseData[id][houseInt][0] = arrHouseInteriors[typeint][eHouseX];
	    HouseData[id][houseInt][1] = arrHouseInteriors[typeint][eHouseY];
	    HouseData[id][houseInt][2] = arrHouseInteriors[typeint][eHouseZ];
	    HouseData[id][houseInt][3] = arrHouseInteriors[typeint][eHouseAngle];
        HouseData[id][houseInterior] = arrHouseInteriors[typeint][eHouseInterior];

		foreach (new i : Player)
		{
			if (PlayerData[i][pHouse] == HouseData[id][houseID])
			{
				SetPlayerPos(i, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
				SetPlayerFacingAngle(i, HouseData[id][houseInt][3]);

				SetPlayerInterior(i, HouseData[id][houseInterior]);
				SetCameraBehindPlayer(i);
			}
		}
	    House_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the type of house ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
	}
	return 1;
}

CMD:near(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if ((id = House_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "You are standing near house ID: %d.", id);

    if ((id = Business_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "You are standing near business ID: %d.", id);

    if ((id = Entrance_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "You are standing near entrance ID: %d.", id);

    if ((id = Job_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "You are standing near job ID: %d.", id);

    if ((id = Arrest_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "You are standing near arrest point ID: %d.", id);

    if ((id = Pump_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "You are standing near pump ID: %d.", id);

    if ((id = Crate_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "You are standing near crate ID: %d.", id);

    if ((id = Gate_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "You are standing near gate ID: %d.", id);

    if ((id = ATM_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "You are standing near ATM ID: %d.", id);

    if ((id = Garbage_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "You are standing near garbage bin ID: %d.", id);

    if ((id = Vendor_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "You are standing near vendor ID: %d.", id);

	if ((id = Rack_Nearest(playerid)) != -1)
 		SendServerMessage(playerid, "You are standing near weapon rack ID: %d.", id);

    if ((id = Speed_Nearest(playerid)) != -1)
 		SendServerMessage(playerid, "You are standing near speed camera ID: %d.", id);

    if ((id = Graffiti_Nearest(playerid)) != -1)
 		SendServerMessage(playerid, "You are standing near graffiti ID: %d.", id);

    if ((id = Detector_Nearest(playerid)) != -1)
 		SendServerMessage(playerid, "You are standing near detector ID: %d.", id);

	else 
	{
		SendServerMessage(playerid, "You are not standing near any ID's to process.", id);
	}
	return 1;
}

CMD:createbiz(playerid, params[])
{
    static
		type,
	    price,
	    id;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "dd", type, price))
 	{
	 	SendSyntaxMessage(playerid, "/createbiz [type] [price]");
		SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Retail | 2: Weapons | 3: Clothes | 4: Fast Food | 5: Dealership");
		SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 6: Gas Station | 7: Furniture | 8: Pawn Shop | 9: Post Office | 10: Bait Shop");
    	return 1;
	}
	if (type < 1 || type > 10)
	    return SendErrorMessage(playerid, "Invalid type specified. Types range from 1 to 10.");

	id = Business_Create(playerid, type, price);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for businesses.");

	SendServerMessage(playerid, "You have successfully created business ID: %d.", id);
	return 1;
}

CMD:editbiz(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editbiz [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} location, interior, deliver, name, price, stock, type, pickup, cars, spawn");
		return 1;
	}
	if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
	    return SendErrorMessage(playerid, "You have specified an invalid business ID.");

	if (!strcmp(type, "location", true))
	{
 		GetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
		GetPlayerFacingAngle(playerid, BusinessData[id][bizPos][3]);

		BusinessData[id][bizExterior] = GetPlayerInterior(playerid);
		BusinessData[id][bizExteriorVW] = GetPlayerVirtualWorld(playerid);

		Business_Refresh(id);
		Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the location of business ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "interior", true))
	{
	    GetPlayerPos(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
		GetPlayerFacingAngle(playerid, BusinessData[id][bizInt][3]);

		BusinessData[id][bizInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
		{
			if (PlayerData[i][pBusiness] == BusinessData[id][bizID])
			{
				SetPlayerPos(i, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
				SetPlayerFacingAngle(i, BusinessData[id][bizInt][3]);

				SetPlayerInterior(i, BusinessData[id][bizInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the interior spawn of business ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "deliver", true))
	{
	    if (BusinessData[id][bizType] == 5)
	        return SendErrorMessage(playerid, "This business doesn't accept deliveries.");

	    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	        return SendErrorMessage(playerid, "You can only place the delivery point outside interiors.");

	    GetPlayerPos(playerid, BusinessData[id][bizDeliver][0], BusinessData[id][bizDeliver][1], BusinessData[id][bizDeliver][2]);
		Business_Refresh(id);

		Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the deliver point of business ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "price", true))
	{
	    new price;

	    if (sscanf(string, "d", price))
	        return SendSyntaxMessage(playerid, "/editbiz [id] [price] [new price]");

	    BusinessData[id][bizPrice] = price;

	    Business_Refresh(id);
	    Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the price of business ID: %d to %s.", ReturnName(playerid, 0), id, FormatNumber(price));
	}
	else if (!strcmp(type, "stock", true))
	{
	    new amount;

	    if (sscanf(string, "d", amount))
	        return SendSyntaxMessage(playerid, "/editbiz [id] [stock] [product amount]");

	    BusinessData[id][bizProducts] = amount;

	    Business_Refresh(id);
	    Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the stock of business ID: %d to %s products.", ReturnName(playerid, 0), id, FormatNumber(amount, ""));
	}
	else if (!strcmp(type, "name", true))
	{
	    new name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/editbiz [id] [name] [new name]");

	    format(BusinessData[id][bizName], 32, name);

	    Business_Refresh(id);
	    Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the name of business ID: %d to \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "pickup", true))
	{
	    new pickupid;

	    if (sscanf(string, "d", pickupid))
	        return SendSyntaxMessage(playerid, "/editbiz [id] [pickup] [pickupid]");

	    BusinessData[id][bizPickup] = pickupid;

	    Business_Refresh(id);
	    Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the pickup of business ID: %d to \"%d\".", ReturnName(playerid, 0), id, pickupid);
	}
	else if (!strcmp(type, "type", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	    {
	        SendSyntaxMessage(playerid, "/editbiz [id] [type] [business type]");
			SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Retail | 2: Weapons | 3: Clothes | 4: Fast Food | 5: Dealership");
			SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 6: Gas Station | 7: Furniture | 8: Pawn Shop | 9: Post Office 10: Bait Shop");
			return 1;
		}
		if (typeint < 1 || typeint > 10)
			return SendErrorMessage(playerid, "The specified type must be between 1 and 10.");

        BusinessData[id][bizType] = typeint;

        switch (typeint)
		{
            case 1: {
            	BusinessData[id][bizInt][0] = -27.3074;
           		BusinessData[id][bizInt][1] = -30.8741;
            	BusinessData[id][bizInt][2] = 1003.5573;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 4;
            }
            case 2: {
            	BusinessData[id][bizInt][0] = 316.3963;
            	BusinessData[id][bizInt][1] = -169.8375;
            	BusinessData[id][bizInt][2] = 999.6010;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 6;
			}
			case 3: {
            	BusinessData[id][bizInt][0] = 161.4801;
            	BusinessData[id][bizInt][1] = -96.5368;
            	BusinessData[id][bizInt][2] = 1001.8047;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 18;
			}
			case 4: {
            	BusinessData[id][bizInt][0] = 363.3402;
            	BusinessData[id][bizInt][1] = -74.6679;
            	BusinessData[id][bizInt][2] = 1001.5078;
            	BusinessData[id][bizInt][3] = 315.0000;
				BusinessData[id][bizInterior] = 10;
			}
			case 5: {
            	BusinessData[id][bizInt][0] = 1494.5612;
            	BusinessData[id][bizInt][1] = 1304.2061;
            	BusinessData[id][bizInt][2] = 1093.2891;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 3;
			}
			case 6: {
				BusinessData[id][bizInt][0] = -27.3383;
   				BusinessData[id][bizInt][1] = -57.6909;
			   	BusinessData[id][bizInt][2] = 1003.5469;
      			BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 6;
			}
			case 7:
			{
				BusinessData[id][bizInt][0] = -2240.4954;
   				BusinessData[id][bizInt][1] = 128.3774;
			   	BusinessData[id][bizInt][2] = 1035.4210;
      			BusinessData[id][bizInt][3] = 270.0000;
				BusinessData[id][bizInterior] = 6;
			}
			case 8:
			{
				BusinessData[id][bizInt][0] = -2240.468505;
				BusinessData[id][bizInt][1] = 137.060440;
  				BusinessData[id][bizInt][2] = 1035.414062;
  				BusinessData[id][bizInt][3] = 500.0000;
				BusinessData[id][bizInterior] = 6;
			}
			case 9:
			{
				BusinessData[id][bizInt][0] = -107.2430;
				BusinessData[id][bizInt][1] = 2021.8199;
  				BusinessData[id][bizInt][2] = 901.0859;
  				BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 3;
			}
			case 10:
			{
				BusinessData[id][bizInt][0] = -27.312299;
				BusinessData[id][bizInt][1] = -29.277599;
  				BusinessData[id][bizInt][2] = 1003.557250;
  				BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 4;
			}

		}
		foreach (new i : Player)
		{
			if (PlayerData[i][pBusiness] == BusinessData[id][bizID])
			{
				SetPlayerPos(i, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
				SetPlayerFacingAngle(i, BusinessData[id][bizInt][3]);

				SetPlayerInterior(i, BusinessData[id][bizInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		Business_Refresh(id);

	    Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the type of business ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
	}
	else if (!strcmp(type, "cars", true))
	{
	    if (BusinessData[id][bizType] != 5)
	        return SendErrorMessage(playerid, "This business is not a dealership!");

		PlayerData[playerid][pDealership] = id;
		Business_EditCars(playerid, id);
	}
	else if (!strcmp(type, "spawn", true))
	{
	    if (BusinessData[id][bizType] != 5)
	        return SendErrorMessage(playerid, "This business is not a dealership!");

	    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	        return SendErrorMessage(playerid, "You can only place the vehicle spawn outside interiors.");

	    GetPlayerPos(playerid, BusinessData[id][bizSpawn][0], BusinessData[id][bizSpawn][1], BusinessData[id][bizSpawn][2]);
		GetPlayerFacingAngle(playerid, BusinessData[id][bizSpawn][3]);

		BusinessData[id][bizExterior] = GetPlayerInterior(playerid);

		Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the vehicle spawn of business ID: %d.", ReturnName(playerid, 0), id);
	}
	return 1;
}

CMD:products(playerid, params[])
{
	static
	    bizid = -1;

	if(PlayerData[playerid][pAdmin] < 5)
		return SendErrorMessage(playerid, "You do not have permission to use this command.");

	if ((bizid = Business_Inside(playerid)) != -1)// && Business_IsOwner(playerid, bizid))
	{
	    Business_ProductMenu(playerid, bizid);
	}
	else SendErrorMessage(playerid, "You are not inside a business.");
	return 1;
}

CMD:bizstate(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/bizstate [biz id]");

	if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
	    return SendErrorMessage(playerid, "You have specified an invalid business ID.");

	BusinessData[id][bizOwner] = 99999999;

	Business_Refresh(id);
	Business_Save(id);

	SendServerMessage(playerid, "This business is now owned by the state (/bizcmds).", id);
	return 1;
}

CMD:destroybiz(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroybiz [biz id]");

	if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
	    return SendErrorMessage(playerid, "You have specified an invalid business ID.");

	Business_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed business ID: %d.", id);
	return 1;
}

CMD:cigarette(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "You can't use this command now.");

	if (PlayerData[playerid][pSmoking])
	    return SendErrorMessage(playerid, "You are already smoking a cigarette.");

    if (!Inventory_HasItem(playerid, "Cigar"))
    	return SendErrorMessage(playerid, "You don't have any packs of cigarettes on you.");

    PlayerData[playerid][pSmoking] = 1;
    PlayerData[playerid][pSmokeBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);
    ShowPlayerProgressBar(playerid, PlayerData[playerid][pSmokeBar]);

    SetPlayerProgressBarValue(playerid, PlayerData[playerid][pSmokeBar], 100.0);
	Inventory_Remove(playerid, "Cigar");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a cigarette from its pack and lights it up.", ReturnName(playerid, 0));
	ShowPlayerFooter(playerid, "Press ~y~LMB~w~ to take a puff.");
	return 1;
}

CMD:drink(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "You can't use this command now.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/drink [water/soda]");

	if (PlayerData[playerid][pDrinking])
	    return SendErrorMessage(playerid, "You are already drinking from a bottle.");

	if (!strcmp(params, "soda", true))
	{
	    if (!Inventory_HasItem(playerid, "Soda"))
	    	return SendErrorMessage(playerid, "You don't have any bottles of soda on you.");

		if (PlayerData[playerid][pThirst] > 90)
	    	return SendErrorMessage(playerid, "You are not thirsty right now.");

        PlayerData[playerid][pDrinking] = 1;
        PlayerData[playerid][pDrinkBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);

        ShowPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
        SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], 100.0);

		Inventory_Add(playerid, "Empty Bottle", 1484);
		Inventory_Remove(playerid, "Soda");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);

 		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a bottle of soda and opens it.", ReturnName(playerid, 0));
 		ShowPlayerFooter(playerid, "Press ~y~LMB~w~ to take a sip.");
	}
	else if (!strcmp(params, "water", true))
	{
	    if (!Inventory_HasItem(playerid, "Water Bottle"))
	    	return SendErrorMessage(playerid, "You don't have any bottles of water on you.");

		if (PlayerData[playerid][pThirst] > 90)
	    	return SendErrorMessage(playerid, "You are not thirsty right now.");

        PlayerData[playerid][pDrinking] = 2;
        PlayerData[playerid][pDrinkBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);

        ShowPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
        SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], 100.0);

		Inventory_Add(playerid, "Empty Bottle", 1484);
		Inventory_Remove(playerid, "Water Bottle");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);

 		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a bottle of water and opens it.", ReturnName(playerid, 0));
 		ShowPlayerFooter(playerid, "Press ~y~LMB~w~ to take a sip.");
	}
	return 1;
}

// Helmet system
/*CMD:helmet(playerid, params[])
{
        if(IsPlayerInAnyVehicle(playerid) == 1)
        {
                ShowPlayerDialog(playerid,DIALOG_HELMETSELECT,DIALOG_STYLE_LIST,"Select the helmet you wish to use.", "Helmet 1 - Fire Stripes. \n Helmet 2 - Blue and white motocross style. \n Helmet 3 - Red. \n Helmet 4 - White. \n Helmet 5 - Purple / pink. \n Remove helmet.", "Select", "Close");
        }
        if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
        {
            ShowPlayerDialog(playerid,DIALOG_HELMETSELECT,DIALOG_STYLE_LIST,"Select the helmet you wish to use.", "Helmet 1 - Fire Stripes. \n Helmet 2 - Blue and white motocross style. \n Helmet 3 - Red. \n Helmet 4 - White. \n Helmet 5 - Purple / pink. \n Remove helmet.", "Select", "Close");
        }
        return 1;
}*/

CMD:cook(playerid, params[])
{
	new houseid = House_Inside(playerid);

	if (houseid == -1 && !IsPlayerInRangeOfPoint(playerid, 5.0, -573.9931,2594.7729,13.7060))
	    return SendErrorMessage(playerid, "You must be inside a house to cook meals.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/cook [burger/pizza]");

    if (PlayerData[playerid][pCuffed])
	    return SendErrorMessage(playerid, "You can't use this command at the moment.");

	if (!strcmp(params, "burger", true))
	{
	    if (!Inventory_HasItem(playerid, "Frozen Burger"))
	        return SendErrorMessage(playerid, "You don't have any frozen burgers.");

		if (PlayerData[playerid][pCooking])
		    return SendErrorMessage(playerid, "You are already cooking a meal.");

		Inventory_Add(playerid, "Cardboard", 928);

		PlayerData[playerid][pCooking] = 1;
		PlayerData[playerid][pCookingTime] = 20;
		PlayerData[playerid][pCookingHouse] = houseid;

		Inventory_Remove(playerid, "Frozen Burger");
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s prepares the microwave and heats up a frozen burger (20 seconds).", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "pizza", true))
	{
	    if (!Inventory_HasItem(playerid, "Frozen Pizza"))
	        return SendErrorMessage(playerid, "You don't have any boxes of frozen pizza.");

		if (PlayerData[playerid][pCooking])
		    return SendErrorMessage(playerid, "You are already cooking a meal.");

        Inventory_Add(playerid, "Cardboard", 928);

		PlayerData[playerid][pCooking] = 2;
		PlayerData[playerid][pCookingTime] = 55;
		PlayerData[playerid][pCookingHouse] = houseid;

        Inventory_Remove(playerid, "Frozen Pizza");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s prepares the oven and heats up a frozen pizza (55 seconds).", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:vest(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "You can't use this command now.");

	if (!Inventory_HasItem(playerid, "Armored Vest"))
	    return SendErrorMessage(playerid, "You don't have an armored vest.");

	if (ReturnArmour(playerid) > 49)
	    return SendErrorMessage(playerid, "You already have a full vest on.");

	SetPlayerArmour(playerid, 50.0);

	Inventory_Remove(playerid, "Armored Vest");
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a kevlar vest and puts it on.", ReturnName(playerid, 0));
	return 1;
}

CMD:vault(playerid, params[])
{
    static
	    bizid = -1,
		type[24],
		str[12],
		amount;

	if ((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid))
	{
	    if (sscanf(params, "s[24]S()[12]", type, str))
	    {
			SendSyntaxMessage(playerid, "/vault [name] (%s available)", FormatNumber(BusinessData[bizid][bizVault]));
	        SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} withdraw, deposit, balance");
	        return 1;
		}
		if (!strcmp(type, "withdraw", true))
		{
		    if (sscanf(str, "d", amount))
		        return SendSyntaxMessage(playerid, "/vault [withdraw] [amount]");

			if (amount < 1 || amount > BusinessData[bizid][bizVault])
			    return SendErrorMessage(playerid, "Invalid amount specified!");

            BusinessData[bizid][bizVault] -= amount;
            Business_Save(bizid);

            GiveMoney(playerid, amount);
            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has withdrawn %s from the business vault.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else if (!strcmp(type, "deposit", true))
		{
		    if (sscanf(str, "d", amount))
		        return SendSyntaxMessage(playerid, "/vault [deposit] [amount]");

			if (amount < 1 || amount > GetMoney(playerid))
			    return SendErrorMessage(playerid, "Invalid amount specified!");

            BusinessData[bizid][bizVault] += amount;
            Business_Save(bizid);

            GiveMoney(playerid, -amount);
            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has deposited %s into the business vault.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else if (!strcmp(type, "balance", true))
		{
		    SendServerMessage(playerid, "\"%s\" has a total vault balance of: %s.", BusinessData[bizid][bizName], FormatNumber(BusinessData[bizid][bizVault]));
		}
	}
	else SendErrorMessage(playerid, "You are not in range of your business interior.");
	return 1;
}

CMD:drivingtest(playerid, params[])
{
	if (PlayerData[playerid][pDrivingTest])
	    return SendErrorMessage(playerid, "You have already started the driving test!");

	if (!IsPlayerInRangeOfPoint(playerid, 3.0, -2033.0439, -117.4885, 1035.1719))
	    return SendErrorMessage(playerid, "You are not in range of the DMV point.");

	if (PlayerData[playerid][pCarLicense])
	    return SendErrorMessage(playerid, "You have your car license already! If you need a new copy of it visit town hall.");

	if (GetMoney(playerid) < 50)
	    return SendErrorMessage(playerid, "You don't have $50 for the driving test.");

    PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
   	PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

	GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
	GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
 	GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

    PlayerData[playerid][pTestCar] = CreateVehicle(410, -139.4882,1086.7661,19.3169,357.6617, 1, 1, -1);
    PlayerData[playerid][pTestWarns] = 0;

	if (PlayerData[playerid][pTestCar] != INVALID_VEHICLE_ID)
	{
		PlayerData[playerid][pDrivingTest] = true;
	    PlayerData[playerid][pTestStage] = 0;

		ResetVehicle(PlayerData[playerid][pTestCar]);
	    SetPlayerVirtualWorld(playerid, 0);

	    SetVehicleVirtualWorld(PlayerData[playerid][pTestCar], 0);
		PutPlayerInVehicle(playerid, PlayerData[playerid][pTestCar], 0);

		SetPlayerCheckpoint(playerid, g_arrDrivingCheckpoints[0][0], g_arrDrivingCheckpoints[0][1], g_arrDrivingCheckpoints[0][2], 3.0);
		SendServerMessage(playerid, "You have started the driving test.");
		SendServerMessage(playerid, "Drive on the correct side of the lane and make sure to fasten your seatbelt and keep your speed under the limit (55).");

		SetPlayerInterior(playerid, 0);
	}
	return 1;
}

CMD:motorcycletest(playerid, params[])
{
	if (PlayerData[playerid][pBikeTest])
	    return SendErrorMessage(playerid, "You have already started the test!");

	if (!IsPlayerInRangeOfPoint(playerid, 3.0, -2033.0439, -117.4885, 1035.1719))
	    return SendErrorMessage(playerid, "You are not in range of the DMV point.");

	if (PlayerData[playerid][pBikeLicense])
	    return SendErrorMessage(playerid, "You have your motorcycle license already! If you need a new copy of it visit town hall.");

	if (GetMoney(playerid) < 200)
	    return SendErrorMessage(playerid, "You don't have $200 for the motorcycle test.");

    PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
   	PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

	GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
	GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
 	GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

    PlayerData[playerid][pTestCar] = CreateVehicle(586, -139.4882,1086.7661,19.3169,357.6617, 1, 1, -1);
    PlayerData[playerid][pTestWarns] = 0;

	if (PlayerData[playerid][pTestCar] != INVALID_VEHICLE_ID)
	{
		PlayerData[playerid][pBikeTest] = true;
	    PlayerData[playerid][pTestStage] = 0;

		ResetVehicle(PlayerData[playerid][pTestCar]);
	    SetPlayerVirtualWorld(playerid, 0);

	    SetVehicleVirtualWorld(PlayerData[playerid][pTestCar], 0);
		PutPlayerInVehicle(playerid, PlayerData[playerid][pTestCar], 0);

		SetPlayerCheckpoint(playerid, g_arrDrivingCheckpoints[0][0], g_arrDrivingCheckpoints[0][1], g_arrDrivingCheckpoints[0][2], 3.0);
		SendServerMessage(playerid, "You have started the motorcycle test.");
		SendServerMessage(playerid, "Drive on the correct side of the road and make sure to wear your helmet and keep your speed under the limit (55).");

		SetPlayerInterior(playerid, 0);
	}
	return 1;
}

CMD:trucktest(playerid, params[])
{
	if (PlayerData[playerid][pTruckTest])
	    return SendErrorMessage(playerid, "You have already started the test!");

	if (!IsPlayerInRangeOfPoint(playerid, 3.0, -2033.0439, -117.4885, 1035.1719))
	    return SendErrorMessage(playerid, "You are not in range of the DMV point.");

	if (PlayerData[playerid][pTruckLicense])
	    return SendErrorMessage(playerid, "You have your trucking license already! If you need a new copy of it visit town hall.");

	if (GetMoney(playerid) < 500)
	    return SendErrorMessage(playerid, "You don't have $500 for the truck license test.");

    PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
   	PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

	GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
	GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
 	GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

    PlayerData[playerid][pTestCar] = CreateVehicle(456, -139.4882,1086.7661,19.3169,357.6617, 1, 1, -1);
    PlayerData[playerid][pTestWarns] = 0;

	if (PlayerData[playerid][pTestCar] != INVALID_VEHICLE_ID)
	{
		PlayerData[playerid][pTruckTest] = true;
	    PlayerData[playerid][pTestStage] = 0;

		ResetVehicle(PlayerData[playerid][pTestCar]);
	    SetPlayerVirtualWorld(playerid, 0);

	    SetVehicleVirtualWorld(PlayerData[playerid][pTestCar], 0);
		PutPlayerInVehicle(playerid, PlayerData[playerid][pTestCar], 0);

		SetPlayerCheckpoint(playerid, g_arrDrivingCheckpoints[0][0], g_arrDrivingCheckpoints[0][1], g_arrDrivingCheckpoints[0][2], 3.0);
		SendServerMessage(playerid, "You have started the truck license test.");
		SendServerMessage(playerid, "Drive on the correct side of the road and make sure to wear your seatbelt and keep your speed under the limit (55).");

		SetPlayerInterior(playerid, 0);
	}
	return 1;
}

CMD:createentrance(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (isnull(params) || strlen(params) > 32)
	    return SendSyntaxMessage(playerid, "/createentrance [name]");

	new id = Entrance_Create(playerid, params);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for entrances.");

	SendServerMessage(playerid, "You have successfully created entrance ID: %d.", id);
	return 1;
}

CMD:editentrance(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
    	return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if(sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editentrance [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} location, interior, password, name, locked, mapicon, type, custom, virtual");
		return 1;
	}
	if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
	    return SendErrorMessage(playerid, "You have specified an invalid entrance ID.");

	if (!strcmp(type, "location", true))
	{
	    GetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
		GetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3]);

		EntranceData[id][entranceExterior] = GetPlayerInterior(playerid);
		EntranceData[id][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);

		Entrance_Refresh(id);
		Entrance_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the location of entrance ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "interior", true))
	{
	    GetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
		GetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

		EntranceData[id][entranceInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
		{
			if (PlayerData[i][pEntrance] == EntranceData[id][entranceID])
			{
				SetPlayerPos(i, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
				SetPlayerFacingAngle(i, EntranceData[id][entranceInt][3]);

				SetPlayerInterior(i, EntranceData[id][entranceInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the interior spawn of entrance ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "custom", true))
	{
	    new status;

	    if (sscanf(string, "d", status))
	        return SendSyntaxMessage(playerid, "/editentrance [id] [custom] [0/1]");

		if (status < 0 || status > 1)
		    return SendErrorMessage(playerid, "You must specify at least 0 or 1.");

	    EntranceData[id][entranceCustom] = status;
	    Entrance_Save(id);

	    if (status) {
			SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has enabled custom interior mode for entrance ID: %d.", ReturnName(playerid, 0), id);
		}
		else {
		    SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has disabled custom interior mode for entrance ID: %d.", ReturnName(playerid, 0), id);
		}
	}
	else if (!strcmp(type, "virtual", true))
	{
	    new worldid;

	    if (sscanf(string, "d", worldid))
	        return SendSyntaxMessage(playerid, "/editentrance [id] [virtual] [interior world]");

	    EntranceData[id][entranceWorld] = worldid;

		foreach (new i : Player) if (Entrance_Inside(i) == id) {
			SetPlayerVirtualWorld(i, worldid);
		}
		Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the virtual of entrance ID: %d to %d.", ReturnName(playerid, 0), id, worldid);
	}
	else if (!strcmp(type, "mapicon", true))
	{
	    new icon;

	    if (sscanf(string, "d", icon))
	        return SendSyntaxMessage(playerid, "/editentrance [id] [mapicon] [map icon]");

		if (icon < 0 || icon > 63)
		    return SendErrorMessage(playerid, "Invalid map icon! Valid map icons can be found at \"wiki.sa-mp.com/wiki/MapIcons\".");

	    EntranceData[id][entranceIcon] = icon;

	    Entrance_Refresh(id);
	    Entrance_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the price of entrance ID: %d to %d.", ReturnName(playerid, 0), id, icon);
	}
	else if (!strcmp(type, "password", true))
	{
	    new password[32];

	    if (sscanf(string, "s[32]", password))
	        return SendSyntaxMessage(playerid, "/editentrance [id] [password] [entrance pass] (use 'none' to disable)");

		if (!strcmp(password, "none", true)) {
			EntranceData[id][entrancePass][0] = 0;
		}
		else {
		    format(EntranceData[id][entrancePass], 32, password);
		}
	    Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the password of entrance ID: %d to \"%s\".", ReturnName(playerid, 0), id, password);
	}
	else if (!strcmp(type, "locked", true))
	{
	    new locked;

	    if (sscanf(string, "d", locked))
	        return SendSyntaxMessage(playerid, "/editentrance [id] [locked] [locked 0/1]");

		if (locked < 0 || locked > 1)
		    return SendErrorMessage(playerid, "Invalid value. Use 0 for unlocked and 1 for locked.");

	    EntranceData[id][entranceLocked] = locked;
	    Entrance_Save(id);

	    if (locked) {
			SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has locked entrance ID: %d.", ReturnName(playerid, 0), id);
		} else {
		    SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has unlocked entrance ID: %d.", ReturnName(playerid, 0), id);
		}
	}
	else if (!strcmp(type, "name", true))
	{
	    new name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/editentrance [id] [name] [new name]");

	    format(EntranceData[id][entranceName], 32, name);

	    Entrance_Refresh(id);
	    Entrance_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the name of entrance ID: %d to \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "type", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	    {
	        SendSyntaxMessage(playerid, "/editentrance [id] [type] [entrance type]");
			SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 0: None | 1: DMV | 2: Bank | 3: Warehouse | 4: City Hall | 5: Shooting Range");
			return 1;
		}
		if (typeint < 0 || typeint > 5)
			return SendErrorMessage(playerid, "The specified type must be between 0 and 5.");

		if (EntranceData[id][entranceType] == 3 && typeint != 3) {
		    DestroyForklifts(id);
		}
		else if (EntranceData[id][entranceType] != 3 && typeint == 3) {
		    CreateForklifts(id);
		}
        EntranceData[id][entranceType] = typeint;

        switch (typeint) {
            case 1: {
            	EntranceData[id][entranceInt][0] = -2029.5531;
           		EntranceData[id][entranceInt][1] = -118.8003;
            	EntranceData[id][entranceInt][2] = 1035.1719;
            	EntranceData[id][entranceInt][3] = 0.0000;
				EntranceData[id][entranceInterior] = 3;
            }
			case 2: {
            	EntranceData[id][entranceInt][0] = 1456.1918;
           		EntranceData[id][entranceInt][1] = -987.9417;
            	EntranceData[id][entranceInt][2] = 996.1050;
            	EntranceData[id][entranceInt][3] = 90.0000;
				EntranceData[id][entranceInterior] = 6;
            }
            case 3: {
                EntranceData[id][entranceInt][0] = 1291.8246;
           		EntranceData[id][entranceInt][1] = 5.8714;
            	EntranceData[id][entranceInt][2] = 1001.0078;
            	EntranceData[id][entranceInt][3] = 180.0000;
				EntranceData[id][entranceInterior] = 18;
			}
			case 4: {
			    EntranceData[id][entranceInt][0] = 390.1687;
           		EntranceData[id][entranceInt][1] = 173.8072;
            	EntranceData[id][entranceInt][2] = 1008.3828;
            	EntranceData[id][entranceInt][3] = 90.0000;
				EntranceData[id][entranceInterior] = 3;
			}
			case 5: {
			    EntranceData[id][entranceInt][0] = 304.0165;
           		EntranceData[id][entranceInt][1] = -141.9894;
            	EntranceData[id][entranceInt][2] = 1004.0625;
            	EntranceData[id][entranceInt][3] = 90.0000;
				EntranceData[id][entranceInterior] = 7;
			}
		}
		foreach (new i : Player)
		{
			if (PlayerData[i][pEntrance] == EntranceData[id][entranceID])
			{
				SetPlayerPos(i, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
				SetPlayerFacingAngle(i, EntranceData[id][entranceInt][3]);

				SetPlayerInterior(i, EntranceData[id][entranceInterior]);
				SetCameraBehindPlayer(i);
			}
		}
	    Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the type of entrance ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
	}
	return 1;
}

CMD:destroyentrance(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyentrance [entrance id]");

	if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
	    return SendErrorMessage(playerid, "You have specified an invalid entrance ID.");

	Entrance_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed entrance ID: %d.", id);
	return 1;
}

CMD:ammo(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "You can't use this command now.");

	if (!Inventory_HasItem(playerid, "Ammo Cartridge"))
	    return SendErrorMessage(playerid, "You don't have any ammo cartridges on you.");

	new weaponid = 0;

	switch ((weaponid = GetWeapon(playerid)))
	{
		case 22, 23: GiveWeaponToPlayer(playerid, weaponid, 68);
		case 24, 27: GiveWeaponToPlayer(playerid, weaponid, 35);
	    case 25, 26: GiveWeaponToPlayer(playerid, weaponid, 20);
	    case 28, 31, 32: GiveWeaponToPlayer(playerid, weaponid, 200);
	    case 29, 30: GiveWeaponToPlayer(playerid, weaponid, 120);
	    case 33, 34: GiveWeaponToPlayer(playerid, weaponid, 20);
	    case 35..37: GiveWeaponToPlayer(playerid, weaponid, 4);
	    case 38: GiveWeaponToPlayer(playerid, weaponid, 500);
		default: return SendErrorMessage(playerid, "You cannot use an ammo cartridge on this weapon.");
	}
	PlayReloadAnimation(playerid, weaponid);
	Inventory_Remove(playerid, "Ammo Cartridge");
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has used an ammo cartridge on their %s.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
	return 1;
}

CMD:crowbar(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "You can't use this command now.");

	if (!Inventory_HasItem(playerid, "Crowbar"))
	    return SendErrorMessage(playerid, "You don't have any Crowbars on you.");

	if (!PlayerData[playerid][pHoldItem])
	{
	    PlayerData[playerid][pHoldItem] = 1;

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out his crowbar.", ReturnName(playerid, 2));
		SetPlayerAttachedObject(playerid, 4, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
	}
	else
	{
	    PlayerData[playerid][pHoldItem] = 0;

		RemovePlayerAttachedObject(playerid,4);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s puts their crowbar away.", ReturnName(playerid, 2));
	}
	return 1;
}

CMD:pocketknife(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "You can't use this command now.");

	if (!Inventory_HasItem(playerid, "Pocket Knife"))
	    return SendErrorMessage(playerid, "You don't have a Pocket Knife on you.");

	if (!PlayerData[playerid][pHoldItem])
	{
	    PlayerData[playerid][pHoldItem] = 1;

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out his pocket knife.", ReturnName(playerid, 2));
		SetPlayerAttachedObject(playerid, 4, 335, 6, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 1.00, 1.00, 1.00);
	}
	else
	{
	    PlayerData[playerid][pHoldItem] = 0;

		RemovePlayerAttachedObject(playerid,4);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s puts their pocket knife away.", ReturnName(playerid, 2));
	}
	return 1;
}

CMD:screwdriver(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "You can't use this command now.");

	if (!Inventory_HasItem(playerid, "Screwdriver"))
	    return SendErrorMessage(playerid, "You don't have any Screwdrivers on you.");

	if (!PlayerData[playerid][pHoldItem])
	{
	    PlayerData[playerid][pHoldItem] = 1;

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out his screwdriver.", ReturnName(playerid, 2));
		SetPlayerAttachedObject(playerid, 4, 18644, 6, 0.1, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
	}
	else
	{
	    PlayerData[playerid][pHoldItem] = 0;

		RemovePlayerAttachedObject(playerid,4);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s puts their screwdriver away.", ReturnName(playerid, 2));
	}
	return 1;
}

CMD:faq(playerid, params[])
{
	Dialog_Show(playerid, FAQ, DIALOG_STYLE_LIST, "Frequently Asked Questions", "How do I enter a building?\nHow do I access my inventory?\nHow do I pickup dropped items?\nWhat are the icons on my screen?\nHow do I refill my hunger and thirst?\nHow do I search for certain areas?\nHow do I stop working with my job?\nHow do I take out weapons and load them?\nHow do I edit the furniture in my house?\nHow do I interact with stuff in the server?", "Select", "Cancel");
	return 1;
}

CMD:atm(playerid, params[])
{
	if (ATM_Nearest(playerid) == -1)
	    return SendErrorMessage(playerid, "You are not in range of any ATM machine.");

    if (!Inventory_HasItem(playerid, "Credit Card"))
	    return SendErrorMessage(playerid, "You need a registered credit card in order to operate a bank account. Use /registercard in any bank.");

	Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "Bank Account", "Bank Balance: %s\nSavings Balance: %s", "Select", "Cancel", FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
	return 1;
}

CMD:bank(playerid, params[])
{
	if (!IsPlayerInBank(playerid))
	    return SendErrorMessage(playerid, "You are not in range of any bank.");

    if (!Inventory_HasItem(playerid, "Credit Card"))
	    return SendErrorMessage(playerid, "You need a registered credit card in order to operate a bank account. Use /registercard in any bank.");

	Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "Bank Account", "Bank Balance: %s\nSavings Balance: %s", "Select", "Cancel", FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
	return 1;
}

CMD:registercard(playerid, params[])
{
	if (!IsPlayerInBank(playerid))
	    return SendErrorMessage(playerid, "You are not in range of any bank.");

    if (!Inventory_HasItem(playerid, "Credit Card"))
    {
		SendClientMessage(playerid, COLOR_WHITE,"You have successfully registered a credit card to the Vice City Bank. You are now allowed to operate bank account.");
		Inventory_Add(playerid, "Credit Card", 1581);
	}
	else return SendErrorMessage(playerid, "You already have a registered credit card to the Vice City Bank.");
	return 1;
}

CMD:park(playerid, params[])
{
	new
	    carid = GetPlayerVehicleID(playerid);

	if (!carid)
	    return SendErrorMessage(playerid, "You must be inside your vehicle.");

    if (IsVehicleImpounded(carid))
    	return SendErrorMessage(playerid, "This vehicle is impounded and you can't use it.");

	if ((carid = Car_GetID(carid)) != -1 && Car_IsOwner(playerid, carid))
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	        return SendErrorMessage(playerid, "You must be the driver!");

	    static
			g_arrSeatData[10] = {INVALID_PLAYER_ID, ...},
			g_arrDamage[4],
			Float:health,
			seatid;

        for (new i = 0; i < 14; i ++) {
			CarData[carid][carMods][i] = GetVehicleComponentInSlot(CarData[carid][carVehicle], i);
	    }
		GetVehicleDamageStatus(CarData[carid][carVehicle], g_arrDamage[0], g_arrDamage[1], g_arrDamage[2], g_arrDamage[3]);
		GetVehicleHealth(CarData[carid][carVehicle], health);

		foreach (new i : Player) if (IsPlayerInVehicle(i, CarData[carid][carVehicle])) {
		    seatid = GetPlayerVehicleSeat(i);

		    g_arrSeatData[seatid] = i;
		}
		GetVehiclePos(CarData[carid][carVehicle], CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2]);
		GetVehicleZAngle(CarData[carid][carVehicle], CarData[carid][carPos][3]);

		Car_Spawn(carid);
		Car_Save(carid);

		SendServerMessage(playerid, "You have successfully parked your %s.", ReturnVehicleName(CarData[carid][carVehicle]));

        UpdateVehicleDamageStatus(CarData[carid][carVehicle], g_arrDamage[0], g_arrDamage[1], g_arrDamage[2], g_arrDamage[3]);
		SetVehicleHealth(CarData[carid][carVehicle], health);

		for (new i = 0; i < sizeof(g_arrSeatData); i ++) if (g_arrSeatData[i] != INVALID_PLAYER_ID) {
		    PutPlayerInVehicle(g_arrSeatData[i], CarData[carid][carVehicle], i);

		    g_arrSeatData[i] = INVALID_PLAYER_ID;
		}
	}
	else SendErrorMessage(playerid, "You are not inside anything you can park.");
	return 1;
}

/*CMD:togplate(playerid, params[])
{
	new
	    carid = GetPlayerVehicleID(playerid);

	if (!carid)
	    return SendErrorMessage(playerid, "You must be inside your vehicle.");

    if (IsVehicleImpounded(carid))
    	return SendErrorMessage(playerid, "This vehicle is impounded and you can't use it.");

	if ((carid = Car_GetID(carid)) != -1 && Car_IsOwner(playerid, carid))
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	        return SendErrorMessage(playerid, "You must be the driver!");

	    static
			g_arrSeatData[10] = {INVALID_PLAYER_ID, ...},
			g_arrDamage[4],
			Float:health,
			seatid;

        for (new i = 0; i < 14; i ++) {
			CarData[carid][carMods][i] = GetVehicleComponentInSlot(CarData[carid][carVehicle], i);
	    }
		GetVehicleDamageStatus(CarData[carid][carVehicle], g_arrDamage[0], g_arrDamage[1], g_arrDamage[2], g_arrDamage[3]);
		GetVehicleHealth(CarData[carid][carVehicle], health);

		foreach (new i : Player) if (IsPlayerInVehicle(i, CarData[carid][carVehicle])) {
		    seatid = GetPlayerVehicleSeat(i);

		    g_arrSeatData[seatid] = i;
		}
		GetVehiclePos(CarData[carid][carVehicle], CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2]);
		GetVehicleZAngle(CarData[carid][carVehicle], CarData[carid][carPos][3]);

		Car_Spawn(carid);
		Car_Save(carid);

		SendServerMessage(playerid, "You have successfully parked your %s.", ReturnVehicleName(CarData[carid][carVehicle]));

        UpdateVehicleDamageStatus(CarData[carid][carVehicle], g_arrDamage[0], g_arrDamage[1], g_arrDamage[2], g_arrDamage[3]);
		SetVehicleHealth(CarData[carid][carVehicle], health);

		for (new i = 0; i < sizeof(g_arrSeatData); i ++) if (g_arrSeatData[i] != INVALID_PLAYER_ID) {
		    PutPlayerInVehicle(g_arrSeatData[i], CarData[carid][carVehicle], i);

		    g_arrSeatData[i] = INVALID_PLAYER_ID;
		}
	}
	else SendErrorMessage(playerid, "You are not inside anything you can park.");
	return 1;
}*/

CMD:createpump(playerid, params[])
{
	static
	    id,
		bizid = -1;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", bizid))
	    return SendSyntaxMessage(playerid, "/createpump [business id]");

	if ((bizid < 0 || bizid >= MAX_BUSINESSES) || !BusinessData[bizid][bizExists])
	    return SendErrorMessage(playerid, "You have specified an invalid business ID.");

	if (BusinessData[bizid][bizType] != 6)
	    return SendErrorMessage(playerid, "This business is not a gas station!");

    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		return SendErrorMessage(playerid, "You can only create gas pumps outside interiors.");

	id = Pump_Create(playerid, bizid);

	if (id == -1)
	    return SendErrorMessage(playerid, "The business has reached the limit for gas pumps.");

	SendServerMessage(playerid, "You have successfully created gas pump ID: %d.", id);
	EditDynamicObject(playerid, PumpData[id][pumpObject]);

	PlayerData[playerid][pEditPump] = id;
	return 1;
}

CMD:destroypump(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroypump [pump id]");

	if ((id < 0 || id >= MAX_GAS_PUMPS) || !PumpData[id][pumpExists])
	    return SendErrorMessage(playerid, "Invalid pump ID.");

	Pump_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed pump ID: %d.", id);
	return 1;
}

CMD:setpump(playerid, params[])
{
	static
	    id = 0,
		amount;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "dd", id, amount))
	    return SendSyntaxMessage(playerid, "/setpump [pump id] [fuel amount]");

	if ((id < 0 || id >= MAX_GAS_PUMPS) || !PumpData[id][pumpExists])
	    return SendErrorMessage(playerid, "Invalid pump ID.");

	PumpData[id][pumpFuel] = amount;

	Pump_Refresh(id);
	Pump_Save(id);

	SendServerMessage(playerid, "You have set the fuel to %d for pump ID: %d.", amount, id);
	return 1;
}

CMD:refuel(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pRefill] != INVALID_VEHICLE_ID)
	{
	    BusinessData[PlayerData[playerid][pGasStation]][bizVault] += PlayerData[playerid][pRefillPrice];
		Business_Save(PlayerData[playerid][pGasStation]);

        GiveMoney(playerid, -PlayerData[playerid][pRefillPrice]);

		SendServerMessage(playerid, "You have refueled your vehicle for $%d.", PlayerData[playerid][pRefillPrice]);
        StopRefilling(playerid);

        return 1;
	}
	if (!vehicleid)
	    return SendErrorMessage(playerid, "You are not inside any vehicle!");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "You must be the driver of the vehicle!");

	if (GetEngineStatus(vehicleid))
	    return SendErrorMessage(playerid, "You must turn the engine off first.");

	new id = Pump_Nearest(playerid);

	if (id != -1)
	{
		if (CoreVehicles[vehicleid][vehFuel] > 95)
			return SendErrorMessage(playerid, "This vehicle doesn't need any fuel.");

		if (IsPumpOccupied(id))
		    return SendErrorMessage(playerid, "This fuel pump is already occupied.");

		if (PumpData[id][pumpFuel] < 1)
   			return SendErrorMessage(playerid, "This pump doesn't have enough fuel.");

		PlayerData[playerid][pGasPump] = id;
		PlayerData[playerid][pGasStation] = PumpData[id][pumpBusiness];

		PlayerData[playerid][pRefill] = vehicleid;
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has started refilling their vehicle.", ReturnName(playerid, 0));
	}
	else
	{
		SendErrorMessage(playerid, "You are not in range of any unused gas pump.");
	}
	return 1;
}

CMD:unmod(playerid, params[])
{
	new
	    carid = GetPlayerVehicleID(playerid);

	if (!carid)
	    return SendErrorMessage(playerid, "You must be inside your vehicle.");

    if (IsVehicleImpounded(carid))
    	return SendErrorMessage(playerid, "This vehicle is impounded and you can't use it.");

	if ((carid = Car_GetID(carid)) != -1 && Car_IsOwner(playerid, carid))
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	        return SendErrorMessage(playerid, "You must be the driver!");

		for (new i = 0; i < 14; i ++) {
		    RemoveVehicleComponent(CarData[carid][carVehicle], CarData[carid][carMods][i]);

		    CarData[carid][carMods][i] = 0;
		}
		Car_Save(carid);
		SendServerMessage(playerid, "You have removed the modifications from this vehicle.");
	}
	else SendErrorMessage(playerid, "You are not inside anything you can unmodify.");
	return 1;
}

CMD:trunk(playerid, params[])
{
	new
	    id = -1;

	if ((id = Car_Nearest(playerid)) != -1)
	{
	    if (IsVehicleImpounded(CarData[id][carVehicle]))
	        return SendErrorMessage(playerid, "This vehicle is impounded and you can't use it.");

	    if (IsPlayerInAnyVehicle(playerid))
	        return SendErrorMessage(playerid, "You must exit the vehicle first.");

		if (!IsDoorVehicle(CarData[id][carVehicle]))
		    return SendErrorMessage(playerid, "This vehicle doesn't have a trunk.");

		if (CarData[id][carLocked])
		    return SendErrorMessage(playerid, "The vehicle's trunk is locked.");

		Car_ShowTrunk(playerid, id);
	}
	else SendErrorMessage(playerid, "You are not in range of any vehicle.");
	return 1;
}

CMD:bname(playerid, params[])
{
	new
		id = -1;

    if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1 && Business_IsOwner(playerid, id))
	{
		if (isnull(params))
		    return SendSyntaxMessage(playerid, "/bname [new name]");

		if (strlen(params) > 32)
		    return SendErrorMessage(playerid, "The business name can't exceed 32 characters.");

		format(BusinessData[id][bizName], 32, params);

		Business_Refresh(id);
		Business_Save(id);

		SendServerMessage(playerid, "Business name set to: \"%s\".", params);
	}
	else SendErrorMessage(playerid, "You are not in range of your business.");
	return 1;
}

CMD:bmessage(playerid, params[])
{
	new
		id = -1;

    if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1 && Business_IsOwner(playerid, id))
	{
		if (isnull(params))
		    return SendSyntaxMessage(playerid, "/bmessage [message] - Use \"none\" to disable.");

		if (!strcmp(params, "none", true))
		{
		    BusinessData[id][bizMessage][0] = '\0';

			Business_Save(id);
			SendServerMessage(playerid, "You have removed the business message.");
		}
		else
		{
			format(BusinessData[id][bizMessage], 128, params);

			Business_Save(id);
			SendServerMessage(playerid, "Business message set to: \"%s\".", params);
		}
	}
	else SendErrorMessage(playerid, "You are not in range of your business.");
	return 1;
}

CMD:badvert(playerid, params[])
{
    new
		id = -1;

 	if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1 && Business_IsOwner(playerid, id))
	{
		if (isnull(params))
		    return SendSyntaxMessage(playerid, "/badvert [text]");

		GiveMoney(playerid, -50);
		//SendServerMessage(playerid, "ID: %d | Business: %s | Products: %d | Vault: %s", id, BusinessData[id][bizName], BusinessData[id][bizProducts], FormatNumber(BusinessData[id][bizVault]));
		SendClientMessageToAllEx(COLOR_FADVERT, "[Business Advert] %s [%s]", params, BusinessData[id][bizName]);
	}
	else SendErrorMessage(playerid, "You are not in range of your business.");
	return 1;
}

CMD:aojail(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] >= 1)
	{
		new string[128], name[MAX_PLAYER_NAME], minutes;
		if(sscanf(params, "s[24]ds[64]", name, minutes)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /aojail [player name] [time (minutes)]");

		new tmpName[24], query[512];
		mysql_real_escape_string(name, tmpName);

		SetPVarString(playerid, "OnJailAccount", tmpName);

		format(string, sizeof(string), "Attempting to jail %s's account for %d minutes...", tmpName, minutes);
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, string);

		format(query,sizeof(query),"UPDATE `characters` SET `JailTime` = %d WHERE `Username` = '%s'", minutes*60, tmpName);
		mysql_tquery(g_iHandle, query, "OnJailAccount", "i", playerid);
	}
	return 1;
}
CMD:furniture(playerid, params[])
{
    static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
        new
			count = 0,
			string[MAX_FURNITURE * 32];

        for (new i = 0; i != MAX_FURNITURE; i ++) if (count < MAX_HOUSE_FURNITURE && FurnitureData[i][furnitureExists] && FurnitureData[i][furnitureHouse] == houseid) {
    		ListedFurniture[playerid][count++] = i;

    		format(string, sizeof(string), "%s%s (%.2f meters)\n", string, FurnitureData[i][furnitureName], GetPlayerDistanceFromPoint(playerid, FurnitureData[i][furniturePos][0], FurnitureData[i][furniturePos][1], FurnitureData[i][furniturePos][2]));
		}
		if (count) {
			Dialog_Show(playerid, ListedFurniture, DIALOG_STYLE_LIST, "Listed Furniture", string, "Select", "Cancel");
     	}
     	else SendErrorMessage(playerid, "This house doesn't have any furniture spawned.");
	}
	else SendErrorMessage(playerid, "You are not in range of your house interior.");
	return 1;
}

CMD:createjob(playerid, params[])
{
	static
	    type,
		id = -1;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if(sscanf(params, "d", type))
	{
		SendSyntaxMessage(playerid, "/createjob [type]");
		SendClientMessage(playerid, -1,  "1 - Courier | 2 - Mechanic | 3 - Taxi | 4 - Cargo Unloader | 5 - Miner");
		SendClientMessage(playerid, -1,  "6 - Food Vendor | 7 - Garbage Man | 8 - Package Sorter | 9 - Weapon Smuggler | 10 - Fisherman");
		return 1;
	}

	if (type < 1 || type > 10)
	    return SendErrorMessage(playerid, "Invalid type specified. Types range from 1 to 10.");

	id = Job_Create(playerid, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for jobs.");

	SendServerMessage(playerid, "You have successfully created job ID: %d.", id);
	return 1;
}

CMD:destroyjob(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyjob [job id]");

	if ((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
	    return SendErrorMessage(playerid, "You have specified an invalid job ID.");

	Job_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed job ID: %d.", id);
	return 1;
}

CMD:editjob(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editjob [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} location, type, point, deliver");
		return 1;
	}
	if ((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
	    return SendErrorMessage(playerid, "You have specified an invalid job ID.");

	if (!strcmp(type, "location", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		JobData[id][jobPos][0] = x;
		JobData[id][jobPos][1] = y;
		JobData[id][jobPos][2] = z;

		JobData[id][jobInterior] = GetPlayerInterior(playerid);
		JobData[id][jobWorld] = GetPlayerVirtualWorld(playerid);

		Job_Refresh(id);
		Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the location of job ID: %d.", ReturnName(playerid, 0), id);
	}
 	else if (!strcmp(type, "type", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	        return SendSyntaxMessage(playerid, "/editjob [id] [type] [new type]");

        if (typeint < 1 || typeint > 9)
	    	return SendErrorMessage(playerid, "Invalid type specified. Types range from 1 to 9.");

	    JobData[id][jobType] = typeint;

	    Job_Refresh(id);
	    Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the type of job ID: %d to %s.", ReturnName(playerid, 0), id, Job_GetName(typeint));
	}
	else if (!strcmp(type, "point", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		JobData[id][jobPoint][0] = x;
		JobData[id][jobPoint][1] = y;
		JobData[id][jobPoint][2] = z;
        JobData[id][jobPointInt] = GetPlayerInterior(playerid);
        JobData[id][jobPointWorld] = GetPlayerVirtualWorld(playerid);

		Job_Refresh(id);
		Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the point of job ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "deliver", true))
	{
	    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	        return SendErrorMessage(playerid, "You can't place the deliver point inside interiors.");

	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		JobData[id][jobDeliver][0] = x;
		JobData[id][jobDeliver][1] = y;
		JobData[id][jobDeliver][2] = z;

		Job_Refresh(id);
		Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the deliver point of job ID: %d.", ReturnName(playerid, 0), id);
	}
	return 1;
}

CMD:debug_leavejob(playerid, params[])
{
	if (PlayerData[playerid][pJob] != 0)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (PlayerData[playerid][pMinedRock])
		{
	    	PlayerData[playerid][pMinedRock] = 0;
			PlayerData[playerid][pMineCount] = 0;

			DisablePlayerCheckpoint(playerid);

			RemovePlayerAttachedObject(playerid, 4);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
		if (PlayerData[playerid][pJob] == JOB_COURIER)
		{
			if (PlayerData[playerid][pUnloading] != -1)
			{
	   		 	PlayerData[playerid][pUnloading] = -1;
	    		PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;

	    		DisablePlayerCheckpoint(playerid);
			}
			if (PlayerData[playerid][pDeliverShipment])
			{
			    PlayerData[playerid][pShipment] = -1;
			    PlayerData[playerid][pDeliverShipment] = 0;

			    DisablePlayerCheckpoint(playerid);
			}
			if (PlayerData[playerid][pLoading])
			{
	   	 		PlayerData[playerid][pLoading] = 0;
	    		PlayerData[playerid][pLoadType] = 0;

	    		DisablePlayerCheckpoint(playerid);
			}
			if (PlayerData[playerid][pLoadCrate])
 			{
  				PlayerData[playerid][pLoadCrate] = 0;

				RemovePlayerAttachedObject(playerid, 4);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			}
		}
		if (IsPlayerInWarehouse(playerid) && GetVehicleModel(vehicleid) == 530 && CoreVehicles[vehicleid][vehLoadType] == 7)
		{
 			CoreVehicles[vehicleid][vehLoadType] = 0;
   			DestroyObject(CoreVehicles[vehicleid][vehCrate]);

			CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
			DisablePlayerCheckpoint(playerid);
		}
		SendServerMessage(playerid, "You have quit your job as a \"%s\".", Job_GetName(PlayerData[playerid][pJob]));
		PlayerData[playerid][pJob] = 0;
	}
	else SendErrorMessage(playerid, "You don't have a job to quit.");
	return 1;
}

CMD:debug_joinjob(playerid, params[])
{
	static
	    id = -1;

	if ((id = Job_Nearest(playerid)) != -1)
	{
	    if (PlayerData[playerid][pJob] == JobData[id][jobType])
	        return SendErrorMessage(playerid, "You have this job already.");

	    PlayerData[playerid][pJob] = JobData[id][jobType];

	    return SendServerMessage(playerid, "You are now a %s - type \"/jobhelp\" for job commands.", Job_GetName(JobData[id][jobType]));
	}
    SendErrorMessage(playerid, "You are not in range of any job pickups.");
	return 1;
}

CMD:unload(playerid, params[])
{
	new
		id = Business_NearestDeliver(playerid),
		vid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if (id == -1)
	    return SendErrorMessage(playerid, "You are not in range of any delivery point.");

 	if (!IsLoadableVehicle(vid))
  		return SendErrorMessage(playerid, "You are not inside any loadable vehicle.");

	if (!CoreVehicles[vid][vehLoadType] || CoreVehicles[vid][vehLoads] < 1)
	    return SendErrorMessage(playerid, "There is nothing loaded in this vehicle.");

	if (PlayerData[playerid][pUnloading] != -1)
	    return SendErrorMessage(playerid, "You are already unloading your crates.");

	if (PlayerData[playerid][pShipment] != -1 && id != PlayerData[playerid][pShipment])
	    return SendErrorMessage(playerid, "You didn't accept shipment for this business.");

	switch (CoreVehicles[vid][vehLoadType])
 	{
	 	case 1:
	 	{
	 	    if (BusinessData[id][bizType] != 1 && BusinessData[id][bizType] != 6 && BusinessData[id][bizType] != 8 && BusinessData[id][bizType] != 9)
	 	        return SendErrorMessage(playerid, "This business can't accept this load (wrong type).");
		}
		case 2..4:
		{
		    if (BusinessData[id][bizType] != CoreVehicles[vid][vehLoadType])
	 	        return SendErrorMessage(playerid, "This business can't accept this load (wrong type).");
		}
		case 5:
		{
		    if (BusinessData[id][bizType] != 10)
	 	        return SendErrorMessage(playerid, "This business can't accept this load (wrong type).");
		}
		case 6:
		{
		    if (BusinessData[id][bizType] != 7)
	 	        return SendErrorMessage(playerid, "This business can't accept this load (wrong type).");
		}
	}
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	DisableWaypoint(playerid);

	GetVehicleBoot(vid, fX, fY, fZ);
	RemovePlayerFromVehicle(playerid);

	PlayerData[playerid][pUnloading] = id;
	PlayerData[playerid][pUnloadVehicle] = vid;

	SetPlayerCheckpoint(playerid, fX, fY, fZ, 1.0);
	SendServerMessage(playerid, "Please unload the crates and deliver them to the point.");

	return 1;
}

CMD:repair(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_MECHANIC)
	    return SendErrorMessage(playerid, "You don't have the appropriate job.");

	if (IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "You must exit the vehicle first.");

	if (!Inventory_HasItem(playerid, "Repair Kit"))
	    return SendErrorMessage(playerid, "You don't have a repair kit on you.");

	if (PlayerData[playerid][pRepairTime] > gettime())
	    return SendErrorMessage(playerid, "You must wait %d seconds before repairing again.", PlayerData[playerid][pRepairTime] - gettime());

	new id;
	if ((id = Car_Nearest(playerid)) != -1)
	{
		if (!IsEngineVehicle(CarData[id][carVehicle]))
	        return SendErrorMessage(playerid, "This vehicle can't be repaired.");

		if (!GetHoodStatus(CarData[id][carVehicle]) && !IsAMotorbike(CarData[id][carVehicle]))
	        return SendErrorMessage(playerid, "The hood must be opened before a repair.");

		if(!IsPlayerNearHood(playerid, CarData[id][carVehicle]) && !IsAMotorbike(CarData[id][carVehicle]))
			return SendErrorMessage(playerid, "You must be near the hood to repair the car.");

		if (CoreVehicles[CarData[id][carVehicle]][vehRepairing])
            return SendErrorMessage(playerid, "This vehicle is already being repaired.");

		if(IsHighCostRepair(CarData[id][carVehicle]) || IsMidCostRepair(CarData[id][carVehicle]))
			return SendErrorMessage(playerid, "This vehicle cannot be repaired on the side of the road. It must be repaired using /fixcar at a repair center.");

		Inventory_Remove(playerid, "Repair Kit");
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);

        CoreVehicles[CarData[id][carVehicle]][vehRepairing] = true;
        SetTimerEx("RepairCar", 5000, false, "dd", playerid, CarData[id][carVehicle]);

        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s starts to repair the vehicle.", ReturnName(playerid, 0));
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Repairing...~w~ Please wait", 5500, 3);
		return 1;
	}
	else SendErrorMessage(playerid, "You are not in range of any vehicle's hood.");
	return 1;
}

CMD:repaircar(playerid, params[])
{

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "You must be inside a vehicle to repair.");

	if (GetMoney(playerid) <= 149)
	    return SendErrorMessage(playerid, "You need $2500 for the repair of your car.");

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerInRangeOfPoint(playerid, 7.0, 719.6558, -469.2626, 16.3437))
	{
		if(GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_GOV || GetFactionType(playerid) == FACTION_MEDIC || GetFactionType(playerid) == FACTION_NEWS)
		{
	        RepairVehicle(GetPlayerVehicleID(playerid));
	        SendServerMessage(playerid, "Your vehicle repair cost has been funded by the Government.");
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s's vehicle is being repaired by Pay n Spray.", ReturnName(playerid, 0));
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Repairing...~w~ Please wait", 5500, 3);
		}
		else
		{
			GiveMoney(playerid, -2500);
			SendServerMessage(playerid, "You have paid $2500 for your vehicle's repair.");
  			RepairVehicle(GetPlayerVehicleID(playerid));
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s's vehicle is being repaired by Pay n Spray.", ReturnName(playerid, 0));
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Repairing...~w~ Please wait", 5500, 3);
		}
		return 1;
	}
	SendErrorMessage(playerid, "You are not in range of the Pay n Spray");
	return 1;
}

/*CMD:nitrous(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_MECHANIC)
	    return SendErrorMessage(playerid, "You don't have the appropriate job.");

	if (IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "You must exit the vehicle first.");

	if (!Inventory_HasItem(playerid, "NOS Canister"))
	    return SendErrorMessage(playerid, "You don't have a NOS canister on you.");

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
	    if (!IsEngineVehicle(i) || IsABike(i) || IsABoat(i) || IsAPlane(i) || IsAHelicopter(i))
	        return SendErrorMessage(playerid, "You can't add nitrous to this vehicle.");

	    if (!GetHoodStatus(i))
	        return SendErrorMessage(playerid, "The hood must be opened before adding nitrous.");

		Inventory_Remove(playerid, "NOS Canister");
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);

		AddComponent(i, 1010);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s places a NOS canister into the vehicle's engine.", ReturnName(playerid, 0));
		return 1;
	}
	SendErrorMessage(playerid, "You are not in range of any vehicle's hood.");
	return 1;
}*/

CMD:acceptcall(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_TAXI)
	    return SendErrorMessage(playerid, "You don't have the appropriate job.");

	if (!PlayerData[playerid][pTaxiDuty])
	    return SendErrorMessage(playerid, "You must be on Taxi duty in order to accept a call.");

	Taxi_ShowCalls(playerid);
	return 1;
}

CMD:acceptmechanic(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_MECHANIC)
	    return SendErrorMessage(playerid, "You don't have the appropriate job.");

	Mechanic_ShowCalls(playerid);
	return 1;
}

CMD:taxi(playerid, params[])
{
	new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));

    if (PlayerData[playerid][pJob] != JOB_TAXI)
	    return SendErrorMessage(playerid, "You don't have the appropriate job.");

	if (modelid != 438 && modelid != 420)
	    return SendErrorMessage(playerid, "You must be inside a taxi.");

	if (PlayerData[playerid][pTaxiDuty])
	{
	    foreach (new i : Player) if (PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
	        LeaveTaxi(i, playerid);
	    }
	    SetPlayerColor(playerid, DEFAULT_COLOR);

        PlayerData[playerid][pTaxiDuty] = false;
        SendServerMessage(playerid, "You are no longer on taxi duty!");
	}
	else
	{
		SetPlayerColor(playerid, 0xF5DEB300);

	    PlayerData[playerid][pTaxiDuty] = true;
	    SendServerMessage(playerid, "[TAXI]: You are now on Taxi duty. Check /acceptcall regulary.");
	}
	return 1;
}

CMD:usekit(playerid, params[])
{
	if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "You can't use this command now.");

	if (PlayerData[playerid][pFirstAid])
	    return SendErrorMessage(playerid, "You are already using a first aid kit.");

	if (!Inventory_HasItem(playerid, "First Aid"))
	    return SendErrorMessage(playerid, "You don't have any first aid kits on you.");

	if (ReturnHealth(playerid) > 99)
	    return SendErrorMessage(playerid, "You don't need to use a first aid kit right now.");

	if (!IsPlayerInAnyVehicle(playerid))
	    ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);

    PlayerData[playerid][pFirstAid] = true;
    PlayerData[playerid][pAidTimer] = SetTimerEx("FirstAidUpdate", 1000, true, "d", playerid);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s opens a first aid kit and uses it.", ReturnName(playerid, 0));
    Inventory_Remove(playerid, "First Aid");

    ShowPlayerFooter(playerid, "You have used a ~g~first aid kit!");
    return 1;
}

CMD:phone(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "Cellphone"))
	    return SendErrorMessage(playerid, "You don't have a cellphone on you.");

    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "You can't use this command now.");

	static
	    str[32];

	format(str, sizeof(str), "Phone (#%d)", PlayerData[playerid][pPhone]);

	if (PlayerData[playerid][pPhoneOff]) {
		Dialog_Show(playerid, MyPhone, DIALOG_STYLE_LIST, str, "Dial Number\nMy Contacts\nSend Text Message\nTurn On Phone", "Select", "Cancel");
	}
	else {
	    Dialog_Show(playerid, MyPhone, DIALOG_STYLE_LIST, str, "Dial Number\nMy Contacts\nSend Text Message\nTurn Off Phone", "Select", "Cancel");
	}
	SetPlayerAttachedObject(playerid, 4, 330 , 6);//gives the phone in the hand
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);//does the animation
	return 1;
}
CMD:sms(playerid, params[])
	return cmd_text(playerid, params);

CMD:text(playerid, params[])
{
    if (!Inventory_HasItem(playerid, "Cellphone"))
	    return SendErrorMessage(playerid, "You don't have a cellphone on you.");

    if (PlayerData[playerid][pPhoneOff])
		return SendErrorMessage(playerid, "Your phone must be powered on.");

	static
	    targetid,
		number,
		text[128];

	if (sscanf(params, "ds[128]", number, text))
	    return SendSyntaxMessage(playerid, "/text [phone number] [message]");

	if (!number)
	    return SendErrorMessage(playerid, "The specified phone number is not in service.");

	if ((targetid = GetNumberOwner(number)) != INVALID_PLAYER_ID)
	{
	    if (targetid == playerid)
	        return SendErrorMessage(playerid, "You can't text yourself!");

		if (PlayerData[targetid][pPhoneOff])
		    return SendErrorMessage(playerid, "The recipient has their cellphone powered off.");

        GiveMoney(playerid, -1);
		ShowPlayerFooter(playerid, "You've been ~r~charged~w~ $1 to send a text.");

		SendClientMessageEx(targetid, COLOR_YELLOW, "[TEXT]: %s - %s (%d)", text, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
		SendClientMessageEx(playerid, COLOR_YELLOW, "[TEXT]: %s - %s (%d)", text, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);

        PlayerPlaySoundEx(targetid, 21001);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out their phone and sends a text.", ReturnName(playerid, 0));
	}
	else
	{
	    SendErrorMessage(playerid, "The specified phone number is not in service.");
	}
	return 1;
}

CMD:pickup(playerid, params[])
{
	if (!PlayerData[playerid][pIncomingCall])
	    return SendErrorMessage(playerid, "There are no incoming calls to accept.");

	if (PlayerData[playerid][pCuffed])
	    return SendErrorMessage(playerid, "You can't use this command at the moment.");

    if (PlayerData[playerid][pPhoneOff])
    	return SendErrorMessage(playerid, "Your phone must be powered on.");

	new targetid = PlayerData[playerid][pCallLine];

	PlayerData[playerid][pIncomingCall] = 0;
	PlayerData[targetid][pIncomingCall] = 0;

	SetPlayerAttachedObject(playerid, 4, 330 , 6);//gives the phone in the hand
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);//does the animation

	SendClientMessage(playerid, COLOR_YELLOW, "[Server]:{FFFFFF} You have answered the call.");
	SendClientMessage(targetid, COLOR_YELLOW, "[Server]:{FFFFFF} The other line has accepted the call.");

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has accepted the incoming call.", ReturnName(playerid, 0));
	return 1;
}

CMD:h(playerid, params[]) return cmd_hangup(playerid, "");

CMD:hangup(playerid, params[])
{
	new targetid = PlayerData[playerid][pCallLine];

	RemovePlayerAttachedObject(playerid,4);
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	RemovePlayerAttachedObject(targetid,4);
	SetPlayerSpecialAction(targetid,SPECIAL_ACTION_STOPUSECELLPHONE);

	if (PlayerData[playerid][pEmergency] || PlayerData[playerid][pPlaceAd] || PlayerData[playerid][pLoanAsk])
	{
	    PlayerData[playerid][pEmergency] = 0;
	    PlayerData[playerid][pPlaceAd] = 0;
	    PlayerData[playerid][pLoanAsk] = 0;

        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has hung up their cellphone.", ReturnName(playerid, 0));
        return 1;
	}
	if (PlayerData[playerid][pDealerCallGuns] || PlayerData[playerid][pDealerCallDrugs] || PlayerData[playerid][pDealerCallMP] || PlayerData[playerid][pDealerCallPP] || PlayerData[playerid][pDealerCallSMGP] || PlayerData[playerid][pDealerCallSP] || PlayerData[playerid][pDealerCallRP] || PlayerData[playerid][pDealerCallDP])
	{
	    PlayerData[playerid][pDealerCallDrugs] = 0;
		PlayerData[playerid][pDealerCallGuns] = 0;
	    PlayerData[playerid][pDealerCallMP] = 0;
	    PlayerData[playerid][pDealerCallPP] = 0;
	    PlayerData[playerid][pDealerCallSMGP] = 0;
	    PlayerData[playerid][pDealerCallSP] = 0;
	    PlayerData[playerid][pDealerCallRP] = 0;
	    PlayerData[playerid][pDealerCallDP] = 0;

        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has hung up their cellphone.", ReturnName(playerid, 0));
        return 1;
	}
	if (targetid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "There are no calls to hangup.");

	if (PlayerData[playerid][pIncomingCall])
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "[Phone]:{FFFFFF} You have declined the incoming call.");
	    SendClientMessage(targetid, COLOR_YELLOW, "[Phone]:{FFFFFF} The other line has declined the call.");

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has declined the call.", ReturnName(playerid, 0));
	}
	else
	{
        SendClientMessage(playerid, COLOR_YELLOW, "[Phone]:{FFFFFF} You have hung up the call.");
	    SendClientMessage(targetid, COLOR_YELLOW, "[Phone]:{FFFFFF} The other line has hung up the call.");

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has hung up their cellphone.", ReturnName(playerid, 0));
	    SendNearbyMessage(targetid, 30.0, COLOR_PURPLE, "* %s has hung up their cellphone.", ReturnName(targetid, 0));
	}
	PlayerData[playerid][pIncomingCall] = 0;
	PlayerData[targetid][pIncomingCall] = 0;

	PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
	PlayerData[targetid][pCallLine] = INVALID_PLAYER_ID;

	return 1;
}

CMD:paint(playerid, params[])
{
	if (PlayerData[playerid][pCuffed])
	    return SendErrorMessage(playerid, "You can't use this command at the moment.");

	new vehicleid = GetNearestVehicle(playerid);

	if (vehicleid == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "You are not standing near any vehicle.");

	if (!Inventory_HasItem(playerid, "Spray Can"))
	    return SendErrorMessage(playerid, "You don't have any cans of spray paint.");

	if (IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "You must exit the vehicle first.");

	static
 		colors[256];

	for (new i = 0; i < sizeof(colors); i ++) {
		colors[i] = i;
   	}
   	ShowColorSelectionMenu(playerid, MODEL_SELECTION_COLOR, colors);
	return 1;
}

CMD:id(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/id [playerid/name]");

	new count;

	foreach (new i : Player)
	{
	    if (strfind(ReturnName(i), params, true) != -1)
	    {
	        SendClientMessageEx(playerid, COLOR_WHITE, "* %s - ID: %d", ReturnName(i), i);
	        count++;
		}
	}
	if (!count)
	    return SendErrorMessage(playerid, "No users matched the search criteria: \"%s\".", params);

	return 1;
}

CMD:binfo(playerid, params[])
{
    new
		id = -1;

    if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1 && Business_IsOwner(playerid, id)) {
     	SendServerMessage(playerid, "ID: %d | Business: %s | Products: %d | Vault: %s", id, BusinessData[id][bizName], BusinessData[id][bizProducts], FormatNumber(BusinessData[id][bizVault]));
		return 1;
	}

	id = Business_Nearest(playerid);

	if (PlayerData[playerid][pAdmin] > 0)
	{
		SendServerMessage(playerid, "ID: %d | Business: %s | Products: %d | Vault: %s", id, BusinessData[id][bizName], BusinessData[id][bizProducts], FormatNumber(BusinessData[id][bizVault]));
		return 1;
	}
	else SendErrorMessage(playerid, "You are not in range of your business.");
	return 1;
}

CMD:loadcrate(playerid, params[])
{
	if (PlayerData[playerid][pJob] == JOB_UNLOADER)
	{
		new vehid = GetPlayerVehicleID(playerid);

		if (!IsPlayerInWarehouse(playerid))
			return SendErrorMessage(playerid, "You must be inside a warehouse to do this.");

		if (GetVehicleModel(vehid) != 530)
			return SendErrorMessage(playerid, "You must be inside a forklift.");

		if (CoreVehicles[vehid][vehLoadType] == 7)
			return SendErrorMessage(playerid, "This forklift has a crate loaded already.");

		if (!IsPlayerInRangeOfPoint(playerid, 5.0, 1260.3976, -20.0215, 1001.0234))
			return SendErrorMessage(playerid, "You must be closer to the crates.");

		if (PlayerData[playerid][pLoading])
			return SendErrorMessage(playerid, "You are already loading a crate at the moment.");

		PlayerData[playerid][pLoading] = 1;

		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Loading crate...", 3200, 3);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s moves the forklift towards the crate.", ReturnName(playerid, 0));

		TogglePlayerControllable(playerid, 0);
		SetTimerEx("ForkliftUpdate", 3000, false, "dd", playerid, vehid);
		return 1;
	}

	else if (PlayerData[playerid][pJob] == JOB_COURIER)
	{
		new id = Job_NearestPoint(playerid);

		if (id == -1 || JobData[id][jobType] != JOB_COURIER)
			return SendErrorMessage(playerid, "You are not in range of any loading point.");

		if (PlayerData[playerid][pLoadType] > 0 || TruckingCheck[playerid] > 0)
			return SendErrorMessage(playerid, "You have already started a delivery.");

		if (IsPlayerInAnyVehicle(playerid))
			return SendErrorMessage(playerid, "You must exit the vehicle first.");

		Dialog_Show(playerid, StartDelivery, DIALOG_STYLE_LIST, "Select Type", "Retail Supplies\nAmmunition\nClothing\nFood Supplies\nFishing Supplies\nFurniture", "Select", "Cancel");
		return 1;
	}
	else return SendErrorMessage(playerid, "You don't have the appropriate job.");
}

CMD:mine(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_MINER)
	    return SendErrorMessage(playerid, "You don't have the appropriate job.");

	if (!IsPlayerNearMine(playerid))
	    return SendErrorMessage(playerid, "You must be near the mine.");

	if (PlayerData[playerid][pMining])
	{
	    PlayerData[playerid][pMining] = false;
	    PlayerData[playerid][pMineCount] = 0;

		RemovePlayerAttachedObject(playerid, 4);
	    SendServerMessage(playerid, "You have finished your mining job.");
	}
	else
	{
	    PlayerData[playerid][pMining] = true;
        PlayerData[playerid][pMineCount] = 0;

	    SendServerMessage(playerid, "You are now mining! Use the fire key to begin digging.");
	    SetPlayerAttachedObject(playerid, 4, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
	}
	return 1;
}

CMD:sellfood(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_FOOD_VENDOR)
	    return SendErrorMessage(playerid, "You don't have the appropriate job.");

	if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 423)
 		return SendErrorMessage(playerid, "You are not inside a food truck.");

	static
	    userid,
	    food[24],
	    price;

	if (sscanf(params, "us[24]d", userid, food, price))
	{
	    SendSyntaxMessage(playerid, "/sellfood [playerid/name] [food name] [price]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} water, soda, burger, pizza, chicken");
	    return 1;
	}
	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 7.0))
	    return SendErrorMessage(playerid, "That player is disconnected or not near you.");

	if (price < 1 || price > 50)
	    return SendErrorMessage(playerid, "The price can't be below $1 or above $50.");

	if (!strcmp(food, "water", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 1;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s has offered you some water for $%d (type \"/approve food\" to accept).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "You have offered some water to %s for $%d.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "soda", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 2;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s has offered you a soda for $%d (type \"/approve food\" to accept).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "You have offered a soda to %s for $%d.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "burger", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 3;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s has offered you a burger for $%d (type \"/approve food\" to accept).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "You have offered a burger to %s for $%d.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "pizza", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 4;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s has offered you a slice of pizza for $%d (type \"/approve food\" to accept).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "You have offered a slice of pizza to %s for $%d.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "chicken", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 5;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s has offered you some chicken for $%d (type \"/approve food\" to accept).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "You have offered some chicken to %s for $%d.", ReturnName(userid, 0), price);
	}
	return 1;
}

CMD:createcrate(playerid, params[])
{
	static
	    id = -1,
		type;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", type))
	{
	    SendSyntaxMessage(playerid, "/createcrate [type]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Melee | 2: Pistol Parts | 3: SMG Parts | 4: Shotgun Parts | 5: Rifle Parts | 6: Drugs");
		return 1;
	}
	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Invalid type specified. Types range from 1 to 6.");

	id = Crate_Create(playerid, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for crates.");

	SendServerMessage(playerid, "You have successfully created crate ID: %d.", id);
	return 1;
}

CMD:destroycrate(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroycrate [crate id]");

	if ((id < 0 || id >= MAX_CRATES) || !CrateData[id][crateExists])
	    return SendErrorMessage(playerid, "You have specified an invalid crate ID.");

	Crate_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed crate ID: %d.", id);
	return 1;
}

CMD:crates(playerid, params[])
{
	static
	    string[512];

	string[0] = '\0';

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsLoadableVehicle(i) && IsPlayerNearBoot(playerid, i))
	{
	    if (GetVehicleCrates(i) < 1)
	        return SendErrorMessage(playerid, "There are no crates in this vehicle.");

		for (new j = 0; j != MAX_CRATES; j ++) if (CrateData[j][crateExists] && CrateData[j][crateVehicle] == i) {
			format(string, sizeof(string), "%sCrate #%d: %s Parts\n", string, j, Crate_GetType(CrateData[j][crateType]));
		}
		PlayerData[playerid][pCrateVehicle] = i;
		return Dialog_Show(playerid, Crates, DIALOG_STYLE_LIST, "Vehicle Crates", string, "Take", "Cancel");
	}
	SendErrorMessage(playerid, "You are not in range of any loadable vehicle.");
	return 1;
}

CMD:craftparts(playerid, params[])
{
	new id = -1;

	if (PlayerData[playerid][pJob] != JOB_WEAPON_SMUGGLER)
	    return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if ((id = Job_NearestPoint(playerid)) == -1 || JobData[id][jobType] != JOB_WEAPON_SMUGGLER)
		return SendErrorMessage(playerid, "You are not in range of the craft factory.");

	if (PlayerData[playerid][pCarryCrate] == -1)
	    return SendErrorMessage(playerid, "You are not carrying any crate.");

	if (PlayerData[playerid][pCrafting])
	    return SendErrorMessage(playerid, "You are already crafting weapon parts.");

	if (CrateData[PlayerData[playerid][pCarryCrate]][crateType] < 1 || CrateData[PlayerData[playerid][pCarryCrate]][crateType] > 5)
	    return SendErrorMessage(playerid, "There are no weapon parts in this crate.");

    PlayerData[playerid][pCrafting] = 1;

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s begins crafting their %s Parts.", ReturnName(playerid, 0), Crate_GetType(CrateData[PlayerData[playerid][pCarryCrate]][crateType]));
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Crafting parts...", 11000, 3);

	TogglePlayerControllable(playerid, 0);
	SetTimerEx("CraftParts", 8000, false, "dd", playerid, PlayerData[playerid][pCarryCrate]);
	return 1;
}



CMD:opencrate(playerid, params[])
{
	new id = Crate_Nearest(playerid);

	if (id == -1 || CrateData[id][crateType] != 6)
	    return SendErrorMessage(playerid, "You are not in range of any drug crate.");

	if (!Inventory_HasItem(playerid, "Crowbar"))
		return SendErrorMessage(playerid, "You need a crowbar to open this crate.");

	if (PlayerData[playerid][pOpeningCrate])
	    return SendErrorMessage(playerid, "You are already opening a crate.");

	PlayerData[playerid][pOpeningCrate] = 1;

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a crowbar and breaks the drug crate open.", ReturnName(playerid, 0));
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Opening crate...", 3000, 3);

 	TogglePlayerControllable(playerid, 0);
  	ApplyAnimation(playerid, "BASEBALL", "Bat_4", 4.0, 1, 1, 1, 1, 0, 1);

	SetTimerEx("OpenCrate", 3000, false, "dd", playerid, id);
    return 1;
}

CMD:plant(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/plant [weed/cocaine/heroin]");

	if (Plant_Nearest(playerid) != -1)
	    return SendErrorMessage(playerid, "You can't plant seeds near other plants.");

	if (!strcmp(params, "weed", true))
	{
	    if (Inventory_Count(playerid, "Marijuana Seeds") < 10)
	        return SendErrorMessage(playerid, "You need at least 10 marijuana seeds.");

		Inventory_Remove(playerid, "Marijuana Seeds", 10);

		Plant_Create(playerid, 1);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s plants some marijuana seeds into the ground.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "cocaine", true))
	{
	    if (Inventory_Count(playerid, "Cocaine Seeds") < 10)
	        return SendErrorMessage(playerid, "You need at least 10 cocaine seeds.");

		Inventory_Remove(playerid, "Cocaine Seeds", 10);

		Plant_Create(playerid, 2);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s plants some cocaine seeds into the ground.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "heroin", true))
	{
	    if (Inventory_Count(playerid, "Heroin Opium Seeds") < 10)
	        return SendErrorMessage(playerid, "You need at least 10 heroin opium seeds.");

		Inventory_Remove(playerid, "Heroin Opium Seeds", 10);

		Plant_Create(playerid, 3);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s plants some heroin opium seeds into the ground.", ReturnName(playerid, 0));
	}
	else {
	    SendSyntaxMessage(playerid, "/plant [weed/cocaine/heroin]");
	}
	return 1;
}

CMD:harvest(playerid, params[])
{
	new id = Plant_Nearest(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "You must be near a drug plant.");

	if (PlantData[id][plantDrugs] < Plant_MaxGrams(PlantData[id][plantType]))
	    return SendErrorMessage(playerid, "This plant is not fully grown yet.");

	if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	    return SendErrorMessage(playerid, "You must be crouched to harvest drug plant.");

	if (PlayerData[playerid][pHarvesting])
	    return SendErrorMessage(playerid, "You are already harvesting a plant.");

	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Harvesting plant...", 3100, 3);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s begins to harvest the drug plant.", ReturnName(playerid, 0));

	PlayerData[playerid][pHarvesting] = 1;
	SetTimerEx("HarvestPlant", 3000, false, "dd", playerid, id);
	return 1;
}

/*CMD:createweapon(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_GANG)
	    return SendErrorMessage(playerid, "You are not a member of an illegal faction.");

	if(PlayerData[playerid][pPlayingHours] >= 10)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 1238.1721,235.7764,19.5547)) // Montgomery against SA News
		{
			ShowPlayerDialog(playerid, 12250, DIALOG_STYLE_LIST, "Weapon List", "9mm Pistol ($5,500 and 245 materials)\nGlock-17 ($6,000 and 400 materials)\nShotgun ($6,500 and 500 materials)\nMP5 ($7,000 and 600 materials)\nCountry Rifle ($7,500 and 620 materials)\nAK-47 ($8,000 and 800 materials)", "Create", "Cancel");
		}
		else return SendErrorMessage(playerid, "You are not near Black Market.");
	}
	else return SendErrorMessage(playerid, "You must have more than 10 hours played.");
	return 1;
}*/

CMD:blackmarket(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_GANG_DRUGS && GetFactionType(playerid) != FACTION_GANG_GUNS)
	    return SendErrorMessage(playerid, "You are not a member of an illegal faction.");

	if (PlayerData[playerid][pFactionRank] < 4)
        return SendErrorMessage(playerid, "You have to be rank 4 or higher in the faction.");

    //if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	//		return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

	if(PlayerData[playerid][pPlayingHours] >= 3)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 263.3232,2895.9087,10.5391)) // abandoned airport dock
		{
			ShowPlayerDialog(playerid, 12250, DIALOG_STYLE_LIST, "Black Market", "Magazine ($1000)\nKnife($20000)\nAmmo Cartridge($4000)\nKevlar Vest ($5000)\nHeavy Kevlar Vest ($14000)\nBomb ($60000)", "Create", "Cancel");
		}
		else return SendErrorMessage(playerid, "You are not near Black Market.");
	}
	else return SendErrorMessage(playerid, "You must have more than 3 hours played.");
	return 1;
}

CMD:wa(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

    if (!Inventory_HasItem(playerid, "Cellphone"))
	    return SendErrorMessage(playerid, "You do not have a cellphone therefore you cannot use Whatsapp.");

    if (PlayerData[playerid][pPhoneOff])
		return SendErrorMessage(playerid, "Your phone must be powered on in order to open Whatsapp.");

 	if (GetFactionType(playerid) != FACTION_GANG_DRUGS && GetFactionType(playerid) != FACTION_GANG_GUNS)
	    return SendErrorMessage(playerid, "You are not a member of an illegal faction.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/wa [message]");

	SendFactionMessage(factionid, COLOR_WHATSAPP, "[Whatsapp] [%s]: {FFFFFF}%s", ReturnName(playerid, 0), params);
	return 1;
}

CMD:createfaction(playerid, params[])
{
	static
	    id = -1,
		type,
		name[32];

    if (PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ds[32]", type, name))
	{
	    SendSyntaxMessage(playerid, "/createfaction [type] [name]");
		SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Police | 2: News | 3: Medical | 4: Government | 5: Security | 6: Gang (drugs) | 7: Gang (guns)");
		return 1;
	}
	if (type < 1 || type > 7)
	    return SendErrorMessage(playerid, "Invalid type specified. Types range from 1 to 7.");

	id = Faction_Create(name, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for factions.");

	SendServerMessage(playerid, "You have successfully created faction ID: %d.", id);
	return 1;
}

CMD:destroyfaction(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyfaction [faction id]");

	if ((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
	    return SendErrorMessage(playerid, "You have specified an invalid faction ID.");

	Faction_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed faction ID: %d.", id);
	return 1;
}

CMD:open(playerid, params[])
{
	new id = Gate_Nearest(playerid);

	if (id != -1)
	{
		if (strlen(GateData[id][gatePass]))
		{
		    Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Please enter the password for this gate below:", "Submit", "Cancel");
		}
		else
		{
		    if (GateData[id][gateFaction] != -1 && PlayerData[playerid][pFaction] != GateData[id][gateFaction])
				return SendErrorMessage(playerid, "You can't open this gate.");

			Gate_Operate(id);

			switch (GateData[id][gateOpened])
			{
			    case 0:
				    ShowPlayerFooter(playerid, "You have ~r~closed~w~ the gate!");

                case 1:
				    ShowPlayerFooter(playerid, "You have ~g~opened~w~ the gate!");
			}
		}
	}
	else if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonDoors][0]))
	{
	    if (GetFactionType(playerid) != FACTION_POLICE)
	        return SendErrorMessage(playerid, "You must be a police officer to open this door.");

	    if (!PrisonData[prisonDoorOpened][0])
		{
			SetDynamicObjectRot(PrisonData[prisonDoors][0], 0.0, 0.0, -90.0);

			PrisonData[prisonDoorOpened][0] = true;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes their key and opens the prison door.", ReturnName(playerid, 0));
		}
		else
		{
		    SetDynamicObjectRot(PrisonData[prisonDoors][0], 0.0, 0.0, 0.0);

			PrisonData[prisonDoorOpened][0] = false;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes their key and closes the prison door.", ReturnName(playerid, 0));
		}
	}
	else if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonDoors][1]))
	{
	    if (GetFactionType(playerid) != FACTION_POLICE)
	        return SendErrorMessage(playerid, "You must be a police officer to open this door.");

	    if (!PrisonData[prisonDoorOpened][1])
		{
			SetDynamicObjectRot(PrisonData[prisonDoors][1], 0.0, 0.0, 0.0);

			PrisonData[prisonDoorOpened][1] = true;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes their key and opens the prison door.", ReturnName(playerid, 0));
		}
		else
		{
		    SetDynamicObjectRot(PrisonData[prisonDoors][1], 0.0, 0.0, 90.0);

			PrisonData[prisonDoorOpened][1] = false;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes their key and closes the prison door.", ReturnName(playerid, 0));
		}
	}
	else if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonDoors][2]))
	{
	    if (GetFactionType(playerid) != FACTION_POLICE)
	        return SendErrorMessage(playerid, "You must be a police officer to open this door.");

	    if (!PrisonData[prisonDoorOpened][2])
		{
			SetDynamicObjectRot(PrisonData[prisonDoors][2], 0.0, 0.0, -90.0);

			PrisonData[prisonDoorOpened][2] = true;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes their key and opens the prison door.", ReturnName(playerid, 0));
		}
		else
		{
		    SetDynamicObjectRot(PrisonData[prisonDoors][2], 0.0, 0.0, 0.0);

			PrisonData[prisonDoorOpened][2] = false;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes their key and closes the prison door.", ReturnName(playerid, 0));
		}
	}
	for (new i = 0; i < 24; i ++) if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonCells][i], 3.0))
	{
	    if (GetFactionType(playerid) != FACTION_POLICE)
	        return SendErrorMessage(playerid, "You must be a police officer to open this cell.");

		if (!PrisonData[prisonCellOpened][i])
		{
			MoveDynamicObject(PrisonData[prisonCells][i], PrisonCells[i][0], PrisonCells[i][1] + 1.6, PrisonCells[i][2], 3.0);

		    PrisonData[prisonCellOpened][i] = true;
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes their key and opens the prison cell.", ReturnName(playerid, 0));
		}
		else
		{
		    MoveDynamicObject(PrisonData[prisonCells][i], PrisonCells[i][0], PrisonCells[i][1], PrisonCells[i][2], 3.0);

		    PrisonData[prisonCellOpened][i] = false;
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes their key and closes the prison cell.", ReturnName(playerid, 0));
		}
		break;
	}
	return 1;
}

CMD:drop(playerid, params[])
{
	new weaponid = 0;

    if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawned(playerid))
    	return SendErrorMessage(playerid, "You can't drop any weapons right now.");

	if ((weaponid = GetWeapon(playerid)) == 0)
	    return SendErrorMessage(playerid, "You can't drop a weapon unless you're holding one.");

	if (weaponid == 23 && PlayerData[playerid][pTazer])
	    return SendErrorMessage(playerid, "You can't drop a tazer.");

    if (weaponid == 25 && PlayerData[playerid][pBeanBag])
	    return SendErrorMessage(playerid, "You can't drop a beanbag shotgun.");

	static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	//x += 1.5 * floatsin(-angle, degrees);
	//y += 1.5 * floatcos(-angle, degrees);

    DropItem(ReturnWeaponName(weaponid), ReturnName(playerid, 0), GetWeaponModel(weaponid), 1, x, y, z - 1, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), weaponid, GetPlayerAmmo(playerid));
	ResetWeapon(playerid, weaponid);

    ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0, 1);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a %s and drops it on the floor.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
	return 1;
}

CMD:flist(playerid, params[])
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists]) {
	    SendClientMessageEx(playerid, COLOR_WHITE, "[ID: %d] {%06x}%s", i, FactionData[i][factionColor] >>> 8, FactionData[i][factionName]);
	}
	return 1;
}

CMD:editfaction(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pFactionMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editfaction [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} name, color, type, models, locker, ranks, maxranks, divisions, maxdivs.");
		return 1;
	}
	if ((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
	    return SendErrorMessage(playerid, "You have specified an invalid faction ID.");

    if (!strcmp(type, "name", true))
	{
	    new name[64];

	    if (sscanf(string, "s[64]", name))
	        return SendSyntaxMessage(playerid, "/editfaction [id] [name] [new name]");

	    format(FactionData[id][factionName], 64, name);

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the name of faction ID: %d to \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "maxranks", true))
	{
	    new ranks;

	    if (sscanf(string, "d", ranks))
	        return SendSyntaxMessage(playerid, "/editfaction [id] [maxranks] [maximum ranks]");

		if (ranks < 1 || ranks > 15)
		    return SendErrorMessage(playerid, "The specified ranks can't be below 1 or above 15.");

	    FactionData[id][factionRanks] = ranks;

	    Faction_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the maximum ranks of faction ID: %d to %d.", ReturnName(playerid, 0), id, ranks);
		return 1;
	}
	else if (!strcmp(type, "maxdivs", true))
	{
	    new divisions;

	    if (sscanf(string, "d", divisions))
	        return SendSyntaxMessage(playerid, "/editfaction [id] [maxdivisions]");

		if (divisions < 1 || divisions > 5)
		    return SendErrorMessage(playerid, "The specified divisions can't be below 1 or above 5.");

	    FactionData[id][factionDivisions] = divisions;

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the maximum divisions of faction ID: %d to %d.", ReturnName(playerid, 0), id, divisions);
	}
	else if (!strcmp(type, "ranks", true))
	{
	    Faction_ShowRanks(playerid, id);
	}
	else if (!strcmp(type, "divisions", true))
	{
	    Faction_ShowDivisions(playerid, id);
	}
	else if (!strcmp(type, "color", true))
	{
	    new color;

	    if (sscanf(string, "h", color))
	        return SendSyntaxMessage(playerid, "/editfaction [id] [color] [hex color]");

	    FactionData[id][factionColor] = color;
	    Faction_Update(id);

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the {%06x}color{FF6347} of faction ID: %d.", ReturnName(playerid, 0), color >>> 8, id);
	}
	else if (!strcmp(type, "type", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
		 	SendSyntaxMessage(playerid, "/editfaction [id] [type] [faction type]");
            SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Police | 2: News | 3: Medical | 4: Government | 5: Company | 6: Gang (drugs) | 7: Gang (guns)");
            return 1;
		}
		if (typeint < 1 || typeint > 7)
		    return SendErrorMessage(playerid, "Invalid type specified. Types range from 1 to 7.");

	    FactionData[id][factionType] = typeint;

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the type of faction ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
	}
	else if (!strcmp(type, "models", true))
	{
	    static
	        skins[18];

		for (new i = 0; i < sizeof(skins); i ++)
		    skins[i] = (FactionData[id][factionSkins][i]) ? (FactionData[id][factionSkins][i]) : (19300);

	    PlayerData[playerid][pFactionEdit] = id;
		ShowModelSelectionMenu(playerid, "Faction Skins", MODEL_SELECTION_SKINS, skins, sizeof(skins), -16.0, 0.0, -55.0);
	}
	else if (!strcmp(type, "locker", true))
	{
        PlayerData[playerid][pFactionEdit] = id;
		Dialog_Show(playerid, FactionLocker, DIALOG_STYLE_LIST, "Faction Locker", "Set Location\nLocker Weapons", "Select", "Cancel");
	}
	return 1;
}

CMD:managefaction(playerid, params[])
{
	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "You must be a faction member.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
		return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2);

	Faction_Leader_Manage(playerid);
	return 1;
}

/*
CMD:manageranks(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "You must be a faction member.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
		return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2);

	Faction_ShowRanks(playerid, factionid);
	return 1;
}

CMD:managedivs(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "You must be a faction member.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
		return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2);

	Faction_ShowDivisions(playerid, factionid);
	return 1;
}
*/

CMD:color(playerid, params[])
{
	static
	    color;

	if (sscanf(params, "h", color)) {
	 	SendSyntaxMessage(playerid, "/color [hex color]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[EXAMPLE]:{FFFFFF} 0xFFFFFFFF is white, 0xFF0000FF is red, etc.");
	}
	else {
	    SendClientMessageEx(playerid, color, "This is a test message, testing color 0x%06xFF.", color >>> 8);
	}
	return 1;
}

CMD:joblist(playerid, params[])
{
	Dialog_Show(playerid, JobList, DIALOG_STYLE_LIST, "Job List", "Courier\nMechanic\nTaxi Driver\nCargo Unloader\nMiner\nFood Vendor\nGarbage Man\nPackage Sorter\nWeapon Smuggler\nFisherman", "Select", "Cancel");
	return 1;
}


CMD:resf(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	Dialog_Show(playerid, RestrictedFrequencies, DIALOG_STYLE_LIST, "Restricted Frequencies", "Police Department\nFire Department\nGovernment", "Select", "Cancel");
	return 1;
}

CMD:equip(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "You must be a police officer.");


    if (!IsNearFactionLocker(playerid) && !IsACruiser(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "You are not in range of your faction locker or any cruiser.");

	Dialog_Show(playerid, ACC_POLICE,  DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nPolice Helmet\nPolice Shield\nPolice Taser\nGrey SWAT Vest\nGrey SWAT Helmet", "Select", "Cancel");
	return 1;
}

CMD:locker(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "You must be a faction member.");

	if (!IsNearFactionLocker(playerid))
	    return SendErrorMessage(playerid, "You are not in range of your faction's locker.");

 	if (FactionData[factionid][factionType] != FACTION_GANG_DRUGS && FactionData[factionid][factionType] != FACTION_GANG_GUNS)
		Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Faction Locker", "Toggle Duty\nArmour and Health\nLocker Skins\nLocker Weapons", "Select", "Cancel");

	else Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Faction Locker", "Locker Skins\nLocker Weapons", "Select", "Cancel");
	return 1;
}

CMD:buyfstyle(playerid, params[])
{
    if (!IsPlayerInRangeOfPoint(playerid, 3.0, 756.4985, 6.1854, 1000.6995))
	    return SendErrorMessage(playerid, "You must be at a GYM to learn a fighting style.");

	Dialog_Show(playerid, FightingStyles, DIALOG_STYLE_LIST, "Fighting Styles", "\nNormal - FREE\nBoxing - 1000$\nKung Fu - 1000$\nKneehead - 1000$\nGrab kick - 1000$\nElbow - 1000$", "Select", "Cancel");
	return 1;
}

CMD:buylicense(playerid, params[])
{
    if (!IsPlayerInRangeOfPoint(playerid, 3.0, 294.1161,-83.2240,1012.3030))
	    return SendErrorMessage(playerid, "You must be at town hall to use this command.");

	Dialog_Show(playerid, LicensesPurchase, DIALOG_STYLE_LIST, "Purchase License", "\nCar License - 150$\nTruck License - 250$\nMotorbike License - 200$\nAirplane License - 1000$\nHelicopter License - 1000$", "Select", "Cancel");
	return 1;
}

CMD:factrunk(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "You must be a faction member.");

	if (!IsACruiser(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "You are not near any vehicle's trunk.");

 	if (FactionData[factionid][factionType] != FACTION_GANG_DRUGS && FactionData[factionid][factionType] != FACTION_GANG_GUNS)
		Dialog_Show(playerid, TrunkLocker, DIALOG_STYLE_LIST, "Vehicle Trunk", "Armour and Health\nTrunk Weapons", "Select", "Cancel");

	else SendErrorMessage(playerid, "You are not allowed to use this command. Government factions only.");
	return 1;
}

CMD:undercover(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
		return SendErrorMessage(playerid, "You are not authorized to use this command.");

	PlayerData[playerid][pClothesType] = 1;

	switch (PlayerData[playerid][pGender])
 	{
  		case 1:
    		ShowModelSelectionMenu(playerid, "Undercover", MODEL_SELECTION_UNDERCOVER, g_aMaleSkins, sizeof(g_aMaleSkins), -16.0, 0.0, -55.0);
		case 2:
  			ShowModelSelectionMenu(playerid, "Undercover", MODEL_SELECTION_UNDERCOVER, g_aFemaleSkins, sizeof(g_aFemaleSkins), -16.0, 0.0, -55.0);
    }
    return 1;
}

CMD:offdutyclothes(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_NEWS && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_SECURITY)
	    return SendErrorMessage(playerid, "You must be a civil service worker.");

	if (!IsNearFactionLocker(playerid))
	    return SendErrorMessage(playerid, "You are not in range of your faction's locker.");

	PlayerData[playerid][pClothesType] = 1;

	switch (PlayerData[playerid][pGender])
 	{
  		case 1:
    		ShowModelSelectionMenu(playerid, "Off Duty Clothes", MODEL_SELECTION_OFFDUTYCLOTHES, g_aMaleSkins, sizeof(g_aMaleSkins), -16.0, 0.0, -55.0);

		case 2:
  			ShowModelSelectionMenu(playerid, "Off Duty Clothes", MODEL_SELECTION_OFFDUTYCLOTHES, g_aFemaleSkins, sizeof(g_aFemaleSkins), -16.0, 0.0, -55.0);
    }
    return 1;
}

CMD:setleader(playerid, params[])
{
	static
		userid,
		id;

    if (PlayerData[playerid][pAdmin] < 4 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ud", userid, id))
	    return SendSyntaxMessage(playerid, "/setleader [playerid/name] [faction id] (Use -1 to unset)");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

    if ((id < -1 || id >= MAX_FACTIONS) || (id != -1 && !FactionData[id][factionExists]))
	    return SendErrorMessage(playerid, "You have specified an invalid faction ID.");

	if (id == -1)
	{
	    ResetFaction(userid);

	    SendServerMessage(playerid, "You have removed %s's faction leadership.", ReturnName(userid, 0));
    	SendServerMessage(userid, "%s has removed your faction leadership.", ReturnName(playerid, 0));
	}
	else
	{
		SetFaction(userid, id);
		PlayerData[userid][pFactionRank] = FactionData[id][factionRanks];
		PlayerData[userid][pFactionDivision] = 1;

		SendServerMessage(playerid, "You have made %s the leader of \"%s\".", ReturnName(userid, 0), FactionData[id][factionName]);
    	SendServerMessage(userid, "%s has made you the leader of \"%s\".", ReturnName(playerid, 0), FactionData[id][factionName]);
	}
    return 1;
}

CMD:asetfaction(playerid, params[])
{
	static
		userid,
		id;

    if (PlayerData[playerid][pAdmin] < 4 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ud", userid, id))
	    return SendSyntaxMessage(playerid, "/asetfaction [playerid/name] [faction id] (Use -1 to unset)");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

    if ((id < -1 || id >= MAX_FACTIONS) || (id != -1 && !FactionData[id][factionExists]))
	    return SendErrorMessage(playerid, "You have specified an invalid faction ID.");

	if (id == -1)
	{
	    ResetFaction(userid);

	    SendServerMessage(playerid, "You have removed %s from their faction.", ReturnName(userid, 0));
    	SendServerMessage(userid, "%s has removed you from your faction.", ReturnName(playerid, 0));
	}
	else
	{
		SetFaction(userid, id);
		PlayerData[userid][pFactionRank] = 1;
		PlayerData[userid][pFactionDivision] = 1;

		SendServerMessage(playerid, "You have set %s's faction to \"%s\".", ReturnName(userid, 0), FactionData[id][factionName]);
    	SendServerMessage(userid, "%s has set your faction to \"%s\".", ReturnName(playerid, 0), FactionData[id][factionName]);
	}
    return 1;
}

CMD:asetrank(playerid, params[])
{
	static
		userid,
		rank,
		factionid;

    if (PlayerData[playerid][pAdmin] < 4 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ud", userid, rank))
	    return SendSyntaxMessage(playerid, "/asetrank [playerid/name] [rank id]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if ((factionid = PlayerData[userid][pFaction]) == -1)
	    return SendErrorMessage(playerid, "That player is not a member of any faction.");

    if (rank < 1 || rank > FactionData[factionid][factionRanks])
        return SendErrorMessage(playerid, "Invalid rank. Ranks for this faction range from 1 to %d.", FactionData[factionid][factionRanks]);

	PlayerData[userid][pFactionRank] = rank;

	SendServerMessage(playerid, "You have set %s's faction rank to %d.", ReturnName(userid, 0), rank);
    SendServerMessage(userid, "%s has set your faction rank to %d.", ReturnName(playerid, 0), rank);

    return 1;
}

CMD:asetdiv(playerid, params[])
{
	static
		userid,
		division,
		factionid;

    if (PlayerData[playerid][pAdmin] < 4 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ud", userid, division))
	    return SendSyntaxMessage(playerid, "/asetdiv [playerid/name] [division id]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if ((factionid = PlayerData[userid][pFaction]) == -1)
	    return SendErrorMessage(playerid, "That player is not a member of any faction.");

    if (division < 1 || division > FactionData[factionid][factionDivisions])
        return SendErrorMessage(playerid, "Invalid division. division for this faction range from 1 to %d.", FactionData[factionid][factionDivisions]);

	PlayerData[userid][pFactionDivision] = division;

	SendServerMessage(playerid, "You have set %s's faction division to %d.", ReturnName(userid, 0), division);
    SendServerMessage(userid, "%s has set your faction division to %d.", ReturnName(playerid, 0), division);

    return 1;
}

CMD:factionmembers(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "You must be in a faction.");

	SendClientMessage(playerid, COLOR_FACTIONCHAT, "Online faction members:");

	foreach (new i : Player) if (PlayerData[i][pFaction] == factionid) {
		SendClientMessageEx(playerid, COLOR_WHITE, "[Name: {6999FF} %s (%i) {FFFFFF}| Rank: {6999FF} %s (%d){FFFFFF} | Division: {6999FF} %s{FFFFFF}]", ReturnName(i, 0), i, Faction_GetRank(i), PlayerData[i][pFactionRank], Faction_GetDivision(i));
	}
	return 1;
}

CMD:f(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "You must be a faction member.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(f)ac [message]");

    if (PlayerData[playerid][pDisableFaction])
	    return SendErrorMessage(playerid, "You must enable faction chat first.");

	SendFactionMessage(factionid, COLOR_FACTIONCHAT, "[Faction OOC] [%s] %s %s:{FFFFFF} %s", Faction_GetDivision(playerid), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	return 1;
}

CMD:factionalert(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "You must be a faction member.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/factionalert [faction message]");

    if (PlayerData[playerid][pDisableFaction])
	    return SendErrorMessage(playerid, "You must enable faction chat first.");

	SendFactionMessage(factionid, COLOR_FACTIONCHAT, "[Faction Alert] %s %s:{FFFFFF} %s", Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	return 1;
}

CMD:fadvert(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "You must be a faction member.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/fadvert [faction advert]");

	GiveMoney(playerid, -100);
	SendClientMessageToAllEx(COLOR_FADVERT, "[Faction Advert] [%s]: %s", GetInitials(Faction_GetName(playerid)), params);
	return 1;
}

/*
CMD:pagermsg(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "You must be a faction member.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/pagermsg [message]");

	SendPagerMessage(factionid, COLOR_ORANGE, "[PAGER MESSAGE] %s %s: %s", Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	return 1;
}
*/

CMD:factionleave(playerid, params[])
{
	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "You must be a faction member.");

	if (GetFactionType(playerid) == FACTION_POLICE)
	{
	    SetPlayerArmour(playerid, 0);
	    ResetWeapons(playerid);
	}
	SendServerMessage(playerid, "You have left the \"%s\" faction (rank %d).", Faction_GetName(playerid), PlayerData[playerid][pFactionRank]);
    ResetFaction(playerid);

    return 1;
}

CMD:factioninvite(playerid, params[])
{
	new userid;

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "You must be a faction member.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3);

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/factioninvite [playerid/name]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "That player is disconnected.");

	if (PlayerData[userid][pFaction] == PlayerData[playerid][pFaction])
	    return SendErrorMessage(playerid, "That player is already part of your faction.");

    if (PlayerData[userid][pFaction] != -1)
	    return SendErrorMessage(playerid, "That player is already part of another faction.");

	PlayerData[userid][pFactionOffer] = playerid;
    PlayerData[userid][pFactionOffered] = PlayerData[playerid][pFaction];

    SendServerMessage(playerid, "You have invited %s to join \"%s\".", ReturnName(userid, 0), Faction_GetName(playerid));
    SendServerMessage(userid, "%s has invited you to join \"%s\" (type \"/approve faction\").", ReturnName(playerid, 0), Faction_GetName(playerid));

	return 1;
}

CMD:offerloan(playerid, params[])
{
	static
	    userid,
	    amount,
	    reason[64];

	if (GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "You are not a government official.");

	if (!Inventory_HasItem(playerid, "Sale Documents"))
		return SendErrorMessage(playerid, "You need sale documents to write on, get them from the Post Office.");

    if (!Inventory_HasItem(playerid, "Pen"))
    	return SendErrorMessage(playerid, "You need a pen to write down your sale information. Buy one from a Post Office.");

 	if (sscanf(params, "uds[64]", userid, amount, reason))
		return SendSyntaxMessage(playerid, "/offerloan [playerid/name] [price] [reason]");

    if (amount < 500 || amount > 500000)
	    return SendErrorMessage(playerid, "The price can't be below $500 or above $500,000.");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "That player is disconnected.");

	PlayerData[userid][pLoanOffer] = playerid;
    PlayerData[userid][pLoanOffered] = PlayerData[playerid][pLoan];

    SendServerMessage(playerid, "You have offered a loan contract to %s. Amount: [%s]. Reason: [%s]", ReturnName(userid, 0), FormatNumber(amount), reason);
    SendServerMessage(userid, "%s has offered you a loan contract. (/approve loan). Amount: [%s]. Reason: [%s]", ReturnName(playerid, 0), FormatNumber(amount), reason);

	return 1;
}

CMD:factionkick(playerid, params[])
{
    new
	    userid;

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "You must be a faction member.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3);

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/factionkick [playerid/name]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "That player is disconnected.");

	if (PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
	    return SendErrorMessage(playerid, "That player is not part of your faction.");

    SendServerMessage(playerid, "You have kicked %s from \"%s\".", ReturnName(userid, 0), Faction_GetName(playerid));
    SendServerMessage(userid, "%s has kicked you from the \"%s\" faction.", ReturnName(playerid, 0), Faction_GetName(playerid));

    ResetFaction(userid);

	return 1;
}

CMD:factionrank(playerid, params[])
{
    new
	    userid,
		rankid;

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "You must be a faction member.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3);

	if (sscanf(params, "ud", userid, rankid))
	    return SendSyntaxMessage(playerid, "/factionrank [playerid/name] [rank (1-%d)]", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "That player is disconnected.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "You cannot set your own rank.");

	if (PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
	    return SendErrorMessage(playerid, "That player is not part of your faction.");

	if (rankid < 0 || rankid > FactionData[PlayerData[playerid][pFaction]][factionRanks])
	    return SendErrorMessage(playerid, "Invalid rank specified. Ranks range from 1 to %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

	PlayerData[userid][pFactionRank] = rankid;

    SendServerMessage(playerid, "You have ranked %s to %s (%d).", ReturnName(userid, 0), Faction_GetRank(userid), rankid);
    SendServerMessage(userid, "%s has ranked you to %s (%d).", ReturnName(playerid, 0), Faction_GetRank(userid), rankid);

	return 1;
}

CMD:factiondiv(playerid, params[])
{
    new
	    userid,
		divisionid;

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "You must be a faction member.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3);

	if (sscanf(params, "ud", userid, divisionid))
	    return SendSyntaxMessage(playerid, "/factiondiv [playerid/name] [division (1-%d)]", FactionData[PlayerData[playerid][pFaction]][factionDivisions]);

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "That player is disconnected.");

	if (PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
	    return SendErrorMessage(playerid, "That player is not part of your faction.");

	if (divisionid < 0 || divisionid > FactionData[PlayerData[playerid][pFaction]][factionDivisions])
	    return SendErrorMessage(playerid, "Invalid division specified. Divisions range from 1 to %d.", FactionData[PlayerData[playerid][pFaction]][factionDivisions]);

	PlayerData[userid][pFactionDivision] = divisionid;

    SendServerMessage(playerid, "You have set %s's division to %s (%d).", ReturnName(userid, 0), Faction_GetDivision(userid), divisionid);
    SendServerMessage(userid, "%s has set your division to %s (%d).", ReturnName(playerid, 0), Faction_GetDivision(userid), divisionid);

	return 1;
}

CMD:factionname(playerid, params[])
{
	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "You must be a faction member.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

	ShowPlayerDialog(playerid, 12212, DIALOG_STYLE_INPUT, "Faction Name Change Request", "Please input the new name of your faction and the reason for changing it.", "OK", "Cancel");
	return 1;
}

/*
CMD:spawnpoint(playerid, params[])
{
	new point;
	if(sscanf(params, "i", point)) return SendErrorMessage(playerid, "/spawnpoint [0-2] (0 = DefaultSpawn, 1 = Faction, 2 = Last logged)");
	if(point == 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "You've changed your spawn point to airport.");
		PlayerData[playerid][pSpawnPoint] = 0;
		return 1;
	}
	if(point == 1)
	{
	    if(PlayerData[playerid][pFactionID] == -1)
	    {
	        SendErrorMessage(playerid, "You're not apart of a faction.");
	        return 1;
		}
		SendClientMessage(playerid, COLOR_WHITE, "You've changed your spawn to faction.");
		PlayerData[playerid][pSpawnPoint] = 1;
		return 1;
	}
	if(point == 2)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "You've changed your spawn to your last logged off.");
		PlayerData[playerid][pSpawnPoint] = 2;
		return 1;
	}
	return 1;
}
*/

CMD:checkbelt(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendErrorMessage(playerid, "/checkbelt [playerid]");

	if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
		return SendErrorMessage(playerid, "You are not authorized to use this command.");

    if(GetPlayerState(giveplayerid) == PLAYER_STATE_ONFOOT)
	{
        SendErrorMessage(playerid, "That player is not in a vehicle");
        return 1;
    }
    if (IsPlayerNearPlayer(playerid, giveplayerid, 9.0))
	{
		new string[128];
        new stext[4];
        if(Seatbelt[giveplayerid] == 0) { stext = "off"; }
        else { stext = "on"; }
        if(IsABike(GetPlayerVehicleID(playerid)))
		{
            format(string, sizeof(string), "%s's helmet is currently %s." , ReturnName(giveplayerid, 0) , stext);
            SendClientMessageEx(playerid,COLOR_WHITE,string);
            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s looks at %s checking to see if they have a helmet on.", ReturnName(playerid, 0), ReturnName(giveplayerid, 0));
        }
        else
		{
            format(string, sizeof(string), "%s's seat belt is currently %s." , ReturnName(giveplayerid, 0) , stext);
            SendClientMessageEx(playerid,COLOR_WHITE,string);
            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s peers through the window at %s checking if they have their seatbelt on.", ReturnName(playerid, 0), ReturnName(giveplayerid, 0));
        }
    }
    else { SendErrorMessage(playerid, "You are not near that player"); }
    return 1;
}

CMD:cb(playerid, params[]) return cmd_checkbelt(playerid, params);

CMD:tazer(playerid, params[]) return cmd_taser(playerid, "\1");

CMD:taser(playerid, params[])
{
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "You can't use this command right now.");

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SECURITY && GetFactionType(playerid) != FACTION_GOV)
		return SendErrorMessage(playerid, "You are not authorized to use this command.");

	if (!PlayerData[playerid][pTazer])
	{
	    PlayerData[playerid][pTazer] = 1;
	    GetPlayerWeaponData(playerid, 2, PlayerData[playerid][pGuns][2], PlayerData[playerid][pAmmo][2]);

		GivePlayerWeapon(playerid, 23, 10);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a taser from their holster.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[playerid][pTazer] = 0;
		SetWeapons(playerid);

		SetPlayerArmedWeapon(playerid, PlayerData[playerid][pGuns][2]);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s puts their taser into their holster.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:showbadge(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_NEWS && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_SECURITY)
		return SendErrorMessage(playerid, "You must be a civil service worker.");

 	new id, string[256];
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Usage: /showbadge [player id or name]");
	{
	    if (id == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected.");
	    if (!IsPlayerNearPlayer(playerid, id, 2.0)) return SendErrorMessage(playerid, "You must be near this player.");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s shows their badge to %s.", ReturnName(playerid, 0), ReturnName(id, 0));
		SendClientMessage(id, COLOR_WHITE, "[Badge Information]");
		format(string, sizeof(string), "Name: %s", ReturnName(playerid, 0));
		SendClientMessage(id, COLOR_WHITE, string);
		format(string, sizeof(string), "Faction: %s", Faction_GetName(playerid));
		SendClientMessage(id, COLOR_WHITE, string);
		format(string, sizeof(string), "Rank: %s", Faction_GetRank(playerid));
		SendClientMessage(id, COLOR_WHITE, string);
		format(string, sizeof(string), "Division: %s", Faction_GetDivision(playerid));
		SendClientMessage(id, COLOR_WHITE, string);
	}
	return 1;
}


CMD:setswat(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "You must be a faction member.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "You must be a police officer.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/setswat [playerid/name]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (PlayerData[userid][pSwatMember])
	{
	    PlayerData[userid][pSwatMember] = false;

	    SendClientMessageEx(playerid, COLOR_NEWBLUE, "[SWAT]: You have taken away %s's SWAT status.", ReturnName(userid, 0));
		SendClientMessageEx(userid, COLOR_NEWBLUE, "[SWAT]: %s has kicked you from the SWAT team.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[userid][pSwatMember] = true;

        SendClientMessageEx(playerid, COLOR_NEWBLUE, "[SWAT]: You have invited %s to the SWAT team.", ReturnName(userid, 0));
		SendClientMessageEx(userid, COLOR_NEWBLUE, "[SWAT]: %s has invited you to the SWAT team.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:beanbag(playerid, params[])
{
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "You can't use this command right now.");

	if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "You must be a police officer.");

	if (!PlayerData[playerid][pBeanBag])
	{
	    PlayerData[playerid][pBeanBag] = 1;
	    GetPlayerWeaponData(playerid, 3, PlayerData[playerid][pGuns][3], PlayerData[playerid][pAmmo][3]);

		GivePlayerWeapon(playerid, 25, 30);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a beanbag shotgun.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[playerid][pBeanBag] = 0;
		SetWeapons(playerid);

		SetPlayerArmedWeapon(playerid, PlayerData[playerid][pGuns][3]);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s puts their beanbag shotgun away.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:cuff(playerid, params[])
{
    new
	    userid;

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_SECURITY)
		return SendErrorMessage(playerid, "You must be a police officer.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/cuff [playerid/name]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "That player is disconnected.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "You cannot handcuff yourself.");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "You must be near this player.");

    if (PlayerData[userid][pStunned] < 0 && GetPlayerSpecialAction(userid) != SPECIAL_ACTION_HANDSUP && !IsPlayerIdle(userid))
	    return SendErrorMessage(playerid, "The player must be idle or stunned.");

	if (GetPlayerState(userid) != PLAYER_STATE_ONFOOT)
	    return SendErrorMessage(playerid, "The player must be onfoot before you can cuff them.");

    if (PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "The player is already cuffed at the moment.");

	static
	    string[64];

	if (PlayerData[userid][pDrinking])
	{
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

		DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
		PlayerData[userid][pDrinking] = 0;
	}
	if (PlayerData[userid][pSmoking])
	{
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

		DestroyPlayerProgressBar(playerid, PlayerData[playerid][pSmokeBar]);
		PlayerData[userid][pSmoking] = 0;
	}
	if (PlayerData[userid][pHoldWeapon] > 0)
	{
	    HoldWeapon(userid, 0);
	}
    PlayerData[userid][pCuffed] = 1;
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_CUFFED);
	SetPlayerAttachedObject(userid, 9, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977,-81.700035, 0.891999, 1.000000, 1.168000);

	format(string, sizeof(string), "You've been ~r~cuffed~w~ by %s.", ReturnName(playerid, 0));
    ShowPlayerFooter(userid, string);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s tightens a pair of handcuffs on %s's wrists.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:uncuff(playerid, params[])
{
    new
	    userid;

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_SECURITY)
		return SendErrorMessage(playerid, "You must be a police officer.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/uncuff [playerid/name]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "That player is disconnected.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "You cannot uncuff yourself.");

    if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "You must be near this player.");

    if (!PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "The player is not cuffed at the moment.");

	static
	    string[64];

    PlayerData[userid][pCuffed] = 0;
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(userid, 9);

	format(string, sizeof(string), "You've been ~g~uncuffed~w~ by %s.", ReturnName(playerid, 0));
    ShowPlayerFooter(userid, string);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s loosens the pair of handcuffs on %s's wrists.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:drag(playerid, params[])
{
	new
	    userid;

    if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/drag [playerid/name]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "That player is disconnected.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "You cannot drag yourself.");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "You must be near this player.");

    if (!PlayerData[userid][pCuffed] && !PlayerData[userid][pStunned])
        return SendErrorMessage(playerid, "The player is not cuffed or stunned.");

	if (PlayerData[userid][pDragged])
	{
	    PlayerData[userid][pDragged] = 0;
	    PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;

	    KillTimer(PlayerData[userid][pDragTimer]);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s releases %s from their grip.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else
	{
	    PlayerData[userid][pDragged] = 1;
	    PlayerData[userid][pDraggedBy] = playerid;

	    PlayerData[userid][pDragTimer] = SetTimerEx("DragUpdate", 200, true, "dd", playerid, userid);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s grabs %s and starts dragging them.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	return 1;
}

/*CMD:detain(playerid, params[])
{
	SendClientMessage(playerid, -1, "This command has been removed. Tell the player to get in by pressing G.");
	return 1;
}*/

CMD:detain(playerid, params[])
{
	new
		userid,
		vehicleid = GetNearestVehicle(playerid);

	if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "You must be a police officer.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/detain [playerid/name]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "That player is disconnected.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "You cannot detained yourself.");

    if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "You must be near this player.");

    if (!PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "The player is not cuffed at the moment.");

	if (vehicleid == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "You are not near any vehicle.");

	if (GetVehicleMaxSeats(vehicleid) < 2)
  	    return SendErrorMessage(playerid, "You can't detain that player in this vehicle.");

	if (IsPlayerInVehicle(userid, vehicleid))
	{
		TogglePlayerControllable(userid, 1);

		RemoveFromVehicle(userid);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s opens the door and pulls %s out the vehicle.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else
	{
		new seatid = GetAvailableSeat(vehicleid, 2);

		if (seatid == -1)
		    return SendErrorMessage(playerid, "There are no more seats remaining.");

		new
		    string[64];

		format(string, sizeof(string), "You've been ~r~detained~w~ by %s.", ReturnName(playerid, 0));
		TogglePlayerControllable(userid, 0);

		StopDragging(userid);
		PutPlayerInVehicle(userid, vehicleid, seatid);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s opens the door and places %s into the vehicle.", ReturnName(playerid, 0), ReturnName(userid, 0));
		ShowPlayerFooter(userid, string);
	}
	return 1;
}



CMD:createarrest(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z;

	GetPlayerPos(playerid, x, y, z);

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	id = Arrest_Create(x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for arrest points.");

	SendServerMessage(playerid, "You have successfully created arrest point ID: %d.", id);
	return 1;
}

CMD:destroyarrest(playerid, params[])
{
	static
	    id = 0;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyarrest [point id]");

	if ((id < 0 || id >= MAX_ARREST_POINTS) || !ArrestData[id][arrestExists])
	    return SendErrorMessage(playerid, "You have specified an invalid arrest point ID.");

	Arrest_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed arrest point ID: %d.", id);
	return 1;
}

CMD:mdc(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_MEDIC)
		return SendErrorMessage(playerid, "You must be a police officer or government official to use this command.");

	if(!IsACruiser(GetPlayerVehicleID(playerid)) && !IsPlayerInRangeOfPoint(playerid, 3.0, 356.2972,168.8758,1008.3762) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1582.9456,-1712.5609,-36.8141) && !IsPlayerInRangeOfPoint(playerid, 3.0,  1557.0688,-1728.5741,-33.1141))
	    return SendErrorMessage(playerid, "You must be inside a police cruiser or at an MDC.");

	new string[128];
	format(string, sizeof(string), "* %s begins to use the MDC.", ReturnName(playerid, 2));
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);

	if(GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_GOV)
		Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Person Information Search\nVehicle Information Search\n \nAdd Charges\nView Charges (previous & current)\n \nAll Active Warrants\n \nAPB List\nCreate New APB\nDelete APB\n \nRecent 911 Calls\nView 911 By Call ID", "Select", "Cancel");

	if(GetFactionType(playerid) == FACTION_MEDIC)
		Dialog_Show(playerid, FireMDC, DIALOG_STYLE_LIST, "Mobile Data Computer - FIRE", "Recent 911 Calls\nView 911 By Call ID", "Select", "Exit");

	return 1;
}

CMD:backup(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_MEDIC)
        return SendErrorMessage(playerid, "You must be in a government faction to use this command.");

    new bubstring[128];
    format(bubstring, sizeof(bubstring), "* %s speaks through their radio.", ReturnName(playerid, 2));
    SetPlayerChatBubble(playerid, bubstring, COLOR_PURPLE, 30.0, 3000);

	new bool:inside = false, Float:x, Float:y, Float:z;
    if (House_Inside(playerid) != -1 || Business_Inside(playerid) != -1 || Entrance_Inside(playerid) != -1)
    {
        inside = true;
        GetPlayerLocationEx(playerid, x, y, z);
    }
    for___loop(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(!IsPlayerConnected(i)) continue;
        if(GetFactionType(i) != FACTION_POLICE) continue;
		SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFFFF);
    }

	if(inside)
	{
		new
			hid = House_Inside(playerid),
			bid = Business_Inside(playerid),
			eid = Entrance_Inside(playerid);

		new intstring[50];
		if(hid != -1) format(intstring, sizeof(intstring), "%s", HouseData[hid][houseAddress]);
		if(bid != -1) format(intstring, sizeof(intstring), "%s", BusinessData[bid][bizName]);
		if(eid != -1) format(intstring, sizeof(intstring), "%s", EntranceData[eid][entranceName]);

		foreach (new i : Player)
		{
			if (GetFactionType(i) == FACTION_POLICE)
			{
				SetPlayerCheckpoint(i, x, y, z, 2.0);
				SendClientMessageEx(i, COLOR_RADIOCHAT, "[%s] %s %s is requesting backup at %s. (Red Map Marker).", GetInitials(Faction_GetName(playerid)), Faction_GetRank(playerid), ReturnName(playerid, 0), intstring);
			}
		}
	}

    for___loop(new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionType] == FACTION_POLICE && inside == false)
    {
        SendFactionMessage(i, COLOR_RADIOCHAT, "[%s] %s %s is requesting backup at %s.", GetInitials(Faction_GetName(playerid)), Faction_GetRank(playerid), ReturnName(playerid, 0), GetPlayerLocation(playerid));
    }

    if(PlayerData[playerid][pBackup] == 0) PlayerData[playerid][pBackupTimer] = SetTimerEx("BackupUpdate", 120000, true, "d", playerid);
    PlayerData[playerid][pBackup] = 1;

    return 1;
}

CMD:cancelbackup(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_MEDIC)
		return SendErrorMessage(playerid, "You must be in a government faction to use this command.");

	if(PlayerData[playerid][pBackup] == 0) return SendErrorMessage(playerid, "You do not have an active backup request.");

	if(PlayerData[playerid][pBackup] == 1)
	{
		for___loop (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionType] == FACTION_POLICE)
		{
			SendFactionMessage(i, COLOR_RADIOCHAT, "[%s] %s %s is no longer requesting backup.", GetInitials(Faction_GetName(playerid)), Faction_GetRank(playerid), ReturnName(playerid, 0));
		}
		KillTimer(PlayerData[playerid][pBackupTimer]);
		PlayerData[playerid][pBackup] = 0;

		for___loop(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(!IsPlayerConnected(i)) continue;
			SetPlayerMarkerForPlayer(i, playerid, DEFAULT_COLOR);
		}
	}
	return 1;
}

CMD:jail(playerid, params[])
{
	static
	    userid,
		time;

    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "You must be a police officer.");

	if (sscanf(params, "ud", userid, time))
	    return SendSyntaxMessage(playerid, "/jail [playerid/name] [minutes]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "The player is disconnected or not near you.");

	if (time < 1 || time > 30)
	    return SendErrorMessage(playerid, "The specified time can't be below 1 or above 30.");

	if (!IsPlayerNearArrest(playerid))
	    return SendErrorMessage(playerid, "You must be near a jail point.");

	PlayerData[userid][pPrisoned] = 1;
	PlayerData[userid][pJailTime] = time * 60;

	StopDragging(userid);
	SetPlayerInPrison(userid);

	ResetWeapons(userid);
	ResetPlayer(userid);

	PlayerData[userid][pWarrants] = 0;
	PlayerData[userid][pCuffed] = 0;

	PlayerTextDrawShow(userid, PlayerData[userid][pTextdraws][70]);
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(userid, 9);

	for (new b = 0; b != MAX_FACTIONS; b ++) if (FactionData[b][factionType] == FACTION_POLICE)
	{
		SendFactionMessage(b, COLOR_RADIOCHAT, "[Dispatch]: %s jailed %s for %d minutes.", ReturnName(playerid, 0), ReturnName(userid, 0), time);
	}

    return 1;
}

CMD:flashlight(playerid)
{
	if(PlayerData[playerid][pFLAttached] == 0)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid,8)) RemovePlayerAttachedObject(playerid,8);
		if(IsPlayerAttachedObjectSlotUsed(playerid,9)) RemovePlayerAttachedObject(playerid,9);
		SetPlayerAttachedObject(playerid, 8, 18656, 5, 0.1, 0.038, -0.01, -90, 145, 0, 0.03, 0.1, 0.03);
		SetPlayerAttachedObject(playerid, 9, 18641, 5, 0.1, 0.02, -0.05, 0, 0, 0, 1, 1, 1);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a flashlight and turns it on.", ReturnName(playerid, 0));

		PlayerData[playerid][pFLAttached] =1;
	}
	else
	{
 		RemovePlayerAttachedObject(playerid,8);
		RemovePlayerAttachedObject(playerid,9);
  		PlayerData[playerid][pFLAttached] =0;
  		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s puts their flashlight back in their pocket.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:tacflash(playerid)
{
	if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "You must be a police officer.");

    if (!PlayerHasWeapon(playerid, 31))
	            return SendErrorMessage(playerid, "You can only attach tactical flashlight on AR-15.");
	{
	    if(PlayerData[playerid][pTLAttached] == 0)
		{
			if(IsPlayerAttachedObjectSlotUsed(playerid,8)) RemovePlayerAttachedObject(playerid,8);
			if(IsPlayerAttachedObjectSlotUsed(playerid,9)) RemovePlayerAttachedObject(playerid,9);
			SetPlayerAttachedObject(playerid, 8, 18656, 6, 0.25, -0.0175, 0.16, 86.5, -185, 86.5, 0.03, 0.1, 0.03);
			SetPlayerAttachedObject(playerid, 9, 18641, 6, 0.2, 0.01, 0.16, 90, -95, 90, 1, 1, 1);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s attaches their flashlight to the top of their weapon.", ReturnName(playerid, 0));

			PlayerData[playerid][pTLAttached] =1;
		}
		else
		{
		    RemovePlayerAttachedObject(playerid,8);
			RemovePlayerAttachedObject(playerid,9);
		    PlayerData[playerid][pTLAttached] =0;
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s detaches their flashlight from their weapon.", ReturnName(playerid, 0));
		}
	}
	return 1;
}

CMD:seizeplant(playerid, params[])
{
	static
	    plantid;

    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "You must be a police officer.");

	if ((plantid = Plant_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "You are not standing near any drug plant.");

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has seized a %s plant weighing %d grams.", ReturnName(playerid, 0), Plant_GetType(PlantData[plantid][plantType]), PlantData[plantid][plantDrugs]);
	Plant_Delete(plantid);
	return 1;
}

CMD:giveup(playerid, params[])
{
	if (!PlayerData[playerid][pInjured])
	    return SendErrorMessage(playerid, "You are not injured at the moment.");

	SetPlayerHealth(playerid, 0.0);
	SendServerMessage(playerid, "You have given up and accepted your death.");
	return 1;
}

CMD:loadinjured(playerid, params[])
{
	static
	    userid,
		seatid;

	if (GetFactionType(playerid) != FACTION_MEDIC)
	    return SendErrorMessage(playerid, "You must be part of a medical faction.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/loadinjured [playerid/name]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 10.0))
	    return SendErrorMessage(playerid, "That player is disconnected or not near you.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "You can't load yourself into an ambulance.");

	if (!PlayerData[userid][pInjured])
	    return SendErrorMessage(playerid, "That player is not injured.");

	for (new i = 0; i != MAX_VEHICLES; i ++) if (IsPlayerNearBoot(playerid, i) && GetVehicleModel(i) == 416)
	{
	    seatid = GetAvailableSeat(i, 2);

	    if (seatid == -1)
	        return SendErrorMessage(playerid, "There is no room for the patient.");

		ClearAnimations(userid);
		PlayerData[userid][pInjured] = 2;

		PutPlayerInVehicle(userid, i, seatid);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s opens up the ambulance and loads %s on the stretcher.", ReturnName(playerid, 0), ReturnName(userid, 0));

		TogglePlayerControllable(userid, 0);
		SetPlayerHealth(userid, 99.0);
		return 1;
	}
	SendErrorMessage(playerid, "You must be near an ambulance.");
	return 1;
}

CMD:dropinjured(playerid, params[])
{
	static
	    userid;

    if (GetFactionType(playerid) != FACTION_MEDIC)
	    return SendErrorMessage(playerid, "You must be part of a medical faction.");

    if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/dropinjured [playerid/name]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "That player is disconnected or not near you.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "You can't deliver yourself to the hospital.");

	if (!PlayerData[userid][pInjured])
	    return SendErrorMessage(playerid, "That player is not injured.");

	for(new i = 0; i < sizeof(arrHospitalDeliver); i ++) if (IsPlayerInRangeOfPoint(playerid, 5.0, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2]))
	{
	    ClearAnimations(userid);

	    SetPlayerInterior(userid, 3);
	    SendServerMessage(playerid, "You have delivered %s to the hospital.", ReturnName(userid, 0));

	    SetPlayerPos(userid, -204.5867, -1740.7955, 675.7687);
    	SetPlayerFacingAngle(userid, 0.0000);

		TogglePlayerControllable(userid, 1);
  		SetCameraBehindPlayer(userid);

		SetPlayerVirtualWorld(userid, i + 5000);
  		PlayerData[userid][pHospitalInt] = i;

	  	PlayerData[userid][pHospital] = -1;
    	PlayerData[userid][pHospitalTime] = 0;

    	SendServerMessage(userid, "You have recovered at the nearest hospital.");

		GameTextForPlayer(userid, " ", 1, 3);

  		PlayerData[userid][pInjured] = 0;
		TextDrawHideForPlayer(userid, gServerTextdraws[2]);
		return 1;
	}
	SendErrorMessage(playerid, "You must be near a hospital deliver location.");
	return 1;
}

CMD:m(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "You can't use the megaphone.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(m)egaphone [message]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "[MEGAPHONE] %s: %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "...%s", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "[MEGAPHONE] %s: %s", ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:bandage(playerid, params[])
{
    static
	    userid;

	if (GetFactionType(playerid) != FACTION_MEDIC)
	    return SendErrorMessage(playerid, "You must be part of a medical faction.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/bandage [playerid/name]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "That player is disconnected or not near you.");

	//if (userid == playerid)
	    //return SendErrorMessage(playerid, "You can't use this command for yourself.");

	if (PlayerData[userid][pFirstAid])
	    return SendErrorMessage(playerid, "That player is already being bandaged.");

    if (ReturnHealth(userid) > 99)
	    return SendErrorMessage(playerid, "That player doesn't need to be bandaged.");

    PlayerData[userid][pFirstAid] = true;
    PlayerData[userid][pAidTimer] = SetTimerEx("FirstAidUpdate", 1000, true, "d", userid);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s opens a first aid kit and uses a bandage on %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:broadcast(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_NEWS)
		return SendErrorMessage(playerid, "You must be part of a news faction.");

	if (!IsNewsVehicle(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "You must be inside a news van or chopper.");

	if (!PlayerData[playerid][pBroadcast])
	{
	    PlayerData[playerid][pBroadcast] = true;

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has started a news broadcast.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "You have started a news broadcast (use \"/bc [text]\" to broadcast).");
	}
	else
	{
	    PlayerData[playerid][pBroadcast] = false;

		foreach (new i : Player) if (PlayerData[i][pNewsGuest] == playerid) {
		    PlayerData[i][pNewsGuest] = INVALID_PLAYER_ID;
		}
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has stopped a news broadcast.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "You have stopped the news broadcast.");
	}
	return 1;
}

CMD:bc(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_NEWS)
		return SendErrorMessage(playerid, "You must be part of a news faction.");

    if (isnull(params))
	    return SendSyntaxMessage(playerid, "/bc [broadcast text]");

	if (!PlayerData[playerid][pBroadcast])
	    return SendErrorMessage(playerid, "You must be broadcasting to use this command.");

	if (strlen(params) > 64) {
	    foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
		    SendClientMessageEx(i, COLOR_LIGHTGREEN, "[NEWS] Reporter %s: %.64s", ReturnName(playerid, 0), params);
		    SendClientMessageEx(i, COLOR_LIGHTGREEN, "...%s", params[64]);
		}
	}
	else {
        foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
		    SendClientMessageEx(i, COLOR_LIGHTGREEN, "[NEWS] Reporter %s: %s", ReturnName(playerid, 0), params);
		}
	}
	return 1;
}

CMD:inviteguest(playerid, params[])
{
	static
	    userid;

    if (GetFactionType(playerid) != FACTION_NEWS)
		return SendErrorMessage(playerid, "You must be part of a news faction.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/inviteguest [playerid/name]");

    if (!PlayerData[playerid][pBroadcast])
	    return SendErrorMessage(playerid, "You must be broadcasting to use this command.");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "That player is disconnected or not near you.");

 	if (userid == playerid)
		return SendErrorMessage(playerid, "You can't add yourself as a guest.");

	if (PlayerData[userid][pNewsGuest] == playerid)
	    return SendErrorMessage(playerid, "That player is already a guest of your broadcast.");

	if (PlayerData[userid][pNewsGuest] != INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "That player is already a guest of another broadcast.");

	PlayerData[userid][pNewsGuest] = playerid;

	SendServerMessage(playerid, "You have added %s as a broadcast guest.", ReturnName(userid, 0));
	SendServerMessage(userid, "%s has added you as a broadcast guest.", ReturnName(userid, 0));
	return 1;
}

CMD:removeguest(playerid, params[])
{
	static
	    userid;

    if (GetFactionType(playerid) != FACTION_NEWS)
		return SendErrorMessage(playerid, "You must be part of a news faction.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/removeguest [playerid/name]");

    if (!PlayerData[playerid][pBroadcast])
	    return SendErrorMessage(playerid, "You must be broadcasting to use this command.");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "That player is disconnected or not near you.");

 	if (userid == playerid)
		return SendErrorMessage(playerid, "You can't remove yourself as a guest.");

	if (PlayerData[userid][pNewsGuest] != playerid)
	    return SendErrorMessage(playerid, "That player is not a guest of your broadcast.");

	PlayerData[userid][pNewsGuest] = INVALID_PLAYER_ID;

	SendServerMessage(playerid, "You have removed %s from your broadcast.", ReturnName(userid, 0));
	SendServerMessage(userid, "%s has removed you from their broadcast.", ReturnName(userid, 0));
	return 1;
}

CMD:pay(playerid, params[])
{
	static
	    userid,
	    amount;

	if(PlayerData[playerid][pPlayingHours] < 3)
		return SendErrorMessage(playerid, "You must be at least level 3 to use /pay.");

	if (sscanf(params, "ud", userid, amount))
	    return SendSyntaxMessage(playerid, "/pay [playerid/name] [amount]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0) || PlayerData[userid][pSpectator] != INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "That player is disconnected or not near you.");

	if (userid == playerid)
		return SendErrorMessage(playerid, "You can't give yourself money.");

	if (amount < 1)
	    return SendErrorMessage(playerid, "Please specify an amount above 1 dollar.");

	if (amount > 100 && PlayerData[playerid][pPlayingHours] < 2)
	    return SendErrorMessage(playerid, "You can't pay above $100 with less than 2 playing hours.");

	if (amount > GetMoney(playerid))
	    return SendErrorMessage(playerid, "You don't have that much money.");

	static
	    string[72];

	GiveMoney(playerid, -amount);
	GiveMoney(userid, amount);

	format(string, sizeof(string), "You have received ~g~%s~w~ from %s.", FormatNumber(amount), ReturnName(playerid, 0));
	ShowPlayerFooter(userid, string);

	format(string, sizeof(string), "You have given ~r~%s~w~ to %s.", FormatNumber(amount), ReturnName(userid, 0));
	ShowPlayerFooter(playerid, string);

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out %s from their wallet and hands it to %s.", ReturnName(playerid, 0), FormatNumber(amount), ReturnName(userid, 0));	return 1;
}

/*CMD:radio(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "You must be a civil service worker.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(r)adio [radio text]");

	SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[RADIO] %s %s: %s", Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "[RADIO] %s: %s", ReturnName(playerid, 0), params);
	return 1;
}*/
CMD:factions(playerid, params[])
{
	ViewFactions(playerid);
	return 1;
}

CMD:dept(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "You must be a civil service worker.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/dept [department radio]");

	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionType] == FACTION_POLICE || FactionData[i][factionType] == FACTION_MEDIC || FactionData[i][factionType] == FACTION_GOV)
	{
		SendFactionMessage(i, COLOR_DEPARTMENT, "[%s] %s %s: %s", GetInitials(Faction_GetName(playerid)), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	}
	new bubstring[128];
	format(bubstring, sizeof(bubstring), "* %s speaks through their radio.", ReturnName(playerid, 2));
	SetPlayerChatBubble(playerid, bubstring, COLOR_PURPLE, 30.0, 3000);
	return 1;
}

CMD:gov(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_MEDIC)
	    return SendErrorMessage(playerid, "You must be a high ranked faction member to use this command.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "You must be at least rank %i.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/gov [faction announcement]");

    if (strlen(params) > 64)
	{
        foreach (new i : Player) if (!PlayerData[i][pDisableOOC] && PlayerData[i][pCreated])
		{
		    SendClientMessageEx(i, COLOR_FACTIONCHAT, "[%s] {FFFFFF}%.64s", Faction_GetName(playerid), params);
		    SendClientMessageEx(i, COLOR_FACTIONCHAT, "{FFFFFF}...%s", params[64]);
		}
	}
	else
	{
        foreach (new i : Player) if (!PlayerData[i][pDisableOOC] && PlayerData[i][pCreated])
		{
		    SendClientMessageEx(i, COLOR_FACTIONCHAT, "[%s] {FFFFFF}%s", Faction_GetName(playerid), params);
		}
	}
	return 1;
}

CMD:gps(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "GPS System"))
	    return SendErrorMessage(playerid, "You must have a GPS system to use this.");

	if (PlayerData[playerid][pInjured] || PlayerData[playerid][pLoading] > 0 || PlayerData[playerid][pUnloading] != -1 || PlayerData[playerid][pDeliverShipment] > 0)
	    return SendErrorMessage(playerid, "You can't use this command at the moment.");

	Dialog_Show(playerid, MainGPS, DIALOG_STYLE_LIST, "GPS System", "Find House\nFind Business\nFind Entrance\nFind Job\nCustom Locations", "Select", "Cancel");
	return 1;
}

CMD:fill(playerid, params[])
{
	new vehicleid = GetNearestVehicle(playerid);

	if (IsPlayerInAnyVehicle(playerid) || vehicleid == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "You are not standing near any vehicle.");

	if (!Inventory_HasItem(playerid, "Fuel Can"))
	    return SendErrorMessage(playerid, "You don't have any fuel cans on you.");

	if (GetEngineStatus(vehicleid))
	    return SendErrorMessage(playerid, "You must shut off the engine first.");

	if (CoreVehicles[vehicleid][vehFuel] > 95)
	    return SendErrorMessage(playerid, "This vehicle doesn't need any fuel.");

	if (PlayerData[playerid][pFuelCan])
	    return SendErrorMessage(playerid, "You are already using a can of fuel.");

    PlayerData[playerid][pFuelCan] = 1;

	Inventory_Remove(playerid, "Fuel Can");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Filling vehicle...", 5200, 3);

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s opens a can of fuel and fills the vehicle.", ReturnName(playerid, 0));
	SetTimerEx("RefillUpdate", 5000, false, "dd", playerid, vehicleid);
	return 1;
}

/*CMD:seekhelp(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/seekhelp [reason]");

    if (PlayerData[playerid][pHelpTime] >= gettime())
	    return SendErrorMessage(playerid, "You must wait %d seconds before sending another request.", PlayerData[playerid][pHelpTime] - gettime());

	PlayerData[playerid][pSeekHelp] = 1;
	SendTesterMessage(COLOR_CYAN, "[HELP]: %s (ID: %d) asks: \"%s\"", ReturnName(playerid, 0), playerid, params);

	PlayerData[playerid][pHelpTime] = gettime() + 15;
	SendServerMessage(playerid, "You have sent a help request to the tester team.");
	return 1;
}*/

CMD:pm(playerid, params[])
{
	static
	    userid,
	    text[128];

	if (sscanf(params, "us[128]", userid, text))
	    return SendSyntaxMessage(playerid, "/pm [playerid/name] [message]");

	if (!PlayerData[playerid][pLogged] && !PlayerData[playerid][pCharacter])
	    return SendErrorMessage(playerid, "You must be logged in to use this command.");

	if (PlayerData[playerid][pDisablePM])
		return SendErrorMessage(playerid, "You must enable private messaging first.");

	if(!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "You can't private message yourself.");

	if (PlayerData[userid][pDisablePM])
	    return SendErrorMessage(playerid, "That player has disabled private messaging.");

	//GameTextForPlayer(userid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~New message!", 3000, 3);
	PlayerPlaySound(userid, 1085, 0.0, 0.0, 0.0);

	SendClientMessageEx(userid, COLOR_YELLOW, "(( PM from %s (%d): %s ))", ReturnName(playerid, 0), playerid, text);
	SendClientMessageEx(playerid, COLOR_YELLOW, "(( PM to %s (%d): %s ))", ReturnName(userid, 0), userid, text);

	return 1;
}

CMD:tog(playerid, params[])
{
	if (isnull(params))
	{
	    SendSyntaxMessage(playerid, "/tog [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} ooc, faction, broadcast, speedo, donator");
	    return 1;
	}
	if (!strcmp(params, "ooc", true))
	{
	    if (!PlayerData[playerid][pDisableOOC])
	    {
	        PlayerData[playerid][pDisableOOC] = 1;
         	SendServerMessage(playerid, "You have disabled OOC chat (/tog to enable).");
		}
		else
		{
  			PlayerData[playerid][pDisableOOC] = 0;
  			SendServerMessage(playerid, "You have enabled OOC chat.");
		}
	}
	else if (!strcmp(params, "debug_bchat", true))
	{
		if (!PlayerData[playerid][pBChatDisabled])
		{
			PlayerData[playerid][pBChatDisabled] = 1;
			//SendServerMessage(playerid, "You have disabled your local /b chat (/tog to enable).");
			Player_Settings(playerid);
		}
		else
		{
			PlayerData[playerid][pBChatDisabled] = 0;
			Player_Settings(playerid);
		}
	}
	else if (!strcmp(params, "debug_pm", true))
	{
		if (!PlayerData[playerid][pDisablePM])
		{
			PlayerData[playerid][pDisablePM] = 1;
			//SendServerMessage(playerid, "You have disabled private messages (/tog to enable).");
			Player_Settings(playerid);
		}
		else
		{
			PlayerData[playerid][pDisablePM] = 0;
			//SendServerMessage(playerid, "You have enabled private messages.");
			Player_Settings(playerid);
		}
	}
	else if (!strcmp(params, "faction", true))
	{
	    if (PlayerData[playerid][pFaction] == -1)
	        return SendErrorMessage(playerid, "You are not part of any faction.");

	    if (!PlayerData[playerid][pDisableFaction])
	    {
	        PlayerData[playerid][pDisableFaction] = 1;
			SendServerMessage(playerid, "You have disabled faction chat (/tog to enable).");
			SendServerMessage(playerid, "NOTE: This currently disables ALL faction messages, including /dept.");
		}
		else
		{
  			PlayerData[playerid][pDisableFaction] = 0;
     		SendServerMessage(playerid, "You have enabled faction chat.");
		}
	}
	else if (!strcmp(params, "broadcast", true))
	{
	    if (!PlayerData[playerid][pDisableBC])
	    {
	        PlayerData[playerid][pDisableBC] = 1;
			SendServerMessage(playerid, "You have disabled news broadcasts (/tog to enable).");
		}
		else
		{
  			PlayerData[playerid][pDisableBC] = 0;
     		SendServerMessage(playerid, "You have enabled news broadcasts.");
		}
	}
	else if (!strcmp(params, "speedo", true))
	{
	    if (!PlayerData[playerid][pDisableSpeedo])
	    {
	        for (new i = 34; i < 39; i ++) {
				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	    	}
	        PlayerData[playerid][pDisableSpeedo] = 1;
			SendServerMessage(playerid, "You have disabled the speedometer (/tog to enable).");
		}
		else
		{
		    if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsSpeedoVehicle(GetPlayerVehicleID(playerid)))
		    {
		        for (new i = 34; i < 39; i ++) {
					PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
	    		}
		    }
  			PlayerData[playerid][pDisableSpeedo] = 0;
     		SendServerMessage(playerid, "You have enabled the speedometer.");
		}
	}
	else if (!strcmp(params, "donator", true))
	{
	    if (!PlayerData[playerid][pDonator])
	        return SendClientMessage(playerid, COLOR_GREY, DonatorOnly);

	    if (!PlayerData[playerid][pDisableDonator])
	    {
	        PlayerData[playerid][pDisableDonator] = 1;
			SendServerMessage(playerid, "You have disabled the Donator chat (/tog to enable).");
		}
		else
		{
  			PlayerData[playerid][pDisableDonator] = 0;
     		SendServerMessage(playerid, "You have enabled the Donator chat.");
		}
	}
	return 1;
}

CMD:ticket(playerid, params[])
{
	static
	    userid,
	    price,
	    reason[64];

	if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "You must be a police officer.");

	if (sscanf(params, "uds[64]", userid, price, reason))
		return SendSyntaxMessage(playerid, "/ticket [playerid/name] [price] [reason]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "That player is disconnected or not near you.");

	if (userid == playerid)
	   return SendErrorMessage(playerid, "You can't write a ticket to yourself.");

	if (price < 1 || price > 1000)
	    return SendErrorMessage(playerid, "The price can't be below $1 or above $1,000.");

	new id = Ticket_Add(userid, price, reason);

	if (id != -1) {
	    SendServerMessage(playerid, "You have written %s a ticket for %s, reason: %s", ReturnName(userid, 0), FormatNumber(price), reason);
	    SendServerMessage(userid, "%s has written you a ticket for %s, reason: %s", ReturnName(playerid, 0), FormatNumber(price), reason);
		SendServerMessage(userid, "Wish to appeal this ticket? Appear Saturday at 8PM at the court house.");

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has written up a ticket for %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else {
	    SendErrorMessage(playerid, "That player already has %d outstanding tickets.", MAX_PLAYER_TICKETS);
	}
	return 1;
}

CMD:invoice(playerid, params[])
{
	static
	    userid,
	    price,
	    reason[64];

	if (GetFactionType(playerid) != FACTION_SECURITY)
		return SendErrorMessage(playerid, "You must be part of a Corporation/Company.");

	if (sscanf(params, "uds[64]", userid, price, reason))
		return SendSyntaxMessage(playerid, "/invoice [playerid/name] [price] [reason]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "That player is disconnected or not near you.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "You cannot invoice yourself.");

	if (price < 1 || price > 10000)
	    return SendErrorMessage(playerid, "The price can't be below $1 or above $10,000.");

	new id = Ticket_Add(userid, price, reason);

	if (id != -1) {
	    SendServerMessage(playerid, "You have written %s an invoice for %s, reason: %s", ReturnName(userid, 0), FormatNumber(price), reason);
	    SendServerMessage(userid, "%s has written you an invoice for %s, reason: %s", ReturnName(playerid, 0), FormatNumber(price), reason);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has written up an invoice for %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else {
	    SendErrorMessage(playerid, "That player already has %d outstanding tickets.", MAX_PLAYER_INVOICES);
	}
	return 1;
}

CMD:invoices(playerid, params[])
{
	static
	    string[MAX_PLAYER_INVOICES * 64];

	if (!IsPlayerInRangeOfPoint(playerid, 3.0, 361.2687, 171.5613, 1008.3828))
	    return SendErrorMessage(playerid, "You must be at city hall to pay your tickets.");

	string[0] = 0;

	for (new i = 0; i < MAX_PLAYER_INVOICES; i ++)
	{
	    if (TicketData[playerid][i][ticketExists])
	        format(string, sizeof(string), "%s%s (%s - %s)\n", string, TicketData[playerid][i][ticketReason], FormatNumber(TicketData[playerid][i][ticketFee]), TicketData[playerid][i][ticketDate]);

		else format(string, sizeof(string), "%sEmpty Slot\n", string);
	}
	return Dialog_Show(playerid, MyInvoices, DIALOG_STYLE_LIST, "My Invoices", string, "Pay", "Cancel");
}

CMD:tickets(playerid, params[])
{
	static
	    string[MAX_PLAYER_TICKETS * 64];

	if (!IsPlayerInRangeOfPoint(playerid, 10.0, 300.6569,-93.4121,1012.3029))
	    return SendErrorMessage(playerid, "You must be at city hall to pay your tickets.");

	string[0] = 0;

	for (new i = 0; i < MAX_PLAYER_TICKETS; i ++)
	{
	    if (TicketData[playerid][i][ticketExists])
	        format(string, sizeof(string), "%s%s (%s - %s)\n", string, TicketData[playerid][i][ticketReason], FormatNumber(TicketData[playerid][i][ticketFee]), TicketData[playerid][i][ticketDate]);

		else format(string, sizeof(string), "%sEmpty Slot\n", string);
	}
	return Dialog_Show(playerid, MyTickets, DIALOG_STYLE_LIST, "My Tickets", string, "Pay", "Cancel");
}

CMD:twithdraw(playerid, params[])
{
	static
	    amount;

	if (GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "You are not a government official.");

	if (sscanf(params, "d", amount))
		return SendSyntaxMessage(playerid, "/twithdraw [amount] (%s available)", FormatNumber(g_TaxVault));

	if (!IsPlayerInCityHall(playerid))
	    return SendErrorMessage(playerid, "You must be inside City Hall to do this.");

	if (amount < 1 || amount > g_TaxVault)
	    return SendErrorMessage(playerid, "Invalid amount specified.");

    if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	Tax_AddMoney(-amount);

	GiveMoney(playerid, amount);
	SendServerMessage(playerid, "You have withdrawn %s from the treasury (%s available).", FormatNumber(amount), FormatNumber(g_TaxVault));

	SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has withdrawn %s from the treasury.", ReturnName(playerid, 0), FormatNumber(amount));
	return 1;
}

CMD:tdeposit(playerid, params[])
{
	static
	    amount;

	if (GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "You are not a government official.");

	if (sscanf(params, "d", amount))
		return SendSyntaxMessage(playerid, "/tdeposit [amount] (%s available)", FormatNumber(g_TaxVault));

    if (!IsPlayerInCityHall(playerid))
	    return SendErrorMessage(playerid, "You must be inside City Hall to do this.");

	if (amount < 1 || amount > GetMoney(playerid))
	    return SendErrorMessage(playerid, "Invalid amount specified.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	Tax_AddMoney(amount);

	GiveMoney(playerid, -amount);
	SendServerMessage(playerid, "You have deposited %s into the treasury (%s available).", FormatNumber(amount), FormatNumber(g_TaxVault));

	SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has deposited %s into the treasury.", ReturnName(playerid, 0), FormatNumber(amount));
	return 1;
}

CMD:spike(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE)
	    return SendErrorMessage(playerid, "You are not a police officer.");

	if (isnull(params))
 	{
	 	SendSyntaxMessage(playerid, "/spike [option]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[OPTIONS]:{FFFFFF} drop, destroy, destroyall");
		return 1;
	}
	static
        Float:fX,
        Float:fY,
        Float:fZ,
        Float:fA;

    GetPlayerPos(playerid, fX, fY, fZ);
    GetPlayerFacingAngle(playerid, fA);

	if (!strcmp(params, "drop", true))
	{
	    if (IsPlayerInAnyVehicle(playerid))
	        return SendErrorMessage(playerid, "You must exit the vehicle first.");

	    for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
	    {
            BarricadeData[i][cadeExists] = true;
            BarricadeData[i][cadeType] = 1;

            BarricadeData[i][cadePos][0] = fX;
            BarricadeData[i][cadePos][1] = fY;
            BarricadeData[i][cadePos][2] = fZ;

            BarricadeData[i][cadeObject] = CreateDynamicObject(2899, fX, fY, fZ - 0.8, 0.0, 0.0, fA + 5.0);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has dropped a spikestrip.", ReturnName(playerid, 0));
			SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s has dropped a spikestrip at %s.", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));

			return 1;
		}
		SendErrorMessage(playerid, "The server has reached the limit for spikestrips.");
	}
	else if (!strcmp(params, "destroy", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

            DestroyDynamicObject(BarricadeData[i][cadeObject]);

            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has picked up a spikestrip.", ReturnName(playerid, 0));
			SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s has picked up a spikestrip at %s.", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));
			return 1;
		}
		SendErrorMessage(playerid, "You are not in range of any spikestrip.");
	}
	else if (!strcmp(params, "destroyall", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1)
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

			DestroyDynamicObject(BarricadeData[i][cadeObject]);
		}
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s has destroyed all of the spikestrips.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:crb(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_SECURITY)
	    return SendErrorMessage(playerid, "You must be a civil service worker.");

	new rb;
	if(sscanf(params, "d",rb)) return SendSyntaxMessage(playerid, "/crb [1-7]");
	if (rb == 1)
	{
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
	    GetPlayerPos(playerid, plocx, plocy, plocz);
	    GetPlayerFacingAngle(playerid,ploca);
	    CreateRoadblock(1459,plocx,plocy,plocz,ploca);
	    //GameTextForPlayer(playerid,"~w~Roadblock ~b~Placedd!",3000,1);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has dropped a small roadblock.", ReturnName(playerid, 0));
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[Dispatch]: %s has dropped a small roadblock at %s.", ReturnName(playerid, 0), GetLocation(plocx, plocy, plocz));
		return 1;
	}
	else if (rb == 2)
	{
        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
        GetPlayerPos(playerid, plocx, plocy, plocz);
        GetPlayerFacingAngle(playerid,ploca);
        CreateRoadblock(978,plocx,plocy,plocz+0.6,ploca);
        //GameTextForPlayer(playerid,"~w~Roadblock ~b~Placed!",3000,1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has dropped a medium roadblock.", ReturnName(playerid, 0));
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[Dispatch]: %s has dropped a medium roadblock at %s.", ReturnName(playerid, 0), GetLocation(plocx, plocy, plocz));
        return 1;
	}
	else if (rb == 3)
	{
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
        GetPlayerPos(playerid, plocx, plocy, plocz);
        GetPlayerFacingAngle(playerid,ploca);
        CreateRoadblock(3091,plocx,plocy,plocz+0.5,ploca+180);
        //GameTextForPlayer(playerid,"~w~Sign ~g~Placed!",3000,1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has dropped a sign.", ReturnName(playerid, 0));
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[Dispatch]: %s has dropped a roadblock sign at %s.", ReturnName(playerid, 0), GetLocation(plocx, plocy, plocz));
	    return 1;
	}
	else if (rb == 4)
	{
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
        GetPlayerPos(playerid, plocx, plocy, plocz);
        GetPlayerFacingAngle(playerid,ploca);
        CreateRoadblock(1238,plocx,plocy,plocz+0.2,ploca);
        //GameTextForPlayer(playerid,"~w~Cone ~g~Placed!",3000,1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has dropped a cone.", ReturnName(playerid, 0));
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[Dispatch]: %s has dropped a roadblock cone at %s.", ReturnName(playerid, 0), GetLocation(plocx, plocy, plocz));
	    return 1;
	}
	else if (rb == 5)
	{
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
        GetPlayerPos(playerid, plocx, plocy, plocz);
        GetPlayerFacingAngle(playerid,ploca);
        CreateRoadblock(1425,plocx,plocy,plocz+0.6,ploca);
        //GameTextForPlayer(playerid,"~w~Sign ~g~Placed!",3000,1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has dropped a sign", ReturnName(playerid, 0));
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[Dispatch]: %s has dropped a roadblock sign at %s.", ReturnName(playerid, 0), GetLocation(plocx, plocy, plocz));
	    return 1;
	}
	else if (rb == 6)
	{
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
        GetPlayerPos(playerid, plocx, plocy, plocz);
        GetPlayerFacingAngle(playerid,ploca);
        CreateRoadblock(3265,plocx,plocy,plocz-0.5,ploca);
        //GameTextForPlayer(playerid,"~w~Sign ~g~Placed!",3000,1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has dropped a sign.", ReturnName(playerid, 0));
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[Dispatch]: %s has dropped a roadblock sign at %s.", ReturnName(playerid, 0), GetLocation(plocx, plocy, plocz));
    	return 1;
	}
	else if (rb == 7)
	{
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
        GetPlayerPos(playerid, plocx, plocy, plocz);
        GetPlayerFacingAngle(playerid,ploca);
        CreateRoadblock(2121,plocx,plocy,plocz+0.5,ploca+180);
        //GameTextForPlayer(playerid,"~w~Sign ~g~Placed!",3000,1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has set up a chair.", ReturnName(playerid, 0));
		//SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[DISPATCHER]: %s has dropped a roadblock sign at %s.", ReturnName(playerid, 0), GetLocation(plocx, plocy, plocz));
	    return 1;
	}
	return 1;
}

CMD:rallrb(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_SECURITY)
	    return SendErrorMessage(playerid, "You must be a civil service worker.");

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has picked up all currently spawned roadblocks.", ReturnName(playerid, 0));
	SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[Dispatch]: %s has picked up all currently spawned roadblocks.", ReturnName(playerid, 0));
	for___loop(new i = 0; i < sizeof(Roadblocks); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 100, Roadblocks[i][sX], Roadblocks[i][sY], Roadblocks[i][sZ]))
        {
	  	    if(Roadblocks[i][sCreated] == 1)
	  	    {
	  	        Roadblocks[i][sCreated] = 0;
	            Roadblocks[i][sX] = 0.0;
	            Roadblocks[i][sY] = 0.0;
	            Roadblocks[i][sZ] = 0.0;
	            DestroyDynamicObject(Roadblocks[i][sObject]);
	  	    }
  	    }
	}
	return 1;
}

CMD:rrb(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_SECURITY)
	    return SendErrorMessage(playerid, "You must be a civil service worker.");

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has picked up a roadblock object.", ReturnName(playerid, 0));
	SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[Dispatch]: %s has picked up a roadblock.", ReturnName(playerid, 0));
    for___loop(new i = 0; i < sizeof(Roadblocks); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 5.0, Roadblocks[i][sX], Roadblocks[i][sY], Roadblocks[i][sZ]))
        {
  	        if(Roadblocks[i][sCreated] == 1)
            {
                Roadblocks[i][sCreated] = 0;
                Roadblocks[i][sX] = 0.0;
                Roadblocks[i][sY] = 0.0;
                Roadblocks[i][sZ] = 0.0;
                DestroyDynamicObject(Roadblocks[i][sObject]);
                return 1;
  	        }
  	    }
  	}
    return 1;
}

CMD:changename(playerid, params[])
{
	if (!IsPlayerInRangeOfPoint(playerid, 10.0, 299.0426,-93.3870,1012.3029))
	    return SendErrorMessage(playerid, "You are not in range of city hall.");

	if (isnull(params) || strlen(params) > 24)
	    return SendSyntaxMessage(playerid, "/changename [new name]");

    if (!IsValidPlayerName(params))
	    return SendErrorMessage(playerid, "You have specified an invalid name format.");

	static
	    query[128];

	format(query, sizeof(query), "SELECT `Username` FROM `characters` WHERE `chara` = '%s'", SQL_ReturnEscaped(params));
	mysql_tquery(g_iHandle, query, "OnVerifyNameChange", "ds", playerid, params);

	return 1;
}

CMD:acceptname(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You are not permitted to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/acceptname [playerid/name]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (!strlen(PlayerData[userid][pNameChange]))
	    return SendErrorMessage(playerid, "That player hasn't requested to change their name yet.");

	SendServerMessage(playerid, "You have accepted %s's name change to %s.", ReturnName(userid, 0), PlayerData[userid][pNameChange]);
    SendServerMessage(userid, "%s has accepted your name change to %s.", ReturnName(playerid, 0), PlayerData[userid][pNameChange]);

	ChangeName(userid, PlayerData[userid][pNameChange]);
	PlayerData[userid][pNameChange][0] = '\0';

	return 1;
}

CMD:declinename(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You are not permitted to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/declinename [playerid/name]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (!strlen(PlayerData[userid][pNameChange]))
	    return SendErrorMessage(playerid, "That player hasn't requested to change their name yet.");

	SendServerMessage(playerid, "You have declined %s's name change to %s.", ReturnName(userid, 0), PlayerData[userid][pNameChange]);
    SendServerMessage(userid, "%s has declined your name change to %s.", ReturnName(playerid, 0), PlayerData[userid][pNameChange]);

	PlayerData[userid][pNameChange][0] = '\0';

	return 1;
}

CMD:deleteaccount(playerid, params[])
{
	static
	    query[64];

    if (PlayerData[playerid][pAdmin] < 100)
	    return SendErrorMessage(playerid, "You don't have permission to use this command. (cmd removed)");

	if (isnull(params) || strlen(params) > 24)
	    return SendSyntaxMessage(playerid, "/deleteaccount [username]");

    if (!IsValidPlayerName(params))
	    return SendErrorMessage(playerid, "You have specified an invalid name format.");

	foreach (new i : Player) if (!strcmp(PlayerData[i][pUsername], params, true)) {
	    return SendErrorMessage(playerid, "You can't delete an online player's account.");
	}
	format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Username` = '%s'", SQL_ReturnEscaped(params));
	mysql_tquery(g_iHandle, query, "OnDeleteAccount", "ds", playerid, params);

	return 1;
}

CMD:doorbell(playerid, params[])
{
	new id = House_Nearest(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "You must be standing near a property.");

	foreach (new i : Player) if (House_Inside(i) == id) {
	    SendClientMessage(i, COLOR_PURPLE, "** You can hear the doorbell ringing.");
	    PlayerPlaySound(i, 20801, 0, 0, 0);
	}
	PlayerPlaySoundEx(playerid, 20801);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s rings the doorbell of the property.", ReturnName(playerid, 0));
	return 1;
}

CMD:creategate(playerid, params[])
{
	static
	    id = -1;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	id = Gate_Create(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for gates.");

	SendServerMessage(playerid, "You have successfully created gate ID: %d.", id);
	return 1;
}

CMD:destroygate(playerid, params[])
{
	static
	    id = 0;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroygate [gate id]");

	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return SendErrorMessage(playerid, "You have specified an invalid gate ID.");

	Gate_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed gate ID: %d.", id);
	return 1;
}

CMD:editgate(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editgate [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} location, speed, radius, time, model, pos, move, pass, linkid, faction");
		return 1;
	}
	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return SendErrorMessage(playerid, "You have specified an invalid gate ID.");

    if (!strcmp(type, "location", true))
	{
		static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		x += 3.0 * floatsin(-angle, degrees);
		y += 3.0 * floatcos(-angle, degrees);

		GateData[id][gatePos][0] = x;
		GateData[id][gatePos][1] = y;
		GateData[id][gatePos][2] = z;
		GateData[id][gatePos][3] = 0.0;
		GateData[id][gatePos][4] = 0.0;
		GateData[id][gatePos][5] = angle;

		SetDynamicObjectPos(GateData[id][gateObject], x, y, z);
		SetDynamicObjectRot(GateData[id][gateObject], 0.0, 0.0, angle);

		GateData[id][gateOpened] = false;

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the position of gate ID: %d.", ReturnName(playerid, 0), id);
		return 1;
	}
	else if (!strcmp(type, "speed", true))
	{
	    static
	        Float:speed;

		if (sscanf(string, "f", speed))
		    return SendSyntaxMessage(playerid, "/editgate [id] [speed] [move speed]");

		if (speed < 0.0 || speed > 20.0)
		    return SendErrorMessage(playerid, "The specified speed can't be below 0 or above 20.");

        GateData[id][gateSpeed] = speed;

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the speed of gate ID: %d to %.2f.", ReturnName(playerid, 0), id, speed);
		return 1;
	}
	else if (!strcmp(type, "radius", true))
	{
	    static
	        Float:radius;

		if (sscanf(string, "f", radius))
		    return SendSyntaxMessage(playerid, "/editgate [id] [radius] [open radius]");

		if (radius < 0.0 || radius > 20.0)
		    return SendErrorMessage(playerid, "The specified radius can't be below 0 or above 20.");

        GateData[id][gateRadius] = radius;

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the radius of gate ID: %d to %.2f.", ReturnName(playerid, 0), id, radius);
		return 1;
	}
	else if (!strcmp(type, "time", true))
	{
	    static
	        time;

		if (sscanf(string, "d", time))
		    return SendSyntaxMessage(playerid, "/editgate [id] [time] [close time] (0 to disable)");

		if (time < 0 || time > 60000)
		    return SendErrorMessage(playerid, "The specified time can't be 0 or above 60,000 ms.");

        GateData[id][gateTime] = time;

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the close time of gate ID: %d to %d.", ReturnName(playerid, 0), id, time);
		return 1;
	}
	else if (!strcmp(type, "model", true))
	{
	    static
	        model;

		if (sscanf(string, "d", model))
		    return SendSyntaxMessage(playerid, "/editgate [id] [model] [gate model]");

		if (!IsValidObjectModel(model))
		    return SendErrorMessage(playerid, "Invalid object model.");

        GateData[id][gateModel] = model;

		DestroyDynamicObject(GateData[id][gateObject]);
		GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the model of gate ID: %d to %d.", ReturnName(playerid, 0), id, model);
		return 1;
	}
    else if (!strcmp(type, "pos", true))
	{
	    ResetEditing(playerid);
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		PlayerData[playerid][pEditGate] = id;
		PlayerData[playerid][pEditType] = 1;

		SendServerMessage(playerid, "You are now adjusting the position of gate ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "move", true))
	{
	    ResetEditing(playerid);
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		PlayerData[playerid][pEditGate] = id;
		PlayerData[playerid][pEditType] = 2;

		SendServerMessage(playerid, "You are now adjusting the moving position of gate ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "linkid", true))
	{
	    static
	        linkid = -1;

		if (sscanf(string, "d", linkid))
		    return SendSyntaxMessage(playerid, "/editgate [id] [linkid] [gate link] (-1 for none)");

        if ((linkid < -1 || linkid >= MAX_GATES) || (linkid != -1 && !GateData[linkid][gateExists]))
	    	return SendErrorMessage(playerid, "You have specified an invalid gate ID.");

        GateData[id][gateLinkID] = (linkid == -1) ? (-1) : (GateData[linkid][gateID]);
		Gate_Save(id);

		if (id == -1)
			SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the faction of gate ID: %d to no gate.", ReturnName(playerid, 0), id);

		else
		    SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the faction of gate ID: %d to ID: %d.", ReturnName(playerid, 0), id, linkid);

		return 1;
	}
	else if (!strcmp(type, "faction", true))
	{
	    static
	        factionid = -1;

		if (sscanf(string, "d", factionid))
		    return SendSyntaxMessage(playerid, "/editgate [id] [faction] [gate faction] (-1 for none)");

        if ((factionid < -1 || factionid >= MAX_FACTIONS) || (factionid != -1 && !FactionData[factionid][factionExists]))
	    	return SendErrorMessage(playerid, "You have specified an invalid faction ID.");

        GateData[id][gateFaction] = (factionid == -1) ? (-1) : (FactionData[factionid][factionID]);
		Gate_Save(id);

		if (factionid == -1)
			SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the faction of gate ID: %d to no faction.", ReturnName(playerid, 0), id);

		else
		    SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the faction of gate ID: %d to \"%s\".", ReturnName(playerid, 0), id, FactionData[factionid][factionName]);

		return 1;
	}
	else if (!strcmp(type, "pass", true))
	{
	    static
	        pass[32];

		if (sscanf(string, "s[32]", pass))
		    return SendSyntaxMessage(playerid, "/editgate [id] [pass] [gate password] (Use 'none' to disable)");

		if (!strcmp(pass, "none", true))
			GateData[id][gatePass][0] = 0;

		else format(GateData[id][gatePass], 32, pass);

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the password of gate ID: %d to %s.", ReturnName(playerid, 0), id, pass);
		return 1;
	}
	return 1;
}

CMD:givecash(playerid, params[])
{
	static
		userid,
	    amount;

	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ud", userid, amount))
		return SendSyntaxMessage(playerid, "/givecash [playerid/name] [amount]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	GiveMoney(userid, amount);

	SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has given %s to %s.", ReturnName(playerid, 0), FormatNumber(amount), ReturnName(userid, 0));

	return 1;
}

CMD:usedrug(playerid, params[])
{
	if (isnull(params))
	{
	    SendSyntaxMessage(playerid, "/usedrug [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} marijuana, cocaine, heroin");
		return 1;
	}
	if (PlayerData[playerid][pDrugTime] > 0)
	    return SendErrorMessage(playerid, "Please wait until the effects have subsided first.");

	if (!strcmp(params, "marijuana", true))
	{
	    if (!Inventory_HasItem(playerid, "Lighter"))
     		return SendErrorMessage(playerid, "You need a lighter to light the joint up. Get one from any 24/7.");

	    if (Inventory_Count(playerid, "Marijuana") < 2)
	        return SendErrorMessage(playerid, "You need at least 2 grams of marijuana.");

        PlayerData[playerid][pDrugTime] = 20;
		PlayerData[playerid][pDrugUsed] = 1;

		Inventory_Remove(playerid, "Marijuana", 2);
		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a lighter and lights up a joint.", ReturnName(playerid, 0));

		PlayerData[playerid][pSmoking] = 1;
	    PlayerData[playerid][pSmokeBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);
	    ShowPlayerProgressBar(playerid, PlayerData[playerid][pSmokeBar]);

	    SetPlayerProgressBarValue(playerid, PlayerData[playerid][pSmokeBar], 100.0);
	}
	else if (!strcmp(params, "cocaine", true))
	{
	    if (Inventory_Count(playerid, "Cocaine") < 2)
	        return SendErrorMessage(playerid, "You need at least 2 grams of cocaine.");

        PlayerData[playerid][pDrugTime] = 35;
		PlayerData[playerid][pDrugUsed] = 2;

		Inventory_Remove(playerid, "Cocaine", 2);

		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out some cocaine and snorts it.", ReturnName(playerid, 0));
		GivePlayerHealth(playerid, 20);
		SendServerMessage(playerid, "By using cocaine, you have received +20 Health.");
	}
	else if (!strcmp(params, "heroin", true))
	{
	    if (!Inventory_HasItem(playerid, "Lighter"))
     		return SendErrorMessage(playerid, "You need a lighter to prepare it the heroin. Get one from any 24/7.");

	    if (Inventory_Count(playerid, "Heroin") < 2)
	        return SendErrorMessage(playerid, "You need at least 2 grams of heroin.");

        PlayerData[playerid][pDrugTime] = 30;
		PlayerData[playerid][pDrugUsed] = 3;

		Inventory_Remove(playerid, "Heroin", 2);

		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out some heroin and injects it.", ReturnName(playerid, 0));
	}
	/*else if (!strcmp(params, "steroids", true))
	{
	    if (!Inventory_HasItem(playerid, "Steroids"))
	        return SendErrorMessage(playerid, "You need at least one steroid pill.");

		if (ReturnHealth(playerid) <= 5)
		    return SendErrorMessage(playerid, "Your health is too low to take steroids.");

        PlayerData[playerid][pDrugTime] = 60;
		PlayerData[playerid][pDrugUsed] = 4;

		SetPlayerHealth(playerid, ReturnHealth(playerid) - 5);
		Inventory_Remove(playerid, "Steroids", 2);

		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out some steroids and swallows them.", ReturnName(playerid, 0));
	}*/
	return 1;
}

CMD:fingerprint(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "You must be a police officer.");

	if (PlayerData[playerid][pFingerTime] > 0)
	    return SendErrorMessage(playerid, "You are already using the fingerprint scanner.");

    for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if (DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2])) {
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s runs the fingerprint scanner over the item.", ReturnName(playerid, 0));

        PlayerData[playerid][pFingerTime] = 3;
        PlayerData[playerid][pFingerItem] = i;

        return 1;
	}
	SendErrorMessage(playerid, "There is no item nearby.");
	return 1;
}

CMD:unequip(playerid, params[])
{
	RemovePlayerAttachedObject(playerid,1);
	RemovePlayerAttachedObject(playerid,2);
	RemovePlayerAttachedObject(playerid,3);
	RemovePlayerAttachedObject(playerid,4);
	RemovePlayerAttachedObject(playerid,5);
	RemovePlayerAttachedObject(playerid,6);
	SendClientMessage(playerid, COLOR_WHITE,"You have removed your equipment.");
    return 1;
}

CMD:createcar(playerid, params[])
{
	static
		model[32],
		color1,
		color2,
		id = -1,
		type = 0,
		addsiren = 0;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pFactionMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "s[32]I(-1)I(-1)I(0)I(0)", model, color1, color2, type, addsiren))
 	{
	 	SendSyntaxMessage(playerid, "/createcar [model id/name] [color 1] [color 2] <faction>");
	 	SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Police | 2: News | 3: Medical | 4: Government | 5: Company | 6: Gang (drugs) | 7: Gang (guns)");
	 	return 1;
	}
	if ((model[0] = GetVehicleModelByName(model)) == 0)
	    return SendErrorMessage(playerid, "Invalid model ID.");

	static
	    Float:x,
		Float:y,
		Float:z,
		Float:angle;

    GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Car_Create(0, model[0], x, y, z, angle, color1, color2, type, addsiren);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for dynamic vehicles.");

	SetPlayerPosEx(playerid, x, y, z + 2, 1000);
	SendServerMessage(playerid, "You have successfully created vehicle ID: %d.", CarData[id][carVehicle]);
	Car_Save(id);
	return 1;
}

CMD:destroycar(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
 	{
	 	if (IsPlayerInAnyVehicle(playerid))
		 	id = GetPlayerVehicleID(playerid);

		else return SendSyntaxMessage(playerid, "/destroycar [vehicle id]");
	}
	if (!IsValidVehicle(id) || Car_GetID(id) == -1)
	    return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

	Car_Delete(Car_GetID(id));
	SendServerMessage(playerid, "You have successfully destroyed vehicle ID: %d.", id);
	return 1;
}

CMD:backpack(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "Backpack"))
	    return SendErrorMessage(playerid, "You don't have a backpack on you.");

	Backpack_Open(playerid);
	return 1;
}

CMD:dropbackpack(playerid, params[])
{
	new
		id = GetPlayerBackpack(playerid);

	if (!Inventory_HasItem(playerid, "Backpack") || id == -1)
	    return SendErrorMessage(playerid, "You don't have a backpack on you.");

	if (!Backpack_GetItems(id))
	    return SendErrorMessage(playerid, "You can't drop an empty backpack.");

    if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawned(playerid))
    	return SendErrorMessage(playerid, "You can't drop your backpack right now.");

	static
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);

	BackpackData[id][backpackPlayer] = 0;
    BackpackData[id][backpackPos][0] = x;
    BackpackData[id][backpackPos][1] = y;
    BackpackData[id][backpackPos][2] = z;
    BackpackData[id][backpackInterior] = GetPlayerInterior(playerid);
    BackpackData[id][backpackWorld] = GetPlayerVirtualWorld(playerid);

	Backpack_Refresh(id);
	Backpack_Save(id);

	Inventory_Remove(playerid, "Backpack");
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has dropped their backpack.", ReturnName(playerid, 0));

	SetAccessories(playerid);

	return 1;
}

CMD:setitem(playerid, params[])
{
	static
	    userid,
		item[32],
		amount;

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "uds[32]", userid, amount, item))
	    return SendSyntaxMessage(playerid, "/setitem [playerid/name] [amount] [item name]");

    if (IsFurnitureItem(item))
	{
	    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (!strcmp(g_aFurnitureData[i][e_FurnitureName], item, true))
		{
	        Inventory_Set(userid, g_aFurnitureData[i][e_FurnitureName], g_aFurnitureData[i][e_FurnitureModel], amount);

			SendServerMessage(playerid, "You have set %s's \"%s\" to %d.", ReturnName(userid, 0), item, amount);
			return 1;
		}
	}
	else for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if (!strcmp(g_aInventoryItems[i][e_InventoryItem], item, true))
	{
	    if (!strcmp(item, "Cellphone", true)) {
	        PlayerData[userid][pPhone] = random(90000) + 10000;
	    }
        Inventory_Set(userid, g_aInventoryItems[i][e_InventoryItem], g_aInventoryItems[i][e_InventoryModel], amount);

		return SendServerMessage(playerid, "You have set %s's \"%s\" to %d.", ReturnName(userid, 0), item, amount);
	}
	SendErrorMessage(playerid, "Invalid item name (use /itemlist for a list).");
	return 1;
}

CMD:itemlist(playerid, params[])
{
	static
	    string[1024];

	if (!strlen(string)) {
		for (new i = 0; i < sizeof(g_aInventoryItems); i ++) {
			format(string, sizeof(string), "%s%s\n", string, g_aInventoryItems[i][e_InventoryItem]);
		}
	}
	return Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "List of Items", string, "Select", "Cancel");
}

CMD:createimpound(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
 		return SendErrorMessage(playerid, "You can only create impound lots outside interiors.");

	GetPlayerPos(playerid, x, y, z);

	id = Impound_Create(x, y, z);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for impound lots.");

	SendServerMessage(playerid, "You have successfully created impound lot ID: %d.", id);
	return 1;
}

CMD:destroyimpound(playerid, params[])
{
	static
	    id = 0;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyimpound [impound id]");

	if ((id < 0 || id >= MAX_IMPOUND_LOTS) || !ImpoundData[id][impoundExists])
	    return SendErrorMessage(playerid, "You have specified an invalid impound lot ID.");

	Impound_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed impound lot ID: %d.", id);
	return 1;
}

CMD:editimpound(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editimpound [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} location, release");
		return 1;
	}
	if ((id < 0 || id >= MAX_IMPOUND_LOTS) || !ImpoundData[id][impoundExists])
	    return SendErrorMessage(playerid, "You have specified an invalid impound lot ID.");

	if (!strcmp(type, "location", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		ImpoundData[id][impoundLot][0] = x;
		ImpoundData[id][impoundLot][1] = y;
		ImpoundData[id][impoundLot][2] = z;

		Impound_Refresh(id);
		Impound_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the location of impound ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "release", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z,
			Float:angle;

	    GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		ImpoundData[id][impoundRelease][0] = x;
		ImpoundData[id][impoundRelease][1] = y;
		ImpoundData[id][impoundRelease][2] = z;
		ImpoundData[id][impoundRelease][3] = angle;

		Impound_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the release point of impound ID: %d.", ReturnName(playerid, 0), id);
	}
	return 1;
}

CMD:releasecar(playerid, params[])
{
	if (!IsPlayerInRangeOfPoint(playerid, 10.0, 150.4944,1104.0682,14.2357))
	    return SendErrorMessage(playerid, "You must be at the impound lot to release a vehicle.");

	new
	    string[32 * MAX_OWNABLE_CARS],
		count;

	for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (count < MAX_OWNABLE_CARS && CarData[i][carExists] && Car_IsOwner(playerid, i) && CarData[i][carImpounded] != -1)
	{
		format(string, sizeof(string), "%s%d: %s (%s)\n", string, count + 1, ReturnVehicleName(CarData[i][carVehicle]), FormatNumber(CarData[i][carImpoundPrice]));
        ListedVehicles[playerid][count++] = i;
	}
	if (!count)
	    SendErrorMessage(playerid, "You don't have any impounded vehicles.");

	else Dialog_Show(playerid, ReleaseCar, DIALOG_STYLE_LIST, "Release Vehicle", string, "Select", "Cancel");
	return 1;
}

CMD:tow(playerid, params[])
{
	if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	    return SendErrorMessage(playerid, "You are not driving a tow truck.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "You are not the driver.");

	new vehicleid = GetVehicleFromBehind(GetPlayerVehicleID(playerid));

	if (vehicleid == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "There is no vehicle in range.");

	if (!IsDoorVehicle(vehicleid) || IsAPlane(vehicleid) || IsABoat(vehicleid) || IsAHelicopter(vehicleid))
	    return SendErrorMessage(playerid, "You can't tow this vehicle.");

	AttachTrailerToVehicle(vehicleid, GetPlayerVehicleID(playerid));
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has hooked a %s onto their tow truck.", ReturnName(playerid, 0), ReturnVehicleName(vehicleid));
	return 1;
}

CMD:untow(playerid, params[])
{
	if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	    return SendErrorMessage(playerid, "You are not driving a tow truck.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "You are not the driver.");

	new
	    trailerid = GetVehicleTrailer(GetPlayerVehicleID(playerid));

    if (!trailerid)
	    return SendErrorMessage(playerid, "There is no vehicle hooked onto the truck.");

	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has unhooked the %s from the tow truck.", ReturnName(playerid, 0), ReturnVehicleName(trailerid));

	return 1;
}

CMD:impound(playerid, params[])
{
	new
		price,
		id = Impound_Nearest(playerid),
		vehicleid = GetPlayerVehicleID(playerid);

    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SECURITY)
		return SendErrorMessage(playerid, "You must be a police officer.");

	if (id == -1)
	    return SendErrorMessage(playerid, "You are not in range of any impound lot.");

    if (sscanf(params, "d", price))
        return SendSyntaxMessage(playerid, "/impound [price] (!!) CAR WILL BE SAVED IN THE LOCATION IT IS IN WHEN YOU USE THIS CMD. PLEASE PARK IT PROPERLY IN THE LOT.");

	if (price < 1 || price > 1000)
	    return SendErrorMessage(playerid, "The price can't be above $1,000 or below $1.");

	if (GetVehicleModel(vehicleid) != 525)
	    return SendErrorMessage(playerid, "You are not driving a tow truck.");

	if (!GetVehicleTrailer(vehicleid))
	    return SendErrorMessage(playerid, "There is no vehicle hooked.");

 	new vid = Car_GetID(GetVehicleTrailer(vehicleid));

	if (vid == -1)
	    return SendErrorMessage(playerid, "You can't impound this vehicle.");

	if (CarData[vid][carImpounded] != -1)
	    return SendErrorMessage(playerid, "This vehicle is already impounded.");

	CarData[vid][carImpounded] = ImpoundData[id][impoundID];
	CarData[vid][carImpoundPrice] = price;

	Tax_AddMoney(price);

	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));

	GetVehiclePos(CarData[vid][carVehicle], CarData[vid][carPos][0], CarData[vid][carPos][1], CarData[vid][carPos][2]);

/*	new Float:vhealth;
	GetVehicleHealth(CarData[vid][carVehicle], vhealth);
	CarData[vid][carHP] = vhealth;*/

	Car_Save(vid);

	SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[Radio]: %s has impounded a %s for %s.", ReturnName(playerid, 0), ReturnVehicleModelName(CarData[vid][carModel]), FormatNumber(price));

	return 1;
}

CMD:channel(playerid, params[])
{
	new channel;

	if (!Inventory_HasItem(playerid, "Portable Radio"))
	    return SendErrorMessage(playerid, "You must have a portable radio.");

	if (sscanf(params, "d", channel))
 	{
	 	SendSyntaxMessage(playerid, "/channel [radio channel] (0 to disable)");

	 	if (PlayerData[playerid][pChannel] > 0)
			SendClientMessageEx(playerid, COLOR_YELLOW, "[NOTE]:{FFFFFF} Your current radio channel is set to %d.", PlayerData[playerid][pChannel]);

		return 1;
	}
	if (channel < 0 || channel > 999999)
	    return SendErrorMessage(playerid, "The channel can't be below 0 or above 999,999.");

	if (channel == 911 && GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "This channel is restricted for police officers.");

	if (channel == 912 && GetFactionType(playerid) != FACTION_POLICE && !PlayerData[playerid][pSwatMember])
		return SendErrorMessage(playerid, "This channel is restricted for the SWAT Team.");

	if (channel == 913 && GetFactionType(playerid) != FACTION_MEDIC)
		return SendErrorMessage(playerid, "This channel is restricted for firemen.");

	if (channel == 914 && GetFactionType(playerid) != FACTION_GOV)
		return SendErrorMessage(playerid, "This channel is restricted for the government.");

	PlayerData[playerid][pChannel] = channel;

	if (channel == 0)
	    SendServerMessage(playerid, "You have disabled your portable radio.");

	SendServerMessage(playerid, "You have set your radio's channel to %d (\"/r [text]\" to chat).", channel);

	return 1;
}

CMD:channel2(playerid, params[])
{
	new channel;

	if (!Inventory_HasItem(playerid, "Portable Radio"))
	    return SendErrorMessage(playerid, "You must have a portable radio.");

	if (sscanf(params, "d", channel))
 	{
	 	SendSyntaxMessage(playerid, "/channel2 [radio channel] (0 to disable)");

	 	if (PlayerData[playerid][pChannel2] > 0)
			SendClientMessageEx(playerid, COLOR_YELLOW, "[NOTE]:{FFFFFF} Your current radio channel is set to %d.", PlayerData[playerid][pChannel2]);

		return 1;
	}
	if (channel < 0 || channel > 999999)
	    return SendErrorMessage(playerid, "The channel can't be below 0 or above 999,999.");

	if (channel == 911 && GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "This channel is restricted for police officers.");

	if (channel == 912 && GetFactionType(playerid) != FACTION_POLICE && !PlayerData[playerid][pSwatMember])
		return SendErrorMessage(playerid, "This channel is restricted for the SWAT Team.");

	if (channel == 913 && GetFactionType(playerid) != FACTION_MEDIC)
		return SendErrorMessage(playerid, "This channel is restricted for firemen.");

	if (channel == 914 && GetFactionType(playerid) != FACTION_GOV)
		return SendErrorMessage(playerid, "This channel is restricted for the government.");

	PlayerData[playerid][pChannel2] = channel;

	if (channel == 0)
	     SendServerMessage(playerid, "You have disabled your portable radio.");

	else SendServerMessage(playerid, "You have set your radio's channel to %d (\"/r2 [text]\" to chat).", channel);
	return 1;
}

CMD:channel3(playerid, params[])
{
	new channel;

	if (!Inventory_HasItem(playerid, "Portable Radio"))
	    return SendErrorMessage(playerid, "You must have a portable radio.");

	if (sscanf(params, "d", channel))
 	{
	 	SendSyntaxMessage(playerid, "/channel3 [radio channel] (0 to disable)");

	 	if (PlayerData[playerid][pChannel3] > 0)
			SendClientMessageEx(playerid, COLOR_YELLOW, "[NOTE]:{FFFFFF} Your current radio channel is set to %d.", PlayerData[playerid][pChannel3]);

		return 1;
	}
	if (channel < 0 || channel > 999999)
	    return SendErrorMessage(playerid, "The channel can't be below 0 or above 999,999.");

	if (channel == 911 && GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "This channel is restricted for police officers.");

	if (channel == 912 && GetFactionType(playerid) != FACTION_POLICE && !PlayerData[playerid][pSwatMember])
		return SendErrorMessage(playerid, "This channel is restricted for the SWAT Team.");

	if (channel == 913 && GetFactionType(playerid) != FACTION_MEDIC)
		return SendErrorMessage(playerid, "This channel is restricted for firemen.");

	if (channel == 914 && GetFactionType(playerid) != FACTION_GOV)
		return SendErrorMessage(playerid, "This channel is restricted for the government.");

	PlayerData[playerid][pChannel3] = channel;

	if (channel == 0)
		SendServerMessage(playerid, "You have disabled your portable radio.");

	SendServerMessage(playerid, "You have set your radio's channel to %d (\"/r3 [text]\" to chat).", channel);
	return 1;
}

CMD:channel4(playerid, params[])
{
	new channel;

	if (!Inventory_HasItem(playerid, "Portable Radio"))
	    return SendErrorMessage(playerid, "You must have a portable radio.");

	if (sscanf(params, "d", channel))
 	{
	 	SendSyntaxMessage(playerid, "/channel4 [radio channel] (0 to disable)");

	 	if (PlayerData[playerid][pChannel4] > 0)
			SendClientMessageEx(playerid, COLOR_YELLOW, "[NOTE]:{FFFFFF} Your current radio channel is set to %d.", PlayerData[playerid][pChannel4]);

		return 1;
	}
	if (channel < 0 || channel > 999999)
	    return SendErrorMessage(playerid, "The channel can't be below 0 or above 999,999.");

	if (channel == 911 && GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "This channel is restricted for police officers.");

	if (channel == 912 && GetFactionType(playerid) != FACTION_POLICE && !PlayerData[playerid][pSwatMember])
		return SendErrorMessage(playerid, "This channel is restricted for the SWAT Team.");

	if (channel == 913 && GetFactionType(playerid) != FACTION_MEDIC)
		return SendErrorMessage(playerid, "This channel is restricted for firemen.");

	if (channel == 914 && GetFactionType(playerid) != FACTION_GOV)
		return SendErrorMessage(playerid, "This channel is restricted for the government.");

	PlayerData[playerid][pChannel4] = channel;

	if (channel == 0)
	    SendServerMessage(playerid, "You have disabled your portable radio.");

	else SendServerMessage(playerid, "You have set your radio's channel to %d (\"/r4 [text]\" to chat).", channel);
	return 1;
}

CMD:r(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r [Radio IC]");

    if (!Inventory_HasItem(playerid, "Portable Radio"))
	    return SendErrorMessage(playerid, "You must have a portable radio.");

	if (!PlayerData[playerid][pChannel])
	    return SendErrorMessage(playerid, "Your portable radio is disabled (/channel).");

	static
	    string[128];
	if(PlayerData[playerid][pChannel] == 911 && GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You cannot use a PD radio channel.");
	if(PlayerData[playerid][pChannel] == 912 && GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You cannot use a PD radio channel.");
	if(PlayerData[playerid][pChannel] == 913 && GetFactionType(playerid) != FACTION_MEDIC) return SendErrorMessage(playerid, "You cannot use a FD radio channel.");
	if(PlayerData[playerid][pChannel] == 914 && GetFactionType(playerid) != FACTION_GOV) return SendErrorMessage(playerid, "You cannot use a GOV radio channel.");
	if (strlen(params) > 64)
	{
		format(string, sizeof(string), "** [CH: %d] %s: %.64s",PlayerData[playerid][pChannel],ReturnName(playerid, 2), params);
		SendRadioMessage(PlayerData[playerid][pChannel], COLOR_RADIO, string);
		format(string, sizeof(string), "...%s **",params[64]);
		SendRadioMessage(PlayerData[playerid][pChannel], COLOR_RADIO, string);
		SendNearbyMessage(playerid, 5.0, COLOR_FADE1, "** (Radio) %s: %.64s", ReturnName(playerid, 2), params);
	    SendNearbyMessage(playerid, 5.0, COLOR_FADE1, "...%s **", params[64]);
		new bubstring[128];
		format(bubstring, sizeof(bubstring), "* %s speaks through their radio.", ReturnName(playerid, 2));
		SetPlayerChatBubble(playerid, bubstring, COLOR_PURPLE, 30.0, 3000);

	}
	else {
		format(string, sizeof(string),"** [CH: %d] %s: %s **", PlayerData[playerid][pChannel],ReturnName(playerid, 2), params);
		SendRadioMessage(PlayerData[playerid][pChannel], COLOR_RADIO, string);
		SendNearbyMessage(playerid, 5.0, COLOR_FADE1, "** (Radio) %s: %.64s", ReturnName(playerid, 2), params);
		new bubstring[128];
		format(bubstring, sizeof(bubstring), "* %s speaks through their radio.", ReturnName(playerid, 2));
		SetPlayerChatBubble(playerid, bubstring, COLOR_PURPLE, 30.0, 3000);
	}
	return 1;
}

CMD:rlow(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/rlow [Radio IC]");

    if (!Inventory_HasItem(playerid, "Portable Radio"))
	    return SendErrorMessage(playerid, "You must have a portable radio.");

	if (!PlayerData[playerid][pChannel])
	    return SendErrorMessage(playerid, "Your portable radio is disabled (/channel).");

	static
	    string[128];
	if(PlayerData[playerid][pChannel] == 911 && GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You cannot use a PD radio channel.");
	if(PlayerData[playerid][pChannel] == 912 && GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You cannot use a PD radio channel.");
	if(PlayerData[playerid][pChannel] == 913 && GetFactionType(playerid) != FACTION_MEDIC) return SendErrorMessage(playerid, "You cannot use a FD radio channel.");
	if(PlayerData[playerid][pChannel] == 914 && GetFactionType(playerid) != FACTION_GOV) return SendErrorMessage(playerid, "You cannot use a GOV radio channel.");
	if (strlen(params) > 64)
	{
		format(string, sizeof(string), "** [CH: %d] %s: %.64s",PlayerData[playerid][pChannel],ReturnName(playerid, 2), params);
		SendRadioMessage(PlayerData[playerid][pChannel], COLOR_RADIO, string);
		format(string, sizeof(string), "...%s **",params[64]);
		SendRadioMessage(PlayerData[playerid][pChannel], COLOR_RADIO, string);
		SendNearbyMessage(playerid, 5.0, COLOR_FADE1, "** (Radio) %s: %.64s", ReturnName(playerid, 2), params);
	    SendNearbyMessage(playerid, 5.0, COLOR_FADE1, "...%s **", params[64]);
		new bubstring[128];
		format(bubstring, sizeof(bubstring), "* %s speaks through their radio.", ReturnName(playerid, 2));
		SetPlayerChatBubble(playerid, bubstring, COLOR_PURPLE, 30.0, 3000);

	}
	else {
		format(string, sizeof(string),"** [CH: %d] %s: %s **", PlayerData[playerid][pChannel],ReturnName(playerid, 2), params);
		SendRadioMessage(PlayerData[playerid][pChannel], COLOR_RADIO, string);
		SendNearbyMessage(playerid, 5.0, COLOR_FADE1, "** (Radio) %s: %.64s", ReturnName(playerid, 2), params);
		new bubstring[128];
		format(bubstring, sizeof(bubstring), "* %s speaks through their radio.", ReturnName(playerid, 2));
		SetPlayerChatBubble(playerid, bubstring, COLOR_PURPLE, 30.0, 3000);
	}
	return 1;
}

CMD:createatm(playerid, params[])
{
	static
	    id = -1;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	id = ATM_Create(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for ATM machines.");

	SendServerMessage(playerid, "You have successfully created ATM ID: %d.", id);
	return 1;
}

CMD:destroyatm(playerid, params[])
{
	static
	    id = 0;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyatm [atm id]");

	if ((id < 0 || id >= MAX_ATM_MACHINES) || !ATMData[id][atmExists])
	    return SendErrorMessage(playerid, "You have specified an invalid ATM ID.");

	ATM_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed ATM ID: %d.", id);
	return 1;
}

CMD:stopstream(playerid, params[])
{
    StopAudioStreamForPlayer(playerid);
    SendServerMessage(playerid, "You have disabled any active audio streams.");
    return 1;
}


CMD:kcp(playerid, params[]) return cmd_disablecp(playerid, "");
CMD:dcp(playerid, params[]) return cmd_disablecp(playerid, "");
CMD:killcheckpoint(playerid, params[]) return cmd_disablecp(playerid, "");

CMD:disablecp(playerid, params[])
{
	if (PlayerData[playerid][pDrivingTest] || PlayerData[playerid][pBikeTest] || PlayerData[playerid][pTruckTest])
	    return SendErrorMessage(playerid, "You can't do this during your driving test.");

	new
		vehicleid = GetPlayerVehicleID(playerid);

	PlayerData[playerid][pCP] = 0;

	if (PlayerData[playerid][pSorting] != -1)
	{
	    PlayerData[playerid][pSorting] = -1;
		PlayerData[playerid][pSortCrate] = 0;

		RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if (PlayerData[playerid][pMinedRock])
	{
	    PlayerData[playerid][pMinedRock] = 0;
		PlayerData[playerid][pMineCount] = 0;

		RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if (PlayerData[playerid][pUnloading] != -1)
	{
	    PlayerData[playerid][pUnloading] = -1;
	    PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
	}
	if (PlayerData[playerid][pLoading])
	{
	    PlayerData[playerid][pLoading] = 0;
	    PlayerData[playerid][pLoadType] = 0;
	}
	if (PlayerData[playerid][pLoadCrate])
 	{
  		PlayerData[playerid][pLoadCrate] = 0;

		RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if (IsPlayerInWarehouse(playerid) && GetVehicleModel(vehicleid) == 530 && CoreVehicles[vehicleid][vehLoadType] == 7)
	{
 		CoreVehicles[vehicleid][vehLoadType] = 0;
 		CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;

   		DestroyObject(CoreVehicles[vehicleid][vehCrate]);
	}
    DisablePlayerCheckpoint(playerid);
	DisableWaypoint(playerid);
    SendServerMessage(playerid, "You have disabled any active checkpoints.");
    return 1;
}

CMD:restart(playerid, params[])
{
	new time;

	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (g_ServerRestart)
	{
	    TextDrawHideForAll(gServerTextdraws[3]);

	    g_ServerRestart = 0;
	    g_RestartTime = 0;

		new string[128];
		format(string, sizeof(string), "[Admin]: {FFFFFF}%s has postponed the server restart.", ReturnName(playerid, 0));

		SendClientMessageToAll(COLOR_LIGHTRED, string);

	    return 1;
	}
	if (sscanf(params, "d", time))
	    return SendSyntaxMessage(playerid, "/restart [seconds]");

	if (time < 3 || time > 600)
	    return SendErrorMessage(playerid, "The specified seconds can't be below 3 or above 600.");

    foreach (new i : Player) {
		SQL_SaveCharacter(i);
	}

	for(new i = 0; i < MAX_DYNAMIC_CARS; i++) if(CarData[i][carExists])
	{
		Car_Save(i);
	}

	new cidv;
	for (new i = 1; i != MAX_VEHICLES; i++)
	{
	    if (IsValidVehicle(i))
	    {
			cidv = Car_GetID(i);
			if(cidv != -1 && CarData[cidv][carExists])
			{
				Car_Save(cidv);
			}
		}
	}

    TextDrawShowForAll(gServerTextdraws[3]);

	g_ServerRestart = 1;
	g_RestartTime = time;

	SendClientMessageToAllEx(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has initiated a server restart in %d seconds.", ReturnName(playerid, 0), time);
	return 1;
}

CMD:properties(playerid, params[])
{
	new count;

	for (new i = 0; i < MAX_HOUSES; i ++) if (House_IsOwner(playerid, i)) {
	    SendClientMessageEx(playerid, COLOR_LIGHTGREEN, "** House ID: %d | Address: %s | Location: %s", i, HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]));

	    count++;
	}
	for (new i = 0; i < MAX_BUSINESSES; i ++) if (Business_IsOwner(playerid, i) && BusinessData[i][bizOwner] != 99999999) {
	    SendClientMessageEx(playerid, COLOR_DEPARTMENT, "** Business ID: %d | Name: %s | Location: %s", i, BusinessData[i][bizName], GetLocation(BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]));

	    count++;
	}
	if (!count)
	    return SendErrorMessage(playerid, "You don't own any properties.");

	return 1;
}

CMD:tabbed(playerid)
{
    new name[32],string[100];
    SendClientMessage(playerid,COLOR_GREY,"________ AFK Players ________");
    foreach(Player, i)
	{
    	if(IsPlayerPause(i))
		{
            GetPlayerName(i,name,sizeof(name));
            format(string,sizeof(string)," - {FFFFFF}%s [%d]",name,i);
            SendClientMessage(playerid,0x17A631FF,string);
        }
    }
    return 1;
}

CMD:asellhouse(playerid, params[])
{
	new houseid = -1;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", houseid))
	    return SendSyntaxMessage(playerid, "/asellhouse [house ID]");

	if ((houseid < 0 || houseid >= MAX_HOUSES) || !HouseData[houseid][houseExists])
	    return SendErrorMessage(playerid, "You have specified an invalid house ID.");

	HouseData[houseid][houseOwner] = 0;

	House_Refresh(houseid);
	House_Save(houseid);

	SendServerMessage(playerid, "You have sold house ID: %d.", houseid);
	return 1;
}

CMD:asellbiz(playerid, params[])
{
	new bizid = -1;

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", bizid))
	    return SendSyntaxMessage(playerid, "/asellbiz [business ID]");

	if ((bizid < 0 || bizid >= MAX_HOUSES) || !BusinessData[bizid][bizExists])
	    return SendErrorMessage(playerid, "You have specified an invalid business ID.");

	BusinessData[bizid][bizOwner] = 0;

	Business_Refresh(bizid);
	Business_Save(bizid);

	SendServerMessage(playerid, "You have sold business ID: %d.", bizid);
	return 1;
}

CMD:listcars(playerid, params[])
{
	new
	    Float:fX,
	    Float:fY,
	    Float:fZ,
		userid,
		count;

	if (sscanf(params, "u", userid))
	{
		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(playerid, i)) {
		    GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

		    SendClientMessageEx(playerid, COLOR_WHITE, "** ID: %d | Model: %s | Location: %s | Plate: %s", CarData[i][carVehicle], ReturnVehicleModelName(CarData[i][carModel]), GetLocation(fX, fY, fZ), CarData[i][carPlate]);
		    count++;
		}
		if (!count)
		    SendClientMessage(playerid, COLOR_WHITE, "You don't own any vehicles.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
		SendClientMessage(playerid, COLOR_WHITE, "Use /spawncars to spawn your unspawned vehicles (if you have any).");
	}
	else if (PlayerData[playerid][pAdmin] >= 3)
	{
		if (userid == INVALID_PLAYER_ID)
	    	return SendErrorMessage(playerid, "You have specified an invalid player.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
  		SendClientMessageEx(playerid, COLOR_YELLOW, "Vehicles registered to %s (ID: %d):", ReturnName(userid, 0), userid);

		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(userid, i)) {
  			GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

			SendClientMessageEx(playerid, COLOR_WHITE, "** ID: %d | Model: %s | Location: %s", CarData[i][carVehicle], ReturnVehicleModelName(CarData[i][carModel]), GetLocation(fX, fY, fZ));
			count++;
		}
		if (!count)
		    SendClientMessage(playerid, COLOR_WHITE, "That player doesn't own any vehicles.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	}
	return 1;
}

CMD:checkvehicles(playerid, params[])
{
	new
	    Float:fX,
	    Float:fY,
	    Float:fZ,
		userid,
		count;

    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "You must be a civil service worker.");

 	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/checkvehicles [playerid/name]");

 	else if (PlayerData[playerid][pLogged])
	{
		if (userid == INVALID_PLAYER_ID)
			return SendErrorMessage(playerid, "You have specified an invalid player.");

		SendClientMessage(playerid, COLOR_GREY, "----------PROPERTIES DATABASE----------");
  		SendClientMessageEx(playerid, COLOR_ORANGE, "Vehicles registered to %s (ID: %d):", ReturnName(userid, 0), userid);

  		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(userid, i)) {
  			GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

			SendClientMessageEx(playerid, COLOR_WHITE, "** ID: %d | Model: %s | Location: %s", CarData[i][carVehicle], ReturnVehicleModelName(CarData[i][carModel]), GetLocation(fX, fY, fZ));
			count++;
		}
		if (!count)
		    SendClientMessage(playerid, COLOR_WHITE, "That player doesn't own any vehicles.");

		SendClientMessage(playerid, COLOR_GREY, "----------PROPERTIES DATABASE----------");
	}
	return 1;
}

CMD:checkproperties(playerid, params[])
{
	new
		userid,
		count;

    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "You must be a civil service worker.");

 	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/checkproperties [playerid/name]");

 	else if (PlayerData[playerid][pLogged])
	{
		if (userid == INVALID_PLAYER_ID)
			return SendErrorMessage(playerid, "You have specified an invalid player.");

		SendClientMessage(playerid, COLOR_GREY, "----------PROPERTIES DATABASE----------");
  		SendClientMessageEx(playerid, COLOR_ORANGE, "Properties registered to %s (ID: %d):", ReturnName(userid, 0), userid);

  		for (new i = 0; i < MAX_HOUSES; i ++) if (House_IsOwner(playerid, i)) {
	    	SendClientMessageEx(playerid, COLOR_WHITE, "** House ID: %d | Address: %s | Location: %s", i, HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]));

	    	count++;
		}
		for (new i = 0; i < MAX_BUSINESSES; i ++) if (Business_IsOwner(playerid, i) && BusinessData[i][bizOwner] != 99999999) {
	    	SendClientMessageEx(playerid, COLOR_WHITE, "** Business ID: %d | Name: %s | Location: %s", i, BusinessData[i][bizName], GetLocation(BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]));

	    	count++;
		}
		if (!count)
	    	return SendErrorMessage(playerid, "You don't own any properties.");

		SendClientMessage(playerid, COLOR_GREY, "----------PROPERTIES DATABASE----------");
	}
	return 1;
}

CMD:grantweplic(playerid, params[])
{
	static
	    userid,
	    type[16];

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "You must be an officer or a government member.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

	if (sscanf(params, "u", userid, type))
 	{
	 	SendSyntaxMessage(playerid, "/grantweplic [playerid/name]");
		return 1;
	}

    if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "That player is disconnected or not near you.");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (Inventory_HasItem(userid, "Firearm License"))
 		return SendErrorMessage(playerid, "That player already has a Firearm License.");

	Inventory_Add(userid, "Firearm License", 1581);
	PlayerData[userid][pWeaponLicense] = 1;

	new query[128];
	format(query, sizeof(query), "UPDATE `characters` SET `WeaponLicense` = '1' WHERE `chara` = '%s'", ReturnName(userid));
	mysql_tquery(g_iHandle, query);

	SendServerMessage(playerid, "You have granted a Firearm License to %s.", ReturnName(userid, 0));
	SendServerMessage(userid, "You've been granted a Firearm License by %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
	return 1;
}

CMD:revokeweplic(playerid, params[])
{
	static
	    userid;

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "You must be an officer or a government member.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

	if (sscanf(params, "u", userid))
 	{
	 	SendSyntaxMessage(playerid, "/revokeweplic [playerid/name]");
		return 1;
	}
	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	//Inventory_Remove(userid, "Firearm License");
	SendServerMessage(playerid, "You have revoked %s's Firearm License. (don't forget to take the license item)", ReturnName(userid, 0));
	SendServerMessage(userid, "Your Firearm License was revoked by %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
	new query[128];
	format(query, sizeof(query), "UPDATE `characters` SET `WeaponLicense` = '0' WHERE `chara` = '%s'", ReturnName(userid));
	mysql_tquery(g_iHandle, query);
	PlayerData[userid][pWeaponLicense] = 0;
	return 1;
}

CMD:grantlicense(playerid, params[])
{
	static
	    userid,
	    type[16];

	if (GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "You must be a government member.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

	if (sscanf(params, "us[16]S()[32]", userid, type))
 	{
	 	SendSyntaxMessage(playerid, "/grantlicense [playerid/name] [name]");
	 	SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} car, motorbike, truck, airplane, helicopter.");
		return 1;
	}

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "That player is disconnected or not near you.");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (!strcmp(type, "car", true))
	{
	    if (Inventory_HasItem(userid, "Car License") && PlayerData[userid][pCarLicense] == 1)
 			return SendErrorMessage(playerid, "That player already has a Car License");

		Inventory_Add(userid, "Car License", 1581);
		SendServerMessage(playerid, "You have granted a Car License to %s.", ReturnName(userid, 0));
		SendServerMessage(userid, "You've been granted a Car License by %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));

		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `CarLicense` = '1' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pCarLicense] = 1;
	}
	else if (!strcmp(type, "motorbike", true))
	{
	    if (Inventory_HasItem(userid, "Motorbike License") && PlayerData[userid][pBikeLicense] == 1)
 			return SendErrorMessage(playerid, "That player already has a Motorbike License");

		Inventory_Add(userid, "Motorbike License", 1581);
		SendServerMessage(playerid, "You have granted a Motorbike License to %s.", ReturnName(userid, 0));
		SendServerMessage(userid, "You've been granted a Motorbike License by %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));

		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `MotorBikeLicense` = '1' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pBikeLicense] = 1;
	}
	else if (!strcmp(type, "truck", true))
	{
	    if (Inventory_HasItem(userid, "Truck License") && PlayerData[userid][pTruckLicense] == 1)
 			return SendErrorMessage(playerid, "That player already has a Truck License");

		Inventory_Add(userid, "Truck License", 1581);
		SendServerMessage(playerid, "You have granted a Truck License to %s.", ReturnName(userid, 0));
		SendServerMessage(userid, "You've been granted a Truck License by %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));

		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `TruckLicense` = '1' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pTruckLicense] = 1;
	}
	else if (!strcmp(type, "airplane", true))
	{
	    if (Inventory_HasItem(userid, "Airplane License") && PlayerData[userid][pAirLicense] == 1)
 			return SendErrorMessage(playerid, "That player already has an Airplane License");

		Inventory_Add(userid, "Airplane License", 1581);
		SendServerMessage(playerid, "You have granted an Airplane License to %s.", ReturnName(userid, 0));
		SendServerMessage(userid, "You've been granted an Airplane License by %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));

		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `AirplaneLicense` = '1' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pAirLicense] = 1;
	}
	else if (!strcmp(type, "helicopter", true))
	{
	    if (Inventory_HasItem(userid, "Helicopter License") && PlayerData[userid][pHeliLicense] == 1)
 			return SendErrorMessage(playerid, "That player already has a Helicopter License");

		Inventory_Add(userid, "Helicopter License", 1581);
		SendServerMessage(playerid, "You have granted a Helicopter License to %s.", ReturnName(userid, 0));
		SendServerMessage(userid, "You've been granted a Helicopter License by %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));

		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `HelicopterLicense` = '1' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pHeliLicense] = 1;
	}
	return 1;
}

CMD:revokelicense(playerid, params[])
{
	static
	    userid,
	    type[16];

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "You must be an officer or a government member.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

	if (sscanf(params, "us[16]S()[32]", userid, type))
 	{
	 	SendSyntaxMessage(playerid, "/arevokelicense [playerid/name] [name]");
	 	SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} car, motorbike, truck, airplane, helicopter.");
		return 1;
	}

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (!strcmp(type, "car", true))
	{
		//Inventory_Remove(userid, "Car License");
		SendServerMessage(playerid, "You have revoked %s's Car License. (don't forget to take the license item)", ReturnName(userid, 0));
		SendServerMessage(userid, "Your Car License was revoked by %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `CarLicense` = '0' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pCarLicense] = 0;
	}
	else if (!strcmp(type, "motorbike", true))
	{
		//Inventory_Remove(userid, "Motorbike License");
		SendServerMessage(playerid, "You have revoked %s's Motorbike License. (don't forget to take the license item)", ReturnName(userid, 0));
		SendServerMessage(userid, "Your Motorbike License was revoked by %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `MotorBikeLicense` = '0' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pBikeLicense] = 0;
	}
	else if (!strcmp(type, "truck", true))
	{
		//Inventory_Remove(userid, "Truck License");
		SendServerMessage(playerid, "You have revoked %s's Truck License. (don't forget to take the license item)", ReturnName(userid, 0));
		SendServerMessage(userid, "Your Truck License was revoked by %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `TruckLicense` = '0' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pTruckLicense] = 0;
	}
	else if (!strcmp(type, "airplane", true))
	{
		//Inventory_Remove(userid, "Airplane License");
		SendServerMessage(playerid, "You have revoked %s's Airplane License. (don't forget to take the license item)", ReturnName(userid, 0));
		SendServerMessage(userid, "Your Airplane License was revoked by %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `AirplaneLicense` = '0' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pAirLicense] = 0;
	}
	else if (!strcmp(type, "helicopter", true))
	{
		//Inventory_Remove(userid, "Helicopter License");
		SendServerMessage(playerid, "You have revoked %s's Helicopter License. (don't forget to take the license item)", ReturnName(userid, 0));
		SendServerMessage(userid, "Your Helicopter License was revoked by %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		new query[128];
		format(query, sizeof(query), "UPDATE `characters` SET `HelicopterLicense` = '0' WHERE `chara` = '%s'", ReturnName(userid));
		mysql_tquery(g_iHandle, query);
		PlayerData[userid][pHeliLicense] = 0;
	}
	return 1;
}

CMD:jetpack(playerid, params[])
{
	new userid;

	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
 	{
 	    PlayerData[playerid][pJetpack] = 1;
	 	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	}
	else
	{
		PlayerData[userid][pJetpack] = 1;

		SetPlayerSpecialAction(userid, SPECIAL_ACTION_USEJETPACK);
		SendServerMessage(playerid, "You have spawned a jetpack for %s.", ReturnName(userid, 0));
	}
	return 1;
}

CMD:setweather(playerid, params[])
{
	new weatherid;

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", weatherid))
	    return SendSyntaxMessage(playerid, "/setweather [weather ID]");

	SetWeather(weatherid);
	SendServerMessage(playerid, "You have changed the weather to ID: %d.", weatherid);
	return 1;
}

CMD:setfuel(playerid, params[])
{
	static
	    id = 0,
		amount;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "dd", id, amount))
 	{
	 	if (IsPlayerInAnyVehicle(playerid))
		{
		    id = GetPlayerVehicleID(playerid);

		    if (sscanf(params, "d", amount))
		        return SendSyntaxMessage(playerid, "/setfuel [amount]");

			if (amount < 0)
			    return SendErrorMessage(playerid, "The amount can't be below 0.");

			CoreVehicles[id][vehFuel] = amount;
			SendServerMessage(playerid, "You have set the fuel of vehicle ID: %d to %d percent.", id, amount);
			return 1;
		}
		else return SendSyntaxMessage(playerid, "/setfuel [vehicle id] [amount]");
	}
	if (!IsValidVehicle(id))
	    return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

	if (amount < 0)
 		return SendErrorMessage(playerid, "The amount can't be below 0.");

	CoreVehicles[id][vehFuel] = amount;
	SendServerMessage(playerid, "You have set the fuel of vehicle ID: %d to %d percent.", id, amount);
	return 1;
}

CMD:setcarhp(playerid, params[])
{
	static
	    id = 0,
		Float:amount;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "df", id, amount))
 	{
	 	if (IsPlayerInAnyVehicle(playerid))
		{
		    id = GetPlayerVehicleID(playerid);

		    if (sscanf(params, "f", amount))
		        return SendSyntaxMessage(playerid, "/setcarhp [amount]");

			if (amount < 0.0)
			    return SendErrorMessage(playerid, "The amount can't be below 0.");

			SetVehicleHealth(id, amount);
			SendServerMessage(playerid, "You have set the health of vehicle ID: %d to %.1f.", id, amount);
			return 1;
		}
		else return SendSyntaxMessage(playerid, "/setcarhp [vehicle id] [amount]");
	}
	if (!IsValidVehicle(id))
	    return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

	if (amount < 0.0)
	    return SendErrorMessage(playerid, "The amount can't be below 0.");

	SetVehicleHealth(id, amount);
	SendServerMessage(playerid, "You have set the health of vehicle ID: %d to %.1f.", id, amount);
	return 1;
}

CMD:editcar(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editcar [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} location, faction, job, color1, color2, maxhealth, siren, plate");
		return 1;
	}
	if (!IsValidVehicle(id) || Car_GetID(id) == -1)
	    return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

	new Float:carzang;
	GetVehicleZAngle(id, carzang);

	id = Car_GetID(id);

	if (!strcmp(type, "location", true))
	{
 		GetPlayerPos(playerid, CarData[id][carPos][0], CarData[id][carPos][1], CarData[id][carPos][2]);
		if(IsPlayerInAnyVehicle(playerid)) CarData[id][carPos][3] = carzang;
		else GetPlayerFacingAngle(playerid, CarData[id][carPos][3]);

		Car_Save(id);
		Car_Spawn(id);

		SetPlayerPosEx(playerid, CarData[id][carPos][0], CarData[id][carPos][1], CarData[id][carPos][2] + 2.0, 1000);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the location of vehicle ID: %d.", ReturnName(playerid, 0), CarData[id][carVehicle]);
	}
	else if (!strcmp(type, "faction", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
     	    SendSyntaxMessage(playerid, "/editcar [id] [faction] [type]");
		 	SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Police | 2: News | 3: Medical | 4: Government | 5: Company | 6: Gang (drugs) | 7: Gang (guns)");
		 	return 1;
		}
		if (typeint < 0 || typeint > 6)
		    return SendErrorMessage(playerid, "The specified type can't be below 0 or above 6.");

		CarData[id][carFaction] = typeint;

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the type of vehicle ID: %d to %d.", ReturnName(playerid, 0), CarData[id][carVehicle], typeint);
	}
	else if (!strcmp(type, "job", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
     	    SendSyntaxMessage(playerid, "/editcar [id] [job] [type]");
		 	SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Cour | 2: Mech | 3: Taxi | 4: Unloader | 5: Miner | 6: FVendor | 7: Garbage | 8: Sorter | 9: WSmuggler | 10: Fisherman");
		 	return 1;
		}
		if (typeint < 0 || typeint > 9)
		    return SendErrorMessage(playerid, "The specified type can't be below 0 or above 9.");

		CarData[id][carJob] = typeint;

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has restricted vehicle ID %d's job to %d.", ReturnName(playerid, 0), CarData[id][carVehicle], typeint);
	}
	else if (!strcmp(type, "siren", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
     	    SendSyntaxMessage(playerid, "/editcar [id] [siren] [0/1]");
		 	SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 0: Disabled Siren Sound, 1: Enabled Siren Sound");
		 	return 1;
		}
		if (typeint < 0 || typeint > 1)
		    return SendErrorMessage(playerid, "The specified type can't be below 0 or above 1.");

		CarData[id][carSiren] = typeint;

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the Siren Sound of vehicle ID: %d to %d.", ReturnName(playerid, 0), CarData[id][carVehicle], typeint);
	}
	else if (!strcmp(type, "maxhealth", true))
	{
		SendServerMessage(playerid, "This is work in progress");
		return 1;
	}
    else if (!strcmp(type, "color1", true))
	{
	    new color1;

	    if (sscanf(string, "d", color1))
			return SendSyntaxMessage(playerid, "/editcar [id] [color1] [color 1]");

		if (color1 < 0 || color1 > 255)
		    return SendErrorMessage(playerid, "The specified color can't be below 0 or above 255.");

		CarData[id][carColor1] = color1;
		ChangeVehicleColor(CarData[id][carVehicle], CarData[id][carColor1], CarData[id][carColor2]);

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the color 1 of vehicle ID: %d to %d.", ReturnName(playerid, 0), CarData[id][carVehicle], color1);
	}
    else if (!strcmp(type, "color2", true))
	{
	    new color2;

	    if (sscanf(string, "d", color2))
			return SendSyntaxMessage(playerid, "/editcar [id] [color2] [color 2]");

		if (color2 < 0 || color2 > 255)
		    return SendErrorMessage(playerid, "The specified color can't be below 0 or above 255.");

		CarData[id][carColor2] = color2;
		ChangeVehicleColor(CarData[id][carVehicle], CarData[id][carColor1], CarData[id][carColor2]);

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the color 2 of vehicle ID: %d to %d.", ReturnName(playerid, 0), CarData[id][carVehicle], color2);
	}
	else if (!strcmp(type, "plate", true))
	{
	    new plate[15];

	    if (sscanf(string, "s[15]", plate))
			return SendSyntaxMessage(playerid, "/editcar [id] [plate] (recommended length: 7) (params: 'random' or 'none')");

		if (strlen(plate) < 1 || strlen(plate) > 10)
		    return SendErrorMessage(playerid, "The plate text length can only be 1-10 characters");

		CarData[id][carPlate] = plate;

		if(!strcmp(plate, "random", true)) GenPlate(CarData[id][carPlate], 7);

		if(!strcmp(plate, "none", true)) format(CarData[id][carPlate], 15, " ");

		SetVehicleNumberPlate(CarData[id][carVehicle], CarData[id][carPlate]);

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the plate of vehicle ID: %d to %s.", ReturnName(playerid, 0), CarData[id][carVehicle], CarData[id][carPlate]);
	}
	return 1;
}

CMD:creategarbage(playerid, params[])
{
	static
	    id = -1,
		type;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", type))
	{
	    SendSyntaxMessage(playerid, "/creategarbage [type]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Dumpster | 2: Trash Can");
		return 1;
	}
	if (type < 1 || type > 2)
	    return SendErrorMessage(playerid, "The specified type can't be below 1 or above 2.");

	id = Garbage_Create(playerid, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for garbage bins.");

	SendServerMessage(playerid, "You have successfully created garbage bin ID: %d.", id);
	return 1;
}

CMD:destroygarbage(playerid, params[])
{
	static
	    id = 0;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroygarbage [garbage id]");

	if ((id < 0 || id >= MAX_GARBAGE_BINS) || !GarbageData[id][garbageExists])
	    return SendErrorMessage(playerid, "You have specified an invalid garbage ID.");

	Garbage_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed garbage bin ID: %d.", id);
	return 1;
}

CMD:takebag(playerid, params[])
{
	new
		id = Garbage_Nearest(playerid),
		string[64];

	if (PlayerData[playerid][pJob] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "You don't have the appropriate job.");

	if (id == -1)
	    return SendErrorMessage(playerid, "You are not in range of any garbage bin.");

	if (GarbageData[id][garbageCapacity] < 1)
	    return SendErrorMessage(playerid, "This garbage bin is empty.");

	if (PlayerData[playerid][pCarryTrash])
	    return SendErrorMessage(playerid, "You are already carrying a garbage bag.");

    GarbageData[id][garbageCapacity]--;
   	Garbage_Save(id);

	PlayerData[playerid][pCarryTrash] = 1;
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes a trash bag from the garbage bin.", ReturnName(playerid, 0), string);

	format(string, sizeof(string), "[Garbage %d]\n{FFFFFF}Trash Capacity: %d/20", id, GarbageData[id][garbageCapacity]);
  	UpdateDynamic3DTextLabelText(GarbageData[id][garbageText3D], COLOR_DEPARTMENT, string);

  	SetPlayerAttachedObject(playerid, 4, 1264, 6, 0.000000, 0.000000, 0.000000, 0.000000, 270.000000, 90.000000, 0.500000, 0.500000, 0.500000);
	ShowPlayerFooter(playerid, "Press ~y~'N'~w~ to load the garbage bag.");

	return 1;
}

CMD:dumpgarbage(playerid, params[])
{
	new
		vehicleid = GetPlayerVehicleID(playerid),
		id = Job_NearestPoint(playerid, 5.0);

	if (PlayerData[playerid][pJob] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "You don't have the appropriate job.");

	if (GetVehicleModel(vehicleid) != 408)
	    return SendErrorMessage(playerid, "You must be driving a garbage truck.");

	if (id == -1 || JobData[id][jobType] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "You are not in range of any trash dump.");

	if (CoreVehicles[vehicleid][vehTrash] < 1)
	    return SendErrorMessage(playerid, "There is no trash loaded in this vehicle.");

	GiveMoney(playerid, (CoreVehicles[vehicleid][vehTrash] * 25));
	ShowPlayerFooter(playerid, "You have ~g~delivered~w~ the garbage!");

	SendServerMessage(playerid, "You have earned $%d for dumping %d bags of trash.", (CoreVehicles[vehicleid][vehTrash] * 35), CoreVehicles[vehicleid][vehTrash]);
	CoreVehicles[vehicleid][vehTrash] = 0;

	return 1;
}

CMD:createvendor(playerid, params[])
{
	static
	    id = -1,
		type;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", type))
	{
	    SendSyntaxMessage(playerid, "/createvendor [type]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Food | 2: Soda");
		return 1;
	}
	if (type < 1 || type > 2)
	    return SendErrorMessage(playerid, "The specified type can't be below 1 or above 2.");

	id = Vendor_Create(playerid, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for vendors.");

	SendServerMessage(playerid, "You have successfully created vendor ID: %d.", id);
	return 1;
}

CMD:destroyvendor(playerid, params[])
{
	static
	    id = 0;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyvendor [vendor id]");

	if ((id < 0 || id >= MAX_VENDORS) || !VendorData[id][vendorExists])
	    return SendErrorMessage(playerid, "You have specified an invalid vendor ID.");

	Vendor_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed vendor ID: %d.", id);
	return 1;
}

CMD:dance(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/dance [1-4]");

	if (type < 1 || type > 4)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
		case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
	    case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
	    case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
	    case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
	}
	return 1;
}

CMD:handsup(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
	return 1;
}

CMD:piss(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	SetPlayerSpecialAction(playerid, 68);
	return 1;
}

CMD:bat(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/bat [1-5]");

	if (type < 1 || type > 5)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "BASEBALL", "Bat_1", 4.1, 0, 1, 1, 0, 0, 1);
	    case 2: ApplyAnimation(playerid, "BASEBALL", "Bat_2", 4.1, 0, 1, 1, 0, 0, 1);
	    case 3: ApplyAnimation(playerid, "BASEBALL", "Bat_3", 4.1, 0, 1, 1, 0, 0, 1);
	    case 4: ApplyAnimation(playerid, "BASEBALL", "Bat_4", 4.1, 0, 0, 0, 0, 0, 1);
	    case 5: ApplyAnimationEx(playerid, "BASEBALL", "Bat_IDLE", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:slap(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	ApplyAnimation(playerid, "BASEBALL", "Bat_M", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:relax(playerid, params[]) return cmd_bar(playerid, "6");

CMD:fall(playerid, params[])
{
    if (!AnimationCheck(playerid))
    {
        return SendErrorMessage(playerid, "You're currently unable to use animations at this moment.");
    }

    switch(strval(params))
    {
        case 1: ApplyAnimationEx(playerid, "PED", "KO_skid_front", 4.1, 0, 0, 0, 1, 0);
        case 2: ApplyAnimationEx(playerid, "PED", "KO_skid_back", 4.1, 0, 0, 0, 1, 0);
        case 3: ApplyAnimationEx(playerid, "PED", "KO_shot_face", 4.1, 0, 1, 1, 1, 0);
        case 4: ApplyAnimationEx(playerid, "PED", "KO_shot_front", 4.1, 0, 1, 1, 1, 0);
        case 5: ApplyAnimationEx(playerid, "PED", "KO_shot_stom", 4.1, 0, 1, 1, 1, 0);
        case 6: ApplyAnimationEx(playerid, "PED", "BIKE_fallR", 4.1, 0, 1, 1, 0, 0);
        default: SendSyntaxMessage(playerid, "/fall [1-6]");
    }

    return 1;
}

CMD:bar(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/bar [1-8]");

	if (type < 1 || type > 8)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "BAR", "Barserve_bottle", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimation(playerid, "BAR", "Barserve_give", 4.1, 0, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimation(playerid, "BAR", "Barserve_glass", 4.1, 0, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimation(playerid, "BAR", "Barserve_in", 4.1, 0, 0, 0, 0, 0, 1);
	    case 5: ApplyAnimation(playerid, "BAR", "Barserve_order", 4.1, 0, 0, 0, 0, 0, 1);
	    case 6: ApplyAnimationEx(playerid, "BAR", "BARman_idle", 4.1, 1, 0, 0, 0, 0, 1);
	    case 7: ApplyAnimationEx(playerid, "BAR", "dnk_stndM_loop", 4.1, 0, 0, 0, 0, 0, 1);
	    case 8: ApplyAnimationEx(playerid, "BAR", "dnk_stndF_loop", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:wash(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:camera(playerid, params[])
{
	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	ApplyAnimationEx(playerid, "CAMERA", "camstnd_to_camcrch", 4.1, 0, 1, 1, 1, 1, 1);

	return 1;
}

CMD:lay(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/lay [1-5]");

	if (type < 1 || type > 5)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "BEACH", "bather", 4.1, 1, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "BEACH", "Lay_Bac_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimationEx(playerid, "BEACH", "ParkSit_M_loop", 4.1, 1, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "BEACH", "ParkSit_W_loop", 4.1, 1, 0, 0, 0, 0, 1);
	    case 5: ApplyAnimationEx(playerid, "BEACH", "SitnWait_loop_W", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:workout(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/workout [1-7]");

	if (type < 1 || type > 7)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "benchpress", "gym_bp_celebrate", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "benchpress", "gym_bp_down", 4.1, 0, 0, 0, 1, 0, 1);
	    case 3: ApplyAnimation(playerid, "benchpress", "gym_bp_getoff", 4.1, 0, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "benchpress", "gym_bp_geton", 4.1, 0, 0, 0, 1, 0, 1);
	    case 5: ApplyAnimationEx(playerid, "benchpress", "gym_bp_up_A", 4.1, 0, 0, 0, 1, 0, 1);
	    case 6: ApplyAnimationEx(playerid, "benchpress", "gym_bp_up_B", 4.1, 0, 0, 0, 1, 0, 1);
	    case 7: ApplyAnimationEx(playerid, "benchpress", "gym_bp_up_smooth", 4.1, 0, 0, 0, 1, 0, 1);
	}
	return 1;
}

CMD:blowjob(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/blowjob [1-4]");

	if (type < 1 || type > 4)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.1, 1, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_W", 4.1, 1, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:bombanim(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:carrygun(playerid, params[])
{
	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	ApplyAnimationEx(playerid, "PED", "idle_armed", 4.1, 1, 0, 0, 0, 0, 1);

	return 1;
}

CMD:carry(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/carry [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimation(playerid, "CARRY", "liftup105", 4.1, 0, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
	    case 5: ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 0, 0, 0, 0, 1);
	    case 6: ApplyAnimation(playerid, "CARRY", "putdwn105", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:crack(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/crack [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "CRACK", "crckdeth1", 4.1, 0, 0, 0, 1, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 1, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimationEx(playerid, "CRACK", "crckdeth3", 4.1, 0, 0, 0, 1, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "CRACK", "crckidle1", 4.1, 0, 0, 0, 1, 0, 1);
	    case 5: ApplyAnimationEx(playerid, "CRACK", "crckidle2", 4.1, 0, 0, 0, 1, 0, 1);
	    case 6: ApplyAnimationEx(playerid, "CRACK", "crckidle3", 4.1, 0, 0, 0, 1, 0, 1);
	}
	return 1;
}

CMD:sleep(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/sleep [1-2]");

	if (type < 1 || type > 2)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "CRACK", "crckdeth4", 4.1, 0, 0, 0, 1, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "CRACK", "crckidle4", 4.1, 0, 0, 0, 1, 0, 1);
	}
	return 1;
}

CMD:jump(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	ApplyAnimation(playerid, "DODGE", "Crush_Jump", 4.1, 0, 1, 1, 0, 0, 1);
	return 1;
}

CMD:deal(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/deal [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimation(playerid, "DEALER", "DRUGS_BUY", 4.1, 0, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_01", 4.1, 1, 0, 0, 0, 0, 1);
	    case 5: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_02", 4.1, 1, 0, 0, 0, 0, 1);
	    case 6: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_03", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:dancing(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/dancing [1-10]");

	if (type < 1 || type > 10)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "DANCING", "dance_loop", 4.1, 1, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "DANCING", "DAN_Left_A", 4.1, 1, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimationEx(playerid, "DANCING", "DAN_Right_A", 4.1, 1, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "DANCING", "DAN_Loop_A", 4.1, 1, 0, 0, 0, 0, 1);
	    case 5: ApplyAnimationEx(playerid, "DANCING", "DAN_Up_A", 4.1, 1, 0, 0, 0, 0, 1);
	    case 6: ApplyAnimationEx(playerid, "DANCING", "DAN_Down_A", 4.1, 1, 0, 0, 0, 0, 1);
	    case 7: ApplyAnimationEx(playerid, "DANCING", "dnce_M_a", 4.1, 1, 0, 0, 0, 0, 1);
	    case 8: ApplyAnimationEx(playerid, "DANCING", "dnce_M_e", 4.1, 1, 0, 0, 0, 0, 1);
	    case 9: ApplyAnimationEx(playerid, "DANCING", "dnce_M_b", 4.1, 1, 0, 0, 0, 0, 1);
	    case 10: ApplyAnimationEx(playerid, "DANCING", "dnce_M_c", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:eating(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/eating [1-3]");

	if (type < 1 || type > 3)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimation(playerid, "FOOD", "EAT_Chicken", 4.1, 0, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:puke(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:gsign(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/gsign [1-15]");

	if (type < 1 || type > 15)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "GHANDS", "gsign1", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "GHANDS", "gsign1LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "GHANDS", "gsign2", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "GHANDS", "gsign2LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "GHANDS", "gsign3", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "GHANDS", "gsign3LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnimation(playerid, "GHANDS", "gsign4", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnimation(playerid, "GHANDS", "gsign4LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 9: ApplyAnimation(playerid, "GHANDS", "gsign5", 4.1, 0, 0, 0, 0, 0, 1);
		case 10: ApplyAnimation(playerid, "GHANDS", "gsign5", 4.1, 0, 0, 0, 0, 0, 1);
		case 11: ApplyAnimation(playerid, "GHANDS", "gsign5LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 12: ApplyAnimation(playerid, "GANGS", "Invite_No", 4.1, 0, 0, 0, 0, 0, 1);
		case 13: ApplyAnimation(playerid, "GANGS", "Invite_Yes", 4.1, 0, 0, 0, 0, 0, 1);
		case 14: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkD", 4.1, 0, 0, 0, 0, 0, 1);
		case 15: ApplyAnimation(playerid, "GANGS", "smkcig_prtl", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:chat(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/chat [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkA", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkB", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkF", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkG", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkH", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:goggles(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:spray(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

 	ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:throw(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	ApplyAnimation(playerid, "GRENADE", "WEAPON_throw", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:swipe(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:office(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/office [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Bored_Loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Crash", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Drink", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Read", 4.1, 1, 0, 0, 0, 0, 1);
		case 5: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Type_Loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 6: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Watch", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:kiss(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/kiss [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:knife(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/knife [1-8]");

	if (type < 1 || type > 8)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "KNIFE", "knife_1", 4.1, 0, 1, 1, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "KNIFE", "knife_2", 4.1, 0, 1, 1, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "KNIFE", "knife_3", 4.1, 0, 1, 1, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "KNIFE", "knife_4", 4.1, 0, 1, 1, 0, 0, 1);
		case 5: ApplyAnimationEx(playerid, "KNIFE", "WEAPON_knifeidle", 4.1, 1, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Player", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Damage", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:cpr(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:scratch(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/scratch [1-4]");

	if (type < 1 || type > 4)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
    	case 1: ApplyAnimationEx(playerid, "SCRATCHING", "scdldlp", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnimationEx(playerid, "SCRATCHING", "scdlulp", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnimationEx(playerid, "SCRATCHING", "scdrdlp", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "SCRATCHING", "scdrulp", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:point(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/point [1-4]");

	if (type < 1 || type > 4)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "PED", "ARRESTgun", 4.1, 0, 0, 0, 1, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "SHOP", "ROB_Loop_Threat", 4.1, 1, 0, 0, 0, 0, 1);
    	case 3: ApplyAnimationEx(playerid, "ON_LOOKERS", "point_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "ON_LOOKERS", "Pointup_loop", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:cheer(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/cheer [1-8]");

	if (type < 1 || type > 8)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "ON_LOOKERS", "shout_01", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "ON_LOOKERS", "shout_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "ON_LOOKERS", "shout_in", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "RIOT", "RIOT_ANGRY_B", 4.1, 1, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "RIOT", "RIOT_CHANT", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "RIOT", "RIOT_shout", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnimation(playerid, "STRIP", "PUN_HOLLER", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnimation(playerid, "OTB", "wtchrace_win", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:strip(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/strip [1-7]");

	if (type < 1 || type > 7)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "STRIP", "strip_A", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnimationEx(playerid, "STRIP", "strip_B", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnimationEx(playerid, "STRIP", "strip_C", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "STRIP", "strip_D", 4.1, 1, 0, 0, 0, 0, 1);
		case 5: ApplyAnimationEx(playerid, "STRIP", "strip_E", 4.1, 1, 0, 0, 0, 0, 1);
		case 6: ApplyAnimationEx(playerid, "STRIP", "strip_F", 4.1, 1, 0, 0, 0, 0, 1);
		case 7: ApplyAnimationEx(playerid, "STRIP", "strip_G", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:wave(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/wave [1-3]");

	if (type < 1 || type > 3)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "PED", "endchat_03", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimation(playerid, "KISSING", "gfwave2", 4.1, 0, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimationEx(playerid, "ON_LOOKERS", "wave_loop", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

/*CMD:smoke(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/smoke [1-3]");

	if (type < 1 || type > 3)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "SMOKING", "M_smk_drag", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "SMOKING", "M_smklean_loop", 4.1, 1, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimation(playerid, "SMOKING", "M_smkstnd_loop", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}*/

CMD:reload(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/reload [1-4]");

	if (type < 1 || type > 4)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "UZI", "UZI_reload", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "RIFLE", "rifle_load", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:taichi(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	ApplyAnimationEx(playerid, "PARK", "Tai_Chi_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:wank(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/wank [1-3]");

	if (type < 1 || type > 3)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "PAULNMAC", "wank_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "PAULNMAC", "wank_in", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "PAULNMAC", "wank_out", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:cower(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	ApplyAnimationEx(playerid, "PED", "cower", 4.1, 0, 0, 0, 1, 0, 1);
	return 1;
}

CMD:skate(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/skate [1-2]");

	if (type < 1 || type > 2)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "SKATE", "skate_idle", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnimationEx(playerid, "SKATE", "skate_run", 4.1, 1, 1, 1, 1, 1, 1);
	}
	return 1;
}

CMD:drunk(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	ApplyAnimationEx(playerid, "PED", "WALK_drunk", 4.1, 1, 1, 1, 1, 1, 1);
	return 1;
}

CMD:cry(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	ApplyAnimationEx(playerid, "GRAVEYARD", "mrnF_loop", 4.1, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:tired(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/tired [1-2]");

	if (type < 1 || type > 2)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "PED", "IDLE_tired", 4.1, 1, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "FAT", "IDLE_tired", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:sit(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/sit [1-7]");

	if (type < 1 || type > 8)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "CRIB", "PED_Console_Loop", 4.1, 1, 0, 0, 0, 0);
		case 2: ApplyAnimationEx(playerid, "INT_HOUSE", "LOU_In", 4.1, 0, 0, 0, 1, 0);
		case 3: ApplyAnimationEx(playerid, "MISC", "SEAT_LR", 4.1, 1, 0, 0, 0, 0);
		case 4: ApplyAnimationEx(playerid, "MISC", "Seat_talk_01", 4.1, 1, 0, 0, 0, 0);
		case 5: ApplyAnimationEx(playerid, "MISC", "Seat_talk_02", 4.1, 1, 0, 0, 0, 0);
		case 6: ApplyAnimationEx(playerid, "ped", "SEAT_down", 4.1, 0, 0, 0, 1, 0);
		case 7: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_In", 4.0, 0, 0, 0, 1, 1, 1);
		case 8: ApplyAnimationEx(playerid, "SUNBATHE", "SBATHE_F_LieB2Sit", 4.0, 0, 0, 0, 1, 1);
	}

	return 1;
}

CMD:lean(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/lean [1-2]");

	if (type < 1 || type > 2)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "GANGS", "leanIDLE", 4.1, 1, 0, 0, 0, 0);
		case 2: ApplyAnimationEx(playerid, "MISC", "Plyrlean_loop", 4.1, 0, 0, 0, 1, 0);
	}
	return 1;
}

CMD:crossarms(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/crossarms [1-4]");

	if (type < 1 || type > 4)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 0, 1, 1, 1, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "GRAVEYARD", "prst_loopa", 4.1, 1, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimationEx(playerid, "GRAVEYARD", "mrnM_loop", 4.1, 1, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE", 4.1, 0, 1, 1, 1, 0, 1);
	}
	return 1;
}

CMD:fucku(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	ApplyAnimation(playerid, "PED", "fucku", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:walk(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You can't perform animations at the moment.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/walk [1-16]");

	if (type < 1 || type > 17)
	    return SendErrorMessage(playerid, "Invalid type specified.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "FAT", "FatWalk", 4.1, 1, 1, 1, 1, 1, 1);
	    case 2: ApplyAnimationEx(playerid, "MUSCULAR", "MuscleWalk", 4.1, 1, 1, 1, 1, 1, 1);
	    case 3: ApplyAnimationEx(playerid, "PED", "WALK_armed", 4.1, 1, 1, 1, 1, 1, 1);
	    case 4: ApplyAnimationEx(playerid, "PED", "WALK_civi", 4.1, 1, 1, 1, 1, 1, 1);
	    case 5: ApplyAnimationEx(playerid, "PED", "WALK_fat", 4.1, 1, 1, 1, 1, 1, 1);
	    case 6: ApplyAnimationEx(playerid, "PED", "WALK_fatold", 4.1, 1, 1, 1, 1, 1, 1);
	    case 7: ApplyAnimationEx(playerid, "PED", "WALK_gang1", 4.1, 1, 1, 1, 1, 1, 1);
	    case 8: ApplyAnimationEx(playerid, "PED", "WALK_gang2", 4.1, 1, 1, 1, 1, 1, 1);
	    case 9: ApplyAnimationEx(playerid, "PED", "WALK_player", 4.1, 1, 1, 1, 1, 1, 1);
	    case 10: ApplyAnimationEx(playerid, "PED", "WALK_old", 4.1, 1, 1, 1, 1, 1, 1);
	    case 11: ApplyAnimationEx(playerid, "PED", "WALK_wuzi", 4.1, 1, 1, 1, 1, 1, 1);
	    case 12: ApplyAnimationEx(playerid, "PED", "WOMAN_walkbusy", 4.1, 1, 1, 1, 1, 1, 1);
	    case 13: ApplyAnimationEx(playerid, "PED", "WOMAN_walkfatold", 4.1, 1, 1, 1, 1, 1, 1);
	    case 14: ApplyAnimationEx(playerid, "PED", "WOMAN_walknorm", 4.1, 1, 1, 1, 1, 1, 1);
	    case 15: ApplyAnimationEx(playerid, "PED", "WOMAN_walksexy", 4.1, 1, 1, 1, 1, 1, 1);
	    case 16: ApplyAnimationEx(playerid, "PED", "WOMAN_walkshop", 4.1, 1, 1, 1, 1, 1, 1);
	}
	return 1;
}

CMD:atune(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "You are not in any vehicle.");

	if (!IsDoorVehicle(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "You can't tune this vehicle.");

	Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Tune Vehicle", "Add Wheels\nAdd Nitrous\nAdd Hydraulics", "Select", "Cancel");
	return 1;
}

CMD:acolorcar(playerid, params[])
{
	static
	    color1,
	    color2;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "You are not in any vehicle.");

	if (sscanf(params, "dd", color1, color2))
	    return SendSyntaxMessage(playerid, "/acolorcar [color 1] [color 2]");

	if (color1 < 0 || color1 > 255)
	    return SendErrorMessage(playerid, "The first color can't be below 0 or above 255.");

    if (color2 < 0 || color2 > 255)
	    return SendErrorMessage(playerid, "The second color can't be below 0 or above 255.");

	SetVehicleColor(GetPlayerVehicleID(playerid), color1, color2);
	SendServerMessage(playerid, "You have changed the colors of this vehicle to %d, %d.", color1, color2);
	return 1;
}

CMD:apaintjob(playerid, params[])
{
	static
	    paintjobid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "You are not in any vehicle.");

	if (sscanf(params, "d", paintjobid))
	    return SendSyntaxMessage(playerid, "/apaintjob [paintjob ID] (-1 to disable)");

	if (paintjobid < -1 || paintjobid > 5)
	    return SendErrorMessage(playerid, "The specified paintjob can't be below -1 or above 5.");

	if (paintjobid == -1)
		paintjobid = 6;

	SetVehiclePaintjob(GetPlayerVehicleID(playerid), paintjobid);
	SendServerMessage(playerid, "You have changed the paintjob of this vehicle to %d.", paintjobid);
	return 1;
}

CMD:spawnitem(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/spawnitem [item name] (/itemlist for a list)");

	static
		Float:x,
		Float:y,
		Float:z;

	GetPlayerPos(playerid, x, y, z);

    for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if (!strcmp(g_aInventoryItems[i][e_InventoryItem], params, true))
	{
	    new id = DropItem(g_aInventoryItems[i][e_InventoryItem], "Admin", g_aInventoryItems[i][e_InventoryModel], 1, x, y, z - 0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

	    if (id == -1)
	        return SendErrorMessage(playerid, "The server has reached a limit for spawned items.");
		SendServerMessage(playerid, "You have spawned a \"%s\" (type /setquantity to set the quantity).", g_aInventoryItems[i][e_InventoryItem]);
		return 1;
	}
    SendErrorMessage(playerid, "Invalid item name (use /itemlist for a list).");
	return 1;
}

CMD:setquantity(playerid, params[])
{
	static
	    id = -1,
		amount;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if ((id = Item_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "You are not in range of any spawned items.");

	if (sscanf(params, "d", amount))
	    return SendSyntaxMessage(playerid, "/setquantity [amount]");

	if (amount < 1)
	    return SendErrorMessage(playerid, "The specified amount can't be below 1.");

    Item_SetQuantity(id, amount);
    SendServerMessage(playerid, "You have set the quantity of \"%s\" to %d.", DroppedItems[id][droppedItem], amount);
    return 1;
}

CMD:destroyitem(playerid, params[])
{
	static
	    id = -1;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if ((id = Item_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "You are not in range of any spawned items.");

    SendServerMessage(playerid, "You have deleted a \"%s\".", DroppedItems[id][droppedItem]);
    Item_Delete(id);
    return 1;
}

CMD:boombox(playerid, params[])
{
	static
	    type[24],
	    string[128];

	if (!Inventory_HasItem(playerid, "Boombox"))
	    return SendErrorMessage(playerid, "You don't have a boombox on you.");

	if (sscanf(params, "s[24]S()[128]", type, string))
	{
	    SendSyntaxMessage(playerid, "/boombox [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} place, pickup, url");
	    return 1;
	}
	if (!strcmp(type, "place", true))
	{
	    if (BoomboxData[playerid][boomboxPlaced])
	        return SendErrorMessage(playerid, "You have placed a boombox already.");

		if (Boombox_Nearest(playerid) != INVALID_PLAYER_ID)
		    return SendErrorMessage(playerid, "You are in range of another boombox already.");

		if (IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "You must exit the vehicle first.");

		Boombox_Place(playerid);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a boombox and sets it down.", ReturnName(playerid, 0));
		SendServerMessage(playerid, "You have placed your boombox (use \"/boombox\" for options).");
	}
	else if (!strcmp(type, "pickup", true))
	{
	    if (!BoomboxData[playerid][boomboxPlaced])
	        return SendErrorMessage(playerid, "You don't have a boombox deployed.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
		    return SendErrorMessage(playerid, "You are not in range of your boombox.");

		Boombox_Destroy(playerid);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has picked up their boombox.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "url", true))
	{
	    if (sscanf(string, "s[128]", string))
	        return SendSyntaxMessage(playerid, "/boombox [url] [song url]");

        if (!BoomboxData[playerid][boomboxPlaced])
	        return SendErrorMessage(playerid, "You don't have a boombox deployed.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
		    return SendErrorMessage(playerid, "You are not in range of your boombox.");

		Boombox_SetURL(playerid, string);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s turns the dial of the boombox to another station.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:adestroybox(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	foreach (new i : Player) if (BoomboxData[i][boomboxPlaced] && IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
		Boombox_Destroy(i);

		SendServerMessage(playerid, "You have destroyed %s's boombox.", ReturnName(i, 0));
		return SendServerMessage(i, "%s has destroyed your boombox.", ReturnName(playerid, 0));
	}
	SendErrorMessage(playerid, "You are not in range of any boombox.");
	return 1;
}

CMD:findgarbage(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "You don't have the appropriate job.");

	new id = GetClosestGarbage(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "There are no garbage bins available.");

	PlayerData[playerid][pCP] = 1;

	SetPlayerCheckpoint(playerid, GarbageData[id][garbagePos][0], GarbageData[id][garbagePos][1], GarbageData[id][garbagePos][2], 2.5);
	SendServerMessage(playerid, "Marker set to the closest garbage bin.");
	return 1;
}

CMD:search(playerid, params[])
{
	new userid;

	if (sscanf(params, "u", userid))
	{
		SendSyntaxMessage(playerid, "/search [playerid/name]");
		SendClientMessage(playerid, COLOR_YELLOW, "[HINT]:{FFFFFF} Use /searchbp to search a player's backpack.");
		return 1;
	}
	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "That player is disconnected or not near you.");

	if (Inventory_HasItem(userid, "Marijuana Seeds"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Marijuana Seeds (%d)", Inventory_Count(userid, "Marijuana Seeds"));

    if (Inventory_HasItem(userid, "Cocaine Seeds"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Cocaine Seeds (%d)", Inventory_Count(userid, "Cocaine Seeds"));

    if (Inventory_HasItem(userid, "Heroin Opium Seeds"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Heroin Opium Seeds (%d)", Inventory_Count(userid, "Heroin Opium Seeds"));

	if (Inventory_HasItem(userid, "Steroids"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Steroids (%d)", Inventory_Count(userid, "Steroids"));

    if (Inventory_HasItem(userid, "Marijuana"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Marijuana (%d)", Inventory_Count(userid, "Marijuana"));

    if (Inventory_HasItem(userid, "Cocaine"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Cocaine (%d)", Inventory_Count(userid, "Cocaine"));

    if (Inventory_HasItem(userid, "Heroin"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Heroin (%d)", Inventory_Count(userid, "Heroin"));

	for (new i = 0; i < 12; i ++) if (PlayerData[userid][pGuns][i] && PlayerData[userid][pAmmo][i] > 0) {
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "* %s", ReturnWeaponName(PlayerData[userid][pGuns][i]));
	}
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s starts to search %s for illegal items.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:searchbp(playerid, params[])
{
    new userid, backpack;

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/searchbp [playerid/name]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "That player is disconnected or not near you.");

	if (!Inventory_HasItem(userid, "Backpack") || (backpack = GetPlayerBackpack(userid)) == -1)
	    return SendErrorMessage(playerid, "That player doesn't have a backpack.");

    if (Backpack_HasItem(backpack, "Marijuana Seeds"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Marijuana Seeds (%d)", Backpack_Count(backpack, "Marijuana Seeds"));

    if (Backpack_HasItem(backpack, "Cocaine Seeds"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Cocaine Seeds (%d)", Backpack_Count(backpack, "Cocaine Seeds"));

    if (Backpack_HasItem(backpack, "Heroin Opium Seeds"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Heroin Opium Seeds (%d)", Backpack_Count(backpack, "Heroin Opium Seeds"));

	if (Backpack_HasItem(backpack, "Steroids"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Steroids (%d)", Backpack_Count(backpack, "Steroids"));

    if (Backpack_HasItem(backpack, "Marijuana"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Marijuana (%d)", Backpack_Count(backpack, "Marijuana"));

    if (Backpack_HasItem(backpack, "Cocaine"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Cocaine (%d)", Backpack_Count(backpack, "Cocaine"));

    if (Backpack_HasItem(backpack, "Heroin"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Heroin (%d)", Backpack_Count(backpack, "Heroin"));

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has searched %s's backpack for illegal items.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:take(playerid, params[])
{
	new
	    userid,
		string[128];

    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "You must be a police officer.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/take [playerid/name]");

    if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "That player is disconnected or not near you.");

	if (GetWeaponCount(userid) > 0)
		strcat(string, "Take Weapons\n");

	if (Inventory_HasItem(userid, "Marijuana Seeds") || Inventory_HasItem(userid, "Cocaine Seeds") || Inventory_HasItem(userid, "Heroin Opium Seeds"))
	    strcat(string, "Take Seeds\n");

	if (Inventory_HasItem(userid, "Marijuana") || Inventory_HasItem(userid, "Cocaine") || Inventory_HasItem(userid, "Heroin") || Inventory_HasItem(userid, "Steroids"))
	    strcat(string, "Take Drugs\n");

    if (Inventory_HasItem(userid, "Portable Radio"))
	    strcat(string, "Take Radio\n");

	if (Inventory_HasItem(userid, "Backpack") && GetPlayerBackpack(userid) != -1)
	    strcat(string, "Take Backpack\n");

   	if (Inventory_HasItem(userid, "Car License"))
	    strcat(string, "Take Car License\n");

    if (Inventory_HasItem(userid, "Truck License"))
	    strcat(string, "Take Truck License\n");

	if (Inventory_HasItem(userid, "Airplane License"))
	    strcat(string, "Take Airplane License\n");

    if (Inventory_HasItem(userid, "Helicopter License"))
	    strcat(string, "Take Helicopter License\n");

	if (!strlen(string))
	    return SendErrorMessage(playerid, "This player has no items you are able to confiscate.");

	PlayerData[playerid][pTakeItems] = userid;
	Dialog_Show(playerid, TakeItems, DIALOG_STYLE_LIST, "Take Items", string, "Take", "Cancel");
	return 1;
}

CMD:kickdoor(playerid, params[])
{
	static
	    id = -1;

	if (GetFactionType(playerid) != FACTION_POLICE)
	    return SendErrorMessage(playerid, "You must be a police officer.");

	if ((id = House_Nearest(playerid)) != -1)
	{
	    if (!HouseData[id][houseLocked])
	        return SendErrorMessage(playerid, "This house is already unlocked.");

	    ShowPlayerFooter(playerid, "Attempting to ~r~break~w~ door...");
	    ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s attempts to kick the house's door down.", ReturnName(playerid, 0));
	    SetTimerEx("KickHouse", 1500, false, "dd", playerid, id);
	}
	else if ((id = Business_Nearest(playerid)) != -1)
	{
		if (!BusinessData[id][bizLocked])
		    return SendErrorMessage(playerid, "This business is already unlocked.");

		ShowPlayerFooter(playerid, "Attempting to ~r~break~w~ door...");
        ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s attempts to kick the business door down.", ReturnName(playerid, 0));
	    SetTimerEx("KickBusiness", 1500, false, "dd", playerid, id);
	}
	else {
		SendErrorMessage(playerid, "You must be in range of a house or business.");
	}
	return 1;
}

CMD:buyrack(playerid, params[])
{
	new houseid = House_Inside(playerid);

	if (houseid == -1 || !House_IsOwner(playerid, houseid))
	    return SendErrorMessage(playerid, "You are not in range of your house interior.");

	if (isnull(params) || (!isnull(params) && strcmp(params, "confirm", true) != 0))
		return SendSyntaxMessage(playerid, "/buyrack [confirm] ($1,000 fee)");

	if (Rack_Count(playerid) >= 4)
	    return SendErrorMessage(playerid, "Your house can only have up to 4 weapon racks.");

	if (Rack_Nearest(playerid) != -1)
	    return SendErrorMessage(playerid, "You can't use this command near another rack.");

	if (GetMoney(playerid) < 1000)
	    return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

	new id = Rack_Create(playerid, houseid);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for weapon racks.");

    ResetEditing(playerid);

	PlayerData[playerid][pEditRack] = id;
	EditDynamicObject(playerid, RackData[id][rackObjects][4]);

    GiveMoney(playerid, -1000);
	SendClientMessageEx(playerid, COLOR_ORANGE, "You have purchased a weapon rack for $1,000. (id:%d)", RackData[id][rackObjects][4]);
	return 1;
}

CMD:gunrack(playerid, params[])
{
	new id = Rack_Nearest(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "You are not in range of any weapon rack.");

	Rack_ShowGuns(playerid, id);
	return 1;
}

CMD:deleterack(playerid, params[])
{
	new
		id = -1,
		houseid = House_Inside(playerid);

	if (houseid == -1 || !House_IsOwner(playerid, houseid))
	    return SendErrorMessage(playerid, "You are not in range of your house interior.");

	if ((id = Rack_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "You are not in range of any weapon rack.");

	Rack_Delete(id);
	SendServerMessage(playerid, "You have deleted the weapon rack from your house.");
	return 1;
}

CMD:createrack(playerid, params[])
{
	static
	    id = -1;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	id = Rack_Create(playerid, -1);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for weapon racks.");

    ResetEditing(playerid);
    PlayerData[playerid][pEditRack] = id;

	EditDynamicObject(playerid, RackData[id][rackObjects][4]);
	SendServerMessage(playerid, "You have successfully created rack ID: %d.", id);
	return 1;
}

CMD:editrack(playerid, params[])
{
	static
	    id = 0;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/editrack [rack id]");

	if ((id < 0 || id >= MAX_WEAPON_RACKS) || !RackData[id][rackExists])
	    return SendErrorMessage(playerid, "You have specified an invalid rack ID.");

	ResetEditing(playerid);
	PlayerData[playerid][pEditRack] = id;

	EditDynamicObject(playerid, RackData[id][rackObjects][4]);
	SendServerMessage(playerid, "You are now editing weapon rack ID: %d.", id);
	return 1;
}

CMD:destroyrack(playerid, params[])
{
	static
	    id = 0;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyrack [rack id]");

	if ((id < 0 || id >= MAX_WEAPON_RACKS) || !RackData[id][rackExists])
	    return SendErrorMessage(playerid, "You have specified an invalid rack ID.");

	Rack_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed weapon rack ID: %d.", id);
	return 1;
}

CMD:checknumber(playerid, params[])
{
	new number;

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", number))
	    return SendSyntaxMessage(playerid, "/checknumber [phone number]");

	if (number == 0)
	    return SendErrorMessage(playerid, "You have specified an invalid number.");

	if (GetNumberOwner(number) != INVALID_PLAYER_ID)
	    return SendServerMessage(playerid, "The phone number %d is owned by %s.", number, ReturnName(GetNumberOwner(number), 0));

	SendErrorMessage(playerid, "There is no player online with that phone number.");
	return 1;
}

CMD:trace(playerid, params[])
{
	new number;

	if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "You must be a police officer.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 7)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 7);

	if (sscanf(params, "d", number))
	    return SendSyntaxMessage(playerid, "/trace [phone number]");

	if (number == 0)
	    return SendErrorMessage(playerid, "You have specified an invalid number.");

    if (PlayerData[playerid][pPhoneOff])
        return SendErrorMessage(playerid, "The phone you are currently trying to reach is OFF.");

	if (GetNumberOwner(number) != INVALID_PLAYER_ID)
        return SendServerMessage(playerid, "The phone number [%d] is owned by [%s].", number, ReturnName(GetNumberOwner(number), 0));

	SendErrorMessage(playerid, "There is no player online with that phone number.");
	return 1;
}

CMD:flipcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (vehicleid > 0 && isnull(params))
	{
		FlipVehicle(vehicleid);
		SendServerMessage(playerid, "You have flipped your current vehicle.");
	}
	else
	{
		if (sscanf(params, "d", vehicleid))
	    	return SendSyntaxMessage(playerid, "/flipcar [vehicle ID]");

		else if (!IsValidVehicle(vehicleid))
	    	return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

		FlipVehicle(vehicleid);
		SendServerMessage(playerid, "You have flipped vehicle ID: %d.", vehicleid);
	}
	return 1;
}

CMD:createspeed(playerid, params[])
{
	static
	    Float:limit,
	    Float:range;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ff", limit, range))
		return SendSyntaxMessage(playerid, "/createspeed [speed limit] [range] (default range: 30)");

	if (limit < 5.0 || limit > 150.0)
	    return SendErrorMessage(playerid, "The speed limit can't be below 5 or above 150.");

	if (range < 5.0 || range > 50.0)
	    return SendErrorMessage(playerid, "The range can't be below 5 or above 50.");

	if (Speed_Nearest(playerid) != -1)
	    return SendErrorMessage(playerid, "You can't do this in range another speed camera.");

	new id = Speed_Create(playerid, limit, range);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for speed cameras.");

	SendServerMessage(playerid, "You have created speed camera ID: %d.", id);
	return 1;
}

CMD:destroyspeed(playerid, params[])
{
	static
	    id = 0;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyspeed [speed id]");

	if ((id < 0 || id >= MAX_SPEED_CAMERAS) || !SpeedData[id][speedExists])
	    return SendErrorMessage(playerid, "You have specified an invalid speed camera ID.");

	Speed_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed speed camera ID: %d.", id);
	return 1;
}

CMD:admins(playerid, params[])
{
	new count = 0;

    SendClientMessage(playerid, COLOR_WHITE, "Online Administrators List");

    foreach (new i : Player) if (PlayerData[i][pAdmin] > 0 && PlayerData[i][pAdminHide] < 1)
	{
        if (PlayerData[i][pAdminDuty])
			SendClientMessageEx(playerid, COLOR_WHITE, "%s: %s(ID: %d) Status: {4BB74C}Administrating", PlayerData[i][pForumName], AdminRankName(i), i);

		else
		    SendClientMessageEx(playerid, COLOR_WHITE, "%s: %s(ID: %d) Status: {FF0000}Roleplaying", PlayerData[i][pForumName], AdminRankName(i), i);

        count++;
	}
	if (!count) {
	    SendClientMessage(playerid, COLOR_ANTICHEAT, "* There are currently no Administrators online.");
	}
	return 1;
}

CMD:helpers(playerid, params[])
{
	new count = 0;

    SendClientMessage(playerid, COLOR_WHITE, "Online helpers");

    foreach (new i : Player) if (PlayerData[i][pHelper] > 0)
	{
        if (Assisted[i] != -1)
			SendClientMessageEx(playerid, COLOR_WHITE, "%s: %s(ID: %d) Status: {4BB74C}Assisting a Player", ReturnName(i, 0), HelperRankName(i), i);

		else
		    SendClientMessageEx(playerid, COLOR_WHITE, "%s: %s(ID: %d) Status: {FF0000}Roleplaying", ReturnName(i, 0), HelperRankName(i), i);

        count++;
	}
	if (!count) {
	    SendClientMessage(playerid, COLOR_ANTICHEAT, "* There are currently no helpers online.");
	}
	return 1;
}

CMD:showlicenses(playerid, params[])
{
	static
	    userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/showlicenses [playerid/name]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "That player is disconnected or not near you.");

	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");

	SendClientMessageEx(playerid, COLOR_ORANGE, "Licenses registered to %s (ID: %d):", ReturnName(userid, 0), userid);

	if (Inventory_HasItem(playerid, "Car License")) SendClientMessageEx(userid, COLOR_WHITE, "* Car License {33CC33}(Carrying)");
 	else SendClientMessageEx(userid, COLOR_WHITE, "* Car License {AA3333}(Not Carrying)");

 	if (Inventory_HasItem(playerid, "Truck License")) SendClientMessageEx(userid, COLOR_WHITE, "* Truck License {33CC33}(Carrying)");
 	else SendClientMessageEx(userid, COLOR_WHITE, "* Truck License {AA3333}(Not Carrying)");

 	if (Inventory_HasItem(playerid, "Motorbike License")) SendClientMessageEx(userid, COLOR_WHITE, "* Motorbike License {33CC33}(Carrying)");
 	else SendClientMessageEx(userid, COLOR_WHITE, "* Motorbike License {AA3333}(Not Carrying)");

 	if (Inventory_HasItem(playerid, "Airplane License")) SendClientMessageEx(userid, COLOR_WHITE, "* Airplane License {33CC33}(Carrying)");
 	else SendClientMessageEx(userid, COLOR_WHITE, "* Airplane License {AA3333}(Not Carrying)");

 	if (Inventory_HasItem(playerid, "Helicopter License")) SendClientMessageEx(userid, COLOR_WHITE, "* Helicopter License {33CC33}(Carrying)");
 	else SendClientMessageEx(userid, COLOR_WHITE, "* Helicopter License {AA3333}(Not Carrying)");

	if (Inventory_HasItem(playerid, "Firearm License")) SendClientMessageEx(userid, COLOR_WHITE, "* Firearm License {33CC33}(Carrying)");
	else SendClientMessageEx(userid, COLOR_WHITE, "* Firearm License {AA3333}(Not Carrying)");

	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out their licenses and shows them to %s.", ReturnName(playerid, 0), ReturnName(userid, 0));

	if(userid == playerid) 	SendClientMessage(userid, COLOR_LIGHTRED, "Additionally you can see /mylicenses to see if you have a license in the DMV database.");

	return 1;
}

CMD:mylicenses(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "INFO: 1 means you have the license. 0 means you do not. (Note this does not mean physical license. Check /showlicenses to see what...");
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "...licenses you have in your inventory). If you need a copy of your physical license, you can get one from town hall using /buylicense");
	SendClientMessageEx(playerid, COLOR_ANTICHEAT, "Car License: %d | Motorcycle License: %d | Trucking License: %d", PlayerData[playerid][pCarLicense], PlayerData[playerid][pBikeLicense], PlayerData[playerid][pTruckLicense]);
	SendClientMessageEx(playerid, COLOR_ANTICHEAT, "Helicopter License: %d | Airplane License: %d | Weapon License: %d", PlayerData[playerid][pHeliLicense], PlayerData[playerid][pAirLicense], PlayerData[playerid][pWeaponLicense]);
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:deletechar(playerid, params[])
{
	static
	    query[128];

    if (PlayerData[playerid][pAdmin] < 6)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (isnull(params) || strlen(params) > 24)
	    return SendSyntaxMessage(playerid, "/deletechar [character name]");

    if (!IsValidPlayerName(params))
	    return SendErrorMessage(playerid, "You have specified an invalid name format.");

	format(query, sizeof(query), "SELECT `ID`, `Admin` FROM `characters` WHERE `chara` = '%s'", SQL_ReturnEscaped(params));
	mysql_tquery(g_iHandle, query, "OnDeleteCharacter", "ds", playerid, params);

	return 1;
}

CMD:stoploading(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "You don't have the appropriate job.");

	if (!PlayerData[playerid][pLoading] && !PlayerData[playerid][pLoadType])
	    return SendErrorMessage(playerid, "You are not loading any crates right now.");

	PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pLoadType] = 0;
    PlayerData[playerid][pLoadCrate] = 0;

	RemovePlayerAttachedObject(playerid, 4);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	DisablePlayerCheckpoint(playerid);
	SendServerMessage(playerid, "You are no longer loading crates.");
	SendServerMessage(playerid, "You can either deliver these crate(s) to a business or use /shipments.");
	return 1;
}

/*CMD:startdelivery(playerid, params[])
{
 	new id = Job_NearestPoint(playerid);

	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "You don't have the appropriate job.");

	if (id == -1 || JobData[id][jobType] != JOB_COURIER)
	    return SendErrorMessage(playerid, "You are not in range of any loading point.");

	if (PlayerData[playerid][pLoadType] > 0)
	    return SendErrorMessage(playerid, "You have already started a delivery.");

    if (IsPlayerInAnyVehicle(playerid))
    	return SendErrorMessage(playerid, "You must exit the vehicle first.");

	Dialog_Show(playerid, StartDelivery, DIALOG_STYLE_LIST, "Select Type", "Retail Supplies\nAmmunition\nClothing\nFood Supplies\nGasoline\nFurniture", "Select", "Cancel");
	return 1;
}*/

CMD:bshipment(playerid, params[])
{
    new id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid));

    if (id == -1 || !Business_IsOwner(playerid, id))
        return SendErrorMessage(playerid, "You are not in range of your business.");

	if (BusinessData[id][bizType] == 5)
	    return SendErrorMessage(playerid, "You can't request shipment for this business type.");

	if (BusinessData[id][bizShipment])
	{
	    foreach (new i : Player) if (PlayerData[i][pShipment] == id)
		{
	        CancelShipment(i);
	        SendServerMessage(i, "The shipment request has been cancelled.");
	    }
	    BusinessData[id][bizShipment] = 0;
	    Business_Save(id);

	    SendServerMessage(playerid, "Your business is no longer requesting a shipment.");
	    SendJobMessage(1, COLOR_YELLOW, "* %s is no longer requesting a shipment for %s. **", ReturnName(playerid, 0), BusinessData[id][bizName]);
	}
	else
	{
	    if (BusinessData[id][bizDeliver][0] == 0.0 && BusinessData[id][bizDeliver][1] == 0.0 && BusinessData[id][bizDeliver][2] == 0.0)
	        return SendErrorMessage(playerid, "The delivery point for your business is not set.");

	    BusinessData[id][bizShipment] = 1;
	    Business_Save(id);

	    SendServerMessage(playerid, "Your have requested a shipment for your business.");
		SendJobMessage(1, COLOR_YELLOW, "* %s is requesting a shipment for %s (/shipments to accept). **", ReturnName(playerid, 0), BusinessData[id][bizName]);
	}
	return 1;
}

CMD:cancelshipment(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "You don't have the appropriate job.");

	if (PlayerData[playerid][pShipment] == -1)
	    return SendErrorMessage(playerid, "You haven't accepted any shipments yet.");

	CancelShipment(playerid);
	SendServerMessage(playerid, "You have cancelled the accepted shipment.");
	return 1;
}

CMD:shipments(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "You don't have the appropriate job.");

	if (PlayerData[playerid][pShipment] != -1)
	    return SendErrorMessage(playerid, "You have already accepted a shipment (type /cancelshipment to cancel it).");

	ShowShipments(playerid);
	return 1;
}

CMD:resetbizprices(playerid, params[])
{
	static
	    bizid;

	if(PlayerData[playerid][pAdmin] < 5)
		return SendErrorMessage(playerid, "You are not authorized to use this command.");

	if (sscanf(params, "i", bizid))
	    return SendSyntaxMessage(playerid, "/resetbizprices [bizid]");

	if(!BusinessData[bizid][bizExists])
		return SendErrorMessage(playerid, "Biz ID does not exist");

	ResetBizPrices(bizid);
	SendAdminAlert(COLOR_LIGHTRED, "%s has reset the product prices to default prices for bizid: %i", ReturnName(playerid, 0), bizid);
	return 1;
}

CMD:usemag(playerid, params[])
{
	new weaponid = PlayerData[playerid][pHoldWeapon];

	if (!weaponid)
	    return SendErrorMessage(playerid, "You are not holding any empty weapon.");

	if (!Inventory_HasItem(playerid, "Magazine"))
	    return SendErrorMessage(playerid, "You don't have any weapon magazines.");

	if (PlayerData[playerid][pUsedMagazine])
		SendErrorMessage(playerid, "You have already used a magazine on this weapon.");

	switch (weaponid)
	{
	    case 22:
	    {
		    PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s attaches a magazine to the weapon.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
		}
		case 24:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s attaches a magazine to the weapon.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
		}
		case 25:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s inserts some shells into the weapon.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
		}
		case 27:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s inserts some shells into the weapon.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
		}
		case 28:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s attaches a magazine to the weapon.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
		}
		case 29:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s attaches a magazine to the weapon.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
		}
		case 32:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s attaches a magazine to the weapon.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
		}
		case 30:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s attaches a magazine to the weapon.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
		}
		case 31:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s attaches a magazine to the weapon.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
		}
		case 33:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s attaches a magazine to the weapon.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
		}
        case 34:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s attaches a magazine to the weapon.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
		}
		default:
		    return SendErrorMessage(playerid, "You can't attach a magazine to this weapon.");
	}
	return 1;
}

CMD:clearinventory(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/clearinventory [playerid/name]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	Inventory_Clear(userid);

	SendAdminAction(playerid, "You have cleared %s's inventory from all items.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s has cleared your inventory from all items.", ReturnName(playerid, 0));

	SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has cleared %s's inventory.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:todo(playerid, params[])
{
	if (!IsTaskActive(playerid))
	    return 1;

	new
	    string[128];

	if (!PlayerData[playerid][pBankTask])
		strcat(string, "Visit Bank (pending)\n");

	if (!PlayerData[playerid][pStoreTask])
	    strcat(string, "Visit Store (pending)\n");

	if (!PlayerData[playerid][pTestTask])
	    strcat(string, "Visit DMV (pending)\n");

	Dialog_Show(playerid, NewTasks, DIALOG_STYLE_LIST, "Task List", string, "Select", "Cancel");
	return 1;
}

CMD:warnings(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Warnings (%d/3)", PlayerData[playerid][pWarnings]);

    if (PlayerData[playerid][pWarnings] >= 1 && strlen(PlayerData[playerid][pWarn1]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* 1st Warning: \"%s\"", PlayerData[playerid][pWarn1]);

    if (PlayerData[playerid][pWarnings] >= 2 && strlen(PlayerData[playerid][pWarn2]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* 2nd Warning: \"%s\"", PlayerData[playerid][pWarn2]);

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:listwarns(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/listwarns [playerid/name]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    SendClientMessageEx(playerid, COLOR_LIGHTRED, "%s's Warnings (%d/3)", ReturnName(userid, 0), PlayerData[userid][pWarnings]);

    if (PlayerData[userid][pWarnings] >= 1 && strlen(PlayerData[userid][pWarn1]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* 1st Warning: \"%s\"", PlayerData[userid][pWarn1]);

    if (PlayerData[userid][pWarnings] >= 2 && strlen(PlayerData[userid][pWarn2]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* 2nd Warning: \"%s\"", PlayerData[userid][pWarn2]);

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:warn(playerid, params[])
{
	static
	    userid,
		reason[32];

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "us[32]", userid, reason))
	    return SendSyntaxMessage(playerid, "/warn [playerid/name] [reason]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	if (PlayerData[userid][pAdmin] || PlayerData[userid][pHelper] > PlayerData[playerid][pAdmin] || PlayerData[playerid][pHelper])
	    return SendErrorMessage(playerid, "The specified player has higher authority.");

	switch (++ PlayerData[userid][pWarnings])
	{
	    case 1:
	    {
	        format(PlayerData[userid][pWarn1], 32, reason);

	        SendAdminAction(userid, "%s has warned you for \"%s\" (first warning).", ReturnName(playerid, 0), reason);
	        SendAdminAction(playerid, "You have warned %s for \"%s\" (first warning).", ReturnName(userid, 0), reason);
		}
		case 2:
	    {
	        format(PlayerData[userid][pWarn2], 32, reason);

	        SendAdminAction(userid, "%s has warned you for \"%s\" (second warning).", ReturnName(playerid, 0), reason);
	        SendAdminAction(playerid, "You have warned %s for \"%s\" (second warning).", ReturnName(userid, 0), reason);
		}
		default:
	    {
	        ResetWarnings(userid);

	        SendAdminAction(userid, "You've been kicked for exceeding your warnings (\"%s\").", reason);
	        SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s was kicked for 3 warnings by %s, reason: %s", ReturnName(userid, 0), ReturnName(playerid, 0), reason);

			KickEx(userid);
		}
	}
	return 1;
}

CMD:clearwarns(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/clearwarns [playerid/name]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "You have specified an invalid player.");

	ResetWarnings(userid);

	SendAdminAction(playerid, "You have cleared %s's warnings.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s has cleared your warnings.", ReturnName(playerid, 0));

	SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has cleared %s's warnings.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:sorting(playerid, params[])
{
	new id = -1;

	if (PlayerData[playerid][pJob] != JOB_SORTER)
	    return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if ((id = Job_NearestPoint(playerid)) == -1 || JobData[id][jobType] != JOB_SORTER)
		return SendErrorMessage(playerid, "You are not in range of the sorting facility.");

 	switch (PlayerData[playerid][pSorting])
 	{
	 	case -1:
 	    {
 	        PlayerData[playerid][pSorting] = id;
 	        PlayerData[playerid][pSortCrate] = 1;

			SendServerMessage(playerid, "You have started sorting. Please make your way to the marker. Use /sorting at any time to stop.");

 	        SetPlayerAttachedObject(playerid, 4, 1220, 5, 0.137832, 0.176979, 0.151424, 96.305931, 185.363006, 20.328088, 0.699999, 0.800000, 0.699999);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
			SetPlayerCheckpoint(playerid, JobData[id][jobDeliver][0], JobData[id][jobDeliver][1], JobData[id][jobDeliver][2], 1.0);
		}
		default:
		{
		    PlayerData[playerid][pSorting] = -1;

		    if (PlayerData[playerid][pSortCrate] != 0)
		    {
		        PlayerData[playerid][pSortCrate] = 0;

		        RemovePlayerAttachedObject(playerid, 4);
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
 	        }
 	        DisablePlayerCheckpoint(playerid);
 	        SendServerMessage(playerid, "You have finished sorting packages.");
 	    }
	}
	return 1;
}

CMD:passwep(playerid, params[])
{
	new
	    weaponid = GetWeapon(playerid),
	    ammo = GetPlayerAmmo(playerid),
		userid;

	if (!weaponid)
	    return SendErrorMessage(playerid, "You are not holding any weapon to pass.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/passwep [playerid/name]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "That player is disconnected or not near you.");

	if (userid == playerid)
		return SendErrorMessage(playerid, "You can't give yourself a weapon.");

	if (PlayerData[userid][pGuns][g_aWeaponSlots[weaponid]] != 0)
	    return SendErrorMessage(playerid, "That player has a weapon in the same slot already.");

	ResetWeapon(playerid, weaponid);
	GiveWeaponToPlayer(userid, weaponid, ammo);

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has passed their %s to %s.", ReturnName(playerid, 0), ReturnWeaponName(weaponid), ReturnName(userid, 0));
	return 1;
}

CMD:exit(playerid, params[])
{
    static
		    id = -1;

	if (PlayerData[playerid][pRangeBooth] != -1)
	{
	    Booth_Leave(playerid);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has left the shooting booth.", ReturnName(playerid, 0));
		return 1;
	}
	else if ((id = House_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]))
    {
		SetPlayerPosEx(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
		SetPlayerFacingAngle(playerid, HouseData[id][housePos][3] - 180.0);

		SetPlayerInterior(playerid, HouseData[id][houseExterior]);
		SetPlayerVirtualWorld(playerid, HouseData[id][houseExteriorVW]);

		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pHouse] = -1;
		return 1;
	}
	else if ((id = Business_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]))
    {
		SetPlayerPosEx(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
		SetPlayerFacingAngle(playerid, BusinessData[id][bizPos][3] - 180.0);

		SetPlayerInterior(playerid, BusinessData[id][bizExterior]);
		SetPlayerVirtualWorld(playerid, BusinessData[id][bizExteriorVW]);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pBusiness] = -1;
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);
		return 1;
	}
	else if ((id = Entrance_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]))
    {
        if (EntranceData[id][entranceCustom])
			SetPlayerPosEx(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

		else
		    SetPlayerPosEx(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

		SetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3] - 180.0);

		SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);
		SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pEntrance] = Entrance_GetLink(playerid);
		return 1;
	}
	else if ((id = Business_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]))
    {
		SetPlayerPosEx(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
		SetPlayerFacingAngle(playerid, BusinessData[id][bizPos][3] - 180.0);

		SetPlayerInterior(playerid, BusinessData[id][bizExterior]);
		SetPlayerVirtualWorld(playerid, BusinessData[id][bizExteriorVW]);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pBusiness] = -1;
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);
		return 1;
	}
	return 1;
}

CMD:enter(playerid, params[])
{
    static
		    id = -1;

	if (IsPlayerInRangeOfPoint(playerid, 2.5, -204.5648, -1736.1201, 675.7687) && PlayerData[playerid][pHospitalInt] != -1)
	{
		SetPlayerPosEx(playerid, arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][0], arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][1], arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][2]);
		SetPlayerFacingAngle(playerid, arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][3]);

		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pHospitalInt] = -1;
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);
	}
	else if ((id = Entrance_Nearest(playerid)) != -1)
    {
        if (EntranceData[id][entranceLocked])
            return SendErrorMessage(playerid, "This entrance is locked at the moment.");

        if (PlayerData[playerid][pTask])
		{
			if (EntranceData[id][entranceType] == 2 && !PlayerData[playerid][pBankTask])
			{
		    	PlayerData[playerid][pBankTask] = 1;
		    	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);
		    	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Banking", "This is one of the banks of Vice City. You can manage your bank accounts here.\nEach player has a standard bank account and a savings account for extra funds.\n\nYou can type /bank inside this building to manage either of your bank accounts.\nIf you are near any ATM machine, you can use the /atm command for your banking needs.", "Close", "");

			    if (IsTaskCompleted(playerid))
				{
			        PlayerData[playerid][pTask] = 0;
					ShowPlayerFooter(playerid, "You have ~g~completed~w~ all your tasks!");
				}
			}
			else if (EntranceData[id][entranceType] == 1 && !PlayerData[playerid][pTestTask])
			{
		    	PlayerData[playerid][pTestTask] = 1;
		    	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "DMV", "The DMV is where a player can attempt the driving test to obtain their licenses.\nYou must avoid hitting obstacles, damaging the vehicle or speeding during the test.\n\nIt is legally required to possess a driving license to drive in Vice City.\nDriving without a license can result in several consequences by law enforcement.", "Close", "");

			    if (IsTaskCompleted(playerid))
				{
			        PlayerData[playerid][pTask] = 0;
					ShowPlayerFooter(playerid, "You have ~g~completed~w~ all your tasks!");
				}
			}
		}
		if (EntranceData[id][entranceCustom])
			SetPlayerPosEx(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

		else
		    SetPlayerPosEx(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

		SetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

		SetPlayerInterior(playerid, EntranceData[id][entranceInterior]);
		SetPlayerVirtualWorld(playerid, EntranceData[id][entranceWorld]);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pEntrance] = EntranceData[id][entranceID];
		return 1;
	}
	else if((id = Business_Nearest(playerid)) != -1)
    {
        if (BusinessData[id][bizLocked])
            return SendErrorMessage(playerid, "This business is closed by the owner.");

		if (PlayerData[playerid][pTask] && !PlayerData[playerid][pStoreTask])
		{
		    PlayerData[playerid][pStoreTask] = 1;
		    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Retail Store", "This business is a Retail Store. You can purchase many items here using the /buy command.\nThere are many useful things that you can purchase here, which are added to your inventory.\n\nThe most useful item is the GPS System, as this device allows you to find what you need.\nYou can leave this business at any time by pressing the 'F' key at the door.", "Close", "");

		    if (IsTaskCompleted(playerid))
			{
				PlayerData[playerid][pTask] = 0;
				ShowPlayerFooter(playerid, "You have ~g~completed~w~ all your tasks!");
			}
		}
		SetPlayerPosEx(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
		SetPlayerFacingAngle(playerid, BusinessData[id][bizInt][3]);

		SetPlayerInterior(playerid, BusinessData[id][bizInterior]);
		SetPlayerVirtualWorld(playerid, BusinessData[id][bizID] + 6000);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pBusiness] = BusinessData[id][bizID];

		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);

		if (strlen(BusinessData[id][bizMessage]) && strcmp(BusinessData[id][bizMessage], "NULL", true)) {
		    SendClientMessage(playerid, COLOR_DEPARTMENT, BusinessData[id][bizMessage]);
		}
		return 1;
	}
	else if ((id = House_Nearest(playerid)) != -1)
    {
        if (HouseData[id][houseLocked])
            return SendErrorMessage(playerid, "You cannot enter a locked house.");

		SetPlayerPosEx(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
		SetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);

		SetPlayerInterior(playerid, HouseData[id][houseInterior]);
		SetPlayerVirtualWorld(playerid, HouseData[id][houseID] + 5000);

		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pHouse] = HouseData[id][houseID];
		return 1;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 2.5, 272.2939, 1388.8876, 11.1342))
	{
	    SetPlayerPosEx(playerid, 1206.8619, -1314.3546, 797.0880);
	    SetPlayerFacingAngle(playerid, 270.0000);

	    SetPlayerInterior(playerid, 5);
	    SetPlayerVirtualWorld(playerid, PRISON_WORLD);

	    SetCameraBehindPlayer(playerid);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 2.5, 1206.8619, -1314.3546, 796.7880) && GetPlayerVirtualWorld(playerid) == PRISON_WORLD && !PlayerData[playerid][pJailTime])
	{
	    if (PlayerData[playerid][pFreeze])
		{
	        TogglePlayerControllable(playerid, 1);
	        KillTimer(PlayerData[playerid][pFreezeTimer]);
		}
	    SetPlayerPosEx(playerid, 272.2939, 1388.8876, 11.1342);
	    SetPlayerFacingAngle(playerid, 270.0000);

	    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);

	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);

	    SetCameraBehindPlayer(playerid);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 2.5, 1211.1923, -1354.3439, 796.7456) && GetPlayerVirtualWorld(playerid) == PRISON_WORLD)
	{
	    if (PlayerData[playerid][pFreeze])
		{
	        TogglePlayerControllable(playerid, 1);
	        KillTimer(PlayerData[playerid][pFreezeTimer]);
		}
	    SetPlayerPosEx(playerid, 201.8927, 1437.1788, 10.5950);
	    SetPlayerFacingAngle(playerid, 180.0000);

	    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);

	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);

	    SetCameraBehindPlayer(playerid);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.5, 201.8927, 1437.1788, 10.5950))
	{
	    SetPlayerPosEx(playerid, 1211.1923, -1354.3439, 797.0456);
	    SetPlayerFacingAngle(playerid, 0.0000);

	    SetPlayerInterior(playerid, 5);
	    SetPlayerVirtualWorld(playerid, PRISON_WORLD);

	    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);

	    SetCameraBehindPlayer(playerid);
	}
	else for___loop(new i = 0; i < sizeof(arrHospitalSpawns); i ++) if (IsPlayerInRangeOfPoint(playerid, 3.0, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2]))
	{
		SetPlayerPosEx(playerid, -204.5648, -1736.1201, 675.7687);
		SetPlayerFacingAngle(playerid, 180.0000);

		SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, i + 5000);

		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Loading Textures", 1000, 3);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pHospitalInt] = i;

	    return 1;
    }
	else for___loop(new x = 0; x < MAX_BOOTHS; x ++) if (!g_BoothUsed[x] && IsPlayerInRangeOfPoint(playerid, 1.5, arrBoothPositions[x][0], arrBoothPositions[x][1], arrBoothPositions[x][2]))
	{
	    g_BoothUsed[x] = true;
	    PlayerData[playerid][pRangeBooth] = x;

	    UpdateWeapons(playerid);
	    ResetPlayerWeapons(playerid);

	    GivePlayerWeapon(playerid, 24, 15000);

		Booth_Refresh(playerid);
		PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][81], "~b~Targets:~w~ 0/10");

		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][81]);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has entered the shooting booth.", ReturnName(playerid, 0));
		return 1;
	}
	return 1;
}

CMD:vw(playerid, params[])
{
	new userid;

	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

    if (sscanf(params, "u", userid))
	{
		SendClientMessageEx(playerid, COLOR_CLIENT, "Current Virtual World: %d", GetPlayerVirtualWorld(playerid));
	}
	else if(PlayerData[playerid][pAdmin] >= 1)
	{
	    SendClientMessageEx(playerid, COLOR_CLIENT, "%s's Current Virtual World: %d", ReturnName(userid, 0), GetPlayerVirtualWorld(userid));
	}
	return 1;
}

CMD:toghud(playerid, params[])
{
	switch (PlayerData[playerid][pHUD])
	{
	    case 0:
	    {
	        PlayerData[playerid][pDisableSpeedo] = 0;
	        PlayerData[playerid][pHUD] = 1;
			ShowHungerTextdraw(playerid, 1);

	        SendServerMessage(playerid, "You have enabled the HUD.");

			TextDrawShowForPlayer(playerid, gServerTextdraws[0]);
			TextDrawShowForPlayer(playerid, gServerTextdraws[1]);

	        if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsSpeedoVehicle(GetPlayerVehicleID(playerid)))
		    {
		        for (new i = 34; i < 39; i ++) {
					PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
	    		}
		    }
		}
	    case 1:
	    {
	        PlayerData[playerid][pDisableSpeedo] = 1;
	        PlayerData[playerid][pHUD] = 0;
			ShowHungerTextdraw(playerid, 0);

	        SendServerMessage(playerid, "You have disabled the HUD.");

	        TextDrawHideForPlayer(playerid, gServerTextdraws[0]);
			TextDrawHideForPlayer(playerid, gServerTextdraws[1]);

	        for (new i = 34; i < 39; i ++) {
				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	    	}
		}
	}
	return 1;
}

CMD:time(playerid, params[])
{
	static
	    string[128],
		month[12],
		date[6];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	switch (date[1]) {
	    case 1: month = "January";
	    case 2: month = "February";
	    case 3: month = "March";
	    case 4: month = "April";
	    case 5: month = "May";
	    case 6: month = "June";
	    case 7: month = "July";
	    case 8: month = "August";
	    case 9: month = "September";
	    case 10: month = "October";
	    case 11: month = "November";
	    case 12: month = "December";
	}
	format(string, sizeof(string), "%d/60 minutes until PayDay.",PlayerData[playerid][pMinutes]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	format(string, sizeof(string), "~g~%s %02d %d~n~~b~%02d:%02d:%02d", month, date[0], date[2], date[3], date[4], date[5]);
	GameTextForPlayer(playerid, string, 6000, 1);

	return 1;
}

CMD:healall(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	foreach (new i : Player) {
	    SetPlayerHealth(i, 99.0);
	}
	SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has healed all players online.", ReturnName(playerid, 0));
	return 1;
}

CMD:audiostream(playerid, params[])
{
	new string[128];

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

    if (sscanf(params, "s[128]", string))
	        return SendSyntaxMessage(playerid, "/stream [song url]");

	foreach (new i : Player)
	{
		StopAudioStreamForPlayer(i);
		PlayAudioStreamForPlayer(i, string);
	}
	SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has started an audio stream for all players online. Use /stopstream at any time.", ReturnName(playerid, 0));
	return 1;
}

CMD:saveall(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	foreach (new i : Player) {
		SQL_SaveCharacter(i);
	}
	SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has saved all players accounts.", ReturnName(playerid, 0));
	return 1;
}

CMD:whisper(playerid, params[])
{
	new userid, text[128];

    if (sscanf(params, "us[128]", userid, text))
	    return SendSyntaxMessage(playerid, "/(w)hisper [playerid/name] [text]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "That player is disconnected or not near you.");

	if (userid == playerid)
		return SendErrorMessage(playerid, "You can't whisper yourself.");

    if (strlen(text) > 64) {
	    SendClientMessageEx(userid, COLOR_YELLOW, "** Whisper from %s (%d): %.64s", ReturnName(playerid, 0), playerid, text);
	    SendClientMessageEx(userid, COLOR_YELLOW, "...%s **", text[64]);

	    SendClientMessageEx(playerid, COLOR_YELLOW, "** Whisper to %s (%d): %.64s", ReturnName(userid, 0), userid, text);
	    SendClientMessageEx(playerid, COLOR_YELLOW, "...%s **", text[64]);
	}
	else {
	    SendClientMessageEx(userid, COLOR_YELLOW, "** Whisper from %s (%d): %s **", ReturnName(playerid, 0), playerid, text);
	    SendClientMessageEx(playerid, COLOR_YELLOW, "** Whisper to %s (%d): %s **", ReturnName(userid, 0), userid, text);
	}
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s mutters something in %s's ear.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:mask(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "Mask"))
		return SendErrorMessage(playerid, "You don't have a mask.");

	switch (PlayerData[playerid][pMaskOn])
	{
		case 0:
		{
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a mask and puts it on.", ReturnName(playerid, 0));
		    PlayerData[playerid][pMaskOn] = 1;
			foreach (new i : Player)
			{
				ShowPlayerNameTagForPlayer(i, playerid, 0);
   }
		}
		case 1:
		{
		    PlayerData[playerid][pMaskOn] = 0;
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes their mask off and puts it away.", ReturnName(playerid, 0));
			foreach (new i : Player)
			{
				ShowPlayerNameTagForPlayer(i, playerid, 1);
			}
		}
	}
	return 1;
}

CMD:masked(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	static
	    name[24];

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

    foreach (new i : Player) if (PlayerData[i][pMaskOn]) {
        GetPlayerName(i, name, sizeof(name));

        SendClientMessageEx(playerid, COLOR_WHITE, "* %s (#%d)", name, PlayerData[i][pMaskID]);
	}
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:listguns(playerid, params[])
{
	new userid;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/listguns [playerid/name]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "The specified player is disconnected.");

	new
	    weaponid,
	    ammo;

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    SendClientMessageEx(playerid, COLOR_LIGHTRED, "%s's Weapons:", ReturnName(userid, 0));

	for (new i = 0; i < 13; i ++)
	{
		GetPlayerWeaponData(userid, i, weaponid, ammo);

		if (weaponid > 0)
		    SendClientMessageEx(playerid, COLOR_WHITE, "* %s (%d ammo)", ReturnWeaponName(weaponid), ammo);
	}
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:siren(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "You must be a civil service worker.");

	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "You must be inside a vehicle.");

	switch (CoreVehicles[vehicleid][vehSirenOn])
	{
	    case 0:
	    {
			static
        		Float:fSize[3],
        		Float:fSeat[3];

		    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, fSize[0], fSize[1], fSize[2]); // need height (z)
    		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, fSeat[0], fSeat[1], fSeat[2]); // need pos (x, y)

            CoreVehicles[vehicleid][vehSirenOn] = 1;
			CoreVehicles[vehicleid][vehSirenObject] = CreateDynamicObject(18646, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);

		    AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehSirenObject], vehicleid, -fSeat[0], fSeat[1], fSize[2] / 2.0, 0.0, 0.0, 0.0);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s turns on the vehicle's siren.", ReturnName(playerid, 0));
		}
		case 1:
		{
		    CoreVehicles[vehicleid][vehSirenOn] = 0;

			DestroyDynamicObject(CoreVehicles[vehicleid][vehSirenObject]);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s turns off the vehicle's siren.", ReturnName(playerid, 0));
		}
	}
	return 1;
}

CMD:siren2(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "You must be a civil service worker.");

	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "You must be inside a vehicle.");

	switch (CoreVehicles[vehicleid][vehSirenOn])
	{
	    case 0:
	    {
			if(GetVehicleModel(vehicleid) == 596 || GetVehicleModel(vehicleid) == 597 || GetVehicleModel(vehicleid) == 598)
			{
				CoreVehicles[vehicleid][vehSirenOn] = 1;
				CoreVehicles[vehicleid][vehSirenObject] = CreateDynamicObject(19620, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);

				AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehSirenObject], vehicleid, 0.0011, -1.6380, 0.4122, 0.0, 0.0, 0.0);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s attaches a siren to the vehicle.", ReturnName(playerid, 0));
				return 1;
			}
			static
        		Float:fSize[3],
        		Float:fSeat[3];

		    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, fSize[0], fSize[1], fSize[2]); // need height (z)
    		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, fSeat[0], fSeat[1], fSeat[2]); // need pos (x, y)

            CoreVehicles[vehicleid][vehSirenOn] = 1;
			CoreVehicles[vehicleid][vehSirenObject] = CreateDynamicObject(19620, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);

		    AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehSirenObject], vehicleid, 0.0, fSeat[1], fSize[2] / 1.85, 0.0, 0.0, 0.0);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s attaches a siren to the vehicle.", ReturnName(playerid, 0));
		}
		case 1:
		{
		    CoreVehicles[vehicleid][vehSirenOn] = 0;

			DestroyDynamicObject(CoreVehicles[vehicleid][vehSirenObject]);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s detaches the siren from the vehicle.", ReturnName(playerid, 0));
		}
	}
	return 1;
}

CMD:blindfold(playerid, params[])
{
	if(option == 0)
	{
        SetPlayerDrunkLevel (playerid, 5000);
        TextDrawShowForPlayer(playerid, BlackBox);
		TogglePlayerControllable(playerid, 0);
	    //SetPlayerCameraPos(playerid, -833.5241, -1358.8575, 86.9054);
		//SetPlayerCameraLookAt(playerid, -833.5241, -1358.8575, 0.0000);
		TextDrawHideForPlayer(playerid, gServerTextdraws[1]);
		TextDrawHideForPlayer(playerid, gServerTextdraws[0]);
 		ShowHungerTextdraw(playerid, 0);
	    option = 1;
	}
	else if(option == 1)
	{
		SetPlayerDrunkLevel (playerid, 0);
        TextDrawHideForPlayer(playerid, BlackBox);
	    TogglePlayerControllable(playerid, 1);
	    //SetCameraBehindPlayer(playerid);
	    TextDrawShowForPlayer(playerid, gServerTextdraws[1]);
	    TextDrawShowForPlayer(playerid, gServerTextdraws[0]);
		ShowHungerTextdraw(playerid, 1);
	    option = 0;
	}
	return 1;
}

CMD:traffic(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_SECURITY)
	    return SendErrorMessage(playerid, "You must be a civil service worker.");

	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "You must be inside a vehicle.");

	switch (CoreVehicles[vehicleid][vehSirenOn])
	{
	    case 0:
	    {
			static
        		Float:fSize[3],
        		Float:fSeat[3];

		    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, fSize[0], fSize[1], fSize[2]); // need height (z)
    		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, fSeat[0], fSeat[1], fSeat[2]); // need pos (x, y)

            CoreVehicles[vehicleid][vehSirenOn] = 1;
			CoreVehicles[vehicleid][vehSirenObject] = CreateDynamicObject(19294, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);

		    AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehSirenObject], vehicleid, -fSeat[0], fSeat[1], fSize[2] / 2.0, 0.0, 0.0, 0.0);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s attaches a portable traffic light to the vehicle.", ReturnName(playerid, 0));
		}
		case 1:
		{
		    CoreVehicles[vehicleid][vehSirenOn] = 0;

			DestroyDynamicObject(CoreVehicles[vehicleid][vehSirenObject]);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s detaches the portable traffic light from the vehicle.", ReturnName(playerid, 0));
		}
	}
	return 1;
}

CMD:setinventory(playerid, params[])
{
	static
	    userid,
		capacity;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ud", userid, capacity))
	    return SendSyntaxMessage(playerid, "/setinventory [playerid/name] [capacity]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "The specified player is disconnected.");

	if (capacity < 1 || capacity > 120)
	    return SendErrorMessage(playerid, "The specified capacity can't exceed 120 items.");

	PlayerData[userid][pCapacity] = 120;

	SendServerMessage(playerid, "You have set %s's inventory capacity to %d items.", ReturnName(userid, 0), capacity);
	SendServerMessage(userid, "%s has set your inventory capacity to %d items.", ReturnName(playerid, 0), capacity);
	return 1;
}

CMD:breakcuffs(playerid, params[])
{
	static
		userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/breakcuffs [playerid/name]");

	if (!Inventory_HasItem(playerid, "Crowbar"))
	    return SendErrorMessage(playerid, "You don't have a crowbar.");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "The specified player is disconnected or not near you.");

	if (!PlayerData[userid][pCuffed])
	    return SendErrorMessage(playerid, "The specified player is not cuffed.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "You can't pick your own handcuffs.");

	SetTimerEx("BreakCuffs", 3000, false, "dd", playerid, userid);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s attempts to pick the cuffs with a crowbar.", ReturnName(playerid, 0));
	return 1;
}

CMD:dice(playerid, params[])
{
	new
		number = random(6) + 1;

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s rolls a dice landing on the number %d.", ReturnName(playerid, 0), number);
	return 1;
}

CMD:shakehand(playerid, params[])
{
	static
	    userid,
	    type;

	if (sscanf(params, "ud", userid, type))
	    return SendSyntaxMessage(playerid, "/shakehand [playerid/name] [type]");

    if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "The specified player is disconnected or not near you.");

    if (userid == playerid)
		return SendErrorMessage(playerid, "You cannot shake your own hand.");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "You must specify a type from 1 to 6.");

	PlayerData[userid][pShakeOffer] = playerid;
	PlayerData[userid][pShakeType] = type;

	SendServerMessage(userid, "%s has offered to shake your hand (type \"/approve greet\").", ReturnName(playerid, 0));
	SendServerMessage(playerid, "You have offered to shake %s's hand.", ReturnName(userid, 0));
	return 1;
}

CMD:frisk(playerid, params[])
{
	static
	    userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/frisk [playerid/name]");

    if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "The specified player is disconnected or not near you.");

    if (userid == playerid)
		return SendErrorMessage(playerid, "You cannot frisk yourself.");

	PlayerData[userid][pFriskOffer] = playerid;
	PlayerData[playerid][pFrisking] = userid;

	SendServerMessage(userid, "%s has offered to frisk you (type \"/approve frisk\").", ReturnName(playerid, 0));
	SendServerMessage(playerid, "You have offered to frisk %s.", ReturnName(userid, 0));
	return 1;
}

forward StealRadio(playerid, vehid);
public StealRadio(playerid, vehid)
{
	TogglePlayerControllable(playerid, 1);

	if(GetPlayerVehicleID(playerid) != vehid)
		return SendErrorMessage(playerid, "You are no longer in the vehicle you were in.");

	new id = Car_GetID(vehid);

	if(id == -1)
		return SendErrorMessage(playerid, "This vehicle does not have a radio.");

	if(CarData[id][carRadio] == 0)
		return SendErrorMessage(playerid, "This vehicle's radio has already been stolen.");

	if(CarData[id][carOwner] == 0)
		return SendErrorMessage(playerid, "You cannot steal this vehicle's radio. (unowned vehicle)");

	CarData[id][carRadio] = 0;
	Inventory_Add(playerid, "Stolen Car Radio", 1624);

	new bubstring[128];
	format(bubstring, sizeof(bubstring), "* %s has stolen the vehicle's radio.", ReturnName(playerid, 2));
	SetPlayerChatBubble(playerid, bubstring, COLOR_PURPLE, 30.0, 10000);
	SendClientMessageEx(playerid, COLOR_PURPLE, "* %s has stolen the vehicle's radio.", ReturnName(playerid, 2));
	return 1;
}

CMD:stealradio(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(PlayerData[playerid][pStealRadioTimer] != 0)
		return SendErrorMessage(playerid, "You must wait before stealing another car radio.");

	if (!IsEngineVehicle(vehicleid))
	    return SendErrorMessage(playerid, "This vehicle doesn't have a radio.");

	if(GetPlayerVehicleSeat(playerid) != 0)
		return SendErrorMessage(playerid, "You must be sitting in the driver's seat to use this command.");

	if (!Inventory_HasItem(playerid, "Screwdriver"))
	    return SendErrorMessage(playerid, "You don't have any Screwdrivers on you.");

	new id = Car_GetID(vehicleid);

	if(id == -1)
		return SendErrorMessage(playerid, "This cannot steal this vehicle's radio. (unowned vehicle)");

	if(CarData[id][carRadio] == 0)
		return SendErrorMessage(playerid, "This vehicle's radio has already been stolen.");

	if(CarData[id][carOwner] == 0)
		return SendErrorMessage(playerid, "You cannot steal this vehicle's radio. (unowned vehicle)");

	if(Inventory_HasItem(playerid, "Stolen Car Radio"))
		return SendErrorMessage(playerid, "You can only carry one stolen radio at a time. Sell it at a Pawn shop.");

	SetTimerEx("StealRadio", 10000, false, "ii", playerid, vehicleid);
	new bubstring[128];
	format(bubstring, sizeof(bubstring), "* %s is stealing the vehicle's radio.", ReturnName(playerid, 2));
	SetPlayerChatBubble(playerid, bubstring, COLOR_PURPLE, 30.0, 10000);
	TogglePlayerControllable(playerid, 0);
	SendClientMessageEx(playerid, COLOR_PURPLE, "* %s is stealing the vehicle's radio.", ReturnName(playerid, 2));
	PlayerData[playerid][pStealRadioTimer] = 1200;

	return 1;
}

CMD:installvradio(playerid, params[])
{
	new
	    carid = GetPlayerVehicleID(playerid);

	if (!carid)
	    return SendErrorMessage(playerid, "You must be inside your vehicle.");

    if (IsVehicleImpounded(carid))
    	return SendErrorMessage(playerid, "This vehicle is impounded and you can't use it.");

	if ((carid = Car_GetID(carid)) != -1 && Car_IsOwner(playerid, carid))
	{
	    if (CarData[carid][carRadio] != 0)
	        return SendErrorMessage(playerid, "Your vehicle already has a radio.");

		if (!strcmp(params, "confirm", true))
		{
			if(PlayerData[playerid][pMoney] < 800) return SendErrorMessage(playerid, "You don't have enough money to do this.");
			GiveMoney(playerid, -800);
			SendServerMessage(playerid, "You paid $800 for a new vehicle radio.");
			CarData[carid][carRadio] = 1;

			PlayerPlaySound(playerid, 1054, 0, 0, 0);
		}
		else SendSyntaxMessage(playerid, "This will cost $800 to do. Type \"/installvradio confirm\"");

	}
	else SendErrorMessage(playerid, "You are not inside your vehicle.");
	return 1;
}

CMD:sellitems(playerid, params[])
{
	new id = -1;

	if ((id = Business_Inside(playerid)) != -1)
	{
		if (BusinessData[id][bizType] != 8)
		    return SendErrorMessage(playerid, "You must be at a pawn shop."); //Business_CarMenu(playerid, id);

		if (BusinessData[id][bizLocked] != 0 || !BusinessData[id][bizOwner])
		    return SendErrorMessage(playerid, "This business is closed!");

		if(Inventory_HasItem(playerid, "Stolen Car Radio"))
		{
			Inventory_Remove(playerid, "Stolen Car Radio");
			GiveMoney(playerid, 600);
			SendClientMessage(playerid, -1, "You have sold your stolen car radio for $600.");
		}
	}
	else SendErrorMessage(playerid, "You are not in a pawn shop.");
	return 1;
}

CMD:setradio(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsEngineVehicle(vehicleid))
	    return SendErrorMessage(playerid, "This vehicle doesn't have any radio.");

	new id = Car_GetID(vehicleid);
	if (id != -1 && CarData[id][carRadio] != 1)
		return SendErrorMessage(playerid, "This vehicle's radio has been stolen. You can install a new one with /installvradio");

	Dialog_Show(playerid, Radio, DIALOG_STYLE_LIST, "Radio Channels", "Cultural\nOldies\nOther\nPop\nRhythm & Blues\nRock\nTalk\nUrban\nElectric\nCustom URL\nTurn Radio Off", "Select", "Cancel");
	return 1;
}

CMD:creategraffiti(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z,
		Float:angle;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
 		return SendErrorMessage(playerid, "You can only create graffiti points outside interiors.");

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Graffiti_Create(x, y, z, angle);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for graffiti points.");

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);

	PlayerData[playerid][pEditGraffiti] = id;
	SendServerMessage(playerid, "You have successfully created graffiti ID: %d.", id);
	return 1;
}

CMD:destroygraffiti(playerid, params[])
{
	static
	    id = 0;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroygraffiti [graffiti id]");

	if ((id < 0 || id >= MAX_GRAFFITI_POINTS) || !GraffitiData[id][graffitiExists])
	    return SendErrorMessage(playerid, "You have specified an invalid graffiti ID.");

	Graffiti_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed graffiti ID: %d.", id);
	return 1;
}

CMD:editgraffiti(playerid, params[])
{
	static
	    id = 0;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/editgraffiti [graffiti id]");

	if ((id < 0 || id >= MAX_GRAFFITI_POINTS) || !GraffitiData[id][graffitiExists])
	    return SendErrorMessage(playerid, "You have specified an invalid graffiti ID.");

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);

	PlayerData[playerid][pEditGraffiti] = id;
	SendServerMessage(playerid, "You are now editing Graffiti ID: %d.", id);
	return 1;
}

CMD:editatm(playerid, params[])
{
	static
	    id = 0;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/editatm [atm id]");

	if ((id < 0 || id >= MAX_ATM_MACHINES) || !ATMData[id][atmExists])
	    return SendErrorMessage(playerid, "You have specified an invalid atm machine ID.");

	EditDynamicObject(playerid, ATMData[id][atmObject]);

	PlayerData[playerid][pEditATM] = id;
	SendServerMessage(playerid, "You are now editing ATM Machine ID: %d.", id);
	return 1;
}

CMD:graffiti(playerid, params[])
{
	new id = Graffiti_Nearest(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "You are not near any graffiti point.");

	if (GetFactionType(playerid) != FACTION_GANG_DRUGS && GetFactionType(playerid) != FACTION_GANG_GUNS)
	    return SendErrorMessage(playerid, "You are not a member of an illegal faction.");

	Dialog_Show(playerid, GraffitiColor, DIALOG_STYLE_LIST, "Select Color", "{FFFFFF}White\n{FF0000}Red\n{FFFF00}Yellow\n{33CC33}Green\n{33CCFF}Light Blue\n{FFA500}Orange\n{1394BF}Dark Blue", "Select", "Cancel");
	return 1;
}

CMD:placefire(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_MEDIC && PlayerData[playerid][pAdmin] < 3)
		return SendErrorMessage(playerid, "You must be an admin or the Fire Department leader to use this command.");

	if (PlayerData[playerid][pAdmin] < 3 && PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3)
	    return SendErrorMessage(playerid, "You must be at least rank %d to use this command.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3);

	PlaceFire(playerid);
	SendServerMessage(playerid, "You have placed a fire. /killfire to destroy ALL fire objects.");

	return 1;
}

CMD:randomfire(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	RandomFire();

	GetDynamicObjectPos(g_aFireObjects[0], fX, fY, fZ);
	SendServerMessage(playerid, "You have created a random fire (%s).", GetLocation(fX, fY, fZ));
	return 1;
}

CMD:killfire(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	{
	    g_aFireExtinguished[i] = 0;

	    if (IsValidDynamicObject(g_aFireObjects[i]))
	        DestroyDynamicObject(g_aFireObjects[i]);
	}
	SendServerMessage(playerid, "You have killed the fire.");
	return 1;
}

CMD:ahide(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	switch (PlayerData[playerid][pAdminHide])
	{
	    case 0:
	    {
	        PlayerData[playerid][pAdminHide] = 1;
	        SendServerMessage(playerid, "You are now hidden from the admin list.");
		}
		case 1:
	    {
	        PlayerData[playerid][pAdminHide] = 0;
	        SendServerMessage(playerid, "You are now visible in the admin list.");
		}
	}
	return 1;
}

CMD:createdetector(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	static
	    query[255];

	for (new i = 0; i < MAX_METAL_DETECTORS; i ++) if (!MetalDetectors[i][detectorExists])
	{
	    MetalDetectors[i][detectorExists] = 1;
	    MetalDetectors[i][detectorInterior] = GetPlayerInterior(playerid);
	    MetalDetectors[i][detectorWorld] = GetPlayerVirtualWorld(playerid);

	    GetPlayerPos(playerid, MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2]);
	    GetPlayerFacingAngle(playerid, MetalDetectors[i][detectorPos][3]);

		format(query, sizeof(query), "INSERT INTO `detectors` (`detectorX`, `detectorY`, `detectorZ`, `detectorAngle`, `detectorInterior`, `detectorWorld`) VALUES('%.4f', '%.4f', '%.4f', '%.4f', '%d', '%d')", MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2], MetalDetectors[i][detectorPos][3], MetalDetectors[i][detectorInterior], MetalDetectors[i][detectorWorld]);
		mysql_tquery(g_iHandle, query, "OnDetectorCreated", "d", i);

	    Detector_Refresh(i);
	    SendServerMessage(playerid, "You have created metal detector ID: %d.", i);
	    return 1;
	}
	SendErrorMessage(playerid, "The server has reached a limit for metal detectors.");
	return 1;
}

CMD:destroydetector(playerid, params[])
{
	static
	    id = 0;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroydetector [detector id]");

	if ((id < 0 || id >= MAX_METAL_DETECTORS) || !MetalDetectors[id][detectorExists])
	    return SendErrorMessage(playerid, "You have specified an invalid detector ID.");

	Detector_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed detector ID: %d.", id);
	return 1;
}

CMD:picklock(playerid, params[])
{
	SendClientMessage(playerid, -1, "This command has been removed due to abuse.");
	return 1;
}

/*CMD:picklock(playerid, params[])
{
	new id = Car_Nearest(playerid);

	if (!Inventory_HasItem(playerid, "Crowbar"))
	    return SendErrorMessage(playerid, "You don't have a crowbar.");

	if (id == -1)
	    return SendErrorMessage(playerid, "You are not in range of any vehicle.");

	if (!CarData[id][carLocked])
	    return SendErrorMessage(playerid, "This vehicle is not locked.");

	PlayerData[playerid][pPicking] = 1;
	PlayerData[playerid][pPickCar] = id;

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a crowbar and picks the lock.", ReturnName(playerid, 0));
	SendServerMessage(playerid, "Please wait 60 seconds while the lock is picked.");
	return 1;
}*/

CMD:destroyplant(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyplant [plant id]");

	if ((id < 0 || id >= MAX_DRUG_PLANTS) || !PlantData[id][plantExists])
	    return SendErrorMessage(playerid, "You have specified an invalid plant ID.");

	Plant_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed plant ID: %d.", id);
	return 1;
}

CMD:givecar(playerid, params[])
{
	static
		userid,
	    model[32];

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "us[32]", userid, model))
	    return SendSyntaxMessage(playerid, "/givecar [playerid/name] [modelid/name]");

	if (Car_GetCount(userid) >= MAX_OWNABLE_CARS)
	    return SendErrorMessage(playerid, "This player already owns the maximum amount of cars.");

    if ((model[0] = GetVehicleModelByName(model)) == 0)
	    return SendErrorMessage(playerid, "Invalid model ID.");

	static
	    Float:x,
		Float:y,
		Float:z,
		Float:angle,
		id = -1;

    GetPlayerPos(userid, x, y, z);
	GetPlayerFacingAngle(userid, angle);

	id = Car_Create(PlayerData[userid][pID], model[0], x, y + 2, z + 1, angle, random(127), random(127), 0);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for dynamic vehicles.");

	SendServerMessage(playerid, "You have created vehicle ID: %d for %s.", CarData[id][carVehicle], ReturnName(userid, 0));
	return 1;
}

CMD:resetvw(playerid, params[])
{
	if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) > 0)
	{
	    SetPlayerVirtualWorld(playerid, 0);
	    SendServerMessage(playerid, "You have fixed your virtual world.");
	}
	else SendErrorMessage(playerid, "Your virtual world is not bugged right now.");
	return 1;
}

CMD:stopanim(playerid, params[])
{
	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "You don't need to use this command right now.");

	if(PlayerData[playerid][pInjured] == 1)
		return SendErrorMessage(playerid, "You can't use this command while injured.");

	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0);
    HidePlayerFooter(playerid);
	if(PlayerData[playerid][pCuffed]) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);

	PlayerData[playerid][pLoopAnim] = 0;
	return 1;
}

CMD:editbillboard(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editbillboard [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} location, name, price, message, owner, range, removeowner");
		return 1;
	}
	if ((id < 0 || id >= MAX_BILLBOARDS) || !BillBoardData[id][bbExists])
	    return SendErrorMessage(playerid, "You have specified an invalid business ID.");

	if (!strcmp(type, "location", true))
	{
 		GetPlayerPos(playerid, BillBoardData[id][bbPos][0], BillBoardData[id][bbPos][1], BillBoardData[id][bbPos][2]);

		Billboard_Refresh(id);
		Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the location of billboard ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "price", true))
	{
	    new price;

	    if (sscanf(string, "d", price))
	        return SendSyntaxMessage(playerid, "/editbillboard [id] [price] [new price]");

	    BillBoardData[id][bbPrice] = price;

	    Billboard_Refresh(id);
	    Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the price of billboard ID: %d to %s.", ReturnName(playerid, 0), id, FormatNumber(price));
	}
	else if (!strcmp(type, "name", true))
	{
	    new name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/editbillboard [id] [name] [new name]");

	    format(BillBoardData[id][bbName], 32, name);

	    Billboard_Refresh(id);
	    Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the name of billboard ID: %d to \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "message", true))
	{
	    new message[230];

	    if (sscanf(string, "s[230]", message))
	        return SendSyntaxMessage(playerid, "/editbillboard [id] [message] [new message] (Max Chars: 230)");

	    format(BillBoardData[id][bbMessage], sizeof(message), message);

	    Billboard_Refresh(id);
	    Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the message of billboard ID: %d to:", ReturnName(playerid, 0), id);
		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}\"%s\"", message);
	}
	else if (!strcmp(type, "owner", true))
	{
	    new giveplayerid;

	    if (sscanf(string, "d", giveplayerid))
	        return SendSyntaxMessage(playerid, "/editbillboard [id] [(remove)owner] [playerid]");

        if (giveplayerid == INVALID_PLAYER_ID)
	    	return SendErrorMessage(playerid, "That player is disconnected.");
		BillBoardData[id][bbOwner] = GetPlayerSQLID(giveplayerid);

	    Billboard_Refresh(id);
	    Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the owner of billboard ID: %d", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "removeowner", true))
	{
	    if (sscanf(string, "d"))
	        return SendSyntaxMessage(playerid, "/editbillboard [id] [removeowner]");

		BillBoardData[id][bbOwner] = 0;

	    Billboard_Refresh(id);
	    Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has removed the owner of billboard ID: %d", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "range", true))
	{
	    new range;

	    if (sscanf(string, "d", range))
	        return SendSyntaxMessage(playerid, "/editbillboard [id] [range] [new range]");

        if(range < 10)
		{
		    SendErrorMessage(playerid, "Range can only be 10-200");
		    return 1;
		}

		if(range > 200)
		{
		    SendErrorMessage(playerid, "Range can only be 10-200");
		    return 1;
		}

	    BillBoardData[id][bbRange] = range;

	    Billboard_Refresh(id);
	    Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[Admin]: {FFFFFF}%s has adjusted the range of billboard ID: %d to %d.", ReturnName(playerid, 0), id, range);
	}
	return 1;
}

CMD:destroybillboard(playerid, params[])
{
	static
	    id = 0;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroybillboard [bb id]");

	if ((id < 0 || id >= MAX_BILLBOARDS) || !BillBoardData[id][bbExists])
	    return SendErrorMessage(playerid, "You have specified an invalid billboard ID.");

	Billboard_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed billboard ID: %d.", id);
	return 1;
}

CMD:call(playerid, params[])
{
    if (!Inventory_HasItem(playerid, "Cellphone"))
	    return SendErrorMessage(playerid, "You don't have a cellphone on you.");

	if(PlayerData[playerid][pPhone] == 0)
		return SendErrorMessage(playerid, "Your cellphone is not in service.");

    if (PlayerData[playerid][pPhoneOff])
		return SendErrorMessage(playerid, "Your phone must be powered on.");

    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "You can't use this command now.");

	static
	    targetid,
		number;

	if (sscanf(params, "d", number))
 	   return SendSyntaxMessage(playerid, "/call [phone number] 1222-Taxi, 911-Police/FD, 222-News Corp, 223-Billboards Agency, 115-Mechanic, 34245-Government (BCG)");

	if (!number)
	    return SendErrorMessage(playerid, "The specified phone number is not in service.");

	SetPlayerAttachedObject(playerid, 4, 330 , 6);//gives the phone in the hand
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);//does the animation

	if (number == 911)
	{
		PlayerData[playerid][pEmergency] = 1;
		PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out their cellphone and places a call.", ReturnName(playerid, 0));
		SendClientMessage(playerid, COLOR_CYAN, "[Phone]: {FFFFFF}Mechanic Dispatch: 911, This is Monica speaking. Which service are you in need of? \"Police\", \"FD\" or \"Both\"?");
	}
	else if (number == 1222)
	{
	    PlayerData[playerid][pTaxiCalled] = 1;
	    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out their cellphone and places a call.", ReturnName(playerid, 0));
		SendClientMessage(playerid, COLOR_CYAN, "[Phone]: {FFFFFF}Mechanic Dispatch: The taxi department has been notified of your call.");

        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has hung up their cellphone.", ReturnName(playerid, 0));
		SendJobMessage(3, COLOR_YELLOW, "* %s is requesting a taxi at %s (use /acceptcall to accept).", ReturnName(playerid, 0), GetPlayerLocation(playerid));
	}
	else if (number == 115)
	{
	    PlayerData[playerid][pMechanicCalled] = 1;
	    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out their cellphone and places a call.", ReturnName(playerid, 0));
		SendClientMessage(playerid, COLOR_CYAN, "[Phone]: {FFFFFF}Mechanic Dispatch: The Mechanic department has been notified of your call.");

        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has hung up their cellphone.", ReturnName(playerid, 0));
		SendJobMessage(2, COLOR_YELLOW, "* %s is requesting a mechanic at %s (use /acceptmechanic to accept).", ReturnName(playerid, 0), GetPlayerLocation(playerid));
	}
	else if (number == 222)
	{
	    PlayerData[playerid][pPlaceAd] = 1;
	    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out their cellphone and places a call.", ReturnName(playerid, 0));

		if (PlayerData[playerid][pPlayingHours] < 4) {
            SendClientMessage(playerid, COLOR_CYAN, "[Phone]: {FFFFFF}Advertisement Agency: Sorry, you must play 4 hours to place an advertisement.");
		    cmd_hangup(playerid, "\1");
		}
		else if (PlayerData[playerid][pAdTime] < 1) {
			SendClientMessage(playerid, COLOR_CYAN, "[Phone]: {FFFFFF}Advertisement Agency: Please say \"yes\" if you wish to advertise for $500.");
		}
		else {
		    SendClientMessage(playerid, COLOR_CYAN, "[Phone]: {FFFFFF}Advertisement Agency: You've already advertised in the last 2 minutes. Please try again later.");
		    cmd_hangup(playerid, "\1");
		}
	}
	else if (number == 223)
	{
	    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out their cellphone and places a call.", ReturnName(playerid, 0));

		if (PlayerData[playerid][pPlayingHours] < 4) {
            SendClientMessage(playerid, COLOR_CYAN, "[Phone]{FFFFFF}Billboard Agency: Sorry, you must play 4 hours to rent a billboard.");
		    cmd_hangup(playerid, "\1");
		}
		SendClientMessageEx(playerid, COLOR_CYAN, "[Phone]{FFFFFF}Billboard Agency: Hello, this is the Los Santos Billboard Agency, please listen to the following choices!");
		ViewBillboards(playerid);
	}
	else if ((targetid = GetNumberOwner(number)) != INVALID_PLAYER_ID)
	{
	    if (targetid == playerid)
	        return SendErrorMessage(playerid, "You can't call yourself!");

		if (PlayerData[targetid][pPhoneOff])
		    return SendErrorMessage(playerid, "The recipient has their cellphone powered off.");

		if(PlayerData[targetid][pIncomingCall] == 1 || PlayerData[targetid][pCallLine] != INVALID_PLAYER_ID)
			return SendErrorMessage(playerid, "You recieve a busy tone.");

		PlayerData[targetid][pIncomingCall] = 1;
		PlayerData[playerid][pIncomingCall] = 1;

		PlayerData[targetid][pCallLine] = playerid;
		PlayerData[playerid][pCallLine] = targetid;

		SendClientMessageEx(playerid, COLOR_CYAN, "[Phone]:{FFFFFF} Attempting to dial #%d, please wait for an answer...", number);
		SendClientMessageEx(targetid, COLOR_CYAN, "[Phone]:{FFFFFF} Incoming call from #%d (type \"/pickup\" to answer the phone).", PlayerData[playerid][pPhone]);

        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
        PlayerPlaySoundEx(targetid, 23000);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out their cellphone and places a call.", ReturnName(playerid, 0));
	}
	else if (number == 58696)
	{
	    if (GetFactionType(playerid) != FACTION_GANG_DRUGS && GetFactionType(playerid) != FACTION_GANG_GUNS)
	    	return SendErrorMessage(playerid, "[Phone]:{FFFFFF} This number is unavaliable right now, please try again later.");

	    if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	    	return SendErrorMessage(playerid, "[PHONE:]{FFFFFF} This number is unavaliable right now, please try again later.");

		if(GetFactionType(playerid) == FACTION_GANG_DRUGS)
		{
			PlayerData[playerid][pDealerCallDrugs] = 1;
			PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out their cellphone and places a call.", ReturnName(playerid, 0));
			SendClientMessage(playerid, COLOR_CYAN, "[Phone]: {FFFFFF}Local Dealer: Yo, what you need today? \"Drugs\" (10k)");
		}

		if(GetFactionType(playerid) == FACTION_GANG_GUNS)
		{
			PlayerData[playerid][pDealerCallGuns] = 1;
			PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out their cellphone and places a call.", ReturnName(playerid, 0));
			SendClientMessage(playerid, COLOR_CYAN, "[Phone]: {FFFFFF}Local Dealer: Yo, what you need today? \"Melee Parts\" (55k), \"Pistol Parts\" (30k), \"SMG Parts\" (100k)...");
			SendClientMessage(playerid, COLOR_CYAN, "[Phone]: {FFFFFF}Local Dealer: ...\"Shotgun Parts\" (18k), \"Rifle Parts\" (130k)");
		}

	}
	else if (number == 34245)
	{
		PlayerData[playerid][pLoanAsk] = 1;
		PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out their cellphone and places a call.", ReturnName(playerid, 0));
		SendClientMessage(playerid, COLOR_CYAN, "[Phone]: {FFFFFF}BCG Dispatch: Hello. What are you in need of? Say: \"Licensing\" or \"Help\"?");
	}
	else
	{
	    SendErrorMessage(playerid, "The specified phone number is not in service.");
	}
	return 1;
}

CMD:createbillboard(playerid, params[])
{
	static
	    id = -1;

	if(PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pPropertyMod])
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

	id = Billboard_Create(playerid, -1);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for billboards.");

	SendServerMessage(playerid, "You have successfully created billboard ID: %d.", id);
	return 1;
}

CMD:billboards(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	{
	    SendErrorMessage(playerid, "You are not authorized to use this command");
	    return 1;
	}
	ViewBillboards(playerid);
	return 1;
}

CMD:mybillboard(playerid, params[])
{
	if(PlayerData[playerid][pOwnsBillboard] == -1)
	{
	    SendErrorMessage(playerid, "You do not own a billboard");
	    return 1;
	}
    Dialog_Show(playerid, MyBillboardMenu, DIALOG_STYLE_LIST, "Manage Billboard", "Edit Message\nUnrent Billboard", "Proceed", "Cancel");
    return 1;
}
